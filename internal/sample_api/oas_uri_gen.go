// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func (v TestObjectQueryParameterDeepObject) encodeURI(e uri.Encoder) error {
	if err := e.EncodeField("min", func(e uri.Encoder) error {
		return e.EncodeValue(conv.IntToString(v.Min))
	}); err != nil {
		return errors.Wrap(err, "decode field \"min\"")
	}
	if err := e.EncodeField("max", func(e uri.Encoder) error {
		return e.EncodeValue(conv.IntToString(v.Max))
	}); err != nil {
		return errors.Wrap(err, "decode field \"max\"")
	}
	if err := e.EncodeField("filter", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(v.Filter))
	}); err != nil {
		return errors.Wrap(err, "decode field \"filter\"")
	}
	return nil
}

func (v *TestObjectQueryParameterDeepObject) decodeURI(d uri.Decoder) error {
	if v == nil {
		return errors.New("invalid: unable to decode TestObjectQueryParameterDeepObject to nil")
	}
	return d.DecodeFields(func(name string, d uri.Decoder) error {
		switch name {
		case "min":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToInt(s)
			if err != nil {
				return err
			}

			v.Min = c
			return nil
		case "max":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToInt(s)
			if err != nil {
				return err
			}

			v.Max = c
			return nil
		case "filter":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(s)
			if err != nil {
				return err
			}

			v.Filter = c
			return nil
		default:
			return errors.Errorf(`unexpected field %q`, name)
		}
	})
}

func (v TestObjectQueryParameterFormObject) encodeURI(e uri.Encoder) error {
	if err := e.EncodeField("min", func(e uri.Encoder) error {
		return e.EncodeValue(conv.IntToString(v.Min))
	}); err != nil {
		return errors.Wrap(err, "decode field \"min\"")
	}
	if err := e.EncodeField("max", func(e uri.Encoder) error {
		return e.EncodeValue(conv.IntToString(v.Max))
	}); err != nil {
		return errors.Wrap(err, "decode field \"max\"")
	}
	if err := e.EncodeField("filter", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(v.Filter))
	}); err != nil {
		return errors.Wrap(err, "decode field \"filter\"")
	}
	return nil
}

func (v *TestObjectQueryParameterFormObject) decodeURI(d uri.Decoder) error {
	if v == nil {
		return errors.New("invalid: unable to decode TestObjectQueryParameterFormObject to nil")
	}
	return d.DecodeFields(func(name string, d uri.Decoder) error {
		switch name {
		case "min":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToInt(s)
			if err != nil {
				return err
			}

			v.Min = c
			return nil
		case "max":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToInt(s)
			if err != nil {
				return err
			}

			v.Max = c
			return nil
		case "filter":
			s, err := d.DecodeValue()
			if err != nil {
				return err
			}

			c, err := conv.ToString(s)
			if err != nil {
				return err
			}

			v.Filter = c
			return nil
		default:
			return errors.Errorf(`unexpected field %q`, name)
		}
	})
}
