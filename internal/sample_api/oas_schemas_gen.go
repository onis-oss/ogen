// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type APIKey struct {
	APIKey string
}

// Type for testing some anyOf cases from Jaeger operator API schema.
// Ref: #/components/schemas/AnyOfTest
type AnyOfTest struct {
	Medium    string             "json:\"medium\""
	SizeLimit AnyOfTestSizeLimit "json:\"sizeLimit\""
}

// AnyOfTestSizeLimit represents sum type.
type AnyOfTestSizeLimit struct {
	Type   AnyOfTestSizeLimitType // switch on this field
	Int    int
	String string
}

// AnyOfTestSizeLimitType is oneOf type of AnyOfTestSizeLimit.
type AnyOfTestSizeLimitType string

// Possible values for AnyOfTestSizeLimitType.
const (
	IntAnyOfTestSizeLimit    AnyOfTestSizeLimitType = "int"
	StringAnyOfTestSizeLimit AnyOfTestSizeLimitType = "string"
)

// IsInt reports whether AnyOfTestSizeLimit is int.
func (s AnyOfTestSizeLimit) IsInt() bool { return s.Type == IntAnyOfTestSizeLimit }

// IsString reports whether AnyOfTestSizeLimit is string.
func (s AnyOfTestSizeLimit) IsString() bool { return s.Type == StringAnyOfTestSizeLimit }

// SetInt sets AnyOfTestSizeLimit to int.
func (s *AnyOfTestSizeLimit) SetInt(v int) {
	s.Type = IntAnyOfTestSizeLimit
	s.Int = v
}

// GetInt returns int and true boolean if AnyOfTestSizeLimit is int.
func (s AnyOfTestSizeLimit) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntAnyOfTestSizeLimit returns new AnyOfTestSizeLimit from int.
func NewIntAnyOfTestSizeLimit(v int) AnyOfTestSizeLimit {
	var s AnyOfTestSizeLimit
	s.SetInt(v)
	return s
}

// SetString sets AnyOfTestSizeLimit to string.
func (s *AnyOfTestSizeLimit) SetString(v string) {
	s.Type = StringAnyOfTestSizeLimit
	s.String = v
}

// GetString returns string and true boolean if AnyOfTestSizeLimit is string.
func (s AnyOfTestSizeLimit) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAnyOfTestSizeLimit returns new AnyOfTestSizeLimit from string.
func NewStringAnyOfTestSizeLimit(v string) AnyOfTestSizeLimit {
	var s AnyOfTestSizeLimit
	s.SetString(v)
	return s
}

// Ref: #/components/schemas/AnyTest
type AnyTest struct {
	Empty    jx.Raw           "json:\"empty\""
	AnyMap   OptAnyTestAnyMap "json:\"any_map\""
	AnyArray []jx.Raw         "json:\"any_array\""
}

type AnyTestAnyMap map[string]jx.Raw

func (s *AnyTestAnyMap) init() AnyTestAnyMap {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Test array encoder/decoder generation.
// Ref: #/components/schemas/ArrayTest
type ArrayTest struct {
	Required         []string          "json:\"required\""
	Optional         []string          "json:\"optional\""
	NullableRequired []string          "json:\"nullable_required\""
	NullableOptional OptNilStringArray "json:\"nullable_optional\""
}

// Ref: #/components/schemas/Data
type Data struct {
	ID           ID               "json:\"id\""
	Description  DataDescription  "json:\"description\""
	Email        string           "json:\"email\""
	Hostname     string           "json:\"hostname\""
	Format       string           "json:\"format\""
	Base64       []byte           "json:\"base64\""
	NullableEnum OptNullableEnums "json:\"nullable_enum\""
}

// DataDescription represents sum type.
type DataDescription struct {
	Type                DataDescriptionType // switch on this field
	DescriptionDetailed DescriptionDetailed
	DescriptionSimple   DescriptionSimple
}

// DataDescriptionType is oneOf type of DataDescription.
type DataDescriptionType string

// Possible values for DataDescriptionType.
const (
	DescriptionDetailedDataDescription DataDescriptionType = "DescriptionDetailed"
	DescriptionSimpleDataDescription   DataDescriptionType = "DescriptionSimple"
)

// IsDescriptionDetailed reports whether DataDescription is DescriptionDetailed.
func (s DataDescription) IsDescriptionDetailed() bool {
	return s.Type == DescriptionDetailedDataDescription
}

// IsDescriptionSimple reports whether DataDescription is DescriptionSimple.
func (s DataDescription) IsDescriptionSimple() bool {
	return s.Type == DescriptionSimpleDataDescription
}

// SetDescriptionDetailed sets DataDescription to DescriptionDetailed.
func (s *DataDescription) SetDescriptionDetailed(v DescriptionDetailed) {
	s.Type = DescriptionDetailedDataDescription
	s.DescriptionDetailed = v
}

// GetDescriptionDetailed returns DescriptionDetailed and true boolean if DataDescription is DescriptionDetailed.
func (s DataDescription) GetDescriptionDetailed() (v DescriptionDetailed, ok bool) {
	if !s.IsDescriptionDetailed() {
		return v, false
	}
	return s.DescriptionDetailed, true
}

// NewDescriptionDetailedDataDescription returns new DataDescription from DescriptionDetailed.
func NewDescriptionDetailedDataDescription(v DescriptionDetailed) DataDescription {
	var s DataDescription
	s.SetDescriptionDetailed(v)
	return s
}

// SetDescriptionSimple sets DataDescription to DescriptionSimple.
func (s *DataDescription) SetDescriptionSimple(v DescriptionSimple) {
	s.Type = DescriptionSimpleDataDescription
	s.DescriptionSimple = v
}

// GetDescriptionSimple returns DescriptionSimple and true boolean if DataDescription is DescriptionSimple.
func (s DataDescription) GetDescriptionSimple() (v DescriptionSimple, ok bool) {
	if !s.IsDescriptionSimple() {
		return v, false
	}
	return s.DescriptionSimple, true
}

// NewDescriptionSimpleDataDescription returns new DataDescription from DescriptionSimple.
func NewDescriptionSimpleDataDescription(v DescriptionSimple) DataDescription {
	var s DataDescription
	s.SetDescriptionSimple(v)
	return s
}

// Ref: #/components/schemas/DefaultTest
type DefaultTest struct {
	Required string             "json:\"required\""
	Str      OptString          "json:\"str\""
	NullStr  OptNilString       "json:\"nullStr\""
	Enum     OptDefaultTestEnum "json:\"enum\""
	UUID     OptUUID            "json:\"uuid\""
	IP       OptIP              "json:\"ip\""
	IPV4     OptIPv4            "json:\"ip_v4\""
	IPV6     OptIPv6            "json:\"ip_v6\""
	URI      OptURI             "json:\"uri\""
	Birthday OptDate            "json:\"birthday\""
	Rate     OptDuration        "json:\"rate\""
	Email    OptString          "json:\"email\""
	Hostname OptString          "json:\"hostname\""
	Format   OptString          "json:\"format\""
	Base64   []byte             "json:\"base64\""
}

type DefaultTestEnum string

const (
	DefaultTestEnumBig  DefaultTestEnum = "big"
	DefaultTestEnumSmol DefaultTestEnum = "smol"
)

// Ref: #/components/schemas/DescriptionDetailed
type DescriptionDetailed struct {
	Name  string "json:\"name\""
	Count int    "json:\"count\""
	ID    OptID  "json:\"id\""
}

// Ref: #/components/schemas/DescriptionSimple
type DescriptionSimple struct {
	Description string "json:\"description\""
}

type Error struct {
	Code    int64  "json:\"code\""
	Message string "json:\"message\""
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

func (*ErrorStatusCode) foobarPostRes()          {}
func (*ErrorStatusCode) petGetAvatarByIDRes()    {}
func (*ErrorStatusCode) petGetAvatarByNameRes()  {}
func (*ErrorStatusCode) petUploadAvatarByIDRes() {}

// FoobarPutDef is default response for FoobarPut operation.
type FoobarPutDef struct{}

// FoobarPutDefStatusCode wraps FoobarPutDef with StatusCode.
type FoobarPutDefStatusCode struct {
	StatusCode int
	Response   FoobarPutDef
}

// Ref: #/components/schemas/Hash
type Hash struct {
	Raw []byte "json:\"raw\""
	Hex string "json:\"hex\""
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int    int
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	IntID    IDType = "int"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt reports whether ID is int.
func (s ID) IsInt() bool { return s.Type == IntID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt sets ID to int.
func (s *ID) SetInt(v int) {
	s.Type = IntID
	s.Int = v
}

// GetInt returns int and true boolean if ID is int.
func (s ID) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntID returns new ID from int.
func NewIntID(v int) ID {
	var s ID
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/Issue143
// Issue143 represents sum type.
type Issue143 struct {
	Type      Issue143Type // switch on this field
	Issue1430 Issue1430
	Issue1431 Issue1431
	Issue1432 Issue1432
	Issue1433 Issue1433
}

// Issue143Type is oneOf type of Issue143.
type Issue143Type string

// Possible values for Issue143Type.
const (
	Issue1430Issue143 Issue143Type = "Issue1430"
	Issue1431Issue143 Issue143Type = "Issue1431"
	Issue1432Issue143 Issue143Type = "Issue1432"
	Issue1433Issue143 Issue143Type = "Issue1433"
)

// IsIssue1430 reports whether Issue143 is Issue1430.
func (s Issue143) IsIssue1430() bool { return s.Type == Issue1430Issue143 }

// IsIssue1431 reports whether Issue143 is Issue1431.
func (s Issue143) IsIssue1431() bool { return s.Type == Issue1431Issue143 }

// IsIssue1432 reports whether Issue143 is Issue1432.
func (s Issue143) IsIssue1432() bool { return s.Type == Issue1432Issue143 }

// IsIssue1433 reports whether Issue143 is Issue1433.
func (s Issue143) IsIssue1433() bool { return s.Type == Issue1433Issue143 }

// SetIssue1430 sets Issue143 to Issue1430.
func (s *Issue143) SetIssue1430(v Issue1430) {
	s.Type = Issue1430Issue143
	s.Issue1430 = v
}

// GetIssue1430 returns Issue1430 and true boolean if Issue143 is Issue1430.
func (s Issue143) GetIssue1430() (v Issue1430, ok bool) {
	if !s.IsIssue1430() {
		return v, false
	}
	return s.Issue1430, true
}

// NewIssue1430Issue143 returns new Issue143 from Issue1430.
func NewIssue1430Issue143(v Issue1430) Issue143 {
	var s Issue143
	s.SetIssue1430(v)
	return s
}

// SetIssue1431 sets Issue143 to Issue1431.
func (s *Issue143) SetIssue1431(v Issue1431) {
	s.Type = Issue1431Issue143
	s.Issue1431 = v
}

// GetIssue1431 returns Issue1431 and true boolean if Issue143 is Issue1431.
func (s Issue143) GetIssue1431() (v Issue1431, ok bool) {
	if !s.IsIssue1431() {
		return v, false
	}
	return s.Issue1431, true
}

// NewIssue1431Issue143 returns new Issue143 from Issue1431.
func NewIssue1431Issue143(v Issue1431) Issue143 {
	var s Issue143
	s.SetIssue1431(v)
	return s
}

// SetIssue1432 sets Issue143 to Issue1432.
func (s *Issue143) SetIssue1432(v Issue1432) {
	s.Type = Issue1432Issue143
	s.Issue1432 = v
}

// GetIssue1432 returns Issue1432 and true boolean if Issue143 is Issue1432.
func (s Issue143) GetIssue1432() (v Issue1432, ok bool) {
	if !s.IsIssue1432() {
		return v, false
	}
	return s.Issue1432, true
}

// NewIssue1432Issue143 returns new Issue143 from Issue1432.
func NewIssue1432Issue143(v Issue1432) Issue143 {
	var s Issue143
	s.SetIssue1432(v)
	return s
}

// SetIssue1433 sets Issue143 to Issue1433.
func (s *Issue143) SetIssue1433(v Issue1433) {
	s.Type = Issue1433Issue143
	s.Issue1433 = v
}

// GetIssue1433 returns Issue1433 and true boolean if Issue143 is Issue1433.
func (s Issue143) GetIssue1433() (v Issue1433, ok bool) {
	if !s.IsIssue1433() {
		return v, false
	}
	return s.Issue1433, true
}

// NewIssue1433Issue143 returns new Issue143 from Issue1433.
func NewIssue1433Issue143(v Issue1433) Issue143 {
	var s Issue143
	s.SetIssue1433(v)
	return s
}

type Issue1430 struct {
	CommonMinus1 string "json:\"common-1\""
	CommonMinus2 int    "json:\"common-2\""
	UniqueMinus1 string "json:\"unique-1\""
}

type Issue1431 struct {
	CommonMinus1 string "json:\"common-1\""
	CommonMinus2 int    "json:\"common-2\""
	UniqueMinus2 string "json:\"unique-2\""
}

type Issue1432 struct {
	CommonMinus1 string "json:\"common-1\""
	CommonMinus2 int    "json:\"common-2\""
	CommonMinus3 OptInt "json:\"common-3\""
	UniqueMinus3 string "json:\"unique-3\""
}

type Issue1433 struct {
	CommonMinus3 OptInt "json:\"common-3\""
	UniqueMinus4 string "json:\"unique-4\""
}

// Ref: #/components/schemas/MapWithProperties
type MapWithProperties struct {
	Required        int                               "json:\"required\""
	Optional        OptInt                            "json:\"optional\""
	SubMap          OptStringMap                      "json:\"sub_map\""
	InlinedSubMap   OptMapWithPropertiesInlinedSubMap "json:\"inlined_sub_map\""
	MapValidation   OptValidationStringMap            "json:\"map_validation\""
	AdditionalProps MapWithPropertiesAdditional
}

type MapWithPropertiesAdditional map[string]string

func (s *MapWithPropertiesAdditional) init() MapWithPropertiesAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type MapWithPropertiesInlinedSubMap map[string]string

func (s *MapWithPropertiesInlinedSubMap) init() MapWithPropertiesInlinedSubMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/MaxPropertiesTest
type MaxPropertiesTest struct {
	Required  int    "json:\"required\""
	OptionalA OptInt "json:\"optional_a\""
	OptionalB OptInt "json:\"optional_b\""
	OptionalC OptInt "json:\"optional_c\""
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NilIntStatusCode wraps NilInt with StatusCode.
type NilIntStatusCode struct {
	StatusCode int
	Response   NilInt
}

// NewNilNullableEnumsBoth returns new NilNullableEnumsBoth with value set to v.
func NewNilNullableEnumsBoth(v NullableEnumsBoth) NilNullableEnumsBoth {
	return NilNullableEnumsBoth{
		Value: v,
	}
}

// NilNullableEnumsBoth is nullable NullableEnumsBoth.
type NilNullableEnumsBoth struct {
	Value NullableEnumsBoth
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsBoth) SetTo(v NullableEnumsBoth) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsBoth) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsBoth) Get() (v NullableEnumsBoth, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsBoth) Or(d NullableEnumsBoth) NullableEnumsBoth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableEnumsOnlyNullValue returns new NilNullableEnumsOnlyNullValue with value set to v.
func NewNilNullableEnumsOnlyNullValue(v NullableEnumsOnlyNullValue) NilNullableEnumsOnlyNullValue {
	return NilNullableEnumsOnlyNullValue{
		Value: v,
	}
}

// NilNullableEnumsOnlyNullValue is nullable NullableEnumsOnlyNullValue.
type NilNullableEnumsOnlyNullValue struct {
	Value NullableEnumsOnlyNullValue
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsOnlyNullValue) SetTo(v NullableEnumsOnlyNullValue) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsOnlyNullValue) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsOnlyNullValue) Get() (v NullableEnumsOnlyNullValue, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsOnlyNullValue) Or(d NullableEnumsOnlyNullValue) NullableEnumsOnlyNullValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableEnumsOnlyNullable returns new NilNullableEnumsOnlyNullable with value set to v.
func NewNilNullableEnumsOnlyNullable(v NullableEnumsOnlyNullable) NilNullableEnumsOnlyNullable {
	return NilNullableEnumsOnlyNullable{
		Value: v,
	}
}

// NilNullableEnumsOnlyNullable is nullable NullableEnumsOnlyNullable.
type NilNullableEnumsOnlyNullable struct {
	Value NullableEnumsOnlyNullable
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableEnumsOnlyNullable) SetTo(v NullableEnumsOnlyNullable) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableEnumsOnlyNullable) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableEnumsOnlyNullable) Get() (v NullableEnumsOnlyNullable, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableEnumsOnlyNullable) Or(d NullableEnumsOnlyNullable) NullableEnumsOnlyNullable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) foobarGetRes()           {}
func (*NotFound) foobarPostRes()          {}
func (*NotFound) petGetAvatarByIDRes()    {}
func (*NotFound) petGetAvatarByNameRes()  {}
func (*NotFound) petUploadAvatarByIDRes() {}

type NullValue struct{}

// Ref: #/components/schemas/NullableEnums
type NullableEnums struct {
	// Must not be nullable.
	OnlyNullable NilNullableEnumsOnlyNullable "json:\"only_nullable\""
	// Must be nullable.
	OnlyNullValue NilNullableEnumsOnlyNullValue "json:\"only_null_value\""
	// Must be nullable.
	Both NilNullableEnumsBoth "json:\"both\""
}

// Must be nullable.
type NullableEnumsBoth string

const (
	NullableEnumsBothAsc  NullableEnumsBoth = "asc"
	NullableEnumsBothDesc NullableEnumsBoth = "desc"
)

// Must be nullable.
type NullableEnumsOnlyNullValue string

const (
	NullableEnumsOnlyNullValueAsc  NullableEnumsOnlyNullValue = "asc"
	NullableEnumsOnlyNullValueDesc NullableEnumsOnlyNullValue = "desc"
)

// Must not be nullable.
type NullableEnumsOnlyNullable string

const (
	NullableEnumsOnlyNullableAsc  NullableEnumsOnlyNullable = "asc"
	NullableEnumsOnlyNullableDesc NullableEnumsOnlyNullable = "desc"
)

// Ref: #/components/schemas/OneOfBugs
type OneOfBugs struct {
	Issue143                        Issue143                    "json:\"issue143\""
	AdditionalMinusFields           OneVariantHasNoUniqueFields "json:\"additional-fields\""
	OneOfMinusUUIDMinusIntMinusEnum OptOneOfUUIDAndIntEnum      "json:\"oneOf-uuid-int-enum\""
	OneOfMinusMappingMinusReference OptOneOfMappingReference    "json:\"oneOf-mapping-reference\""
}

// Ref: #/components/schemas/OneOfMappingReference
// OneOfMappingReference represents sum type.
type OneOfMappingReference struct {
	Type                   OneOfMappingReferenceType // switch on this field
	OneOfMappingReferenceA OneOfMappingReferenceA
	OneOfMappingReferenceB OneOfMappingReferenceB
}

// OneOfMappingReferenceType is oneOf type of OneOfMappingReference.
type OneOfMappingReferenceType string

// Possible values for OneOfMappingReferenceType.
const (
	OneOfMappingReferenceAOneOfMappingReference OneOfMappingReferenceType = "OneOfMappingReferenceA"
	OneOfMappingReferenceBOneOfMappingReference OneOfMappingReferenceType = "OneOfMappingReferenceB"
)

// IsOneOfMappingReferenceA reports whether OneOfMappingReference is OneOfMappingReferenceA.
func (s OneOfMappingReference) IsOneOfMappingReferenceA() bool {
	return s.Type == OneOfMappingReferenceAOneOfMappingReference
}

// IsOneOfMappingReferenceB reports whether OneOfMappingReference is OneOfMappingReferenceB.
func (s OneOfMappingReference) IsOneOfMappingReferenceB() bool {
	return s.Type == OneOfMappingReferenceBOneOfMappingReference
}

// SetOneOfMappingReferenceA sets OneOfMappingReference to OneOfMappingReferenceA.
func (s *OneOfMappingReference) SetOneOfMappingReferenceA(v OneOfMappingReferenceA) {
	s.Type = OneOfMappingReferenceAOneOfMappingReference
	s.OneOfMappingReferenceA = v
}

// GetOneOfMappingReferenceA returns OneOfMappingReferenceA and true boolean if OneOfMappingReference is OneOfMappingReferenceA.
func (s OneOfMappingReference) GetOneOfMappingReferenceA() (v OneOfMappingReferenceA, ok bool) {
	if !s.IsOneOfMappingReferenceA() {
		return v, false
	}
	return s.OneOfMappingReferenceA, true
}

// NewOneOfMappingReferenceAOneOfMappingReference returns new OneOfMappingReference from OneOfMappingReferenceA.
func NewOneOfMappingReferenceAOneOfMappingReference(v OneOfMappingReferenceA) OneOfMappingReference {
	var s OneOfMappingReference
	s.SetOneOfMappingReferenceA(v)
	return s
}

// SetOneOfMappingReferenceB sets OneOfMappingReference to OneOfMappingReferenceB.
func (s *OneOfMappingReference) SetOneOfMappingReferenceB(v OneOfMappingReferenceB) {
	s.Type = OneOfMappingReferenceBOneOfMappingReference
	s.OneOfMappingReferenceB = v
}

// GetOneOfMappingReferenceB returns OneOfMappingReferenceB and true boolean if OneOfMappingReference is OneOfMappingReferenceB.
func (s OneOfMappingReference) GetOneOfMappingReferenceB() (v OneOfMappingReferenceB, ok bool) {
	if !s.IsOneOfMappingReferenceB() {
		return v, false
	}
	return s.OneOfMappingReferenceB, true
}

// NewOneOfMappingReferenceBOneOfMappingReference returns new OneOfMappingReference from OneOfMappingReferenceB.
func NewOneOfMappingReferenceBOneOfMappingReference(v OneOfMappingReferenceB) OneOfMappingReference {
	var s OneOfMappingReference
	s.SetOneOfMappingReferenceB(v)
	return s
}

// Ref: #/components/schemas/OneOfMappingReferenceA
type OneOfMappingReferenceA struct {
	Description OptString "json:\"description\""
}

// Ref: #/components/schemas/OneOfMappingReferenceB
type OneOfMappingReferenceB struct {
	Code OptInt32                    "json:\"code\""
	Data *OneOfMappingReferenceBData "json:\"data\""
	Info OptString                   "json:\"info\""
}

type OneOfMappingReferenceBData struct{}

// Ref: #/components/schemas/OneOfUUIDAndIntEnum
// OneOfUUIDAndIntEnum represents sum type.
type OneOfUUIDAndIntEnum struct {
	Type                 OneOfUUIDAndIntEnumType // switch on this field
	UUID                 uuid.UUID
	OneOfUUIDAndIntEnum1 OneOfUUIDAndIntEnum1
}

// OneOfUUIDAndIntEnumType is oneOf type of OneOfUUIDAndIntEnum.
type OneOfUUIDAndIntEnumType string

// Possible values for OneOfUUIDAndIntEnumType.
const (
	UUIDOneOfUUIDAndIntEnum                 OneOfUUIDAndIntEnumType = "uuid.UUID"
	OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum OneOfUUIDAndIntEnumType = "OneOfUUIDAndIntEnum1"
)

// IsUUID reports whether OneOfUUIDAndIntEnum is uuid.UUID.
func (s OneOfUUIDAndIntEnum) IsUUID() bool { return s.Type == UUIDOneOfUUIDAndIntEnum }

// IsOneOfUUIDAndIntEnum1 reports whether OneOfUUIDAndIntEnum is OneOfUUIDAndIntEnum1.
func (s OneOfUUIDAndIntEnum) IsOneOfUUIDAndIntEnum1() bool {
	return s.Type == OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum
}

// SetUUID sets OneOfUUIDAndIntEnum to uuid.UUID.
func (s *OneOfUUIDAndIntEnum) SetUUID(v uuid.UUID) {
	s.Type = UUIDOneOfUUIDAndIntEnum
	s.UUID = v
}

// GetUUID returns uuid.UUID and true boolean if OneOfUUIDAndIntEnum is uuid.UUID.
func (s OneOfUUIDAndIntEnum) GetUUID() (v uuid.UUID, ok bool) {
	if !s.IsUUID() {
		return v, false
	}
	return s.UUID, true
}

// NewUUIDOneOfUUIDAndIntEnum returns new OneOfUUIDAndIntEnum from uuid.UUID.
func NewUUIDOneOfUUIDAndIntEnum(v uuid.UUID) OneOfUUIDAndIntEnum {
	var s OneOfUUIDAndIntEnum
	s.SetUUID(v)
	return s
}

// SetOneOfUUIDAndIntEnum1 sets OneOfUUIDAndIntEnum to OneOfUUIDAndIntEnum1.
func (s *OneOfUUIDAndIntEnum) SetOneOfUUIDAndIntEnum1(v OneOfUUIDAndIntEnum1) {
	s.Type = OneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum
	s.OneOfUUIDAndIntEnum1 = v
}

// GetOneOfUUIDAndIntEnum1 returns OneOfUUIDAndIntEnum1 and true boolean if OneOfUUIDAndIntEnum is OneOfUUIDAndIntEnum1.
func (s OneOfUUIDAndIntEnum) GetOneOfUUIDAndIntEnum1() (v OneOfUUIDAndIntEnum1, ok bool) {
	if !s.IsOneOfUUIDAndIntEnum1() {
		return v, false
	}
	return s.OneOfUUIDAndIntEnum1, true
}

// NewOneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum returns new OneOfUUIDAndIntEnum from OneOfUUIDAndIntEnum1.
func NewOneOfUUIDAndIntEnum1OneOfUUIDAndIntEnum(v OneOfUUIDAndIntEnum1) OneOfUUIDAndIntEnum {
	var s OneOfUUIDAndIntEnum
	s.SetOneOfUUIDAndIntEnum1(v)
	return s
}

type OneOfUUIDAndIntEnum1 int

const (
	OneOfUUIDAndIntEnum10 OneOfUUIDAndIntEnum1 = 0
	OneOfUUIDAndIntEnum11 OneOfUUIDAndIntEnum1 = 1
)

// Ref: #/components/schemas/OneVariantHasNoUniqueFields
// OneVariantHasNoUniqueFields represents sum type.
type OneVariantHasNoUniqueFields struct {
	Type                         OneVariantHasNoUniqueFieldsType // switch on this field
	OneVariantHasNoUniqueFields0 OneVariantHasNoUniqueFields0
	OneVariantHasNoUniqueFields1 OneVariantHasNoUniqueFields1
}

// OneVariantHasNoUniqueFieldsType is oneOf type of OneVariantHasNoUniqueFields.
type OneVariantHasNoUniqueFieldsType string

// Possible values for OneVariantHasNoUniqueFieldsType.
const (
	OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields OneVariantHasNoUniqueFieldsType = "OneVariantHasNoUniqueFields0"
	OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields OneVariantHasNoUniqueFieldsType = "OneVariantHasNoUniqueFields1"
)

// IsOneVariantHasNoUniqueFields0 reports whether OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields0.
func (s OneVariantHasNoUniqueFields) IsOneVariantHasNoUniqueFields0() bool {
	return s.Type == OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
}

// IsOneVariantHasNoUniqueFields1 reports whether OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields1.
func (s OneVariantHasNoUniqueFields) IsOneVariantHasNoUniqueFields1() bool {
	return s.Type == OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
}

// SetOneVariantHasNoUniqueFields0 sets OneVariantHasNoUniqueFields to OneVariantHasNoUniqueFields0.
func (s *OneVariantHasNoUniqueFields) SetOneVariantHasNoUniqueFields0(v OneVariantHasNoUniqueFields0) {
	s.Type = OneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields
	s.OneVariantHasNoUniqueFields0 = v
}

// GetOneVariantHasNoUniqueFields0 returns OneVariantHasNoUniqueFields0 and true boolean if OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields0.
func (s OneVariantHasNoUniqueFields) GetOneVariantHasNoUniqueFields0() (v OneVariantHasNoUniqueFields0, ok bool) {
	if !s.IsOneVariantHasNoUniqueFields0() {
		return v, false
	}
	return s.OneVariantHasNoUniqueFields0, true
}

// NewOneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields returns new OneVariantHasNoUniqueFields from OneVariantHasNoUniqueFields0.
func NewOneVariantHasNoUniqueFields0OneVariantHasNoUniqueFields(v OneVariantHasNoUniqueFields0) OneVariantHasNoUniqueFields {
	var s OneVariantHasNoUniqueFields
	s.SetOneVariantHasNoUniqueFields0(v)
	return s
}

// SetOneVariantHasNoUniqueFields1 sets OneVariantHasNoUniqueFields to OneVariantHasNoUniqueFields1.
func (s *OneVariantHasNoUniqueFields) SetOneVariantHasNoUniqueFields1(v OneVariantHasNoUniqueFields1) {
	s.Type = OneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields
	s.OneVariantHasNoUniqueFields1 = v
}

// GetOneVariantHasNoUniqueFields1 returns OneVariantHasNoUniqueFields1 and true boolean if OneVariantHasNoUniqueFields is OneVariantHasNoUniqueFields1.
func (s OneVariantHasNoUniqueFields) GetOneVariantHasNoUniqueFields1() (v OneVariantHasNoUniqueFields1, ok bool) {
	if !s.IsOneVariantHasNoUniqueFields1() {
		return v, false
	}
	return s.OneVariantHasNoUniqueFields1, true
}

// NewOneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields returns new OneVariantHasNoUniqueFields from OneVariantHasNoUniqueFields1.
func NewOneVariantHasNoUniqueFields1OneVariantHasNoUniqueFields(v OneVariantHasNoUniqueFields1) OneVariantHasNoUniqueFields {
	var s OneVariantHasNoUniqueFields
	s.SetOneVariantHasNoUniqueFields1(v)
	return s
}

type OneVariantHasNoUniqueFields0 struct {
	A string "json:\"a\""
	B OptInt "json:\"b\""
	C string "json:\"c\""
}

type OneVariantHasNoUniqueFields1 struct {
	A string "json:\"a\""
	B OptInt "json:\"b\""
	C string "json:\"c\""
	D OptInt "json:\"d\""
}

// OneofBugOK is response for OneofBug operation.
type OneofBugOK struct{}

// NewOptAnyOfTest returns new OptAnyOfTest with value set to v.
func NewOptAnyOfTest(v AnyOfTest) OptAnyOfTest {
	return OptAnyOfTest{
		Value: v,
		Set:   true,
	}
}

// OptAnyOfTest is optional AnyOfTest.
type OptAnyOfTest struct {
	Value AnyOfTest
	Set   bool
}

// IsSet returns true if OptAnyOfTest was set.
func (o OptAnyOfTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnyOfTest) Reset() {
	var v AnyOfTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnyOfTest) SetTo(v AnyOfTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnyOfTest) Get() (v AnyOfTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnyOfTest) Or(d AnyOfTest) AnyOfTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnyTest returns new OptAnyTest with value set to v.
func NewOptAnyTest(v AnyTest) OptAnyTest {
	return OptAnyTest{
		Value: v,
		Set:   true,
	}
}

// OptAnyTest is optional AnyTest.
type OptAnyTest struct {
	Value AnyTest
	Set   bool
}

// IsSet returns true if OptAnyTest was set.
func (o OptAnyTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnyTest) Reset() {
	var v AnyTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnyTest) SetTo(v AnyTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnyTest) Get() (v AnyTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnyTest) Or(d AnyTest) AnyTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnyTestAnyMap returns new OptAnyTestAnyMap with value set to v.
func NewOptAnyTestAnyMap(v AnyTestAnyMap) OptAnyTestAnyMap {
	return OptAnyTestAnyMap{
		Value: v,
		Set:   true,
	}
}

// OptAnyTestAnyMap is optional AnyTestAnyMap.
type OptAnyTestAnyMap struct {
	Value AnyTestAnyMap
	Set   bool
}

// IsSet returns true if OptAnyTestAnyMap was set.
func (o OptAnyTestAnyMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnyTestAnyMap) Reset() {
	var v AnyTestAnyMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnyTestAnyMap) SetTo(v AnyTestAnyMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnyTestAnyMap) Get() (v AnyTestAnyMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnyTestAnyMap) Or(d AnyTestAnyMap) AnyTestAnyMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptArrayTest returns new OptArrayTest with value set to v.
func NewOptArrayTest(v ArrayTest) OptArrayTest {
	return OptArrayTest{
		Value: v,
		Set:   true,
	}
}

// OptArrayTest is optional ArrayTest.
type OptArrayTest struct {
	Value ArrayTest
	Set   bool
}

// IsSet returns true if OptArrayTest was set.
func (o OptArrayTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptArrayTest) Reset() {
	var v ArrayTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptArrayTest) SetTo(v ArrayTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptArrayTest) Get() (v ArrayTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptArrayTest) Or(d ArrayTest) ArrayTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptData returns new OptData with value set to v.
func NewOptData(v Data) OptData {
	return OptData{
		Value: v,
		Set:   true,
	}
}

// OptData is optional Data.
type OptData struct {
	Value Data
	Set   bool
}

// IsSet returns true if OptData was set.
func (o OptData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptData) Reset() {
	var v Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptData) SetTo(v Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptData) Get() (v Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptData) Or(d Data) Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDefaultTestEnum returns new OptDefaultTestEnum with value set to v.
func NewOptDefaultTestEnum(v DefaultTestEnum) OptDefaultTestEnum {
	return OptDefaultTestEnum{
		Value: v,
		Set:   true,
	}
}

// OptDefaultTestEnum is optional DefaultTestEnum.
type OptDefaultTestEnum struct {
	Value DefaultTestEnum
	Set   bool
}

// IsSet returns true if OptDefaultTestEnum was set.
func (o OptDefaultTestEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDefaultTestEnum) Reset() {
	var v DefaultTestEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDefaultTestEnum) SetTo(v DefaultTestEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDefaultTestEnum) Get() (v DefaultTestEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDefaultTestEnum) Or(d DefaultTestEnum) DefaultTestEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v time.Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional time.Duration.
type OptDuration struct {
	Value time.Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v time.Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v time.Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v time.Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d time.Duration) time.Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIP returns new OptIP with value set to v.
func NewOptIP(v netip.Addr) OptIP {
	return OptIP{
		Value: v,
		Set:   true,
	}
}

// OptIP is optional netip.Addr.
type OptIP struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIP was set.
func (o OptIP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIP) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIP) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIP) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIP) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv4 returns new OptIPv4 with value set to v.
func NewOptIPv4(v netip.Addr) OptIPv4 {
	return OptIPv4{
		Value: v,
		Set:   true,
	}
}

// OptIPv4 is optional netip.Addr.
type OptIPv4 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv4 was set.
func (o OptIPv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv4) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv4) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv4) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv4) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv6 returns new OptIPv6 with value set to v.
func NewOptIPv6(v netip.Addr) OptIPv6 {
	return OptIPv6{
		Value: v,
		Set:   true,
	}
}

// OptIPv6 is optional netip.Addr.
type OptIPv6 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv6 was set.
func (o OptIPv6) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv6) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv6) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv6) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv6) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapWithProperties returns new OptMapWithProperties with value set to v.
func NewOptMapWithProperties(v MapWithProperties) OptMapWithProperties {
	return OptMapWithProperties{
		Value: v,
		Set:   true,
	}
}

// OptMapWithProperties is optional MapWithProperties.
type OptMapWithProperties struct {
	Value MapWithProperties
	Set   bool
}

// IsSet returns true if OptMapWithProperties was set.
func (o OptMapWithProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapWithProperties) Reset() {
	var v MapWithProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapWithProperties) SetTo(v MapWithProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapWithProperties) Get() (v MapWithProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapWithProperties) Or(d MapWithProperties) MapWithProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMapWithPropertiesInlinedSubMap returns new OptMapWithPropertiesInlinedSubMap with value set to v.
func NewOptMapWithPropertiesInlinedSubMap(v MapWithPropertiesInlinedSubMap) OptMapWithPropertiesInlinedSubMap {
	return OptMapWithPropertiesInlinedSubMap{
		Value: v,
		Set:   true,
	}
}

// OptMapWithPropertiesInlinedSubMap is optional MapWithPropertiesInlinedSubMap.
type OptMapWithPropertiesInlinedSubMap struct {
	Value MapWithPropertiesInlinedSubMap
	Set   bool
}

// IsSet returns true if OptMapWithPropertiesInlinedSubMap was set.
func (o OptMapWithPropertiesInlinedSubMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMapWithPropertiesInlinedSubMap) Reset() {
	var v MapWithPropertiesInlinedSubMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMapWithPropertiesInlinedSubMap) SetTo(v MapWithPropertiesInlinedSubMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMapWithPropertiesInlinedSubMap) Get() (v MapWithPropertiesInlinedSubMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMapWithPropertiesInlinedSubMap) Or(d MapWithPropertiesInlinedSubMap) MapWithPropertiesInlinedSubMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMaxPropertiesTest returns new OptMaxPropertiesTest with value set to v.
func NewOptMaxPropertiesTest(v MaxPropertiesTest) OptMaxPropertiesTest {
	return OptMaxPropertiesTest{
		Value: v,
		Set:   true,
	}
}

// OptMaxPropertiesTest is optional MaxPropertiesTest.
type OptMaxPropertiesTest struct {
	Value MaxPropertiesTest
	Set   bool
}

// IsSet returns true if OptMaxPropertiesTest was set.
func (o OptMaxPropertiesTest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaxPropertiesTest) Reset() {
	var v MaxPropertiesTest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaxPropertiesTest) SetTo(v MaxPropertiesTest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaxPropertiesTest) Get() (v MaxPropertiesTest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMaxPropertiesTest) Or(d MaxPropertiesTest) MaxPropertiesTest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullValue returns new OptNullValue with value set to v.
func NewOptNullValue(v NullValue) OptNullValue {
	return OptNullValue{
		Value: v,
		Set:   true,
	}
}

// OptNullValue is optional NullValue.
type OptNullValue struct {
	Value NullValue
	Set   bool
}

// IsSet returns true if OptNullValue was set.
func (o OptNullValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullValue) Reset() {
	var v NullValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullValue) SetTo(v NullValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullValue) Get() (v NullValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullValue) Or(d NullValue) NullValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableEnums returns new OptNullableEnums with value set to v.
func NewOptNullableEnums(v NullableEnums) OptNullableEnums {
	return OptNullableEnums{
		Value: v,
		Set:   true,
	}
}

// OptNullableEnums is optional NullableEnums.
type OptNullableEnums struct {
	Value NullableEnums
	Set   bool
}

// IsSet returns true if OptNullableEnums was set.
func (o OptNullableEnums) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableEnums) Reset() {
	var v NullableEnums
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableEnums) SetTo(v NullableEnums) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableEnums) Get() (v NullableEnums, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableEnums) Or(d NullableEnums) NullableEnums {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOneOfMappingReference returns new OptOneOfMappingReference with value set to v.
func NewOptOneOfMappingReference(v OneOfMappingReference) OptOneOfMappingReference {
	return OptOneOfMappingReference{
		Value: v,
		Set:   true,
	}
}

// OptOneOfMappingReference is optional OneOfMappingReference.
type OptOneOfMappingReference struct {
	Value OneOfMappingReference
	Set   bool
}

// IsSet returns true if OptOneOfMappingReference was set.
func (o OptOneOfMappingReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOneOfMappingReference) Reset() {
	var v OneOfMappingReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOneOfMappingReference) SetTo(v OneOfMappingReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOneOfMappingReference) Get() (v OneOfMappingReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOneOfMappingReference) Or(d OneOfMappingReference) OneOfMappingReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOneOfUUIDAndIntEnum returns new OptOneOfUUIDAndIntEnum with value set to v.
func NewOptOneOfUUIDAndIntEnum(v OneOfUUIDAndIntEnum) OptOneOfUUIDAndIntEnum {
	return OptOneOfUUIDAndIntEnum{
		Value: v,
		Set:   true,
	}
}

// OptOneOfUUIDAndIntEnum is optional OneOfUUIDAndIntEnum.
type OptOneOfUUIDAndIntEnum struct {
	Value OneOfUUIDAndIntEnum
	Set   bool
}

// IsSet returns true if OptOneOfUUIDAndIntEnum was set.
func (o OptOneOfUUIDAndIntEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOneOfUUIDAndIntEnum) Reset() {
	var v OneOfUUIDAndIntEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOneOfUUIDAndIntEnum) SetTo(v OneOfUUIDAndIntEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOneOfUUIDAndIntEnum) Get() (v OneOfUUIDAndIntEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOneOfUUIDAndIntEnum) Or(d OneOfUUIDAndIntEnum) OneOfUUIDAndIntEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPet returns new OptPet with value set to v.
func NewOptPet(v Pet) OptPet {
	return OptPet{
		Value: v,
		Set:   true,
	}
}

// OptPet is optional Pet.
type OptPet struct {
	Value Pet
	Set   bool
}

// IsSet returns true if OptPet was set.
func (o OptPet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPet) Reset() {
	var v Pet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPet) SetTo(v Pet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPet) Get() (v Pet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPet) Or(d Pet) Pet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetName returns new OptPetName with value set to v.
func NewOptPetName(v PetName) OptPetName {
	return OptPetName{
		Value: v,
		Set:   true,
	}
}

// OptPetName is optional PetName.
type OptPetName struct {
	Value PetName
	Set   bool
}

// IsSet returns true if OptPetName was set.
func (o OptPetName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetName) Reset() {
	var v PetName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetName) SetTo(v PetName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetName) Get() (v PetName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetName) Or(d PetName) PetName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetType returns new OptPetType with value set to v.
func NewOptPetType(v PetType) OptPetType {
	return OptPetType{
		Value: v,
		Set:   true,
	}
}

// OptPetType is optional PetType.
type OptPetType struct {
	Value PetType
	Set   bool
}

// IsSet returns true if OptPetType was set.
func (o OptPetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetType) Reset() {
	var v PetType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetType) SetTo(v PetType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetType) Get() (v PetType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetType) Or(d PetType) PetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringMap returns new OptStringMap with value set to v.
func NewOptStringMap(v StringMap) OptStringMap {
	return OptStringMap{
		Value: v,
		Set:   true,
	}
}

// OptStringMap is optional StringMap.
type OptStringMap struct {
	Value StringMap
	Set   bool
}

// IsSet returns true if OptStringMap was set.
func (o OptStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringMap) Reset() {
	var v StringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringMap) SetTo(v StringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringMap) Get() (v StringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringMap) Or(d StringMap) StringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringStringMap returns new OptStringStringMap with value set to v.
func NewOptStringStringMap(v StringStringMap) OptStringStringMap {
	return OptStringStringMap{
		Value: v,
		Set:   true,
	}
}

// OptStringStringMap is optional StringStringMap.
type OptStringStringMap struct {
	Value StringStringMap
	Set   bool
}

// IsSet returns true if OptStringStringMap was set.
func (o OptStringStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringStringMap) Reset() {
	var v StringStringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringStringMap) SetTo(v StringStringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringStringMap) Get() (v StringStringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringStringMap) Or(d StringStringMap) StringStringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestObjectQueryParameterDeepObject returns new OptTestObjectQueryParameterDeepObject with value set to v.
func NewOptTestObjectQueryParameterDeepObject(v TestObjectQueryParameterDeepObject) OptTestObjectQueryParameterDeepObject {
	return OptTestObjectQueryParameterDeepObject{
		Value: v,
		Set:   true,
	}
}

// OptTestObjectQueryParameterDeepObject is optional TestObjectQueryParameterDeepObject.
type OptTestObjectQueryParameterDeepObject struct {
	Value TestObjectQueryParameterDeepObject
	Set   bool
}

// IsSet returns true if OptTestObjectQueryParameterDeepObject was set.
func (o OptTestObjectQueryParameterDeepObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestObjectQueryParameterDeepObject) Reset() {
	var v TestObjectQueryParameterDeepObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestObjectQueryParameterDeepObject) SetTo(v TestObjectQueryParameterDeepObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestObjectQueryParameterDeepObject) Get() (v TestObjectQueryParameterDeepObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestObjectQueryParameterDeepObject) Or(d TestObjectQueryParameterDeepObject) TestObjectQueryParameterDeepObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestObjectQueryParameterFormObject returns new OptTestObjectQueryParameterFormObject with value set to v.
func NewOptTestObjectQueryParameterFormObject(v TestObjectQueryParameterFormObject) OptTestObjectQueryParameterFormObject {
	return OptTestObjectQueryParameterFormObject{
		Value: v,
		Set:   true,
	}
}

// OptTestObjectQueryParameterFormObject is optional TestObjectQueryParameterFormObject.
type OptTestObjectQueryParameterFormObject struct {
	Value TestObjectQueryParameterFormObject
	Set   bool
}

// IsSet returns true if OptTestObjectQueryParameterFormObject was set.
func (o OptTestObjectQueryParameterFormObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestObjectQueryParameterFormObject) Reset() {
	var v TestObjectQueryParameterFormObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestObjectQueryParameterFormObject) SetTo(v TestObjectQueryParameterFormObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestObjectQueryParameterFormObject) Get() (v TestObjectQueryParameterFormObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestObjectQueryParameterFormObject) Or(d TestObjectQueryParameterFormObject) TestObjectQueryParameterFormObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v time.Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional time.Time.
type OptTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationStringMap returns new OptValidationStringMap with value set to v.
func NewOptValidationStringMap(v ValidationStringMap) OptValidationStringMap {
	return OptValidationStringMap{
		Value: v,
		Set:   true,
	}
}

// OptValidationStringMap is optional ValidationStringMap.
type OptValidationStringMap struct {
	Value ValidationStringMap
	Set   bool
}

// IsSet returns true if OptValidationStringMap was set.
func (o OptValidationStringMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationStringMap) Reset() {
	var v ValidationStringMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationStringMap) SetTo(v ValidationStringMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationStringMap) Get() (v ValidationStringMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationStringMap) Or(d ValidationStringMap) ValidationStringMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PatternRecursiveMap
type PatternRecursiveMap map[string]PatternRecursiveMap

func (s *PatternRecursiveMap) init() PatternRecursiveMap {
	m := *s
	if m == nil {
		m = map[string]PatternRecursiveMap{}
		*s = m
	}
	return m
}

// Cute and lovely creature.
// Ref: #/components/schemas/Pet
type Pet struct {
	Primary           *Pet                 "json:\"primary\""
	ID                int64                "json:\"id\""
	UniqueID          uuid.UUID            "json:\"unique_id\""
	Name              string               "json:\"name\""
	Type              OptPetType           "json:\"type\""
	Kind              PetKind              "json:\"kind\""
	Tag               OptUUID              "json:\"tag\""
	IP                netip.Addr           "json:\"ip\""
	IPV4              netip.Addr           "json:\"ip_v4\""
	IPV6              netip.Addr           "json:\"ip_v6\""
	URI               url.URL              "json:\"uri\""
	Birthday          time.Time            "json:\"birthday\""
	Rate              time.Duration        "json:\"rate\""
	Nickname          NilString            "json:\"nickname\""
	NullStr           OptNilString         "json:\"nullStr\""
	Friends           []Pet                "json:\"friends\""
	Next              OptData              "json:\"next\""
	TestInteger1      OptInt               "json:\"testInteger1\""
	TestFloat1        OptFloat64           "json:\"testFloat1\""
	TestArray1        [][]string           "json:\"testArray1\""
	TestArray2        OptArrayTest         "json:\"testArray2\""
	TestMap           OptStringStringMap   "json:\"testMap\""
	TestMapWithProps  OptMapWithProperties "json:\"testMapWithProps\""
	TestAny           OptAnyTest           "json:\"testAny\""
	TestAnyOf         OptAnyOfTest         "json:\"testAnyOf\""
	TestMaxProperties OptMaxPropertiesTest "json:\"testMaxProperties\""
	TestDate          OptDate              "json:\"testDate\""
	TestDuration      OptDuration          "json:\"testDuration\""
	TestTime          OptTime              "json:\"testTime\""
	TestDateTime      OptDateTime          "json:\"testDateTime\""
	NullValue         OptNullValue         "json:\"nullValue\""
}

func (*Pet) foobarGetRes()  {}
func (*Pet) foobarPostRes() {}
func (*Pet) petGetRes()     {}

type PetGetAvatarByIDOK struct {
	Data io.Reader
}

func (s PetGetAvatarByIDOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*PetGetAvatarByIDOK) petGetAvatarByIDRes() {}

type PetGetAvatarByNameOK struct {
	Data io.Reader
}

func (s PetGetAvatarByNameOK) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*PetGetAvatarByNameOK) petGetAvatarByNameRes() {}

type PetGetDef struct {
	Message string "json:\"message\""
}

// PetGetDefStatusCode wraps PetGetDef with StatusCode.
type PetGetDefStatusCode struct {
	StatusCode int
	Response   PetGetDef
}

func (*PetGetDefStatusCode) petGetRes() {}

type PetKind string

const (
	PetKindBig  PetKind = "big"
	PetKindSmol PetKind = "smol"
)

type PetName string

type PetType string

const (
	PetTypeFifa PetType = "fifa"
	PetTypeFofa PetType = "fofa"
)

// PetUpdateNameAliasPostDef is default response for PetUpdateNameAliasPost operation.
type PetUpdateNameAliasPostDef struct{}

// PetUpdateNameAliasPostDefStatusCode wraps PetUpdateNameAliasPostDef with StatusCode.
type PetUpdateNameAliasPostDefStatusCode struct {
	StatusCode int
	Response   PetUpdateNameAliasPostDef
}

// PetUpdateNamePostDef is default response for PetUpdateNamePost operation.
type PetUpdateNamePostDef struct{}

// PetUpdateNamePostDefStatusCode wraps PetUpdateNamePostDef with StatusCode.
type PetUpdateNamePostDefStatusCode struct {
	StatusCode int
	Response   PetUpdateNamePostDef
}

// PetUploadAvatarByIDOK is response for PetUploadAvatarByID operation.
type PetUploadAvatarByIDOK struct{}

func (*PetUploadAvatarByIDOK) petUploadAvatarByIDRes() {}

type PetUploadAvatarByIDReq struct {
	Data io.Reader
}

func (s PetUploadAvatarByIDReq) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

type RecursiveArray []RecursiveArray

// Ref: #/components/schemas/RecursiveMap
type RecursiveMap struct {
	OptionalRecursiveField *RecursiveMap "json:\"optional_recursive_field\""
	AdditionalProps        RecursiveMapAdditional
}

type RecursiveMapAdditional map[string]RecursiveMap

func (s *RecursiveMapAdditional) init() RecursiveMapAdditional {
	m := *s
	if m == nil {
		m = map[string]RecursiveMap{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringIntMap
type StringIntMap struct {
	AdditionalProps StringIntMapAdditional
	Pattern0Props   StringIntMapPattern0
}

type StringIntMapAdditional map[string]int

func (s *StringIntMapAdditional) init() StringIntMapAdditional {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type StringIntMapPattern0 map[string]string

func (s *StringIntMapPattern0) init() StringIntMapPattern0 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringMap
type StringMap map[string]string

func (s *StringMap) init() StringMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StringStringMap
type StringStringMap map[string]StringMap

func (s *StringStringMap) init() StringStringMap {
	m := *s
	if m == nil {
		m = map[string]StringMap{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/TestFloatValidation
type TestFloatValidation struct {
	Minmax     float64 "json:\"minmax\""
	MultipleOf float64 "json:\"multipleOf\""
}

// TestFloatValidationOK is response for TestFloatValidation operation.
type TestFloatValidationOK struct{}

type TestObjectQueryParameterDeepObject struct {
	Min    int    "json:\"min\""
	Max    int    "json:\"max\""
	Filter string "json:\"filter\""
}

type TestObjectQueryParameterFormObject struct {
	Min    int    "json:\"min\""
	Max    int    "json:\"max\""
	Filter string "json:\"filter\""
}

type TestObjectQueryParameterOK struct {
	Style  string "json:\"style\""
	Min    int    "json:\"min\""
	Max    int    "json:\"max\""
	Filter string "json:\"filter\""
}

// Ref: #/components/schemas/ValidationStringMap
type ValidationStringMap map[string]string

func (s *ValidationStringMap) init() ValidationStringMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}
