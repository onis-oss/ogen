// Code generated by ogen, DO NOT EDIT.

package techempower

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func decodeCachingParams(args [0]string, r *http.Request) (CachingParams, error) {
	var (
		params    CachingParams
		queryArgs = r.URL.Query()
	)
	// Decode query: count.
	{
		values, ok := queryArgs["count"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.Count = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: count: parse")
			}
		} else {
			return params, errors.New("query: count: not specified")
		}
	}
	return params, nil
}

func decodeQueriesParams(args [0]string, r *http.Request) (QueriesParams, error) {
	var (
		params    QueriesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: queries.
	{
		values, ok := queryArgs["queries"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.Queries = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: queries: parse")
			}
		} else {
			return params, errors.New("query: queries: not specified")
		}
	}
	return params, nil
}

func decodeUpdatesParams(args [0]string, r *http.Request) (UpdatesParams, error) {
	var (
		params    UpdatesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: queries.
	{
		values, ok := queryArgs["queries"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(s)
				if err != nil {
					return err
				}

				params.Queries = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: queries: parse")
			}
		} else {
			return params, errors.New("query: queries: not specified")
		}
	}
	return params, nil
}
