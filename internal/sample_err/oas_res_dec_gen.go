// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/validate"
)

func decodeDataCreateResponse(resp *http.Response, span trace.Span) (res Data, err error) {
	switch resp.StatusCode {
	case 200:
		switch ct := resp.Header.Get("Content-Type"); ct {
		case "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response Data
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ErrorStatusCode, err error) {
			switch ct := resp.Header.Get("Content-Type"); ct {
			case "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response Error
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}

				return ErrorStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}

func decodeDataGetResponse(resp *http.Response, span trace.Span) (res Data, err error) {
	switch resp.StatusCode {
	case 200:
		switch ct := resp.Header.Get("Content-Type"); ct {
		case "application/json":
			buf := getBuf()
			defer putBuf(buf)
			if _, err := io.Copy(buf, resp.Body); err != nil {
				return res, err
			}

			d := jx.GetDecoder()
			defer jx.PutDecoder(d)
			d.ResetBytes(buf.Bytes())

			var response Data
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, err
			}

			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	default:
		defRes, err := func() (res ErrorStatusCode, err error) {
			switch ct := resp.Header.Get("Content-Type"); ct {
			case "application/json":
				buf := getBuf()
				defer putBuf(buf)
				if _, err := io.Copy(buf, resp.Body); err != nil {
					return res, err
				}

				d := jx.GetDecoder()
				defer jx.PutDecoder(d)
				d.ResetBytes(buf.Bytes())

				var response Error
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, err
				}

				return ErrorStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrap(err, "default")
		}
		return res, errors.Wrap(&defRes, "error")
	}
}
