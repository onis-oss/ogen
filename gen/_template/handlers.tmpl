{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}

{{ define "handlers" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
// Handle{{ $op.Name }}Request handles {{ $op.Spec.OperationID }} operation.
//
// {{ $op.Spec.HTTPMethod }} {{ $op.Spec.Path }}
func (s *Server) handle{{ $op.Name }}Request(args [{{ $op.PathParamsCount }}]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
	{{- if $op.Spec.OperationID }}
		otelogen.OperationID({{ quote $op.Spec.OperationID }}),
	{{- end }}
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), {{ quote $op.Name }},
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()
	p := s.h.PolicyForRequest(ctx, r) //check policy
	if !p.IsAllowed(PrivId{{ $op.Name }}) {
		s.badRequest(ctx, w, span, otelAttrs, errors.New("ogen: {{ $op.Name }} is not allowed"))
		return
	}
	ctx = NewPolicyContext(ctx, p)
	var err error
	{{- range $s := $op.Security }}
	ctx, err = s.security{{ $s.Security.Type.Name }}(ctx, {{ quote $op.Name }}, r)
	if err != nil {
		err = &ogenerrors.SecurityError{
			Operation: {{ quote $op.Name }},
			Security: {{ quote $s.Security.Type.Name }},
			Err: err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}
	{{- end }}

	{{- if $op.Params }}
	params, err := decode{{ $op.Name }}Params(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			{{ quote $op.Name }},
			err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}
	{{- end }}

	{{- if $op.Request }}
	request, err := decode{{ $op.Name }}Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			{{ quote $op.Name }},
			err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}
	{{- end }}
	// Operation has data driven policy
	p = s.h.PolicyFor{{$op.Name}}Req(ctx{{ if $op.Request }}, request{{ end }}{{if $op.Params}}, params {{ end }}, p)
	if !p.IsAllowed(PrivId{{ $op.Name }}) {
		s.badRequest(ctx, w, span, otelAttrs, errors.New("ogen: {{ $op.Name }} is not allowed"))
		return
	}
	response, err := s.h.{{$op.Name}}(ctx{{ if $op.Request }}, request{{ end }}{{if $op.Params}}, params {{ end }})
	if err != nil {
		{{- /* It is not secure to expose internal error to client, but better than nothing. */ -}}
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		{{- if $.Error }}
		var errRes *{{ $.ErrorType.Go }}
		if errors.As(err, &errRes) {
			encodeErrorResponse(*errRes, w, span)
			return
		}
		if errors.Is(err, ht.ErrNotImplemented) {
			s.cfg.ErrorHandler(ctx, w, r, err)
			return
		}
		encodeErrorResponse(s.h.NewError(ctx, err), w, span)
		{{- else }}
		s.cfg.ErrorHandler(ctx, w, r, err)
        {{- end }}
		return
	}
	// Operation has data driven policy
	p = s.h.PolicyFor{{$op.Name}}Res(ctx, p{{ if $op.Request }}, request{{ end }}{{if $op.Params}}, params {{ end }}, response)
	if !p.IsAllowed(PrivId{{ $op.Name }}) {
		s.badRequest(ctx, w, span, otelAttrs, errors.New("ogen: Response {{ $op.Name }} is not allowed"))
		return
	}
	if err := encode{{ $op.Name }}Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}
{{ end }}

func (s *Server) badRequest(
	ctx context.Context,
	w http.ResponseWriter,
	r *http.Request,
	span trace.Span,
	otelAttrs []attribute.KeyValue,
	err error,
) {
	span.RecordError(err)
	span.SetStatus(codes.Error, "BadRequest")
	s.errors.Add(ctx, 1, otelAttrs...)
	s.cfg.ErrorHandler(ctx, w, r, err)
}
{{ end }}
