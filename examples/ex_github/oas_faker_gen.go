// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/jx"
)

// SetFake set fake values.
func (s *APIOverview) SetFake() {
	{
		{
			s.VerifiablePasswordAuthentication = true
		}
	}
	{
		{
			s.SSHKeyFingerprints.SetFake()
		}
	}
	{
		{
			s.Hooks = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Hooks = append(s.Hooks, elem)
			}
		}
	}
	{
		{
			s.Web = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Web = append(s.Web, elem)
			}
		}
	}
	{
		{
			s.API = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.API = append(s.API, elem)
			}
		}
	}
	{
		{
			s.Git = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Git = append(s.Git, elem)
			}
		}
	}
	{
		{
			s.Packages = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Packages = append(s.Packages, elem)
			}
		}
	}
	{
		{
			s.Pages = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Pages = append(s.Pages, elem)
			}
		}
	}
	{
		{
			s.Importer = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Importer = append(s.Importer, elem)
			}
		}
	}
	{
		{
			s.Actions = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Actions = append(s.Actions, elem)
			}
		}
	}
	{
		{
			s.Dependabot = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Dependabot = append(s.Dependabot, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *APIOverviewSSHKeyFingerprints) SetFake() {
	{
		{
			s.SHA256RSA.SetFake()
		}
	}
	{
		{
			s.SHA256DSA.SetFake()
		}
	}
	{
		{
			s.SHA256ECDSA.SetFake()
		}
	}
	{
		{
			s.SHA256ED25519.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Accepted) SetFake() {
}

// SetFake set fake values.
func (s *ActionsApproveWorkflowRunApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActionsApproveWorkflowRunApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActionsApproveWorkflowRunApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActionsApproveWorkflowRunApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ActionsBillingUsage) SetFake() {
	{
		{
			s.TotalMinutesUsed = int(0)
		}
	}
	{
		{
			s.TotalPaidMinutesUsed = int(0)
		}
	}
	{
		{
			s.IncludedMinutes = int(0)
		}
	}
	{
		{
			s.MinutesUsedBreakdown.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsBillingUsageMinutesUsedBreakdown) SetFake() {
	{
		{
			s.UBUNTU.SetFake()
		}
	}
	{
		{
			s.MACOS.SetFake()
		}
	}
	{
		{
			s.WINDOWS.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsCancelWorkflowRunAccepted) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) SetFake() {
	{
		{
			s.EncryptedValue = "string"
		}
	}
	{
		{
			s.KeyID = "string"
		}
	}
}

// SetFake set fake values.
func (s *ActionsCreateOrUpdateOrgSecretReq) SetFake() {
	{
		{
			s.EncryptedValue.SetFake()
		}
	}
	{
		{
			s.KeyID.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.SelectedRepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsCreateOrUpdateOrgSecretReqVisibility) SetFake() {
	*s = ActionsCreateOrUpdateOrgSecretReqVisibilityAll
}

// SetFake set fake values.
func (s *ActionsCreateOrUpdateRepoSecretCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ActionsCreateOrUpdateRepoSecretReq) SetFake() {
	{
		{
			s.EncryptedValue.SetFake()
		}
	}
	{
		{
			s.KeyID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.SelectedRepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
			}
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) SetFake() {
	*s = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected
}

// SetFake set fake values.
func (s *ActionsEnabled) SetFake() {
	var unwrapped bool
	{
		unwrapped = true
	}
	*s = ActionsEnabled(unwrapped)
}

// SetFake set fake values.
func (s *ActionsEnterprisePermissions) SetFake() {
	{
		{
			s.EnabledOrganizations.SetFake()
		}
	}
	{
		{
			s.SelectedOrganizationsURL.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
	{
		{
			s.SelectedActionsURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsListArtifactsForRepoOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Artifacts = nil
			for i := 0; i < 0; i++ {
				var elem Artifact
				{
					elem.SetFake()
				}
				s.Artifacts = append(s.Artifacts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListEnvironmentSecretsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Secrets = nil
			for i := 0; i < 0; i++ {
				var elem ActionsSecret
				{
					elem.SetFake()
				}
				s.Secrets = append(s.Secrets, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListJobsForWorkflowRunOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Jobs = nil
			for i := 0; i < 0; i++ {
				var elem Job
				{
					elem.SetFake()
				}
				s.Jobs = append(s.Jobs, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListOrgSecretsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Secrets = nil
			for i := 0; i < 0; i++ {
				var elem OrganizationActionsSecret
				{
					elem.SetFake()
				}
				s.Secrets = append(s.Secrets, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem MinimalRepository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListRepoSecretsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Secrets = nil
			for i := 0; i < 0; i++ {
				var elem ActionsSecret
				{
					elem.SetFake()
				}
				s.Secrets = append(s.Secrets, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListRepoWorkflowsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Workflows = nil
			for i := 0; i < 0; i++ {
				var elem Workflow
				{
					elem.SetFake()
				}
				s.Workflows = append(s.Workflows, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelectedReposForOrgSecretOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem MinimalRepository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.RunnerGroups = nil
			for i := 0; i < 0; i++ {
				var elem RunnerGroupsOrg
				{
					elem.SetFake()
				}
				s.RunnerGroups = append(s.RunnerGroups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelfHostedRunnersForOrgOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem Runner
				{
					elem.SetFake()
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelfHostedRunnersForRepoOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem Runner
				{
					elem.SetFake()
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem Runner
				{
					elem.SetFake()
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListWorkflowRunArtifactsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Artifacts = nil
			for i := 0; i < 0; i++ {
				var elem Artifact
				{
					elem.SetFake()
				}
				s.Artifacts = append(s.Artifacts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsListWorkflowRunsForRepoOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.WorkflowRuns = nil
			for i := 0; i < 0; i++ {
				var elem WorkflowRun
				{
					elem.SetFake()
				}
				s.WorkflowRuns = append(s.WorkflowRuns, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsOrganizationPermissions) SetFake() {
	{
		{
			s.EnabledRepositories.SetFake()
		}
	}
	{
		{
			s.SelectedRepositoriesURL.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
	{
		{
			s.SelectedActionsURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsPublicKey) SetFake() {
	{
		{
			s.KeyID = "string"
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsReRunWorkflowCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ActionsRepositoryPermissions) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
	{
		{
			s.SelectedActionsURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsRetryWorkflowCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ActionsReviewPendingDeploymentsForRunReq) SetFake() {
	{
		{
			s.EnvironmentIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.EnvironmentIds = append(s.EnvironmentIds, elem)
			}
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Comment = "string"
		}
	}
}

// SetFake set fake values.
func (s *ActionsReviewPendingDeploymentsForRunReqState) SetFake() {
	*s = ActionsReviewPendingDeploymentsForRunReqStateApproved
}

// SetFake set fake values.
func (s *ActionsSecret) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) SetFake() {
	{
		{
			s.EnabledRepositories.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) SetFake() {
	{
		{
			s.SelectedRepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetSelectedReposForOrgSecretReq) SetFake() {
	{
		{
			s.SelectedRepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) SetFake() {
	{
		{
			s.SelectedRepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedRepositoryIds = append(s.SelectedRepositoryIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgReq) SetFake() {
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) SetFake() {
	*s = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected
}

// SetFake set fake values.
func (s *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityDeleteThreadSubscriptionApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityDeleteThreadSubscriptionApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityGetThreadApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityGetThreadApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityGetThreadApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityGetThreadApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListNotificationsForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []Thread
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Thread
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ActivityListNotificationsForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListPublicEventsForRepoNetworkOKApplicationJSON) SetFake() {
	var unwrapped []Event
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Event
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ActivityListPublicEventsForRepoNetworkOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListPublicEventsOKApplicationJSON) SetFake() {
	var unwrapped []Event
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Event
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ActivityListPublicEventsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []Repository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Repository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ActivityListReposStarredByAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ActivityMarkNotificationsAsReadAccepted) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivityMarkNotificationsAsReadApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityMarkNotificationsAsReadApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityMarkNotificationsAsReadApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityMarkNotificationsAsReadApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityMarkNotificationsAsReadReq) SetFake() {
	{
		{
			s.LastReadAt.SetFake()
		}
	}
	{
		{
			s.Read.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivityMarkRepoNotificationsAsReadReq) SetFake() {
	{
		{
			s.LastReadAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivitySetRepoSubscriptionReq) SetFake() {
	{
		{
			s.Subscribed.SetFake()
		}
	}
	{
		{
			s.Ignored.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivitySetThreadSubscriptionApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivitySetThreadSubscriptionApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivitySetThreadSubscriptionApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivitySetThreadSubscriptionApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivitySetThreadSubscriptionReq) SetFake() {
	{
		{
			s.Ignored.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *Actor) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.DisplayLogin.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *AlertCreatedAt) SetFake() {
	var unwrapped time.Time
	{
		unwrapped = time.Now()
	}
	*s = AlertCreatedAt(unwrapped)
}

// SetFake set fake values.
func (s *AlertHTMLURL) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = AlertHTMLURL(unwrapped)
}

// SetFake set fake values.
func (s *AlertInstancesURL) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = AlertInstancesURL(unwrapped)
}

// SetFake set fake values.
func (s *AlertNumber) SetFake() {
	var unwrapped int
	{
		unwrapped = int(0)
	}
	*s = AlertNumber(unwrapped)
}

// SetFake set fake values.
func (s *AlertURL) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = AlertURL(unwrapped)
}

// SetFake set fake values.
func (s *AllowedActions) SetFake() {
	*s = AllowedActionsAll
}

// SetFake set fake values.
func (s *AppPermissions) SetFake() {
	{
		{
			s.Actions.SetFake()
		}
	}
	{
		{
			s.Administration.SetFake()
		}
	}
	{
		{
			s.Checks.SetFake()
		}
	}
	{
		{
			s.ContentReferences.SetFake()
		}
	}
	{
		{
			s.Contents.SetFake()
		}
	}
	{
		{
			s.Deployments.SetFake()
		}
	}
	{
		{
			s.Environments.SetFake()
		}
	}
	{
		{
			s.Issues.SetFake()
		}
	}
	{
		{
			s.Metadata.SetFake()
		}
	}
	{
		{
			s.Packages.SetFake()
		}
	}
	{
		{
			s.Pages.SetFake()
		}
	}
	{
		{
			s.PullRequests.SetFake()
		}
	}
	{
		{
			s.RepositoryHooks.SetFake()
		}
	}
	{
		{
			s.RepositoryProjects.SetFake()
		}
	}
	{
		{
			s.SecretScanningAlerts.SetFake()
		}
	}
	{
		{
			s.Secrets.SetFake()
		}
	}
	{
		{
			s.SecurityEvents.SetFake()
		}
	}
	{
		{
			s.SingleFile.SetFake()
		}
	}
	{
		{
			s.Statuses.SetFake()
		}
	}
	{
		{
			s.VulnerabilityAlerts.SetFake()
		}
	}
	{
		{
			s.Workflows.SetFake()
		}
	}
	{
		{
			s.Members.SetFake()
		}
	}
	{
		{
			s.OrganizationAdministration.SetFake()
		}
	}
	{
		{
			s.OrganizationHooks.SetFake()
		}
	}
	{
		{
			s.OrganizationPlan.SetFake()
		}
	}
	{
		{
			s.OrganizationProjects.SetFake()
		}
	}
	{
		{
			s.OrganizationPackages.SetFake()
		}
	}
	{
		{
			s.OrganizationSecrets.SetFake()
		}
	}
	{
		{
			s.OrganizationSelfHostedRunners.SetFake()
		}
	}
	{
		{
			s.OrganizationUserBlocking.SetFake()
		}
	}
	{
		{
			s.TeamDiscussions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AppPermissionsActions) SetFake() {
	*s = AppPermissionsActionsRead
}

// SetFake set fake values.
func (s *AppPermissionsAdministration) SetFake() {
	*s = AppPermissionsAdministrationRead
}

// SetFake set fake values.
func (s *AppPermissionsChecks) SetFake() {
	*s = AppPermissionsChecksRead
}

// SetFake set fake values.
func (s *AppPermissionsContentReferences) SetFake() {
	*s = AppPermissionsContentReferencesRead
}

// SetFake set fake values.
func (s *AppPermissionsContents) SetFake() {
	*s = AppPermissionsContentsRead
}

// SetFake set fake values.
func (s *AppPermissionsDeployments) SetFake() {
	*s = AppPermissionsDeploymentsRead
}

// SetFake set fake values.
func (s *AppPermissionsEnvironments) SetFake() {
	*s = AppPermissionsEnvironmentsRead
}

// SetFake set fake values.
func (s *AppPermissionsIssues) SetFake() {
	*s = AppPermissionsIssuesRead
}

// SetFake set fake values.
func (s *AppPermissionsMembers) SetFake() {
	*s = AppPermissionsMembersRead
}

// SetFake set fake values.
func (s *AppPermissionsMetadata) SetFake() {
	*s = AppPermissionsMetadataRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationAdministration) SetFake() {
	*s = AppPermissionsOrganizationAdministrationRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationHooks) SetFake() {
	*s = AppPermissionsOrganizationHooksRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationPackages) SetFake() {
	*s = AppPermissionsOrganizationPackagesRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationPlan) SetFake() {
	*s = AppPermissionsOrganizationPlanRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationProjects) SetFake() {
	*s = AppPermissionsOrganizationProjectsRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationSecrets) SetFake() {
	*s = AppPermissionsOrganizationSecretsRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationSelfHostedRunners) SetFake() {
	*s = AppPermissionsOrganizationSelfHostedRunnersRead
}

// SetFake set fake values.
func (s *AppPermissionsOrganizationUserBlocking) SetFake() {
	*s = AppPermissionsOrganizationUserBlockingRead
}

// SetFake set fake values.
func (s *AppPermissionsPackages) SetFake() {
	*s = AppPermissionsPackagesRead
}

// SetFake set fake values.
func (s *AppPermissionsPages) SetFake() {
	*s = AppPermissionsPagesRead
}

// SetFake set fake values.
func (s *AppPermissionsPullRequests) SetFake() {
	*s = AppPermissionsPullRequestsRead
}

// SetFake set fake values.
func (s *AppPermissionsRepositoryHooks) SetFake() {
	*s = AppPermissionsRepositoryHooksRead
}

// SetFake set fake values.
func (s *AppPermissionsRepositoryProjects) SetFake() {
	*s = AppPermissionsRepositoryProjectsRead
}

// SetFake set fake values.
func (s *AppPermissionsSecretScanningAlerts) SetFake() {
	*s = AppPermissionsSecretScanningAlertsRead
}

// SetFake set fake values.
func (s *AppPermissionsSecrets) SetFake() {
	*s = AppPermissionsSecretsRead
}

// SetFake set fake values.
func (s *AppPermissionsSecurityEvents) SetFake() {
	*s = AppPermissionsSecurityEventsRead
}

// SetFake set fake values.
func (s *AppPermissionsSingleFile) SetFake() {
	*s = AppPermissionsSingleFileRead
}

// SetFake set fake values.
func (s *AppPermissionsStatuses) SetFake() {
	*s = AppPermissionsStatusesRead
}

// SetFake set fake values.
func (s *AppPermissionsTeamDiscussions) SetFake() {
	*s = AppPermissionsTeamDiscussionsRead
}

// SetFake set fake values.
func (s *AppPermissionsVulnerabilityAlerts) SetFake() {
	*s = AppPermissionsVulnerabilityAlertsRead
}

// SetFake set fake values.
func (s *AppPermissionsWorkflows) SetFake() {
	*s = AppPermissionsWorkflowsWrite
}

// SetFake set fake values.
func (s *ApplicationGrant) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.App.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Scopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Scopes = append(s.Scopes, elem)
			}
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ApplicationGrantApp) SetFake() {
	{
		{
			s.ClientID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *AppsAddRepoToInstallationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsAddRepoToInstallationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsAddRepoToInstallationApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsAddRepoToInstallationApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsCheckTokenReq) SetFake() {
	{
		{
			s.AccessToken = "string"
		}
	}
}

// SetFake set fake values.
func (s *AppsCreateContentAttachmentApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateContentAttachmentApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateContentAttachmentApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateContentAttachmentApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateContentAttachmentApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateContentAttachmentApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateContentAttachmentReq) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *AppsCreateInstallationAccessTokenApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateInstallationAccessTokenApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateInstallationAccessTokenApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateInstallationAccessTokenApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateInstallationAccessTokenApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsCreateInstallationAccessTokenApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsCreateInstallationAccessTokenReq) SetFake() {
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.RepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RepositoryIds = append(s.RepositoryIds, elem)
			}
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AppsDeleteAuthorizationReq) SetFake() {
	{
		{
			s.AccessToken = "string"
		}
	}
}

// SetFake set fake values.
func (s *AppsDeleteTokenReq) SetFake() {
	{
		{
			s.AccessToken = "string"
		}
	}
}

// SetFake set fake values.
func (s *AppsGetBySlugApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsGetBySlugApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsGetBySlugApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsGetBySlugApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsGetSubscriptionPlanForAccountApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsGetSubscriptionPlanForAccountApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsListAccountsForPlanApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListAccountsForPlanApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsListAccountsForPlanApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListAccountsForPlanApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsListAccountsForPlanOKApplicationJSON) SetFake() {
	var unwrapped []MarketplacePurchase
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MarketplacePurchase
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListAccountsForPlanOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListAccountsForPlanStubbedOKApplicationJSON) SetFake() {
	var unwrapped []MarketplacePurchase
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MarketplacePurchase
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListAccountsForPlanStubbedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsListInstallationReposForAuthenticatedUserOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.RepositorySelection.SetFake()
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *AppsListPlansApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListPlansApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsListPlansApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListPlansApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsListPlansOKApplicationJSON) SetFake() {
	var unwrapped []MarketplaceListingPlan
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MarketplaceListingPlan
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListPlansOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListPlansStubbedOKApplicationJSON) SetFake() {
	var unwrapped []MarketplaceListingPlan
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MarketplaceListingPlan
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListPlansStubbedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListReposAccessibleToInstallationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListReposAccessibleToInstallationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsListReposAccessibleToInstallationApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListReposAccessibleToInstallationApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsListReposAccessibleToInstallationOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.RepositorySelection.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []UserMarketplacePurchase
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem UserMarketplacePurchase
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) SetFake() {
	var unwrapped []UserMarketplacePurchase
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem UserMarketplacePurchase
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsListWebhookDeliveriesOKApplicationJSON) SetFake() {
	var unwrapped []HookDeliveryItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem HookDeliveryItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = AppsListWebhookDeliveriesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *AppsRemoveRepoFromInstallationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsRemoveRepoFromInstallationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsRemoveRepoFromInstallationApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsRemoveRepoFromInstallationApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsResetTokenReq) SetFake() {
	{
		{
			s.AccessToken = "string"
		}
	}
}

// SetFake set fake values.
func (s *AppsScopeTokenApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsScopeTokenApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *AppsScopeTokenApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsScopeTokenApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *AppsScopeTokenApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = AppsScopeTokenApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *AppsScopeTokenReq) SetFake() {
	{
		{
			s.AccessToken = "string"
		}
	}
	{
		{
			s.Target.SetFake()
		}
	}
	{
		{
			s.TargetID.SetFake()
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.RepositoryIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RepositoryIds = append(s.RepositoryIds, elem)
			}
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AppsUpdateWebhookConfigForAppReq) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Artifact) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.SizeInBytes = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.ArchiveDownloadURL = "string"
		}
	}
	{
		{
			s.Expired = true
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.ExpiresAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AuditLogEvent) SetFake() {
	{
		{
			s.Timestamp.SetFake()
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
	{
		{
			s.ActiveWas.SetFake()
		}
	}
	{
		{
			s.Actor.SetFake()
		}
	}
	{
		{
			s.ActorID.SetFake()
		}
	}
	{
		{
			s.ActorLocation.SetFake()
		}
	}
	{
		{
			s.Data.SetFake()
		}
	}
	{
		{
			s.OrgID.SetFake()
		}
	}
	{
		{
			s.BlockedUser.SetFake()
		}
	}
	{
		{
			s.Business.SetFake()
		}
	}
	{
		{
			s.Config = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Config = append(s.Config, elem)
			}
		}
	}
	{
		{
			s.ConfigWas = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.ConfigWas = append(s.ConfigWas, elem)
			}
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.DeployKeyFingerprint.SetFake()
		}
	}
	{
		{
			s.DocumentID.SetFake()
		}
	}
	{
		{
			s.Emoji.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.EventsWere = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.EventsWere = append(s.EventsWere, elem)
			}
		}
	}
	{
		{
			s.Explanation.SetFake()
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
	{
		{
			s.HookID.SetFake()
		}
	}
	{
		{
			s.LimitedAvailability.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.OldUser.SetFake()
		}
	}
	{
		{
			s.OpensshPublicKey.SetFake()
		}
	}
	{
		{
			s.Org.SetFake()
		}
	}
	{
		{
			s.PreviousVisibility.SetFake()
		}
	}
	{
		{
			s.ReadOnly.SetFake()
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.RepositoryPublic.SetFake()
		}
	}
	{
		{
			s.TargetLogin.SetFake()
		}
	}
	{
		{
			s.Team.SetFake()
		}
	}
	{
		{
			s.TransportProtocol.SetFake()
		}
	}
	{
		{
			s.TransportProtocolName.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AuditLogEventActorLocation) SetFake() {
	{
		{
			s.CountryName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AuditLogEventData) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *AuthenticationToken) SetFake() {
	{
		{
			s.Token = "string"
		}
	}
	{
		{
			s.ExpiresAt = time.Now()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.Permissions = nil
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.SingleFile.SetFake()
		}
	}
	{
		{
			s.RepositorySelection.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AuthenticationTokenPermissions) SetFake() {
}

// SetFake set fake values.
func (s *AuthenticationTokenRepositorySelection) SetFake() {
	*s = AuthenticationTokenRepositorySelectionAll
}

// SetFake set fake values.
func (s *AuthorAssociation) SetFake() {
	*s = AuthorAssociationCOLLABORATOR
}

// SetFake set fake values.
func (s *Authorization) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Scopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Scopes = append(s.Scopes, elem)
			}
		}
	}
	{
		{
			s.Token = "string"
		}
	}
	{
		{
			s.TokenLastEight.SetFake()
		}
	}
	{
		{
			s.HashedToken.SetFake()
		}
	}
	{
		{
			s.App.SetFake()
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.NoteURL.SetFake()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Installation.SetFake()
		}
	}
	{
		{
			s.ExpiresAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AuthorizationApp) SetFake() {
	{
		{
			s.ClientID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *AutoMerge) SetFake() {
	{
		{
			s.EnabledBy.SetFake()
		}
	}
	{
		{
			s.MergeMethod.SetFake()
		}
	}
	{
		{
			s.CommitTitle = "string"
		}
	}
	{
		{
			s.CommitMessage = "string"
		}
	}
}

// SetFake set fake values.
func (s *AutoMergeMergeMethod) SetFake() {
	*s = AutoMergeMergeMethodMerge
}

// SetFake set fake values.
func (s *Autolink) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.KeyPrefix = "string"
		}
	}
	{
		{
			s.URLTemplate = "string"
		}
	}
}

// SetFake set fake values.
func (s *BaseGist) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommitsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.GitPullURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitPushURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Files.SetFake()
		}
	}
	{
		{
			s.Public = true
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Truncated.SetFake()
		}
	}
	{
		{
			s.Forks = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Forks = append(s.Forks, elem)
			}
		}
	}
	{
		{
			s.History = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.History = append(s.History, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *BaseGistFiles) SetFake() {
	var (
		elem BaseGistFilesItem
		m    map[string]BaseGistFilesItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *BaseGistFilesItem) SetFake() {
	{
		{
			s.Filename.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.RawURL.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BasicError) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Blob) SetFake() {
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Encoding = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HighlightedContent.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtection) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Enabled.SetFake()
		}
	}
	{
		{
			s.RequiredStatusChecks.SetFake()
		}
	}
	{
		{
			s.EnforceAdmins.SetFake()
		}
	}
	{
		{
			s.RequiredPullRequestReviews.SetFake()
		}
	}
	{
		{
			s.Restrictions.SetFake()
		}
	}
	{
		{
			s.RequiredLinearHistory.SetFake()
		}
	}
	{
		{
			s.AllowForcePushes.SetFake()
		}
	}
	{
		{
			s.AllowDeletions.SetFake()
		}
	}
	{
		{
			s.RequiredConversationResolution.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.ProtectionURL.SetFake()
		}
	}
	{
		{
			s.RequiredSignatures.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionAllowDeletions) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionAllowForcePushes) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionRequiredConversationResolution) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionRequiredLinearHistory) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionRequiredSignatures) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Enabled = true
		}
	}
}

// SetFake set fake values.
func (s *BranchProtectionRequiredStatusChecks) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.EnforcementLevel.SetFake()
		}
	}
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
	{
		{
			s.ContextsURL.SetFake()
		}
	}
	{
		{
			s.Strict.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicy) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.UsersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AppsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem BranchRestrictionPolicyUsersItem
				{
					elem.SetFake()
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem BranchRestrictionPolicyTeamsItem
				{
					elem.SetFake()
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
	{
		{
			s.Apps = nil
			for i := 0; i < 0; i++ {
				var elem BranchRestrictionPolicyAppsItem
				{
					elem.SetFake()
				}
				s.Apps = append(s.Apps, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicyAppsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Slug.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.ExternalURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicyAppsItemOwner) SetFake() {
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ReposURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.HooksURL.SetFake()
		}
	}
	{
		{
			s.IssuesURL.SetFake()
		}
	}
	{
		{
			s.MembersURL.SetFake()
		}
	}
	{
		{
			s.PublicMembersURL.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.FollowersURL.SetFake()
		}
	}
	{
		{
			s.FollowingURL.SetFake()
		}
	}
	{
		{
			s.GistsURL.SetFake()
		}
	}
	{
		{
			s.StarredURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionsURL.SetFake()
		}
	}
	{
		{
			s.OrganizationsURL.SetFake()
		}
	}
	{
		{
			s.ReceivedEventsURL.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.SiteAdmin.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicyAppsItemPermissions) SetFake() {
	{
		{
			s.Metadata.SetFake()
		}
	}
	{
		{
			s.Contents.SetFake()
		}
	}
	{
		{
			s.Issues.SetFake()
		}
	}
	{
		{
			s.SingleFile.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicyTeamsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Slug.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission.SetFake()
		}
	}
	{
		{
			s.MembersURL.SetFake()
		}
	}
	{
		{
			s.RepositoriesURL.SetFake()
		}
	}
	{
		{
			s.Parent.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchRestrictionPolicyUsersItem) SetFake() {
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.FollowersURL.SetFake()
		}
	}
	{
		{
			s.FollowingURL.SetFake()
		}
	}
	{
		{
			s.GistsURL.SetFake()
		}
	}
	{
		{
			s.StarredURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionsURL.SetFake()
		}
	}
	{
		{
			s.OrganizationsURL.SetFake()
		}
	}
	{
		{
			s.ReposURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ReceivedEventsURL.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.SiteAdmin.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchShort) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.Protected = true
		}
	}
}

// SetFake set fake values.
func (s *BranchShortCommit) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
}

// SetFake set fake values.
func (s *BranchWithProtection) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Protected = true
		}
	}
	{
		{
			s.Protection.SetFake()
		}
	}
	{
		{
			s.ProtectionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Pattern.SetFake()
		}
	}
	{
		{
			s.RequiredApprovingReviewCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *BranchWithProtectionLinks) SetFake() {
	{
		{
			s.HTML = "string"
		}
	}
	{
		{
			s.Self = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *CheckAnnotation) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.StartLine = int(0)
		}
	}
	{
		{
			s.EndLine = int(0)
		}
	}
	{
		{
			s.StartColumn.SetFake()
		}
	}
	{
		{
			s.EndColumn.SetFake()
		}
	}
	{
		{
			s.AnnotationLevel.SetFake()
		}
	}
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.RawDetails.SetFake()
		}
	}
	{
		{
			s.BlobHref = "string"
		}
	}
}

// SetFake set fake values.
func (s *CheckRun) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.HeadSha = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.ExternalID.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.DetailsURL.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Conclusion.SetFake()
		}
	}
	{
		{
			s.StartedAt.SetFake()
		}
	}
	{
		{
			s.CompletedAt.SetFake()
		}
	}
	{
		{
			s.Output.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.CheckSuite.SetFake()
		}
	}
	{
		{
			s.App.SetFake()
		}
	}
	{
		{
			s.PullRequests = nil
			for i := 0; i < 0; i++ {
				var elem PullRequestMinimal
				{
					elem.SetFake()
				}
				s.PullRequests = append(s.PullRequests, elem)
			}
		}
	}
	{
		{
			s.Deployment.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CheckRunCheckSuite) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
}

// SetFake set fake values.
func (s *CheckRunConclusion) SetFake() {
	*s = CheckRunConclusionSuccess
}

// SetFake set fake values.
func (s *CheckRunOutput) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Summary.SetFake()
		}
	}
	{
		{
			s.Text.SetFake()
		}
	}
	{
		{
			s.AnnotationsCount = int(0)
		}
	}
	{
		{
			s.AnnotationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *CheckRunStatus) SetFake() {
	*s = CheckRunStatusQueued
}

// SetFake set fake values.
func (s *CheckSuite) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HeadBranch.SetFake()
		}
	}
	{
		{
			s.HeadSha = "string"
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Conclusion.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Before.SetFake()
		}
	}
	{
		{
			s.After.SetFake()
		}
	}
	{
		{
			s.PullRequests = nil
			for i := 0; i < 0; i++ {
				var elem PullRequestMinimal
				{
					elem.SetFake()
				}
				s.PullRequests = append(s.PullRequests, elem)
			}
		}
	}
	{
		{
			s.App.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.HeadCommit.SetFake()
		}
	}
	{
		{
			s.LatestCheckRunsCount = int(0)
		}
	}
	{
		{
			s.CheckRunsURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *CheckSuiteConclusion) SetFake() {
	*s = CheckSuiteConclusionSuccess
}

// SetFake set fake values.
func (s *CheckSuitePreference) SetFake() {
	{
		{
			s.Preferences.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CheckSuitePreferencePreferences) SetFake() {
	{
		{
			s.AutoTriggerChecks = nil
			for i := 0; i < 0; i++ {
				var elem CheckSuitePreferencePreferencesAutoTriggerChecksItem
				{
					elem.SetFake()
				}
				s.AutoTriggerChecks = append(s.AutoTriggerChecks, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) SetFake() {
	{
		{
			s.AppID = int(0)
		}
	}
	{
		{
			s.Setting = true
		}
	}
}

// SetFake set fake values.
func (s *CheckSuiteStatus) SetFake() {
	*s = CheckSuiteStatusQueued
}

// SetFake set fake values.
func (s *ChecksCreateSuiteApplicationJSONCreated) SetFake() {
	var unwrapped CheckSuite
	{
		unwrapped.SetFake()
	}
	*s = ChecksCreateSuiteApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ChecksCreateSuiteApplicationJSONOK) SetFake() {
	var unwrapped CheckSuite
	{
		unwrapped.SetFake()
	}
	*s = ChecksCreateSuiteApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ChecksCreateSuiteReq) SetFake() {
	{
		{
			s.HeadSha = "string"
		}
	}
}

// SetFake set fake values.
func (s *ChecksListForRefOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.CheckRuns = nil
			for i := 0; i < 0; i++ {
				var elem CheckRun
				{
					elem.SetFake()
				}
				s.CheckRuns = append(s.CheckRuns, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ChecksListForSuiteOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.CheckRuns = nil
			for i := 0; i < 0; i++ {
				var elem CheckRun
				{
					elem.SetFake()
				}
				s.CheckRuns = append(s.CheckRuns, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ChecksListSuitesForRefOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.CheckSuites = nil
			for i := 0; i < 0; i++ {
				var elem CheckSuite
				{
					elem.SetFake()
				}
				s.CheckSuites = append(s.CheckSuites, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ChecksRerequestSuiteCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ChecksSetSuitesPreferencesReq) SetFake() {
	{
		{
			s.AutoTriggerChecks = nil
			for i := 0; i < 0; i++ {
				var elem ChecksSetSuitesPreferencesReqAutoTriggerChecksItem
				{
					elem.SetFake()
				}
				s.AutoTriggerChecks = append(s.AutoTriggerChecks, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) SetFake() {
	{
		{
			s.AppID = int(0)
		}
	}
	{
		{
			s.Setting = true
		}
	}
}

// SetFake set fake values.
func (s *CloneTraffic) SetFake() {
	{
		{
			s.Count = int(0)
		}
	}
	{
		{
			s.Uniques = int(0)
		}
	}
	{
		{
			s.Clones = nil
			for i := 0; i < 0; i++ {
				var elem Traffic
				{
					elem.SetFake()
				}
				s.Clones = append(s.Clones, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CodeFrequencyStat) SetFake() {
	var unwrapped []int
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem int
			{
				elem = int(0)
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = CodeFrequencyStat(unwrapped)
}

// SetFake set fake values.
func (s *CodeOfConduct) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeOfConductSimple) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlert) SetFake() {
	{
		{
			s.Number.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Instances = []byte("null")
		}
	}
	{
		{
			s.InstancesURL.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.DismissedBy.SetFake()
		}
	}
	{
		{
			s.DismissedAt.SetFake()
		}
	}
	{
		{
			s.DismissedReason.SetFake()
		}
	}
	{
		{
			s.Rule.SetFake()
		}
	}
	{
		{
			s.Tool.SetFake()
		}
	}
	{
		{
			s.MostRecentInstance.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertClassification) SetFake() {
	*s = CodeScanningAlertClassificationSource
}

// SetFake set fake values.
func (s *CodeScanningAlertDismissedAt) SetFake() {
	var unwrapped time.Time
	{
		unwrapped = time.Now()
	}
	*s = CodeScanningAlertDismissedAt(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAlertDismissedReason) SetFake() {
	*s = CodeScanningAlertDismissedReasonFalsePositive
}

// SetFake set fake values.
func (s *CodeScanningAlertEnvironment) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAlertEnvironment(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAlertInstance) SetFake() {
	{
		{
			s.Ref.SetFake()
		}
	}
	{
		{
			s.AnalysisKey.SetFake()
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.Category.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.CommitSha.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Classifications = nil
			for i := 0; i < 0; i++ {
				var elem CodeScanningAlertClassification
				{
					elem.SetFake()
				}
				s.Classifications = append(s.Classifications, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertInstanceMessage) SetFake() {
	{
		{
			s.Text.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertItems) SetFake() {
	{
		{
			s.Number.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.InstancesURL.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.DismissedBy.SetFake()
		}
	}
	{
		{
			s.DismissedAt.SetFake()
		}
	}
	{
		{
			s.DismissedReason.SetFake()
		}
	}
	{
		{
			s.Rule.SetFake()
		}
	}
	{
		{
			s.Tool.SetFake()
		}
	}
	{
		{
			s.MostRecentInstance.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertLocation) SetFake() {
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.StartLine.SetFake()
		}
	}
	{
		{
			s.EndLine.SetFake()
		}
	}
	{
		{
			s.StartColumn.SetFake()
		}
	}
	{
		{
			s.EndColumn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertRule) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Severity.SetFake()
		}
	}
	{
		{
			s.SecuritySeverityLevel.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.FullDescription.SetFake()
		}
	}
	{
		{
			s.Tags.SetFake()
		}
	}
	{
		{
			s.Help.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertRuleSecuritySeverityLevel) SetFake() {
	*s = CodeScanningAlertRuleSecuritySeverityLevelLow
}

// SetFake set fake values.
func (s *CodeScanningAlertRuleSeverity) SetFake() {
	*s = CodeScanningAlertRuleSeverityNone
}

// SetFake set fake values.
func (s *CodeScanningAlertRuleSummary) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Severity.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAlertRuleSummarySeverity) SetFake() {
	*s = CodeScanningAlertRuleSummarySeverityNone
}

// SetFake set fake values.
func (s *CodeScanningAlertSetState) SetFake() {
	*s = CodeScanningAlertSetStateOpen
}

// SetFake set fake values.
func (s *CodeScanningAlertState) SetFake() {
	*s = CodeScanningAlertStateOpen
}

// SetFake set fake values.
func (s *CodeScanningAnalysis) SetFake() {
	{
		{
			s.Ref.SetFake()
		}
	}
	{
		{
			s.CommitSha.SetFake()
		}
	}
	{
		{
			s.AnalysisKey.SetFake()
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.Category.SetFake()
		}
	}
	{
		{
			s.Error = "string"
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.ResultsCount = int(0)
		}
	}
	{
		{
			s.RulesCount = int(0)
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.SarifID.SetFake()
		}
	}
	{
		{
			s.Tool.SetFake()
		}
	}
	{
		{
			s.Deletable = true
		}
	}
	{
		{
			s.Warning = "string"
		}
	}
	{
		{
			s.ToolName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAnalysisAnalysisKey) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisAnalysisKey(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisCategory) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisCategory(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisCommitSha) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisCommitSha(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisCreatedAt) SetFake() {
	var unwrapped time.Time
	{
		unwrapped = time.Now()
	}
	*s = CodeScanningAnalysisCreatedAt(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisDeletion) SetFake() {
	{
		{
			s.NextAnalysisURL.SetFake()
		}
	}
	{
		{
			s.ConfirmDeleteURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAnalysisEnvironment) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisEnvironment(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisSarifFile) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisSarifFile(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisSarifID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisSarifID(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisTool) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Version.SetFake()
		}
	}
	{
		{
			s.GUID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningAnalysisToolGUID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisToolGUID(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisToolName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisToolName(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisToolVersion) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningAnalysisToolVersion(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningAnalysisURL) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = CodeScanningAnalysisURL(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningDeleteAnalysisApplicationJSONBadRequest) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningDeleteAnalysisApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningDeleteAnalysisApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningDeleteAnalysisApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningDeleteAnalysisApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningDeleteAnalysisApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningGetAlertApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningGetAlertApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningGetAlertApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningGetAlertApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningGetAnalysisApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningGetAnalysisApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningGetAnalysisApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningGetAnalysisApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertInstancesApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListAlertInstancesApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertInstancesApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListAlertInstancesApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertInstancesOKApplicationJSON) SetFake() {
	var unwrapped []CodeScanningAlertInstance
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeScanningAlertInstance
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = CodeScanningListAlertInstancesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertsForRepoApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListAlertsForRepoApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertsForRepoApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListAlertsForRepoApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListAlertsForRepoOKApplicationJSON) SetFake() {
	var unwrapped []CodeScanningAlertItems
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeScanningAlertItems
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = CodeScanningListAlertsForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListRecentAnalysesApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListRecentAnalysesApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListRecentAnalysesApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningListRecentAnalysesApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningListRecentAnalysesOKApplicationJSON) SetFake() {
	var unwrapped []CodeScanningAnalysis
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeScanningAnalysis
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = CodeScanningListRecentAnalysesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningRef) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CodeScanningRef(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningSarifsReceipt) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningSarifsStatus) SetFake() {
	{
		{
			s.ProcessingStatus.SetFake()
		}
	}
	{
		{
			s.AnalysesURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningSarifsStatusProcessingStatus) SetFake() {
	*s = CodeScanningSarifsStatusProcessingStatusPending
}

// SetFake set fake values.
func (s *CodeScanningUpdateAlertApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningUpdateAlertApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningUpdateAlertApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningUpdateAlertApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningUpdateAlertReq) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.DismissedReason.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeScanningUploadSarifApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningUploadSarifApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningUploadSarifApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = CodeScanningUploadSarifApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *CodeScanningUploadSarifReq) SetFake() {
	{
		{
			s.CommitSha.SetFake()
		}
	}
	{
		{
			s.Ref.SetFake()
		}
	}
	{
		{
			s.Sarif.SetFake()
		}
	}
	{
		{
			s.CheckoutURI.SetFake()
		}
	}
	{
		{
			s.StartedAt.SetFake()
		}
	}
	{
		{
			s.ToolName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CodeSearchResultItem) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.FileSize.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.LastModifiedAt.SetFake()
		}
	}
	{
		{
			s.LineNumbers = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.LineNumbers = append(s.LineNumbers, elem)
			}
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
}

// SetFake set fake values.
func (s *CodesOfConductGetAllCodesOfConductOKApplicationJSON) SetFake() {
	var unwrapped []CodeOfConduct
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeOfConduct
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = CodesOfConductGetAllCodesOfConductOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *Collaborator) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CollaboratorPermissions) SetFake() {
	{
		{
			s.Pull = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Admin = true
		}
	}
}

// SetFake set fake values.
func (s *CombinedBillingUsage) SetFake() {
	{
		{
			s.DaysLeftInBillingCycle = int(0)
		}
	}
	{
		{
			s.EstimatedPaidStorageForMonth = int(0)
		}
	}
	{
		{
			s.EstimatedStorageForMonth = int(0)
		}
	}
}

// SetFake set fake values.
func (s *CombinedCommitStatus) SetFake() {
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Statuses = nil
			for i := 0; i < 0; i++ {
				var elem SimpleCommitStatus
				{
					elem.SetFake()
				}
				s.Statuses = append(s.Statuses, elem)
			}
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.CommitURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *Commit) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Parents = nil
			for i := 0; i < 0; i++ {
				var elem CommitParentsItem
				{
					elem.SetFake()
				}
				s.Parents = append(s.Parents, elem)
			}
		}
	}
	{
		{
			s.Stats.SetFake()
		}
	}
	{
		{
			s.Files = nil
			for i := 0; i < 0; i++ {
				var elem CommitFilesItem
				{
					elem.SetFake()
				}
				s.Files = append(s.Files, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CommitActivity) SetFake() {
	{
		{
			s.Days = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Days = append(s.Days, elem)
			}
		}
	}
	{
		{
			s.Total = int(0)
		}
	}
	{
		{
			s.Week = int(0)
		}
	}
}

// SetFake set fake values.
func (s *CommitComment) SetFake() {
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Position.SetFake()
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
	{
		{
			s.CommitID = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitCommit) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.CommentCount = int(0)
		}
	}
	{
		{
			s.Tree.SetFake()
		}
	}
	{
		{
			s.Verification.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitCommitTree) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *CommitComparison) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PermalinkURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DiffURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PatchURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.BaseCommit.SetFake()
		}
	}
	{
		{
			s.MergeBaseCommit.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.AheadBy = int(0)
		}
	}
	{
		{
			s.BehindBy = int(0)
		}
	}
	{
		{
			s.TotalCommits = int(0)
		}
	}
	{
		{
			s.Commits = nil
			for i := 0; i < 0; i++ {
				var elem Commit
				{
					elem.SetFake()
				}
				s.Commits = append(s.Commits, elem)
			}
		}
	}
	{
		{
			s.Files = nil
			for i := 0; i < 0; i++ {
				var elem DiffEntry
				{
					elem.SetFake()
				}
				s.Files = append(s.Files, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CommitComparisonStatus) SetFake() {
	*s = CommitComparisonStatusDiverged
}

// SetFake set fake values.
func (s *CommitFilesItem) SetFake() {
	{
		{
			s.Filename.SetFake()
		}
	}
	{
		{
			s.Additions.SetFake()
		}
	}
	{
		{
			s.Deletions.SetFake()
		}
	}
	{
		{
			s.Changes.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.RawURL.SetFake()
		}
	}
	{
		{
			s.BlobURL.SetFake()
		}
	}
	{
		{
			s.Patch.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.ContentsURL.SetFake()
		}
	}
	{
		{
			s.PreviousFilename.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitParentsItem) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitSearchResultItem) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Parents = nil
			for i := 0; i < 0; i++ {
				var elem CommitSearchResultItemParentsItem
				{
					elem.SetFake()
				}
				s.Parents = append(s.Parents, elem)
			}
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
}

// SetFake set fake values.
func (s *CommitSearchResultItemCommit) SetFake() {
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.CommentCount = int(0)
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Tree.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Verification.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitSearchResultItemCommitAuthor) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Date = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *CommitSearchResultItemCommitTree) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *CommitSearchResultItemParentsItem) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommitStats) SetFake() {
	{
		{
			s.Additions.SetFake()
		}
	}
	{
		{
			s.Deletions.SetFake()
		}
	}
	{
		{
			s.Total.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommunityProfile) SetFake() {
	{
		{
			s.HealthPercentage = int(0)
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Documentation.SetFake()
		}
	}
	{
		{
			s.Files.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.ContentReportsEnabled.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CommunityProfileFiles) SetFake() {
	{
		{
			s.CodeOfConduct.SetFake()
		}
	}
	{
		{
			s.CodeOfConductFile.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Contributing.SetFake()
		}
	}
	{
		{
			s.Readme.SetFake()
		}
	}
	{
		{
			s.IssueTemplate.SetFake()
		}
	}
	{
		{
			s.PullRequestTemplate.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ContentFile) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Encoding = "string"
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.DownloadURL.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.Target.SetFake()
		}
	}
	{
		{
			s.SubmoduleGitURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ContentFileLinks) SetFake() {
	{
		{
			s.Git.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.Self = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *ContentReferenceAttachment) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ContentTraffic) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Count = int(0)
		}
	}
	{
		{
			s.Uniques = int(0)
		}
	}
}

// SetFake set fake values.
func (s *Contributor) SetFake() {
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.FollowersURL.SetFake()
		}
	}
	{
		{
			s.FollowingURL.SetFake()
		}
	}
	{
		{
			s.GistsURL.SetFake()
		}
	}
	{
		{
			s.StarredURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionsURL.SetFake()
		}
	}
	{
		{
			s.OrganizationsURL.SetFake()
		}
	}
	{
		{
			s.ReposURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ReceivedEventsURL.SetFake()
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin.SetFake()
		}
	}
	{
		{
			s.Contributions = int(0)
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ContributorActivity) SetFake() {
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Total = int(0)
		}
	}
	{
		{
			s.Weeks = nil
			for i := 0; i < 0; i++ {
				var elem ContributorActivityWeeksItem
				{
					elem.SetFake()
				}
				s.Weeks = append(s.Weeks, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ContributorActivityWeeksItem) SetFake() {
	{
		{
			s.W.SetFake()
		}
	}
	{
		{
			s.A.SetFake()
		}
	}
	{
		{
			s.D.SetFake()
		}
	}
	{
		{
			s.C.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CredentialAuthorization) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.CredentialID = int(0)
		}
	}
	{
		{
			s.CredentialType = "string"
		}
	}
	{
		{
			s.TokenLastEight.SetFake()
		}
	}
	{
		{
			s.CredentialAuthorizedAt = time.Now()
		}
	}
	{
		{
			s.Scopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Scopes = append(s.Scopes, elem)
			}
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
	{
		{
			s.CredentialAccessedAt.SetFake()
		}
	}
	{
		{
			s.AuthorizedCredentialID.SetFake()
		}
	}
	{
		{
			s.AuthorizedCredentialTitle.SetFake()
		}
	}
	{
		{
			s.AuthorizedCredentialNote.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DeployKey) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Verified = true
		}
	}
	{
		{
			s.CreatedAt = "string"
		}
	}
	{
		{
			s.ReadOnly = true
		}
	}
}

// SetFake set fake values.
func (s *Deployment) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Task = "string"
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
	{
		{
			s.OriginalEnvironment.SetFake()
		}
	}
	{
		{
			s.Environment = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.StatusesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TransientEnvironment.SetFake()
		}
	}
	{
		{
			s.ProductionEnvironment.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DeploymentPayload) SetFake() {
	var elem DeploymentPayload0

	{
		elem.SetFake()
	}
	s.SetDeploymentPayload0(elem)
}

// SetFake set fake values.
func (s *DeploymentPayload0) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *DeploymentSimple) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Task = "string"
		}
	}
	{
		{
			s.OriginalEnvironment.SetFake()
		}
	}
	{
		{
			s.Environment = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.StatusesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TransientEnvironment.SetFake()
		}
	}
	{
		{
			s.ProductionEnvironment.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DeploymentStatus) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.TargetURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.DeploymentURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EnvironmentURL.SetFake()
		}
	}
	{
		{
			s.LogURL.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DeploymentStatusState) SetFake() {
	*s = DeploymentStatusStateError
}

// SetFake set fake values.
func (s *DiffEntry) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Filename = "string"
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Additions = int(0)
		}
	}
	{
		{
			s.Deletions = int(0)
		}
	}
	{
		{
			s.Changes = int(0)
		}
	}
	{
		{
			s.BlobURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RawURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ContentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Patch.SetFake()
		}
	}
	{
		{
			s.PreviousFilename.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DiffEntryStatus) SetFake() {
	*s = DiffEntryStatusAdded
}

// SetFake set fake values.
func (s *Email) SetFake() {
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Primary = true
		}
	}
	{
		{
			s.Verified = true
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EmojisGetOK) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *EmptyObject) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *EnabledOrganizations) SetFake() {
	*s = EnabledOrganizationsAll
}

// SetFake set fake values.
func (s *EnabledRepositories) SetFake() {
	*s = EnabledRepositoriesAll
}

// SetFake set fake values.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.SelectedOrganizationIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
			}
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetFake() {
	*s = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected
}

// SetFake set fake values.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Organizations = nil
			for i := 0; i < 0; i++ {
				var elem OrganizationSimple
				{
					elem.SetFake()
				}
				s.Organizations = append(s.Organizations, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Organizations = nil
			for i := 0; i < 0; i++ {
				var elem OrganizationSimple
				{
					elem.SetFake()
				}
				s.Organizations = append(s.Organizations, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.RunnerGroups = nil
			for i := 0; i < 0; i++ {
				var elem RunnerGroupsEnterprise
				{
					elem.SetFake()
				}
				s.RunnerGroups = append(s.RunnerGroups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) SetFake() {
	{
		{
			s.TotalCount.SetFake()
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem Runner
				{
					elem.SetFake()
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) SetFake() {
	{
		{
			s.TotalCount = float64(0)
		}
	}
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem Runner
				{
					elem.SetFake()
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.DisplayName = "string"
		}
	}
	{
		{
			s.Members = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem
				{
					elem.SetFake()
				}
				s.Members = append(s.Members, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) SetFake() {
	{
		{
			s.Value = "string"
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.UserName = "string"
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem
				{
					elem.SetFake()
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) SetFake() {
	{
		{
			s.Value = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Primary = true
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) SetFake() {
	{
		{
			s.GivenName = "string"
		}
	}
	{
		{
			s.FamilyName = "string"
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) SetFake() {
	{
		{
			s.EnabledOrganizations.SetFake()
		}
	}
	{
		{
			s.AllowedActions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.DisplayName = "string"
		}
	}
	{
		{
			s.Members = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem
				{
					elem.SetFake()
				}
				s.Members = append(s.Members, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) SetFake() {
	{
		{
			s.Value = "string"
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.UserName = "string"
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem
				{
					elem.SetFake()
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) SetFake() {
	{
		{
			s.Value = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Primary = true
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) SetFake() {
	{
		{
			s.GivenName = "string"
		}
	}
	{
		{
			s.FamilyName = "string"
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) SetFake() {
	{
		{
			s.SelectedOrganizationIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) SetFake() {
	{
		{
			s.SelectedOrganizationIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.SelectedOrganizationIds = append(s.SelectedOrganizationIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) SetFake() {
	{
		{
			s.Runners = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Runners = append(s.Runners, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.Operations = nil
			for i := 0; i < 1; i++ {
				var elem EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem
				{
					elem.SetFake()
				}
				s.Operations = append(s.Operations, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) SetFake() {
	{
		{
			s.Op.SetFake()
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp) SetFake() {
	*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1) SetFake() {
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.Operations = nil
			for i := 0; i < 0; i++ {
				var elem EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem
				{
					elem.SetFake()
				}
				s.Operations = append(s.Operations, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem) SetFake() {
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetFake() {
	*s = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected
}

// SetFake set fake values.
func (s *EnvironmentApprovals) SetFake() {
	{
		{
			s.Environments = nil
			for i := 0; i < 0; i++ {
				var elem EnvironmentApprovalsEnvironmentsItem
				{
					elem.SetFake()
				}
				s.Environments = append(s.Environments, elem)
			}
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Comment = "string"
		}
	}
}

// SetFake set fake values.
func (s *EnvironmentApprovalsEnvironmentsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EnvironmentApprovalsState) SetFake() {
	*s = EnvironmentApprovalsStateApproved
}

// SetFake set fake values.
func (s *Event) SetFake() {
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Actor.SetFake()
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Org.SetFake()
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
	{
		{
			s.Public = true
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EventPayload) SetFake() {
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.Issue.SetFake()
		}
	}
	{
		{
			s.Comment.SetFake()
		}
	}
	{
		{
			s.Pages = nil
			for i := 0; i < 0; i++ {
				var elem EventPayloadPagesItem
				{
					elem.SetFake()
				}
				s.Pages = append(s.Pages, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *EventPayloadPagesItem) SetFake() {
	{
		{
			s.PageName.SetFake()
		}
	}
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Summary.SetFake()
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *EventRepo) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *Feed) SetFake() {
	{
		{
			s.TimelineURL = "string"
		}
	}
	{
		{
			s.UserURL = "string"
		}
	}
	{
		{
			s.CurrentUserPublicURL.SetFake()
		}
	}
	{
		{
			s.CurrentUserURL.SetFake()
		}
	}
	{
		{
			s.CurrentUserActorURL.SetFake()
		}
	}
	{
		{
			s.CurrentUserOrganizationURL.SetFake()
		}
	}
	{
		{
			s.CurrentUserOrganizationUrls = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.CurrentUserOrganizationUrls = append(s.CurrentUserOrganizationUrls, elem)
			}
		}
	}
	{
		{
			s.SecurityAdvisoriesURL.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FeedLinks) SetFake() {
	{
		{
			s.Timeline.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.SecurityAdvisories.SetFake()
		}
	}
	{
		{
			s.CurrentUser.SetFake()
		}
	}
	{
		{
			s.CurrentUserPublic.SetFake()
		}
	}
	{
		{
			s.CurrentUserActor.SetFake()
		}
	}
	{
		{
			s.CurrentUserOrganization.SetFake()
		}
	}
	{
		{
			s.CurrentUserOrganizations = nil
			for i := 0; i < 0; i++ {
				var elem LinkWithType
				{
					elem.SetFake()
				}
				s.CurrentUserOrganizations = append(s.CurrentUserOrganizations, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *FileCommit) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommit) SetFake() {
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Tree.SetFake()
		}
	}
	{
		{
			s.Parents = nil
			for i := 0; i < 0; i++ {
				var elem FileCommitCommitParentsItem
				{
					elem.SetFake()
				}
				s.Parents = append(s.Parents, elem)
			}
		}
	}
	{
		{
			s.Verification.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommitAuthor) SetFake() {
	{
		{
			s.Date.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommitCommitter) SetFake() {
	{
		{
			s.Date.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommitParentsItem) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommitTree) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitCommitVerification) SetFake() {
	{
		{
			s.Verified.SetFake()
		}
	}
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.Signature.SetFake()
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitContent) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.DownloadURL.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FileCommitContentLinks) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
	{
		{
			s.Git.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ForbiddenGist) SetFake() {
	{
		{
			s.Block.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ForbiddenGistBlock) SetFake() {
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FullRepository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt = time.Now()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
	{
		{
			s.SubscribersCount = int(0)
		}
	}
	{
		{
			s.NetworkCount = int(0)
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Organization.SetFake()
		}
	}
	{
		{
			s.Parent.SetFake()
		}
	}
	{
		{
			s.Source.SetFake()
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.AnonymousAccessEnabled.SetFake()
		}
	}
	{
		{
			s.CodeOfConduct.SetFake()
		}
	}
	{
		{
			s.SecurityAndAnalysis.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FullRepositoryPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull = true
		}
	}
}

// SetFake set fake values.
func (s *FullRepositorySecurityAndAnalysis) SetFake() {
	{
		{
			s.AdvancedSecurity.SetFake()
		}
	}
	{
		{
			s.SecretScanning.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) SetFake() {
	*s = FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled
}

// SetFake set fake values.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FullRepositorySecurityAndAnalysisSecretScanningStatus) SetFake() {
	*s = FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled
}

// SetFake set fake values.
func (s *GistComment) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistCommit) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Version = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.ChangeStatus.SetFake()
		}
	}
	{
		{
			s.CommittedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *GistCommitChangeStatus) SetFake() {
	{
		{
			s.Total.SetFake()
		}
	}
	{
		{
			s.Additions.SetFake()
		}
	}
	{
		{
			s.Deletions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistHistory) SetFake() {
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Version.SetFake()
		}
	}
	{
		{
			s.CommittedAt.SetFake()
		}
	}
	{
		{
			s.ChangeStatus.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistHistoryChangeStatus) SetFake() {
	{
		{
			s.Total.SetFake()
		}
	}
	{
		{
			s.Additions.SetFake()
		}
	}
	{
		{
			s.Deletions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistSimple) SetFake() {
	{
		{
			s.Forks.SetFake()
		}
	}
	{
		{
			s.History.SetFake()
		}
	}
	{
		{
			s.ForkOf.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ForksURL.SetFake()
		}
	}
	{
		{
			s.CommitsURL.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.GitPullURL.SetFake()
		}
	}
	{
		{
			s.GitPushURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Files.SetFake()
		}
	}
	{
		{
			s.Public.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Comments.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CommentsURL.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Truncated.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistSimpleFiles) SetFake() {
	var (
		elem GistSimpleFilesItem
		m    map[string]GistSimpleFilesItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *GistSimpleFilesItem) SetFake() {
	{
		{
			s.Filename.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.RawURL.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.Truncated.SetFake()
		}
	}
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistSimpleForkOf) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommitsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.GitPullURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitPushURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Files.SetFake()
		}
	}
	{
		{
			s.Public = true
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Truncated.SetFake()
		}
	}
	{
		{
			s.Forks = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Forks = append(s.Forks, elem)
			}
		}
	}
	{
		{
			s.History = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.History = append(s.History, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *GistSimpleForkOfFiles) SetFake() {
	var (
		elem GistSimpleForkOfFilesItem
		m    map[string]GistSimpleForkOfFilesItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *GistSimpleForkOfFilesItem) SetFake() {
	{
		{
			s.Filename.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.RawURL.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistSimpleForksItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistsCheckIsStarredNotFound) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *GistsCreateApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsCreateApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsCreateApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsCreateApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsCreateCommentApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsCreateCommentApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsCreateCommentApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsCreateCommentApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsCreateCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *GistsCreateReq) SetFake() {
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Files.SetFake()
		}
	}
	{
		{
			s.Public.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GistsCreateReqFiles) SetFake() {
	var (
		elem GistsCreateReqFilesItem
		m    map[string]GistsCreateReqFilesItem = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *GistsCreateReqFilesItem) SetFake() {
	{
		{
			s.Content = "string"
		}
	}
}

// SetFake set fake values.
func (s *GistsCreateReqPublic) SetFake() {
	var elem bool

	{
		elem = true
	}
	s.SetBool(elem)
}

// SetFake set fake values.
func (s *GistsCreateReqPublic1) SetFake() {
	*s = GistsCreateReqPublic1True
}

// SetFake set fake values.
func (s *GistsDeleteApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsDeleteApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsDeleteApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsDeleteApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsDeleteCommentApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsDeleteCommentApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsDeleteCommentApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsDeleteCommentApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsForkApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsForkApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsForkApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsForkApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsGetRevisionApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsGetRevisionApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsGetRevisionApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsGetRevisionApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommentsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListCommentsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommentsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListCommentsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommentsOKApplicationJSON) SetFake() {
	var unwrapped []GistComment
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem GistComment
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListCommentsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommitsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListCommitsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommitsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListCommitsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsListCommitsOKApplicationJSON) SetFake() {
	var unwrapped []GistCommit
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem GistCommit
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListCommitsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListForUserOKApplicationJSON) SetFake() {
	var unwrapped []BaseGist
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem BaseGist
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListForUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListForksApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListForksApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsListForksApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListForksApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsListForksOKApplicationJSON) SetFake() {
	var unwrapped []GistSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem GistSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListForksOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListOKApplicationJSON) SetFake() {
	var unwrapped []BaseGist
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem BaseGist
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListPublicOKApplicationJSON) SetFake() {
	var unwrapped []BaseGist
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem BaseGist
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListPublicOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsListStarredApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListStarredApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsListStarredApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsListStarredApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *GistsListStarredOKApplicationJSON) SetFake() {
	var unwrapped []BaseGist
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem BaseGist
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GistsListStarredOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GistsStarApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsStarApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsStarApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsStarApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsUnstarApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsUnstarApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GistsUnstarApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GistsUnstarApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GistsUpdateCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *GitCommit) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Tree.SetFake()
		}
	}
	{
		{
			s.Parents = nil
			for i := 0; i < 0; i++ {
				var elem GitCommitParentsItem
				{
					elem.SetFake()
				}
				s.Parents = append(s.Parents, elem)
			}
		}
	}
	{
		{
			s.Verification.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *GitCommitAuthor) SetFake() {
	{
		{
			s.Date = time.Now()
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *GitCommitCommitter) SetFake() {
	{
		{
			s.Date = time.Now()
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *GitCommitParentsItem) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *GitCommitTree) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *GitCommitVerification) SetFake() {
	{
		{
			s.Verified = true
		}
	}
	{
		{
			s.Reason = "string"
		}
	}
	{
		{
			s.Signature.SetFake()
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateBlobApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitCreateBlobApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *GitCreateBlobApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitCreateBlobApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GitCreateBlobApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitCreateBlobApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GitCreateBlobReq) SetFake() {
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Encoding.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateCommitReq) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Tree = "string"
		}
	}
	{
		{
			s.Parents = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Parents = append(s.Parents, elem)
			}
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Signature.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateCommitReqAuthor) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateCommitReqCommitter) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateRefReq) SetFake() {
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Key.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateTagReq) SetFake() {
	{
		{
			s.Tag = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Object = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Tagger.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateTagReqTagger) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateTagReqType) SetFake() {
	*s = GitCreateTagReqTypeCommit
}

// SetFake set fake values.
func (s *GitCreateTreeApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitCreateTreeApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GitCreateTreeApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitCreateTreeApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GitCreateTreeReq) SetFake() {
	{
		{
			s.Tree = nil
			for i := 0; i < 0; i++ {
				var elem GitCreateTreeReqTreeItem
				{
					elem.SetFake()
				}
				s.Tree = append(s.Tree, elem)
			}
		}
	}
	{
		{
			s.BaseTree.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateTreeReqTreeItem) SetFake() {
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Mode.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitCreateTreeReqTreeItemMode) SetFake() {
	*s = GitCreateTreeReqTreeItemMode100644
}

// SetFake set fake values.
func (s *GitCreateTreeReqTreeItemType) SetFake() {
	*s = GitCreateTreeReqTreeItemTypeBlob
}

// SetFake set fake values.
func (s *GitGetBlobApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitGetBlobApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *GitGetBlobApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = GitGetBlobApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *GitRef) SetFake() {
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Object.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitRefObject) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *GitTag) SetFake() {
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Tag = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Tagger.SetFake()
		}
	}
	{
		{
			s.Object.SetFake()
		}
	}
	{
		{
			s.Verification.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitTagObject) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *GitTagTagger) SetFake() {
	{
		{
			s.Date = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *GitTree) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Truncated = true
		}
	}
	{
		{
			s.Tree = nil
			for i := 0; i < 0; i++ {
				var elem GitTreeTreeItem
				{
					elem.SetFake()
				}
				s.Tree = append(s.Tree, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *GitTreeTreeItem) SetFake() {
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Mode.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitUpdateRefReq) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Force.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GitignoreGetAllTemplatesOKApplicationJSON) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = GitignoreGetAllTemplatesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *GitignoreTemplate) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Source = "string"
		}
	}
}

// SetFake set fake values.
func (s *GpgKey) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.PrimaryKeyID.SetFake()
		}
	}
	{
		{
			s.KeyID = "string"
		}
	}
	{
		{
			s.PublicKey = "string"
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem GpgKeyEmailsItem
				{
					elem.SetFake()
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Subkeys = nil
			for i := 0; i < 0; i++ {
				var elem GpgKeySubkeysItem
				{
					elem.SetFake()
				}
				s.Subkeys = append(s.Subkeys, elem)
			}
		}
	}
	{
		{
			s.CanSign = true
		}
	}
	{
		{
			s.CanEncryptComms = true
		}
	}
	{
		{
			s.CanEncryptStorage = true
		}
	}
	{
		{
			s.CanCertify = true
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.ExpiresAt.SetFake()
		}
	}
	{
		{
			s.RawKey.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GpgKeyEmailsItem) SetFake() {
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Verified.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GpgKeySubkeysItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.PrimaryKeyID.SetFake()
		}
	}
	{
		{
			s.KeyID.SetFake()
		}
	}
	{
		{
			s.PublicKey.SetFake()
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Subkeys = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Subkeys = append(s.Subkeys, elem)
			}
		}
	}
	{
		{
			s.CanSign.SetFake()
		}
	}
	{
		{
			s.CanEncryptComms.SetFake()
		}
	}
	{
		{
			s.CanEncryptStorage.SetFake()
		}
	}
	{
		{
			s.CanCertify.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.ExpiresAt.SetFake()
		}
	}
	{
		{
			s.RawKey.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *GroupMapping) SetFake() {
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem GroupMappingGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *GroupMappingGroupsItem) SetFake() {
	{
		{
			s.GroupID = "string"
		}
	}
	{
		{
			s.GroupName = "string"
		}
	}
	{
		{
			s.GroupDescription = "string"
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.SyncedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Hook) SetFake() {
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Active = true
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TestURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PingURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeliveriesURL.SetFake()
		}
	}
	{
		{
			s.LastResponse.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookConfig) SetFake() {
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Password.SetFake()
		}
	}
	{
		{
			s.Room.SetFake()
		}
	}
	{
		{
			s.Subdomain.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Digest.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.Token.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookDelivery) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.GUID = "string"
		}
	}
	{
		{
			s.DeliveredAt = time.Now()
		}
	}
	{
		{
			s.Redelivery = true
		}
	}
	{
		{
			s.Duration = float64(0)
		}
	}
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.StatusCode = int(0)
		}
	}
	{
		{
			s.Event = "string"
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.InstallationID.SetFake()
		}
	}
	{
		{
			s.RepositoryID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Request.SetFake()
		}
	}
	{
		{
			s.Response.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookDeliveryItem) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.GUID = "string"
		}
	}
	{
		{
			s.DeliveredAt = time.Now()
		}
	}
	{
		{
			s.Redelivery = true
		}
	}
	{
		{
			s.Duration = float64(0)
		}
	}
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.StatusCode = int(0)
		}
	}
	{
		{
			s.Event = "string"
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.InstallationID.SetFake()
		}
	}
	{
		{
			s.RepositoryID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookDeliveryRequest) SetFake() {
	{
		{
			s.Headers.SetFake()
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookDeliveryRequestHeaders) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *HookDeliveryRequestPayload) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *HookDeliveryResponse) SetFake() {
	{
		{
			s.Headers.SetFake()
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookDeliveryResponseHeaders) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *HookResponse) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Hovercard) SetFake() {
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem HovercardContextsItem
				{
					elem.SetFake()
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *HovercardContextsItem) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Octicon = "string"
		}
	}
}

// SetFake set fake values.
func (s *Import) SetFake() {
	{
		{
			s.Vcs.SetFake()
		}
	}
	{
		{
			s.UseLfs.SetFake()
		}
	}
	{
		{
			s.VcsURL = "string"
		}
	}
	{
		{
			s.SvcRoot.SetFake()
		}
	}
	{
		{
			s.TfvcProject.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.StatusText.SetFake()
		}
	}
	{
		{
			s.FailedStep.SetFake()
		}
	}
	{
		{
			s.ErrorMessage.SetFake()
		}
	}
	{
		{
			s.ImportPercent.SetFake()
		}
	}
	{
		{
			s.CommitCount.SetFake()
		}
	}
	{
		{
			s.PushPercent.SetFake()
		}
	}
	{
		{
			s.HasLargeFiles.SetFake()
		}
	}
	{
		{
			s.LargeFilesSize.SetFake()
		}
	}
	{
		{
			s.LargeFilesCount.SetFake()
		}
	}
	{
		{
			s.ProjectChoices = nil
			for i := 0; i < 0; i++ {
				var elem ImportProjectChoicesItem
				{
					elem.SetFake()
				}
				s.ProjectChoices = append(s.ProjectChoices, elem)
			}
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.AuthorsCount.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AuthorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnRoot.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ImportProjectChoicesItem) SetFake() {
	{
		{
			s.Vcs.SetFake()
		}
	}
	{
		{
			s.TfvcProject.SetFake()
		}
	}
	{
		{
			s.HumanName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ImportStatus) SetFake() {
	*s = ImportStatusAuth
}

// SetFake set fake values.
func (s *InstallationToken) SetFake() {
	{
		{
			s.Token = "string"
		}
	}
	{
		{
			s.ExpiresAt = "string"
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.RepositorySelection.SetFake()
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.SingleFile.SetFake()
		}
	}
	{
		{
			s.HasMultipleSingleFiles.SetFake()
		}
	}
	{
		{
			s.SingleFilePaths = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.SingleFilePaths = append(s.SingleFilePaths, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *InstallationTokenRepositorySelection) SetFake() {
	*s = InstallationTokenRepositorySelectionAll
}

// SetFake set fake values.
func (s *Integration) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Slug.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.ExternalURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.InstallationsCount.SetFake()
		}
	}
	{
		{
			s.ClientID.SetFake()
		}
	}
	{
		{
			s.ClientSecret.SetFake()
		}
	}
	{
		{
			s.WebhookSecret.SetFake()
		}
	}
	{
		{
			s.Pem.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IntegrationPermissions) SetFake() {
	{
		{
			s.Issues.SetFake()
		}
	}
	{
		{
			s.Checks.SetFake()
		}
	}
	{
		{
			s.Metadata.SetFake()
		}
	}
	{
		{
			s.Contents.SetFake()
		}
	}
	{
		{
			s.Deployments.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IntegrationPermissionsAdditional) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *InteractionExpiry) SetFake() {
	*s = InteractionExpiryOneDay
}

// SetFake set fake values.
func (s *InteractionGroup) SetFake() {
	*s = InteractionGroupExistingUsers
}

// SetFake set fake values.
func (s *InteractionLimit) SetFake() {
	{
		{
			s.Limit.SetFake()
		}
	}
	{
		{
			s.Expiry.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *InteractionLimitResponse) SetFake() {
	{
		{
			s.Limit.SetFake()
		}
	}
	{
		{
			s.Origin = "string"
		}
	}
	{
		{
			s.ExpiresAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *Issue) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem IssueLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Assignees.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.Locked = true
		}
	}
	{
		{
			s.ActiveLockReason.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedBy.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.TimelineURL.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueComment) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.IssueURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueEvent) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Actor.SetFake()
		}
	}
	{
		{
			s.Event = "string"
		}
	}
	{
		{
			s.CommitID.SetFake()
		}
	}
	{
		{
			s.CommitURL.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Issue.SetFake()
		}
	}
	{
		{
			s.Label.SetFake()
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Assigner.SetFake()
		}
	}
	{
		{
			s.ReviewRequester.SetFake()
		}
	}
	{
		{
			s.RequestedReviewer.SetFake()
		}
	}
	{
		{
			s.RequestedTeam.SetFake()
		}
	}
	{
		{
			s.DismissedReview.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.ProjectCard.SetFake()
		}
	}
	{
		{
			s.Rename.SetFake()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.LockReason.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueEventDismissedReview) SetFake() {
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.ReviewID = int(0)
		}
	}
	{
		{
			s.DismissalMessage.SetFake()
		}
	}
	{
		{
			s.DismissalCommitID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueEventLabel) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueEventMilestone) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
}

// SetFake set fake values.
func (s *IssueEventProjectCard) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.ProjectURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ProjectID = int(0)
		}
	}
	{
		{
			s.ColumnName = "string"
		}
	}
	{
		{
			s.PreviousColumnName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueEventRename) SetFake() {
	{
		{
			s.From = "string"
		}
	}
	{
		{
			s.To = "string"
		}
	}
}

// SetFake set fake values.
func (s *IssueLabelsItem) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssueLabelsItem1) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Default.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuePullRequest) SetFake() {
	{
		{
			s.MergedAt.SetFake()
		}
	}
	{
		{
			s.DiffURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.PatchURL.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueSearchResultItem) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Locked = true
		}
	}
	{
		{
			s.ActiveLockReason.SetFake()
		}
	}
	{
		{
			s.Assignees.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem IssueSearchResultItemLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.TimelineURL.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueSearchResultItemLabelsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Default.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueSearchResultItemPullRequest) SetFake() {
	{
		{
			s.MergedAt.SetFake()
		}
	}
	{
		{
			s.DiffURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.PatchURL.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueSimple) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem Label
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Assignees.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.Locked = true
		}
	}
	{
		{
			s.ActiveLockReason.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.TimelineURL.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.PerformedViaGithubApp.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssueSimplePullRequest) SetFake() {
	{
		{
			s.MergedAt.SetFake()
		}
	}
	{
		{
			s.DiffURL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.PatchURL.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesAddAssigneesReq) SetFake() {
	{
		{
			s.Assignees = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Assignees = append(s.Assignees, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateCommentApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateCommentApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateCommentApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateCommentApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateCommentApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesCreateCommentApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesCreateCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateLabelReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateMilestoneReq) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.DueOn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateMilestoneReqState) SetFake() {
	*s = IssuesCreateMilestoneReqStateOpen
}

// SetFake set fake values.
func (s *IssuesCreateReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem IssuesCreateReqLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Assignees = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Assignees = append(s.Assignees, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateReqLabelsItem) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssuesCreateReqLabelsItem1) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesCreateReqMilestone) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssuesCreateReqTitle) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssuesGetApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesGetApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *IssuesGetApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesGetEventApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetEventApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesGetEventApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetEventApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesGetEventApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesGetEventApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListAssigneesOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListAssigneesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListCommentsApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesListCommentsApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListCommentsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesListCommentsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListCommentsForRepoOKApplicationJSON) SetFake() {
	var unwrapped []IssueComment
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem IssueComment
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListCommentsForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListCommentsOKApplicationJSON) SetFake() {
	var unwrapped []IssueComment
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem IssueComment
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListCommentsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListEventsForRepoOKApplicationJSON) SetFake() {
	var unwrapped []IssueEvent
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem IssueEvent
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListEventsForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []Issue
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Issue
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListForOrgOKApplicationJSON) SetFake() {
	var unwrapped []Issue
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Issue
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListForOrgOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListForRepoApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesListForRepoApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListForRepoApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesListForRepoApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListForRepoOKApplicationJSON) SetFake() {
	var unwrapped []IssueSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem IssueSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListLabelsForRepoOKApplicationJSON) SetFake() {
	var unwrapped []Label
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Label
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListLabelsForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListLabelsOnIssueOKApplicationJSON) SetFake() {
	var unwrapped []Label
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Label
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListLabelsOnIssueOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListMilestonesOKApplicationJSON) SetFake() {
	var unwrapped []Milestone
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Milestone
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListMilestonesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesListOKApplicationJSON) SetFake() {
	var unwrapped []Issue
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Issue
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesLockApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesLockApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesLockApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesLockApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesLockApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesLockApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesLockReq) SetFake() {
	{
		{
			s.LockReason.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesLockReqLockReason) SetFake() {
	*s = IssuesLockReqLockReasonOffMinusTopic
}

// SetFake set fake values.
func (s *IssuesRemoveAssigneesReq) SetFake() {
	{
		{
			s.Assignees = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Assignees = append(s.Assignees, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *IssuesRemoveLabelApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesRemoveLabelApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesRemoveLabelApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesRemoveLabelApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesRemoveLabelOKApplicationJSON) SetFake() {
	var unwrapped []Label
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Label
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = IssuesRemoveLabelOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUnlockApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUnlockApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUnlockApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUnlockApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUpdateApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUpdateApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUpdateApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUpdateApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUpdateApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUpdateApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUpdateApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = IssuesUpdateApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *IssuesUpdateCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *IssuesUpdateLabelReq) SetFake() {
	{
		{
			s.NewName.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesUpdateMilestoneReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.DueOn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesUpdateMilestoneReqState) SetFake() {
	*s = IssuesUpdateMilestoneReqStateOpen
}

// SetFake set fake values.
func (s *IssuesUpdateReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem IssuesUpdateReqLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Assignees = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Assignees = append(s.Assignees, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *IssuesUpdateReqLabelsItem) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssuesUpdateReqLabelsItem1) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *IssuesUpdateReqMilestone) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *IssuesUpdateReqState) SetFake() {
	*s = IssuesUpdateReqStateOpen
}

// SetFake set fake values.
func (s *IssuesUpdateReqTitle) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *Job) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.RunID = int(0)
		}
	}
	{
		{
			s.RunURL = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HeadSha = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Conclusion.SetFake()
		}
	}
	{
		{
			s.StartedAt = time.Now()
		}
	}
	{
		{
			s.CompletedAt.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Steps = nil
			for i := 0; i < 0; i++ {
				var elem JobStepsItem
				{
					elem.SetFake()
				}
				s.Steps = append(s.Steps, elem)
			}
		}
	}
	{
		{
			s.CheckRunURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *JobStatus) SetFake() {
	*s = JobStatusQueued
}

// SetFake set fake values.
func (s *JobStepsItem) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Conclusion.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.StartedAt.SetFake()
		}
	}
	{
		{
			s.CompletedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *JobStepsItemStatus) SetFake() {
	*s = JobStepsItemStatusQueued
}

// SetFake set fake values.
func (s *Key) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Verified = true
		}
	}
	{
		{
			s.ReadOnly = true
		}
	}
}

// SetFake set fake values.
func (s *KeySimple) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Key = "string"
		}
	}
}

// SetFake set fake values.
func (s *Label) SetFake() {
	{
		{
			s.ID = int64(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color = "string"
		}
	}
	{
		{
			s.Default = true
		}
	}
}

// SetFake set fake values.
func (s *LabelSearchResultItem) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Color = "string"
		}
	}
	{
		{
			s.Default = true
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
}

// SetFake set fake values.
func (s *Language) SetFake() {
	var (
		elem int
		m    map[string]int = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *License) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Implementation = "string"
		}
	}
	{
		{
			s.Permissions = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Permissions = append(s.Permissions, elem)
			}
		}
	}
	{
		{
			s.Conditions = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Conditions = append(s.Conditions, elem)
			}
		}
	}
	{
		{
			s.Limitations = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Limitations = append(s.Limitations, elem)
			}
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Featured = true
		}
	}
}

// SetFake set fake values.
func (s *LicenseContent) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.DownloadURL.SetFake()
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Encoding = "string"
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *LicenseContentLinks) SetFake() {
	{
		{
			s.Git.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.Self = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *LicenseSimple) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *LicensesGetAllCommonlyUsedOKApplicationJSON) SetFake() {
	var unwrapped []LicenseSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem LicenseSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = LicensesGetAllCommonlyUsedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *LicensesGetApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = LicensesGetApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *LicensesGetApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = LicensesGetApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *Link) SetFake() {
	{
		{
			s.Href = "string"
		}
	}
}

// SetFake set fake values.
func (s *LinkWithType) SetFake() {
	{
		{
			s.Href = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
}

// SetFake set fake values.
func (s *MarketplaceAccount) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.OrganizationBillingEmail.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MarketplaceListingPlan) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AccountsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.MonthlyPriceInCents = int(0)
		}
	}
	{
		{
			s.YearlyPriceInCents = int(0)
		}
	}
	{
		{
			s.PriceModel = "string"
		}
	}
	{
		{
			s.HasFreeTrial = true
		}
	}
	{
		{
			s.UnitName.SetFake()
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Bullets = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Bullets = append(s.Bullets, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MarketplacePurchase) SetFake() {
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.OrganizationBillingEmail.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.MarketplacePendingChange.SetFake()
		}
	}
	{
		{
			s.MarketplacePurchase.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MarketplacePurchaseMarketplacePendingChange) SetFake() {
	{
		{
			s.IsInstalled.SetFake()
		}
	}
	{
		{
			s.EffectiveDate.SetFake()
		}
	}
	{
		{
			s.UnitCount.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MarketplacePurchaseMarketplacePurchase) SetFake() {
	{
		{
			s.BillingCycle.SetFake()
		}
	}
	{
		{
			s.NextBillingDate.SetFake()
		}
	}
	{
		{
			s.IsInstalled.SetFake()
		}
	}
	{
		{
			s.UnitCount.SetFake()
		}
	}
	{
		{
			s.OnFreeTrial.SetFake()
		}
	}
	{
		{
			s.FreeTrialEndsOn.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MergedUpstream) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.MergeType.SetFake()
		}
	}
	{
		{
			s.BaseBranch.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MergedUpstreamMergeType) SetFake() {
	*s = MergedUpstreamMergeTypeMerge
}

// SetFake set fake values.
func (s *MetaRootOK) SetFake() {
	{
		{
			s.CurrentUserURL = "string"
		}
	}
	{
		{
			s.CurrentUserAuthorizationsHTMLURL = "string"
		}
	}
	{
		{
			s.AuthorizationsURL = "string"
		}
	}
	{
		{
			s.CodeSearchURL = "string"
		}
	}
	{
		{
			s.CommitSearchURL = "string"
		}
	}
	{
		{
			s.EmailsURL = "string"
		}
	}
	{
		{
			s.EmojisURL = "string"
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.FeedsURL = "string"
		}
	}
	{
		{
			s.FollowersURL = "string"
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.HubURL = "string"
		}
	}
	{
		{
			s.IssueSearchURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelSearchURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.OrganizationURL = "string"
		}
	}
	{
		{
			s.OrganizationRepositoriesURL = "string"
		}
	}
	{
		{
			s.OrganizationTeamsURL = "string"
		}
	}
	{
		{
			s.PublicGistsURL = "string"
		}
	}
	{
		{
			s.RateLimitURL = "string"
		}
	}
	{
		{
			s.RepositoryURL = "string"
		}
	}
	{
		{
			s.RepositorySearchURL = "string"
		}
	}
	{
		{
			s.CurrentUserRepositoriesURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.StarredGistsURL = "string"
		}
	}
	{
		{
			s.TopicSearchURL.SetFake()
		}
	}
	{
		{
			s.UserURL = "string"
		}
	}
	{
		{
			s.UserOrganizationsURL = "string"
		}
	}
	{
		{
			s.UserRepositoriesURL = "string"
		}
	}
	{
		{
			s.UserSearchURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *Migration) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.GUID = "string"
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.LockRepositories = true
		}
	}
	{
		{
			s.ExcludeMetadata = true
		}
	}
	{
		{
			s.ExcludeGitData = true
		}
	}
	{
		{
			s.ExcludeAttachments = true
		}
	}
	{
		{
			s.ExcludeReleases = true
		}
	}
	{
		{
			s.ExcludeOwnerProjects = true
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem Repository
				{
					elem.SetFake()
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.ArchiveURL.SetFake()
		}
	}
	{
		{
			s.Exclude = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Exclude = append(s.Exclude, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetCommitAuthorsOKApplicationJSON) SetFake() {
	var unwrapped []PorterAuthor
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PorterAuthor
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = MigrationsGetCommitAuthorsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsListForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsListForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsListForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsListForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsListForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []Migration
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Migration
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = MigrationsListForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsListReposForOrgOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = MigrationsListReposForOrgOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsListReposForUserOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = MigrationsListReposForUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsMapCommitAuthorReq) SetFake() {
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MigrationsMapCommitAuthorReqAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *MigrationsSetLfsPreferenceReq) SetFake() {
	{
		{
			s.UseLfs.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MigrationsSetLfsPreferenceReqUseLfs) SetFake() {
	*s = MigrationsSetLfsPreferenceReqUseLfsOptIn
}

// SetFake set fake values.
func (s *MigrationsStartForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsStartForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsStartForAuthenticatedUserReq) SetFake() {
	{
		{
			s.LockRepositories.SetFake()
		}
	}
	{
		{
			s.ExcludeAttachments.SetFake()
		}
	}
	{
		{
			s.ExcludeReleases.SetFake()
		}
	}
	{
		{
			s.ExcludeOwnerProjects.SetFake()
		}
	}
	{
		{
			s.Exclude = nil
			for i := 0; i < 0; i++ {
				var elem MigrationsStartForAuthenticatedUserReqExcludeItem
				{
					elem.SetFake()
				}
				s.Exclude = append(s.Exclude, elem)
			}
		}
	}
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MigrationsStartForAuthenticatedUserReqExcludeItem) SetFake() {
	*s = MigrationsStartForAuthenticatedUserReqExcludeItemRepositories
}

// SetFake set fake values.
func (s *MigrationsStartForOrgReq) SetFake() {
	{
		{
			s.Repositories = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Repositories = append(s.Repositories, elem)
			}
		}
	}
	{
		{
			s.LockRepositories.SetFake()
		}
	}
	{
		{
			s.ExcludeAttachments.SetFake()
		}
	}
	{
		{
			s.ExcludeReleases.SetFake()
		}
	}
	{
		{
			s.ExcludeOwnerProjects.SetFake()
		}
	}
	{
		{
			s.Exclude = nil
			for i := 0; i < 0; i++ {
				var elem MigrationsStartForOrgReqExcludeItem
				{
					elem.SetFake()
				}
				s.Exclude = append(s.Exclude, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *MigrationsStartForOrgReqExcludeItem) SetFake() {
	*s = MigrationsStartForOrgReqExcludeItemRepositories
}

// SetFake set fake values.
func (s *MigrationsStartImportReq) SetFake() {
	{
		{
			s.VcsURL = "string"
		}
	}
	{
		{
			s.Vcs.SetFake()
		}
	}
	{
		{
			s.VcsUsername.SetFake()
		}
	}
	{
		{
			s.VcsPassword.SetFake()
		}
	}
	{
		{
			s.TfvcProject.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MigrationsStartImportReqVcs) SetFake() {
	*s = MigrationsStartImportReqVcsSubversion
}

// SetFake set fake values.
func (s *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *MigrationsUpdateImportReq) SetFake() {
	{
		{
			s.VcsUsername.SetFake()
		}
	}
	{
		{
			s.VcsPassword.SetFake()
		}
	}
	{
		{
			s.Vcs.SetFake()
		}
	}
	{
		{
			s.TfvcProject.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Milestone) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.LabelsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.ClosedIssues = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.DueOn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MilestoneState) SetFake() {
	*s = MilestoneStateOpen
}

// SetFake set fake values.
func (s *MinimalRepository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL.SetFake()
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL.SetFake()
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount.SetFake()
		}
	}
	{
		{
			s.StargazersCount.SetFake()
		}
	}
	{
		{
			s.WatchersCount.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.DefaultBranch.SetFake()
		}
	}
	{
		{
			s.OpenIssuesCount.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.HasPages.SetFake()
		}
	}
	{
		{
			s.HasDownloads.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.Disabled.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
	{
		{
			s.CodeOfConduct.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Forks.SetFake()
		}
	}
	{
		{
			s.OpenIssues.SetFake()
		}
	}
	{
		{
			s.Watchers.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MinimalRepositoryLicense) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *MinimalRepositoryPermissions) SetFake() {
	{
		{
			s.Admin.SetFake()
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push.SetFake()
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NilAutoMerge) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilBool) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCheckRunCheckSuite) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCheckRunConclusion) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCheckSuiteConclusion) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCheckSuiteStatus) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCodeScanningAlertDismissedAt) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilCodeScanningAlertDismissedReason) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilDateTime) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilFileCommitContent) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilHookDeliveryRequestHeaders) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilHookDeliveryRequestPayload) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilHookDeliveryResponseHeaders) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableCodeOfConductSimple) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableCommunityHealthFile) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableGitUser) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableIntegration) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableLicenseSimple) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableMilestone) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableSimpleCommit) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableSimpleCommitAuthor) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableSimpleCommitCommitter) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableSimpleUser) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilNullableTeamSimple) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilPageStatus) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilPullRequestHeadRepo) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilPullRequestHeadRepoLicense) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilReposCreatePagesSiteReq) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilReposUpdateBranchProtectionReqRequiredStatusChecks) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilReposUpdateBranchProtectionReqRestrictions) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilSimpleCommitAuthor) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilSimpleCommitCommitter) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilString) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilURI) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NullableCodeOfConductSimple) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableCommunityHealthFile) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *NullableGitUser) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableIntegration) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Slug.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.ExternalURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.InstallationsCount.SetFake()
		}
	}
	{
		{
			s.ClientID.SetFake()
		}
	}
	{
		{
			s.ClientSecret.SetFake()
		}
	}
	{
		{
			s.WebhookSecret.SetFake()
		}
	}
	{
		{
			s.Pem.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableIntegrationPermissions) SetFake() {
	{
		{
			s.Issues.SetFake()
		}
	}
	{
		{
			s.Checks.SetFake()
		}
	}
	{
		{
			s.Metadata.SetFake()
		}
	}
	{
		{
			s.Contents.SetFake()
		}
	}
	{
		{
			s.Deployments.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableIntegrationPermissionsAdditional) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *NullableLicenseSimple) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableMilestone) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.LabelsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.ClosedIssues = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.DueOn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableMilestoneState) SetFake() {
	*s = NullableMilestoneStateOpen
}

// SetFake set fake values.
func (s *NullableMinimalRepository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL.SetFake()
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL.SetFake()
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount.SetFake()
		}
	}
	{
		{
			s.StargazersCount.SetFake()
		}
	}
	{
		{
			s.WatchersCount.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.DefaultBranch.SetFake()
		}
	}
	{
		{
			s.OpenIssuesCount.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.HasPages.SetFake()
		}
	}
	{
		{
			s.HasDownloads.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.Disabled.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
	{
		{
			s.CodeOfConduct.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Forks.SetFake()
		}
	}
	{
		{
			s.OpenIssues.SetFake()
		}
	}
	{
		{
			s.Watchers.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableMinimalRepositoryLicense) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableMinimalRepositoryPermissions) SetFake() {
	{
		{
			s.Admin.SetFake()
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push.SetFake()
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableRepository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Organization.SetFake()
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.StarredAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableRepositoryPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Pull = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableRepositoryTemplateRepository) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.FullName.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ArchiveURL.SetFake()
		}
	}
	{
		{
			s.AssigneesURL.SetFake()
		}
	}
	{
		{
			s.BlobsURL.SetFake()
		}
	}
	{
		{
			s.BranchesURL.SetFake()
		}
	}
	{
		{
			s.CollaboratorsURL.SetFake()
		}
	}
	{
		{
			s.CommentsURL.SetFake()
		}
	}
	{
		{
			s.CommitsURL.SetFake()
		}
	}
	{
		{
			s.CompareURL.SetFake()
		}
	}
	{
		{
			s.ContentsURL.SetFake()
		}
	}
	{
		{
			s.ContributorsURL.SetFake()
		}
	}
	{
		{
			s.DeploymentsURL.SetFake()
		}
	}
	{
		{
			s.DownloadsURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ForksURL.SetFake()
		}
	}
	{
		{
			s.GitCommitsURL.SetFake()
		}
	}
	{
		{
			s.GitRefsURL.SetFake()
		}
	}
	{
		{
			s.GitTagsURL.SetFake()
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.IssueCommentURL.SetFake()
		}
	}
	{
		{
			s.IssueEventsURL.SetFake()
		}
	}
	{
		{
			s.IssuesURL.SetFake()
		}
	}
	{
		{
			s.KeysURL.SetFake()
		}
	}
	{
		{
			s.LabelsURL.SetFake()
		}
	}
	{
		{
			s.LanguagesURL.SetFake()
		}
	}
	{
		{
			s.MergesURL.SetFake()
		}
	}
	{
		{
			s.MilestonesURL.SetFake()
		}
	}
	{
		{
			s.NotificationsURL.SetFake()
		}
	}
	{
		{
			s.PullsURL.SetFake()
		}
	}
	{
		{
			s.ReleasesURL.SetFake()
		}
	}
	{
		{
			s.SSHURL.SetFake()
		}
	}
	{
		{
			s.StargazersURL.SetFake()
		}
	}
	{
		{
			s.StatusesURL.SetFake()
		}
	}
	{
		{
			s.SubscribersURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionURL.SetFake()
		}
	}
	{
		{
			s.TagsURL.SetFake()
		}
	}
	{
		{
			s.TeamsURL.SetFake()
		}
	}
	{
		{
			s.TreesURL.SetFake()
		}
	}
	{
		{
			s.CloneURL.SetFake()
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL.SetFake()
		}
	}
	{
		{
			s.SvnURL.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount.SetFake()
		}
	}
	{
		{
			s.StargazersCount.SetFake()
		}
	}
	{
		{
			s.WatchersCount.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.DefaultBranch.SetFake()
		}
	}
	{
		{
			s.OpenIssuesCount.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.HasPages.SetFake()
		}
	}
	{
		{
			s.HasDownloads.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.Disabled.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableRepositoryTemplateRepositoryOwner) SetFake() {
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.FollowersURL.SetFake()
		}
	}
	{
		{
			s.FollowingURL.SetFake()
		}
	}
	{
		{
			s.GistsURL.SetFake()
		}
	}
	{
		{
			s.StarredURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionsURL.SetFake()
		}
	}
	{
		{
			s.OrganizationsURL.SetFake()
		}
	}
	{
		{
			s.ReposURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ReceivedEventsURL.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.SiteAdmin.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetFake() {
	{
		{
			s.Admin.SetFake()
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push.SetFake()
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableScopedInstallation) SetFake() {
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.RepositorySelection.SetFake()
		}
	}
	{
		{
			s.SingleFileName.SetFake()
		}
	}
	{
		{
			s.HasMultipleSingleFiles.SetFake()
		}
	}
	{
		{
			s.SingleFilePaths = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.SingleFilePaths = append(s.SingleFilePaths, elem)
			}
		}
	}
	{
		{
			s.RepositoriesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Account.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableScopedInstallationRepositorySelection) SetFake() {
	*s = NullableScopedInstallationRepositorySelectionAll
}

// SetFake set fake values.
func (s *NullableSimpleCommit) SetFake() {
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.TreeID = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Timestamp = time.Now()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableSimpleCommitAuthor) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
}

// SetFake set fake values.
func (s *NullableSimpleCommitCommitter) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
}

// SetFake set fake values.
func (s *NullableSimpleUser) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NullableTeamSimple) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Permission = "string"
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoriesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Slug = "string"
		}
	}
	{
		{
			s.LdapDn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsCreateAuthorizationApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsCreateAuthorizationApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetFake() {
	{
		{
			s.Scopes.SetFake()
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.NoteURL.SetFake()
		}
	}
	{
		{
			s.ClientID.SetFake()
		}
	}
	{
		{
			s.ClientSecret.SetFake()
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsDeleteGrantApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsDeleteGrantApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetGrantApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetGrantApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetGrantApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetGrantApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated) SetFake() {
	var unwrapped Authorization
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK) SetFake() {
	var unwrapped Authorization
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) SetFake() {
	{
		{
			s.ClientSecret = "string"
		}
	}
	{
		{
			s.Scopes.SetFake()
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.NoteURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated) SetFake() {
	var unwrapped Authorization
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK) SetFake() {
	var unwrapped Authorization
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetFake() {
	{
		{
			s.ClientSecret = "string"
		}
	}
	{
		{
			s.Scopes.SetFake()
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.NoteURL.SetFake()
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListAuthorizationsOKApplicationJSON) SetFake() {
	var unwrapped []Authorization
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Authorization
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OAuthAuthorizationsListAuthorizationsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListGrantsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListGrantsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListGrantsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListGrantsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListGrantsApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OAuthAuthorizationsListGrantsApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsListGrantsOKApplicationJSON) SetFake() {
	var unwrapped []ApplicationGrant
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ApplicationGrant
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OAuthAuthorizationsListGrantsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetFake() {
	{
		{
			s.Scopes.SetFake()
		}
	}
	{
		{
			s.AddScopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddScopes = append(s.AddScopes, elem)
			}
		}
	}
	{
		{
			s.RemoveScopes = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RemoveScopes = append(s.RemoveScopes, elem)
			}
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.NoteURL.SetFake()
		}
	}
	{
		{
			s.Fingerprint.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OptAPIOverviewSSHKeyFingerprints) SetFake() {
	var elem APIOverviewSSHKeyFingerprints
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) SetFake() {
	var elem ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) SetFake() {
	var elem ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActivityMarkNotificationsAsReadReq) SetFake() {
	var elem ActivityMarkNotificationsAsReadReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActivityMarkRepoNotificationsAsReadReq) SetFake() {
	var elem ActivityMarkRepoNotificationsAsReadReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActivitySetRepoSubscriptionReq) SetFake() {
	var elem ActivitySetRepoSubscriptionReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActivitySetThreadSubscriptionReq) SetFake() {
	var elem ActivitySetThreadSubscriptionReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptActor) SetFake() {
	var elem Actor
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAlertCreatedAt) SetFake() {
	var elem AlertCreatedAt
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAlertHTMLURL) SetFake() {
	var elem AlertHTMLURL
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAlertNumber) SetFake() {
	var elem AlertNumber
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAlertURL) SetFake() {
	var elem AlertURL
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAllowedActions) SetFake() {
	var elem AllowedActions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissions) SetFake() {
	var elem AppPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsActions) SetFake() {
	var elem AppPermissionsActions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsAdministration) SetFake() {
	var elem AppPermissionsAdministration
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsChecks) SetFake() {
	var elem AppPermissionsChecks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsContentReferences) SetFake() {
	var elem AppPermissionsContentReferences
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsContents) SetFake() {
	var elem AppPermissionsContents
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsDeployments) SetFake() {
	var elem AppPermissionsDeployments
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsEnvironments) SetFake() {
	var elem AppPermissionsEnvironments
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsIssues) SetFake() {
	var elem AppPermissionsIssues
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsMembers) SetFake() {
	var elem AppPermissionsMembers
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsMetadata) SetFake() {
	var elem AppPermissionsMetadata
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationAdministration) SetFake() {
	var elem AppPermissionsOrganizationAdministration
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationHooks) SetFake() {
	var elem AppPermissionsOrganizationHooks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationPackages) SetFake() {
	var elem AppPermissionsOrganizationPackages
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationPlan) SetFake() {
	var elem AppPermissionsOrganizationPlan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationProjects) SetFake() {
	var elem AppPermissionsOrganizationProjects
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationSecrets) SetFake() {
	var elem AppPermissionsOrganizationSecrets
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationSelfHostedRunners) SetFake() {
	var elem AppPermissionsOrganizationSelfHostedRunners
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsOrganizationUserBlocking) SetFake() {
	var elem AppPermissionsOrganizationUserBlocking
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsPackages) SetFake() {
	var elem AppPermissionsPackages
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsPages) SetFake() {
	var elem AppPermissionsPages
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsPullRequests) SetFake() {
	var elem AppPermissionsPullRequests
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsRepositoryHooks) SetFake() {
	var elem AppPermissionsRepositoryHooks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsRepositoryProjects) SetFake() {
	var elem AppPermissionsRepositoryProjects
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsSecretScanningAlerts) SetFake() {
	var elem AppPermissionsSecretScanningAlerts
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsSecrets) SetFake() {
	var elem AppPermissionsSecrets
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsSecurityEvents) SetFake() {
	var elem AppPermissionsSecurityEvents
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsSingleFile) SetFake() {
	var elem AppPermissionsSingleFile
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsStatuses) SetFake() {
	var elem AppPermissionsStatuses
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsTeamDiscussions) SetFake() {
	var elem AppPermissionsTeamDiscussions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsVulnerabilityAlerts) SetFake() {
	var elem AppPermissionsVulnerabilityAlerts
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppPermissionsWorkflows) SetFake() {
	var elem AppPermissionsWorkflows
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppsCreateInstallationAccessTokenReq) SetFake() {
	var elem AppsCreateInstallationAccessTokenReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAppsUpdateWebhookConfigForAppReq) SetFake() {
	var elem AppsUpdateWebhookConfigForAppReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAuditLogEventActorLocation) SetFake() {
	var elem AuditLogEventActorLocation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAuditLogEventData) SetFake() {
	var elem AuditLogEventData
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAuthenticationTokenRepositorySelection) SetFake() {
	var elem AuthenticationTokenRepositorySelection
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAuthorAssociation) SetFake() {
	var elem AuthorAssociation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtection) SetFake() {
	var elem BranchProtection
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionAllowDeletions) SetFake() {
	var elem BranchProtectionAllowDeletions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionAllowForcePushes) SetFake() {
	var elem BranchProtectionAllowForcePushes
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionRequiredConversationResolution) SetFake() {
	var elem BranchProtectionRequiredConversationResolution
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionRequiredLinearHistory) SetFake() {
	var elem BranchProtectionRequiredLinearHistory
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionRequiredSignatures) SetFake() {
	var elem BranchProtectionRequiredSignatures
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchProtectionRequiredStatusChecks) SetFake() {
	var elem BranchProtectionRequiredStatusChecks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchRestrictionPolicy) SetFake() {
	var elem BranchRestrictionPolicy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchRestrictionPolicyAppsItemOwner) SetFake() {
	var elem BranchRestrictionPolicyAppsItemOwner
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBranchRestrictionPolicyAppsItemPermissions) SetFake() {
	var elem BranchRestrictionPolicyAppsItemPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeOfConduct) SetFake() {
	var elem CodeOfConduct
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeOfConductSimple) SetFake() {
	var elem CodeOfConductSimple
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAlertEnvironment) SetFake() {
	var elem CodeScanningAlertEnvironment
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAlertInstanceMessage) SetFake() {
	var elem CodeScanningAlertInstanceMessage
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAlertLocation) SetFake() {
	var elem CodeScanningAlertLocation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAlertState) SetFake() {
	var elem CodeScanningAlertState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAnalysisAnalysisKey) SetFake() {
	var elem CodeScanningAnalysisAnalysisKey
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAnalysisCategory) SetFake() {
	var elem CodeScanningAnalysisCategory
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAnalysisSarifID) SetFake() {
	var elem CodeScanningAnalysisSarifID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningAnalysisToolName) SetFake() {
	var elem CodeScanningAnalysisToolName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningRef) SetFake() {
	var elem CodeScanningRef
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCodeScanningSarifsStatusProcessingStatus) SetFake() {
	var elem CodeScanningSarifsStatusProcessingStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCollaboratorPermissions) SetFake() {
	var elem CollaboratorPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCommitStats) SetFake() {
	var elem CommitStats
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDate) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDeploymentSimple) SetFake() {
	var elem DeploymentSimple
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetFake() {
	var elem EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetFake() {
	var elem EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetFake() {
	var elem EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetFake() {
	var elem EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFileCommitCommitAuthor) SetFake() {
	var elem FileCommitCommitAuthor
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFileCommitCommitCommitter) SetFake() {
	var elem FileCommitCommitCommitter
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFileCommitCommitTree) SetFake() {
	var elem FileCommitCommitTree
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFileCommitCommitVerification) SetFake() {
	var elem FileCommitCommitVerification
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFileCommitContentLinks) SetFake() {
	var elem FileCommitContentLinks
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptForbiddenGistBlock) SetFake() {
	var elem ForbiddenGistBlock
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFullRepositoryPermissions) SetFake() {
	var elem FullRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) SetFake() {
	var elem FullRepositorySecurityAndAnalysisAdvancedSecurity
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) SetFake() {
	var elem FullRepositorySecurityAndAnalysisAdvancedSecurityStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFullRepositorySecurityAndAnalysisSecretScanning) SetFake() {
	var elem FullRepositorySecurityAndAnalysisSecretScanning
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) SetFake() {
	var elem FullRepositorySecurityAndAnalysisSecretScanningStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGistHistoryChangeStatus) SetFake() {
	var elem GistHistoryChangeStatus
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGistSimpleFiles) SetFake() {
	var elem GistSimpleFiles
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGistsCreateReqPublic) SetFake() {
	var elem GistsCreateReqPublic
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGitCreateCommitReqAuthor) SetFake() {
	var elem GitCreateCommitReqAuthor
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGitCreateCommitReqCommitter) SetFake() {
	var elem GitCreateCommitReqCommitter
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGitCreateTagReqTagger) SetFake() {
	var elem GitCreateTagReqTagger
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGitCreateTreeReqTreeItemMode) SetFake() {
	var elem GitCreateTreeReqTreeItemMode
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptGitCreateTreeReqTreeItemType) SetFake() {
	var elem GitCreateTreeReqTreeItemType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInstallationTokenRepositorySelection) SetFake() {
	var elem InstallationTokenRepositorySelection
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInteractionExpiry) SetFake() {
	var elem InteractionExpiry
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueComment) SetFake() {
	var elem IssueComment
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueEventDismissedReview) SetFake() {
	var elem IssueEventDismissedReview
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueEventLabel) SetFake() {
	var elem IssueEventLabel
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueEventMilestone) SetFake() {
	var elem IssueEventMilestone
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueEventProjectCard) SetFake() {
	var elem IssueEventProjectCard
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueEventRename) SetFake() {
	var elem IssueEventRename
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuePullRequest) SetFake() {
	var elem IssuePullRequest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueSearchResultItemPullRequest) SetFake() {
	var elem IssueSearchResultItemPullRequest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueSimple) SetFake() {
	var elem IssueSimple
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssueSimplePullRequest) SetFake() {
	var elem IssueSimplePullRequest
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesAddAssigneesReq) SetFake() {
	var elem IssuesAddAssigneesReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesCreateMilestoneReqState) SetFake() {
	var elem IssuesCreateMilestoneReqState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesLockReqLockReason) SetFake() {
	var elem IssuesLockReqLockReason
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesRemoveAssigneesReq) SetFake() {
	var elem IssuesRemoveAssigneesReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesUpdateLabelReq) SetFake() {
	var elem IssuesUpdateLabelReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesUpdateMilestoneReq) SetFake() {
	var elem IssuesUpdateMilestoneReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesUpdateMilestoneReqState) SetFake() {
	var elem IssuesUpdateMilestoneReqState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesUpdateReq) SetFake() {
	var elem IssuesUpdateReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIssuesUpdateReqState) SetFake() {
	var elem IssuesUpdateReqState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLinkWithType) SetFake() {
	var elem LinkWithType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMarketplaceListingPlan) SetFake() {
	var elem MarketplaceListingPlan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMergedUpstreamMergeType) SetFake() {
	var elem MergedUpstreamMergeType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMigrationsMapCommitAuthorReq) SetFake() {
	var elem MigrationsMapCommitAuthorReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMigrationsStartImportReqVcs) SetFake() {
	var elem MigrationsStartImportReqVcs
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMinimalRepository) SetFake() {
	var elem MinimalRepository
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptMinimalRepositoryPermissions) SetFake() {
	var elem MinimalRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNilBool) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAlertDismissedReason) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAlertRuleSecuritySeverityLevel) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAlertRuleSeverity) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAlertRuleSummarySeverity) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAnalysisToolGUID) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilCodeScanningAnalysisToolVersion) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilDateTime) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilFullRepositorySecurityAndAnalysis) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilGistHistoryArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilGistSimpleForkOf) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilGistSimpleForksItemArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIssuesCreateReqMilestone) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIssuesLockReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIssuesUpdateReqMilestone) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIssuesUpdateReqTitle) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilMarketplacePurchaseMarketplacePendingChange) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilMigrationsUpdateImportReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilMinimalRepositoryLicense) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableIntegration) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableMinimalRepository) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableMinimalRepositoryLicense) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableRepository) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableRepositoryTemplateRepository) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableScopedInstallation) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableSimpleUser) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilNullableTeamSimple) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilPageProtectedDomainState) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilPagesHealthCheckAltDomain) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilProjectsAddCollaboratorReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilPullRequestReviewCommentStartSide) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilPullsMergeReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilPullsUpdateBranchReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilReposCreateForkReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilReposCreateWebhookReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilReposUpdateReqSecurityAndAnalysis) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilRepositoryTemplateRepository) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilReviewCommentStartSide) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSecretScanningAlertResolution) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilSimpleUserArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilString) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTeamArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTeamSimpleArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTopicSearchResultItemAliasesItemArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTopicSearchResultItemRelatedItemArray) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilURI) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNullableMinimalRepositoryPermissions) SetFake() {
	var elem NullableMinimalRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNullableRepositoryPermissions) SetFake() {
	var elem NullableRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNullableRepositoryTemplateRepositoryOwner) SetFake() {
	var elem NullableRepositoryTemplateRepositoryOwner
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNullableRepositoryTemplateRepositoryPermissions) SetFake() {
	var elem NullableRepositoryTemplateRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOAuthAuthorizationsCreateAuthorizationReq) SetFake() {
	var elem OAuthAuthorizationsCreateAuthorizationReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOAuthAuthorizationsUpdateAuthorizationReq) SetFake() {
	var elem OAuthAuthorizationsUpdateAuthorizationReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgMembershipPermissions) SetFake() {
	var elem OrgMembershipPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrganizationFullPlan) SetFake() {
	var elem OrganizationFullPlan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsCreateInvitationReq) SetFake() {
	var elem OrgsCreateInvitationReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsCreateInvitationReqRole) SetFake() {
	var elem OrgsCreateInvitationReqRole
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsSetMembershipForUserReq) SetFake() {
	var elem OrgsSetMembershipForUserReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsSetMembershipForUserReqRole) SetFake() {
	var elem OrgsSetMembershipForUserReqRole
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsUpdateWebhookConfigForOrgReq) SetFake() {
	var elem OrgsUpdateWebhookConfigForOrgReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsUpdateWebhookReq) SetFake() {
	var elem OrgsUpdateWebhookReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptOrgsUpdateWebhookReqConfig) SetFake() {
	var elem OrgsUpdateWebhookReqConfig
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPackageVersionMetadata) SetFake() {
	var elem PackageVersionMetadata
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPackageVersionMetadataContainer) SetFake() {
	var elem PackageVersionMetadataContainer
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPackageVersionMetadataDocker) SetFake() {
	var elem PackageVersionMetadataDocker
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPagesHTTPSCertificate) SetFake() {
	var elem PagesHTTPSCertificate
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPagesHealthCheckDomain) SetFake() {
	var elem PagesHealthCheckDomain
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPagesSourceHash) SetFake() {
	var elem PagesSourceHash
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPrivateUserPlan) SetFake() {
	var elem PrivateUserPlan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProjectOrganizationPermission) SetFake() {
	var elem ProjectOrganizationPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProjectsAddCollaboratorReqPermission) SetFake() {
	var elem ProjectsAddCollaboratorReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProjectsUpdateCardReq) SetFake() {
	var elem ProjectsUpdateCardReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProjectsUpdateReq) SetFake() {
	var elem ProjectsUpdateReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProjectsUpdateReqOrganizationPermission) SetFake() {
	var elem ProjectsUpdateReqOrganizationPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchAdminEnforced) SetFake() {
	var elem ProtectedBranchAdminEnforced
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchAllowDeletions) SetFake() {
	var elem ProtectedBranchAllowDeletions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchAllowForcePushes) SetFake() {
	var elem ProtectedBranchAllowForcePushes
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchEnforceAdmins) SetFake() {
	var elem ProtectedBranchEnforceAdmins
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchPullRequestReview) SetFake() {
	var elem ProtectedBranchPullRequestReview
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchPullRequestReviewDismissalRestrictions) SetFake() {
	var elem ProtectedBranchPullRequestReviewDismissalRestrictions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchRequiredConversationResolution) SetFake() {
	var elem ProtectedBranchRequiredConversationResolution
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchRequiredLinearHistory) SetFake() {
	var elem ProtectedBranchRequiredLinearHistory
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchRequiredPullRequestReviews) SetFake() {
	var elem ProtectedBranchRequiredPullRequestReviews
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetFake() {
	var elem ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptProtectedBranchRequiredSignatures) SetFake() {
	var elem ProtectedBranchRequiredSignatures
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPublicUser) SetFake() {
	var elem PublicUser
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPublicUserPlan) SetFake() {
	var elem PublicUserPlan
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullRequestBaseRepoPermissions) SetFake() {
	var elem PullRequestBaseRepoPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullRequestHeadRepoPermissions) SetFake() {
	var elem PullRequestHeadRepoPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullRequestReviewCommentSide) SetFake() {
	var elem PullRequestReviewCommentSide
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsCreateReviewCommentReqSide) SetFake() {
	var elem PullsCreateReviewCommentReqSide
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsCreateReviewCommentReqStartSide) SetFake() {
	var elem PullsCreateReviewCommentReqStartSide
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsCreateReviewReq) SetFake() {
	var elem PullsCreateReviewReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsCreateReviewReqEvent) SetFake() {
	var elem PullsCreateReviewReqEvent
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsMergeReqMergeMethod) SetFake() {
	var elem PullsMergeReqMergeMethod
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsUpdateReq) SetFake() {
	var elem PullsUpdateReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptPullsUpdateReqState) SetFake() {
	var elem PullsUpdateReqState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRateLimit) SetFake() {
	var elem RateLimit
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReactionRollup) SetFake() {
	var elem ReactionRollup
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRepoSearchResultItemPermissions) SetFake() {
	var elem RepoSearchResultItemPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddAppAccessRestrictionsReq) SetFake() {
	var elem ReposAddAppAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddCollaboratorReq) SetFake() {
	var elem ReposAddCollaboratorReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddCollaboratorReqPermission) SetFake() {
	var elem ReposAddCollaboratorReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddStatusCheckContextsReq) SetFake() {
	var elem ReposAddStatusCheckContextsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddTeamAccessRestrictionsReq) SetFake() {
	var elem ReposAddTeamAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposAddUserAccessRestrictionsReq) SetFake() {
	var elem ReposAddUserAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateDeploymentReqPayload) SetFake() {
	var elem ReposCreateDeploymentReqPayload
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateDeploymentStatusReqEnvironment) SetFake() {
	var elem ReposCreateDeploymentStatusReqEnvironment
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateDispatchEventReqClientPayload) SetFake() {
	var elem ReposCreateDispatchEventReqClientPayload
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateInOrgReqVisibility) SetFake() {
	var elem ReposCreateInOrgReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateOrUpdateFileContentsReqAuthor) SetFake() {
	var elem ReposCreateOrUpdateFileContentsReqAuthor
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateOrUpdateFileContentsReqCommitter) SetFake() {
	var elem ReposCreateOrUpdateFileContentsReqCommitter
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreatePagesSiteReqSourcePath) SetFake() {
	var elem ReposCreatePagesSiteReqSourcePath
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposCreateWebhookReqConfig) SetFake() {
	var elem ReposCreateWebhookReqConfig
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposDeleteFileReqAuthor) SetFake() {
	var elem ReposDeleteFileReqAuthor
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposDeleteFileReqCommitter) SetFake() {
	var elem ReposDeleteFileReqCommitter
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposRemoveAppAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveAppAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposRemoveStatusCheckContextsReq) SetFake() {
	var elem ReposRemoveStatusCheckContextsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposRemoveTeamAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveTeamAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposRemoveUserAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveUserAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposRenameBranchReq) SetFake() {
	var elem ReposRenameBranchReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposSetAppAccessRestrictionsReq) SetFake() {
	var elem ReposSetAppAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposSetStatusCheckContextsReq) SetFake() {
	var elem ReposSetStatusCheckContextsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposSetTeamAccessRestrictionsReq) SetFake() {
	var elem ReposSetTeamAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposSetUserAccessRestrictionsReq) SetFake() {
	var elem ReposSetUserAccessRestrictionsReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetFake() {
	var elem ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateInvitationReq) SetFake() {
	var elem ReposUpdateInvitationReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateInvitationReqPermissions) SetFake() {
	var elem ReposUpdateInvitationReqPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdatePullRequestReviewProtectionReq) SetFake() {
	var elem ReposUpdatePullRequestReviewProtectionReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetFake() {
	var elem ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReleaseAssetReq) SetFake() {
	var elem ReposUpdateReleaseAssetReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReleaseReq) SetFake() {
	var elem ReposUpdateReleaseReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReq) SetFake() {
	var elem ReposUpdateReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) SetFake() {
	var elem ReposUpdateReqSecurityAndAnalysisAdvancedSecurity
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReqSecurityAndAnalysisSecretScanning) SetFake() {
	var elem ReposUpdateReqSecurityAndAnalysisSecretScanning
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateReqVisibility) SetFake() {
	var elem ReposUpdateReqVisibility
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateStatusCheckProtectionReq) SetFake() {
	var elem ReposUpdateStatusCheckProtectionReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateWebhookConfigForRepoReq) SetFake() {
	var elem ReposUpdateWebhookConfigForRepoReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateWebhookReq) SetFake() {
	var elem ReposUpdateWebhookReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReposUpdateWebhookReqConfig) SetFake() {
	var elem ReposUpdateWebhookReqConfig
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRepository) SetFake() {
	var elem Repository
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRepositoryPermissions) SetFake() {
	var elem RepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRepositoryTemplateRepositoryOwner) SetFake() {
	var elem RepositoryTemplateRepositoryOwner
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRepositoryTemplateRepositoryPermissions) SetFake() {
	var elem RepositoryTemplateRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReviewCommentSide) SetFake() {
	var elem ReviewCommentSide
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRunnerLabelsItemType) SetFake() {
	var elem RunnerLabelsItemType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimEnterpriseGroupMeta) SetFake() {
	var elem ScimEnterpriseGroupMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimEnterpriseUserMeta) SetFake() {
	var elem ScimEnterpriseUserMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimEnterpriseUserName) SetFake() {
	var elem ScimEnterpriseUserName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimGroupListEnterpriseResourcesItemMeta) SetFake() {
	var elem ScimGroupListEnterpriseResourcesItemMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimUserListEnterpriseResourcesItemMeta) SetFake() {
	var elem ScimUserListEnterpriseResourcesItemMeta
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptScimUserListEnterpriseResourcesItemName) SetFake() {
	var elem ScimUserListEnterpriseResourcesItemName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSecretScanningAlertState) SetFake() {
	var elem SecretScanningAlertState
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSelectedActions) SetFake() {
	var elem SelectedActions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSelectedActionsURL) SetFake() {
	var elem SelectedActionsURL
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptSimpleUser) SetFake() {
	var elem SimpleUser
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStatusCheckPolicy) SetFake() {
	var elem StatusCheckPolicy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeam) SetFake() {
	var elem Team
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamFullPrivacy) SetFake() {
	var elem TeamFullPrivacy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamPermissions) SetFake() {
	var elem TeamPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamRepositoryPermissions) SetFake() {
	var elem TeamRepositoryPermissions
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateMembershipForUserInOrgReq) SetFake() {
	var elem TeamsAddOrUpdateMembershipForUserInOrgReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) SetFake() {
	var elem TeamsAddOrUpdateMembershipForUserInOrgReqRole
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateMembershipForUserLegacyReq) SetFake() {
	var elem TeamsAddOrUpdateMembershipForUserLegacyReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) SetFake() {
	var elem TeamsAddOrUpdateMembershipForUserLegacyReqRole
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) SetFake() {
	var elem TeamsAddOrUpdateProjectPermissionsInOrgReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateProjectPermissionsLegacyReq) SetFake() {
	var elem TeamsAddOrUpdateProjectPermissionsLegacyReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) SetFake() {
	var elem TeamsAddOrUpdateProjectPermissionsLegacyReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateRepoPermissionsInOrgReq) SetFake() {
	var elem TeamsAddOrUpdateRepoPermissionsInOrgReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) SetFake() {
	var elem TeamsAddOrUpdateRepoPermissionsInOrgReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateRepoPermissionsLegacyReq) SetFake() {
	var elem TeamsAddOrUpdateRepoPermissionsLegacyReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) SetFake() {
	var elem TeamsAddOrUpdateRepoPermissionsLegacyReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsCreateReqPermission) SetFake() {
	var elem TeamsCreateReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsCreateReqPrivacy) SetFake() {
	var elem TeamsCreateReqPrivacy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateDiscussionInOrgReq) SetFake() {
	var elem TeamsUpdateDiscussionInOrgReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateDiscussionLegacyReq) SetFake() {
	var elem TeamsUpdateDiscussionLegacyReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateInOrgReq) SetFake() {
	var elem TeamsUpdateInOrgReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateInOrgReqPermission) SetFake() {
	var elem TeamsUpdateInOrgReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateInOrgReqPrivacy) SetFake() {
	var elem TeamsUpdateInOrgReqPrivacy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateLegacyReqPermission) SetFake() {
	var elem TeamsUpdateLegacyReqPermission
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTeamsUpdateLegacyReqPrivacy) SetFake() {
	var elem TeamsUpdateLegacyReqPrivacy
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTopicSearchResultItemAliasesItemTopicRelation) SetFake() {
	var elem TopicSearchResultItemAliasesItemTopicRelation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTopicSearchResultItemRelatedItemTopicRelation) SetFake() {
	var elem TopicSearchResultItemRelatedItemTopicRelation
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptURI) SetFake() {
	var elem url.URL
	{
		elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUsersAddEmailForAuthenticatedReq) SetFake() {
	var elem UsersAddEmailForAuthenticatedReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUsersDeleteEmailForAuthenticatedReq) SetFake() {
	var elem UsersDeleteEmailForAuthenticatedReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUsersUpdateAuthenticatedReq) SetFake() {
	var elem UsersUpdateAuthenticatedReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptValidationErrorErrorsItemValue) SetFake() {
	var elem ValidationErrorErrorsItemValue
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptVerification) SetFake() {
	var elem Verification
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWebhookConfigContentType) SetFake() {
	var elem WebhookConfigContentType
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWebhookConfigInsecureSsl) SetFake() {
	var elem WebhookConfigInsecureSsl
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWebhookConfigSecret) SetFake() {
	var elem WebhookConfigSecret
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWebhookConfigURL) SetFake() {
	var elem WebhookConfigURL
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWorkflowRunUsageBillableMACOS) SetFake() {
	var elem WorkflowRunUsageBillableMACOS
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWorkflowRunUsageBillableUBUNTU) SetFake() {
	var elem WorkflowRunUsageBillableUBUNTU
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWorkflowRunUsageBillableWINDOWS) SetFake() {
	var elem WorkflowRunUsageBillableWINDOWS
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OrgHook) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PingURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeliveriesURL.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.Active = true
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Type = "string"
		}
	}
}

// SetFake set fake values.
func (s *OrgHookConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgMembership) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Role.SetFake()
		}
	}
	{
		{
			s.OrganizationURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Organization.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgMembershipPermissions) SetFake() {
	{
		{
			s.CanCreateRepository = true
		}
	}
}

// SetFake set fake values.
func (s *OrgMembershipRole) SetFake() {
	*s = OrgMembershipRoleAdmin
}

// SetFake set fake values.
func (s *OrgMembershipState) SetFake() {
	*s = OrgMembershipStateActive
}

// SetFake set fake values.
func (s *OrganizationActionsSecret) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.SelectedRepositoriesURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrganizationActionsSecretVisibility) SetFake() {
	*s = OrganizationActionsSecretVisibilityAll
}

// SetFake set fake values.
func (s *OrganizationFull) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HooksURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.PublicMembersURL = "string"
		}
	}
	{
		{
			s.AvatarURL = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Company.SetFake()
		}
	}
	{
		{
			s.Blog.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.TwitterUsername.SetFake()
		}
	}
	{
		{
			s.IsVerified.SetFake()
		}
	}
	{
		{
			s.HasOrganizationProjects = true
		}
	}
	{
		{
			s.HasRepositoryProjects = true
		}
	}
	{
		{
			s.PublicRepos = int(0)
		}
	}
	{
		{
			s.PublicGists = int(0)
		}
	}
	{
		{
			s.Followers = int(0)
		}
	}
	{
		{
			s.Following = int(0)
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.TotalPrivateRepos.SetFake()
		}
	}
	{
		{
			s.OwnedPrivateRepos.SetFake()
		}
	}
	{
		{
			s.PrivateGists.SetFake()
		}
	}
	{
		{
			s.DiskUsage.SetFake()
		}
	}
	{
		{
			s.Collaborators.SetFake()
		}
	}
	{
		{
			s.BillingEmail.SetFake()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
	{
		{
			s.DefaultRepositoryPermission.SetFake()
		}
	}
	{
		{
			s.MembersCanCreateRepositories.SetFake()
		}
	}
	{
		{
			s.TwoFactorRequirementEnabled.SetFake()
		}
	}
	{
		{
			s.MembersAllowedRepositoryCreationType.SetFake()
		}
	}
	{
		{
			s.MembersCanCreatePublicRepositories.SetFake()
		}
	}
	{
		{
			s.MembersCanCreatePrivateRepositories.SetFake()
		}
	}
	{
		{
			s.MembersCanCreateInternalRepositories.SetFake()
		}
	}
	{
		{
			s.MembersCanCreatePages.SetFake()
		}
	}
	{
		{
			s.MembersCanCreatePublicPages.SetFake()
		}
	}
	{
		{
			s.MembersCanCreatePrivatePages.SetFake()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *OrganizationFullPlan) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Space = int(0)
		}
	}
	{
		{
			s.PrivateRepos = int(0)
		}
	}
	{
		{
			s.FilledSeats.SetFake()
		}
	}
	{
		{
			s.Seats.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrganizationInvitation) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Role = "string"
		}
	}
	{
		{
			s.CreatedAt = "string"
		}
	}
	{
		{
			s.FailedAt.SetFake()
		}
	}
	{
		{
			s.FailedReason.SetFake()
		}
	}
	{
		{
			s.Inviter.SetFake()
		}
	}
	{
		{
			s.TeamCount = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.InvitationTeamsURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *OrganizationSecretScanningAlert) SetFake() {
	{
		{
			s.Number.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.LocationsURL.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Resolution.SetFake()
		}
	}
	{
		{
			s.ResolvedAt.SetFake()
		}
	}
	{
		{
			s.ResolvedBy.SetFake()
		}
	}
	{
		{
			s.SecretType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrganizationSimple) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HooksURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.PublicMembersURL = "string"
		}
	}
	{
		{
			s.AvatarURL = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsConvertMemberToOutsideCollaboratorAccepted) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *OrgsCreateInvitationReq) SetFake() {
	{
		{
			s.InviteeID.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Role.SetFake()
		}
	}
	{
		{
			s.TeamIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.TeamIds = append(s.TeamIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *OrgsCreateInvitationReqRole) SetFake() {
	*s = OrgsCreateInvitationReqRoleAdmin
}

// SetFake set fake values.
func (s *OrgsCreateWebhookReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsCreateWebhookReqConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.Username.SetFake()
		}
	}
	{
		{
			s.Password.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OrgsGetMembershipForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsGetMembershipForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsGetMembershipForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsGetMembershipForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListBlockedUsersOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListBlockedUsersOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListFailedInvitationsOKApplicationJSON) SetFake() {
	var unwrapped []OrganizationInvitation
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrganizationInvitation
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListFailedInvitationsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsListForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsListForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []OrganizationSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrganizationSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListInvitationTeamsOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListInvitationTeamsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListMembersOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListMembersOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListMembershipsForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []OrgMembership
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrgMembership
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListMembershipsForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListOKApplicationJSON) SetFake() {
	var unwrapped []OrganizationSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrganizationSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListPendingInvitationsOKApplicationJSON) SetFake() {
	var unwrapped []OrganizationInvitation
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrganizationInvitation
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListPendingInvitationsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListWebhookDeliveriesOKApplicationJSON) SetFake() {
	var unwrapped []HookDeliveryItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem HookDeliveryItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListWebhookDeliveriesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsListWebhooksOKApplicationJSON) SetFake() {
	var unwrapped []OrgHook
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrgHook
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = OrgsListWebhooksOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *OrgsRemoveMembershipForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsRemoveMembershipForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsRemoveMembershipForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsRemoveMembershipForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsSetMembershipForUserReq) SetFake() {
	{
		{
			s.Role.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsSetMembershipForUserReqRole) SetFake() {
	*s = OrgsSetMembershipForUserReqRoleAdmin
}

// SetFake set fake values.
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *OrgsUpdateMembershipForAuthenticatedUserReq) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsUpdateMembershipForAuthenticatedUserReqState) SetFake() {
	*s = OrgsUpdateMembershipForAuthenticatedUserReqStateActive
}

// SetFake set fake values.
func (s *OrgsUpdateWebhookConfigForOrgReq) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsUpdateWebhookConfigForOrgReqAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *OrgsUpdateWebhookReq) SetFake() {
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *OrgsUpdateWebhookReqConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Package) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.PackageType.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL = "string"
		}
	}
	{
		{
			s.VersionCount = int(0)
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *PackagePackageType) SetFake() {
	*s = PackagePackageTypeNpm
}

// SetFake set fake values.
func (s *PackageVersion) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.PackageHTMLURL = "string"
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.DeletedAt.SetFake()
		}
	}
	{
		{
			s.Metadata.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PackageVersionMetadata) SetFake() {
	{
		{
			s.PackageType.SetFake()
		}
	}
	{
		{
			s.Container.SetFake()
		}
	}
	{
		{
			s.Docker.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PackageVersionMetadataContainer) SetFake() {
	{
		{
			s.Tags = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Tags = append(s.Tags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PackageVersionMetadataDocker) SetFake() {
	{
		{
			s.Tag = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Tag = append(s.Tag, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PackageVersionMetadataPackageType) SetFake() {
	*s = PackageVersionMetadataPackageTypeNpm
}

// SetFake set fake values.
func (s *PackageVisibility) SetFake() {
	*s = PackageVisibilityPrivate
}

// SetFake set fake values.
func (s *PackagesBillingUsage) SetFake() {
	{
		{
			s.TotalGigabytesBandwidthUsed = int(0)
		}
	}
	{
		{
			s.TotalPaidGigabytesBandwidthUsed = int(0)
		}
	}
	{
		{
			s.IncludedGigabytesBandwidth = int(0)
		}
	}
}

// SetFake set fake values.
func (s *PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesDeletePackageVersionForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesDeletePackageVersionForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []PackageVersion
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PackageVersion
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) SetFake() {
	var unwrapped []PackageVersion
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PackageVersion
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) SetFake() {
	var unwrapped []PackageVersion
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PackageVersion
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForOrganizationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesListPackagesForOrganizationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForOrganizationApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesListPackagesForOrganizationApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForOrganizationOKApplicationJSON) SetFake() {
	var unwrapped []Package
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Package
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PackagesListPackagesForOrganizationOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesListPackagesForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesListPackagesForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesListPackagesForUserOKApplicationJSON) SetFake() {
	var unwrapped []Package
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Package
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PackagesListPackagesForUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PackagesRestorePackageVersionForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PackagesRestorePackageVersionForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *Page) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Cname.SetFake()
		}
	}
	{
		{
			s.ProtectedDomainState.SetFake()
		}
	}
	{
		{
			s.PendingDomainUnverifiedAt.SetFake()
		}
	}
	{
		{
			s.Custom404 = true
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Source.SetFake()
		}
	}
	{
		{
			s.Public = true
		}
	}
	{
		{
			s.HTTPSCertificate.SetFake()
		}
	}
	{
		{
			s.HTTPSEnforced.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PageBuild) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Error.SetFake()
		}
	}
	{
		{
			s.Pusher.SetFake()
		}
	}
	{
		{
			s.Commit = "string"
		}
	}
	{
		{
			s.Duration = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *PageBuildError) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PageBuildStatus) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Status = "string"
		}
	}
}

// SetFake set fake values.
func (s *PageProtectedDomainState) SetFake() {
	*s = PageProtectedDomainStatePending
}

// SetFake set fake values.
func (s *PageStatus) SetFake() {
	*s = PageStatusBuilt
}

// SetFake set fake values.
func (s *PagesHTTPSCertificate) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Domains = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.Domains = append(s.Domains, elem)
			}
		}
	}
	{
		{
			s.ExpiresAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PagesHTTPSCertificateState) SetFake() {
	*s = PagesHTTPSCertificateStateNew
}

// SetFake set fake values.
func (s *PagesHealthCheck) SetFake() {
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.AltDomain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PagesHealthCheckAltDomain) SetFake() {
	{
		{
			s.Host.SetFake()
		}
	}
	{
		{
			s.URI.SetFake()
		}
	}
	{
		{
			s.Nameservers.SetFake()
		}
	}
	{
		{
			s.DNSResolves.SetFake()
		}
	}
	{
		{
			s.IsProxied.SetFake()
		}
	}
	{
		{
			s.IsCloudflareIP.SetFake()
		}
	}
	{
		{
			s.IsFastlyIP.SetFake()
		}
	}
	{
		{
			s.IsOldIPAddress.SetFake()
		}
	}
	{
		{
			s.IsARecord.SetFake()
		}
	}
	{
		{
			s.HasCnameRecord.SetFake()
		}
	}
	{
		{
			s.HasMxRecordsPresent.SetFake()
		}
	}
	{
		{
			s.IsValidDomain.SetFake()
		}
	}
	{
		{
			s.IsApexDomain.SetFake()
		}
	}
	{
		{
			s.ShouldBeARecord.SetFake()
		}
	}
	{
		{
			s.IsCnameToGithubUserDomain.SetFake()
		}
	}
	{
		{
			s.IsCnameToPagesDotGithubDotCom.SetFake()
		}
	}
	{
		{
			s.IsCnameToFastly.SetFake()
		}
	}
	{
		{
			s.IsPointedToGithubPagesIP.SetFake()
		}
	}
	{
		{
			s.IsNonGithubPagesIPPresent.SetFake()
		}
	}
	{
		{
			s.IsPagesDomain.SetFake()
		}
	}
	{
		{
			s.IsServedByPages.SetFake()
		}
	}
	{
		{
			s.IsValid.SetFake()
		}
	}
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.RespondsToHTTPS.SetFake()
		}
	}
	{
		{
			s.EnforcesHTTPS.SetFake()
		}
	}
	{
		{
			s.HTTPSError.SetFake()
		}
	}
	{
		{
			s.IsHTTPSEligible.SetFake()
		}
	}
	{
		{
			s.CaaError.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PagesHealthCheckDomain) SetFake() {
	{
		{
			s.Host.SetFake()
		}
	}
	{
		{
			s.URI.SetFake()
		}
	}
	{
		{
			s.Nameservers.SetFake()
		}
	}
	{
		{
			s.DNSResolves.SetFake()
		}
	}
	{
		{
			s.IsProxied.SetFake()
		}
	}
	{
		{
			s.IsCloudflareIP.SetFake()
		}
	}
	{
		{
			s.IsFastlyIP.SetFake()
		}
	}
	{
		{
			s.IsOldIPAddress.SetFake()
		}
	}
	{
		{
			s.IsARecord.SetFake()
		}
	}
	{
		{
			s.HasCnameRecord.SetFake()
		}
	}
	{
		{
			s.HasMxRecordsPresent.SetFake()
		}
	}
	{
		{
			s.IsValidDomain.SetFake()
		}
	}
	{
		{
			s.IsApexDomain.SetFake()
		}
	}
	{
		{
			s.ShouldBeARecord.SetFake()
		}
	}
	{
		{
			s.IsCnameToGithubUserDomain.SetFake()
		}
	}
	{
		{
			s.IsCnameToPagesDotGithubDotCom.SetFake()
		}
	}
	{
		{
			s.IsCnameToFastly.SetFake()
		}
	}
	{
		{
			s.IsPointedToGithubPagesIP.SetFake()
		}
	}
	{
		{
			s.IsNonGithubPagesIPPresent.SetFake()
		}
	}
	{
		{
			s.IsPagesDomain.SetFake()
		}
	}
	{
		{
			s.IsServedByPages.SetFake()
		}
	}
	{
		{
			s.IsValid.SetFake()
		}
	}
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.RespondsToHTTPS.SetFake()
		}
	}
	{
		{
			s.EnforcesHTTPS.SetFake()
		}
	}
	{
		{
			s.HTTPSError.SetFake()
		}
	}
	{
		{
			s.IsHTTPSEligible.SetFake()
		}
	}
	{
		{
			s.CaaError.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PagesSourceHash) SetFake() {
	{
		{
			s.Branch = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
}

// SetFake set fake values.
func (s *ParticipationStats) SetFake() {
	{
		{
			s.All = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.All = append(s.All, elem)
			}
		}
	}
	{
		{
			s.Owner = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Owner = append(s.Owner, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PorterAuthor) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.RemoteID = "string"
		}
	}
	{
		{
			s.RemoteName = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ImportURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PorterLargeFile) SetFake() {
	{
		{
			s.RefName = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Oid = "string"
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
}

// SetFake set fake values.
func (s *PreviewHeaderMissing) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.DocumentationURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *PrivateUser) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Company.SetFake()
		}
	}
	{
		{
			s.Blog.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Hireable.SetFake()
		}
	}
	{
		{
			s.Bio.SetFake()
		}
	}
	{
		{
			s.TwitterUsername.SetFake()
		}
	}
	{
		{
			s.PublicRepos = int(0)
		}
	}
	{
		{
			s.PublicGists = int(0)
		}
	}
	{
		{
			s.Followers = int(0)
		}
	}
	{
		{
			s.Following = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.PrivateGists = int(0)
		}
	}
	{
		{
			s.TotalPrivateRepos = int(0)
		}
	}
	{
		{
			s.OwnedPrivateRepos = int(0)
		}
	}
	{
		{
			s.DiskUsage = int(0)
		}
	}
	{
		{
			s.Collaborators = int(0)
		}
	}
	{
		{
			s.TwoFactorAuthentication = true
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
	{
		{
			s.SuspendedAt.SetFake()
		}
	}
	{
		{
			s.BusinessPlus.SetFake()
		}
	}
	{
		{
			s.LdapDn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PrivateUserPlan) SetFake() {
	{
		{
			s.Collaborators = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Space = int(0)
		}
	}
	{
		{
			s.PrivateRepos = int(0)
		}
	}
}

// SetFake set fake values.
func (s *Project) SetFake() {
	{
		{
			s.OwnerURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ColumnsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.OrganizationPermission.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectCard) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.ColumnName.SetFake()
		}
	}
	{
		{
			s.ProjectID.SetFake()
		}
	}
	{
		{
			s.ColumnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ContentURL.SetFake()
		}
	}
	{
		{
			s.ProjectURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *ProjectColumn) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ProjectURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CardsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *ProjectOrganizationPermission) SetFake() {
	*s = ProjectOrganizationPermissionRead
}

// SetFake set fake values.
func (s *ProjectsAddCollaboratorApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsAddCollaboratorApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsAddCollaboratorApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsAddCollaboratorApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsAddCollaboratorApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsAddCollaboratorApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsAddCollaboratorReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsAddCollaboratorReqPermission) SetFake() {
	*s = ProjectsAddCollaboratorReqPermissionRead
}

// SetFake set fake values.
func (s *ProjectsCreateColumnApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateColumnApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateColumnApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateColumnApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateColumnReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *ProjectsCreateForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForAuthenticatedUserReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsCreateForOrgApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForOrgApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForOrgApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForOrgApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForOrgApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForOrgApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForOrgReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsCreateForRepoApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForRepoApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForRepoApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForRepoApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForRepoApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForRepoApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForRepoApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsCreateForRepoApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsCreateForRepoReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsDeleteApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteCardApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteCardApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteCardApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteCardApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteCardForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProjectsDeleteColumnApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteColumnApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteColumnApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsDeleteColumnApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsDeleteForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProjectsGetApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetCardApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetCardApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetCardApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetCardApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetCardApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetCardApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetColumnApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetColumnApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetColumnApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetColumnApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetColumnApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetColumnApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetPermissionForUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetPermissionForUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetPermissionForUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetPermissionForUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsGetPermissionForUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsGetPermissionForUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCardsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListCardsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCardsApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListCardsApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCardsOKApplicationJSON) SetFake() {
	var unwrapped []ProjectCard
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ProjectCard
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListCardsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCollaboratorsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListCollaboratorsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCollaboratorsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListCollaboratorsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCollaboratorsApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListCollaboratorsApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListCollaboratorsOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListCollaboratorsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListColumnsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListColumnsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListColumnsApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListColumnsApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListColumnsOKApplicationJSON) SetFake() {
	var unwrapped []ProjectColumn
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ProjectColumn
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListColumnsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForOrgOKApplicationJSON) SetFake() {
	var unwrapped []Project
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Project
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListForOrgOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForRepoApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListForRepoApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForRepoApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListForRepoApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForRepoApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListForRepoApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForRepoApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsListForRepoApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForRepoOKApplicationJSON) SetFake() {
	var unwrapped []Project
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Project
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsListForUserOKApplicationJSON) SetFake() {
	var unwrapped []Project
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Project
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ProjectsListForUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsMoveCardCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProjectsMoveCardForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem ProjectsMoveCardForbiddenErrorsItem
				{
					elem.SetFake()
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProjectsMoveCardForbiddenErrorsItem) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Resource.SetFake()
		}
	}
	{
		{
			s.Field.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsMoveCardReq) SetFake() {
	{
		{
			s.Position = "string"
		}
	}
	{
		{
			s.ColumnID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsMoveCardServiceUnavailable) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem ProjectsMoveCardServiceUnavailableErrorsItem
				{
					elem.SetFake()
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProjectsMoveCardServiceUnavailableErrorsItem) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsMoveColumnApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsMoveColumnApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsMoveColumnApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsMoveColumnApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsMoveColumnCreated) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProjectsMoveColumnReq) SetFake() {
	{
		{
			s.Position = "string"
		}
	}
}

// SetFake set fake values.
func (s *ProjectsRemoveCollaboratorApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsRemoveCollaboratorApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsRemoveCollaboratorApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsRemoveCollaboratorApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsRemoveCollaboratorApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsRemoveCollaboratorApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateCardApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateCardApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateCardApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateCardApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateCardApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateCardApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateCardReq) SetFake() {
	{
		{
			s.Note.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsUpdateColumnApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateColumnApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateColumnApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ProjectsUpdateColumnApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ProjectsUpdateColumnReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *ProjectsUpdateForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProjectsUpdateReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.OrganizationPermission.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProjectsUpdateReqOrganizationPermission) SetFake() {
	*s = ProjectsUpdateReqOrganizationPermissionRead
}

// SetFake set fake values.
func (s *ProtectedBranch) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RequiredStatusChecks.SetFake()
		}
	}
	{
		{
			s.RequiredPullRequestReviews.SetFake()
		}
	}
	{
		{
			s.RequiredSignatures.SetFake()
		}
	}
	{
		{
			s.EnforceAdmins.SetFake()
		}
	}
	{
		{
			s.RequiredLinearHistory.SetFake()
		}
	}
	{
		{
			s.AllowForcePushes.SetFake()
		}
	}
	{
		{
			s.AllowDeletions.SetFake()
		}
	}
	{
		{
			s.Restrictions.SetFake()
		}
	}
	{
		{
			s.RequiredConversationResolution.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchAdminEnforced) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Enabled = true
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchAllowDeletions) SetFake() {
	{
		{
			s.Enabled = true
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchAllowDeletionsAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProtectedBranchAllowForcePushes) SetFake() {
	{
		{
			s.Enabled = true
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchAllowForcePushesAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProtectedBranchEnforceAdmins) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Enabled = true
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchEnforceAdminsAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProtectedBranchPullRequestReview) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.DismissalRestrictions.SetFake()
		}
	}
	{
		{
			s.DismissStaleReviews = true
		}
	}
	{
		{
			s.RequireCodeOwnerReviews = true
		}
	}
	{
		{
			s.RequiredApprovingReviewCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem SimpleUser
				{
					elem.SetFake()
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem Team
				{
					elem.SetFake()
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.UsersURL.SetFake()
		}
	}
	{
		{
			s.TeamsURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredConversationResolution) SetFake() {
	{
		{
			s.Enabled.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredConversationResolutionAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredLinearHistory) SetFake() {
	{
		{
			s.Enabled = true
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredLinearHistoryAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredPullRequestReviews) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DismissStaleReviews.SetFake()
		}
	}
	{
		{
			s.RequireCodeOwnerReviews.SetFake()
		}
	}
	{
		{
			s.RequiredApprovingReviewCount.SetFake()
		}
	}
	{
		{
			s.DismissalRestrictions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.UsersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem SimpleUser
				{
					elem.SetFake()
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem Team
				{
					elem.SetFake()
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ProtectedBranchRequiredSignatures) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Enabled = true
		}
	}
}

// SetFake set fake values.
func (s *PublicUser) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Company.SetFake()
		}
	}
	{
		{
			s.Blog.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Hireable.SetFake()
		}
	}
	{
		{
			s.Bio.SetFake()
		}
	}
	{
		{
			s.TwitterUsername.SetFake()
		}
	}
	{
		{
			s.PublicRepos = int(0)
		}
	}
	{
		{
			s.PublicGists = int(0)
		}
	}
	{
		{
			s.Followers = int(0)
		}
	}
	{
		{
			s.Following = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
	{
		{
			s.SuspendedAt.SetFake()
		}
	}
	{
		{
			s.PrivateGists.SetFake()
		}
	}
	{
		{
			s.TotalPrivateRepos.SetFake()
		}
	}
	{
		{
			s.OwnedPrivateRepos.SetFake()
		}
	}
	{
		{
			s.DiskUsage.SetFake()
		}
	}
	{
		{
			s.Collaborators.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PublicUserAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *PublicUserPlan) SetFake() {
	{
		{
			s.Collaborators = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Space = int(0)
		}
	}
	{
		{
			s.PrivateRepos = int(0)
		}
	}
}

// SetFake set fake values.
func (s *PullRequest) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DiffURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PatchURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.IssueURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommitsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReviewCommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReviewCommentURL = "string"
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Locked = true
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem PullRequestLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.ActiveLockReason.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.MergedAt.SetFake()
		}
	}
	{
		{
			s.MergeCommitSha.SetFake()
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Assignees.SetFake()
		}
	}
	{
		{
			s.RequestedReviewers.SetFake()
		}
	}
	{
		{
			s.RequestedTeams.SetFake()
		}
	}
	{
		{
			s.Head.SetFake()
		}
	}
	{
		{
			s.Base.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.AutoMerge.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
	{
		{
			s.Merged = true
		}
	}
	{
		{
			s.Mergeable.SetFake()
		}
	}
	{
		{
			s.Rebaseable.SetFake()
		}
	}
	{
		{
			s.MergeableState = "string"
		}
	}
	{
		{
			s.MergedBy.SetFake()
		}
	}
	{
		{
			s.Comments = int(0)
		}
	}
	{
		{
			s.ReviewComments = int(0)
		}
	}
	{
		{
			s.MaintainerCanModify = true
		}
	}
	{
		{
			s.Commits = int(0)
		}
	}
	{
		{
			s.Additions = int(0)
		}
	}
	{
		{
			s.Deletions = int(0)
		}
	}
	{
		{
			s.ChangedFiles = int(0)
		}
	}
}

// SetFake set fake values.
func (s *PullRequestBase) SetFake() {
	{
		{
			s.Label = "string"
		}
	}
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestBaseRepo) SetFake() {
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.PushedAt = time.Now()
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestBaseRepoOwner) SetFake() {
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestBaseRepoPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull = true
		}
	}
}

// SetFake set fake values.
func (s *PullRequestBaseUser) SetFake() {
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHead) SetFake() {
	{
		{
			s.Label = "string"
		}
	}
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHeadRepo) SetFake() {
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.PushedAt = time.Now()
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHeadRepoLicense) SetFake() {
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.SpdxID.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHeadRepoOwner) SetFake() {
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHeadRepoPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull = true
		}
	}
}

// SetFake set fake values.
func (s *PullRequestHeadUser) SetFake() {
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestLabelsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Default.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestLinks) SetFake() {
	{
		{
			s.Comments.SetFake()
		}
	}
	{
		{
			s.Commits.SetFake()
		}
	}
	{
		{
			s.Statuses.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.Issue.SetFake()
		}
	}
	{
		{
			s.ReviewComments.SetFake()
		}
	}
	{
		{
			s.ReviewComment.SetFake()
		}
	}
	{
		{
			s.Self.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMergeResult) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Merged = true
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMinimal) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Head.SetFake()
		}
	}
	{
		{
			s.Base.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMinimalBase) SetFake() {
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMinimalBaseRepo) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMinimalHead) SetFake() {
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestMinimalHeadRepo) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReview) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PullRequestURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.SubmittedAt.SetFake()
		}
	}
	{
		{
			s.CommitID = "string"
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewComment) SetFake() {
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.PullRequestReviewID.SetFake()
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.DiffHunk = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Position = int(0)
		}
	}
	{
		{
			s.OriginalPosition = int(0)
		}
	}
	{
		{
			s.CommitID = "string"
		}
	}
	{
		{
			s.OriginalCommitID = "string"
		}
	}
	{
		{
			s.InReplyToID.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PullRequestURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.StartLine.SetFake()
		}
	}
	{
		{
			s.OriginalStartLine.SetFake()
		}
	}
	{
		{
			s.StartSide.SetFake()
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
	{
		{
			s.OriginalLine.SetFake()
		}
	}
	{
		{
			s.Side.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewCommentLinks) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewCommentLinksHTML) SetFake() {
	{
		{
			s.Href = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewCommentLinksPullRequest) SetFake() {
	{
		{
			s.Href = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewCommentLinksSelf) SetFake() {
	{
		{
			s.Href = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewCommentSide) SetFake() {
	*s = PullRequestReviewCommentSideLEFT
}

// SetFake set fake values.
func (s *PullRequestReviewCommentStartSide) SetFake() {
	*s = PullRequestReviewCommentStartSideLEFT
}

// SetFake set fake values.
func (s *PullRequestReviewLinks) SetFake() {
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewLinksHTML) SetFake() {
	{
		{
			s.Href = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewLinksPullRequest) SetFake() {
	{
		{
			s.Href = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullRequestReviewRequest) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem SimpleUser
				{
					elem.SetFake()
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem Team
				{
					elem.SetFake()
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PullRequestSimple) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DiffURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PatchURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.IssueURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommitsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReviewCommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReviewCommentURL = "string"
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Locked = true
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem PullRequestSimpleLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
	{
		{
			s.Milestone.SetFake()
		}
	}
	{
		{
			s.ActiveLockReason.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.ClosedAt.SetFake()
		}
	}
	{
		{
			s.MergedAt.SetFake()
		}
	}
	{
		{
			s.MergeCommitSha.SetFake()
		}
	}
	{
		{
			s.Assignee.SetFake()
		}
	}
	{
		{
			s.Assignees.SetFake()
		}
	}
	{
		{
			s.RequestedReviewers.SetFake()
		}
	}
	{
		{
			s.RequestedTeams.SetFake()
		}
	}
	{
		{
			s.Head.SetFake()
		}
	}
	{
		{
			s.Base.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.AutoMerge.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestSimpleBase) SetFake() {
	{
		{
			s.Label = "string"
		}
	}
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestSimpleHead) SetFake() {
	{
		{
			s.Label = "string"
		}
	}
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Repo.SetFake()
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestSimpleLabelsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Color.SetFake()
		}
	}
	{
		{
			s.Default.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestSimpleLinks) SetFake() {
	{
		{
			s.Comments.SetFake()
		}
	}
	{
		{
			s.Commits.SetFake()
		}
	}
	{
		{
			s.Statuses.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.Issue.SetFake()
		}
	}
	{
		{
			s.ReviewComments.SetFake()
		}
	}
	{
		{
			s.ReviewComment.SetFake()
		}
	}
	{
		{
			s.Self.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullRequestState) SetFake() {
	*s = PullRequestStateOpen
}

// SetFake set fake values.
func (s *PullsCreateReplyForReviewCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullsCreateReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Head = "string"
		}
	}
	{
		{
			s.Base = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.MaintainerCanModify.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
	{
		{
			s.Issue.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsCreateReviewCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.CommitID.SetFake()
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Position.SetFake()
		}
	}
	{
		{
			s.Side.SetFake()
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
	{
		{
			s.StartLine.SetFake()
		}
	}
	{
		{
			s.StartSide.SetFake()
		}
	}
	{
		{
			s.InReplyTo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsCreateReviewCommentReqSide) SetFake() {
	*s = PullsCreateReviewCommentReqSideLEFT
}

// SetFake set fake values.
func (s *PullsCreateReviewCommentReqStartSide) SetFake() {
	*s = PullsCreateReviewCommentReqStartSideLEFT
}

// SetFake set fake values.
func (s *PullsCreateReviewReq) SetFake() {
	{
		{
			s.CommitID.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Event.SetFake()
		}
	}
	{
		{
			s.Comments = nil
			for i := 0; i < 0; i++ {
				var elem PullsCreateReviewReqCommentsItem
				{
					elem.SetFake()
				}
				s.Comments = append(s.Comments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PullsCreateReviewReqCommentsItem) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Position.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
	{
		{
			s.Side.SetFake()
		}
	}
	{
		{
			s.StartLine.SetFake()
		}
	}
	{
		{
			s.StartSide.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsCreateReviewReqEvent) SetFake() {
	*s = PullsCreateReviewReqEventAPPROVE
}

// SetFake set fake values.
func (s *PullsDismissReviewReq) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Event.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsGetApplicationJSONInternalServerError) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsGetApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *PullsGetApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsGetApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PullsListCommentsForReviewOKApplicationJSON) SetFake() {
	var unwrapped []ReviewComment
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ReviewComment
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PullsListCommentsForReviewOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PullsListFilesOKApplicationJSON) SetFake() {
	var unwrapped []DiffEntry
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem DiffEntry
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PullsListFilesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PullsListOKApplicationJSON) SetFake() {
	var unwrapped []PullRequestSimple
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PullRequestSimple
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PullsListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *PullsMergeApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsMergeApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PullsMergeApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsMergeApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PullsMergeConflict) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsMergeMethodNotAllowed) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsMergeReq) SetFake() {
	{
		{
			s.CommitTitle.SetFake()
		}
	}
	{
		{
			s.CommitMessage.SetFake()
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.MergeMethod.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsMergeReqMergeMethod) SetFake() {
	*s = PullsMergeReqMergeMethodMerge
}

// SetFake set fake values.
func (s *PullsRemoveRequestedReviewersReq) SetFake() {
	{
		{
			s.Reviewers = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Reviewers = append(s.Reviewers, elem)
			}
		}
	}
	{
		{
			s.TeamReviewers = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.TeamReviewers = append(s.TeamReviewers, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *PullsSubmitReviewApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsSubmitReviewApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *PullsSubmitReviewApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = PullsSubmitReviewApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *PullsSubmitReviewReq) SetFake() {
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Event.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsSubmitReviewReqEvent) SetFake() {
	*s = PullsSubmitReviewReqEventAPPROVE
}

// SetFake set fake values.
func (s *PullsUpdateBranchAccepted) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsUpdateBranchReq) SetFake() {
	{
		{
			s.ExpectedHeadSha.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsUpdateReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Base.SetFake()
		}
	}
	{
		{
			s.MaintainerCanModify.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PullsUpdateReqState) SetFake() {
	*s = PullsUpdateReqStateOpen
}

// SetFake set fake values.
func (s *PullsUpdateReviewCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *PullsUpdateReviewReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *RateLimit) SetFake() {
	{
		{
			s.Limit = int(0)
		}
	}
	{
		{
			s.Remaining = int(0)
		}
	}
	{
		{
			s.Reset = int(0)
		}
	}
	{
		{
			s.Used = int(0)
		}
	}
}

// SetFake set fake values.
func (s *RateLimitOverview) SetFake() {
	{
		{
			s.Resources.SetFake()
		}
	}
	{
		{
			s.Rate.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RateLimitOverviewResources) SetFake() {
	{
		{
			s.Core.SetFake()
		}
	}
	{
		{
			s.Graphql.SetFake()
		}
	}
	{
		{
			s.Search.SetFake()
		}
	}
	{
		{
			s.SourceImport.SetFake()
		}
	}
	{
		{
			s.IntegrationManifest.SetFake()
		}
	}
	{
		{
			s.CodeScanningUpload.SetFake()
		}
	}
	{
		{
			s.ActionsRunnerRegistration.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Reaction) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Content.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *ReactionContent) SetFake() {
	*s = ReactionContentPlus1
}

// SetFake set fake values.
func (s *ReactionRollup) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.Plus1 = int(0)
		}
	}
	{
		{
			s.Minus1 = int(0)
		}
	}
	{
		{
			s.Laugh = int(0)
		}
	}
	{
		{
			s.Confused = int(0)
		}
	}
	{
		{
			s.Heart = int(0)
		}
	}
	{
		{
			s.Hooray = int(0)
		}
	}
	{
		{
			s.Eyes = int(0)
		}
	}
	{
		{
			s.Rocket = int(0)
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForCommitCommentApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForCommitCommentApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForCommitCommentApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForCommitCommentApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForCommitCommentReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForCommitCommentReqContent) SetFake() {
	*s = ReactionsCreateForCommitCommentReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForIssueApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForIssueApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueCommentApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForIssueCommentApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueCommentApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForIssueCommentApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueCommentReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueCommentReqContent) SetFake() {
	*s = ReactionsCreateForIssueCommentReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForIssueReqContent) SetFake() {
	*s = ReactionsCreateForIssueReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForPullRequestReviewCommentApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForPullRequestReviewCommentReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForPullRequestReviewCommentReqContent) SetFake() {
	*s = ReactionsCreateForPullRequestReviewCommentReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForReleaseApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForReleaseApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForReleaseApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForReleaseApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForReleaseReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForReleaseReqContent) SetFake() {
	*s = ReactionsCreateForReleaseReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReqContent) SetFake() {
	*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReqContent) SetFake() {
	*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) SetFake() {
	var unwrapped Reaction
	{
		unwrapped.SetFake()
	}
	*s = ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionInOrgReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionInOrgReqContent) SetFake() {
	*s = ReactionsCreateForTeamDiscussionInOrgReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionLegacyReq) SetFake() {
	{
		{
			s.Content.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReactionsCreateForTeamDiscussionLegacyReqContent) SetFake() {
	*s = ReactionsCreateForTeamDiscussionLegacyReqContentPlus1
}

// SetFake set fake values.
func (s *ReactionsDeleteLegacyApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReactionsDeleteLegacyApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsDeleteLegacyApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReactionsDeleteLegacyApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsDeleteLegacyApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReactionsDeleteLegacyApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForCommitCommentOKApplicationJSON) SetFake() {
	var unwrapped []Reaction
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Reaction
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReactionsListForCommitCommentOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForIssueApplicationJSONGone) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReactionsListForIssueApplicationJSONGone(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForIssueApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReactionsListForIssueApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForIssueCommentOKApplicationJSON) SetFake() {
	var unwrapped []Reaction
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Reaction
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReactionsListForIssueCommentOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForIssueOKApplicationJSON) SetFake() {
	var unwrapped []Reaction
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Reaction
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReactionsListForIssueOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReactionsListForPullRequestReviewCommentOKApplicationJSON) SetFake() {
	var unwrapped []Reaction
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Reaction
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReactionsListForPullRequestReviewCommentOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReferrerTraffic) SetFake() {
	{
		{
			s.Referrer = "string"
		}
	}
	{
		{
			s.Count = int(0)
		}
	}
	{
		{
			s.Uniques = int(0)
		}
	}
}

// SetFake set fake values.
func (s *Release) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AssetsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.UploadURL = "string"
		}
	}
	{
		{
			s.TarballURL.SetFake()
		}
	}
	{
		{
			s.ZipballURL.SetFake()
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.TagName = "string"
		}
	}
	{
		{
			s.TargetCommitish = "string"
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Draft = true
		}
	}
	{
		{
			s.Prerelease = true
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.PublishedAt.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Assets = nil
			for i := 0; i < 0; i++ {
				var elem ReleaseAsset
				{
					elem.SetFake()
				}
				s.Assets = append(s.Assets, elem)
			}
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.MentionsCount.SetFake()
		}
	}
	{
		{
			s.DiscussionURL.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReleaseAsset) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.BrowserDownloadURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Label.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.ContentType = "string"
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.DownloadCount = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Uploader.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReleaseAssetState) SetFake() {
	*s = ReleaseAssetStateUploaded
}

// SetFake set fake values.
func (s *RepoSearchResultItem) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.PushedAt = time.Now()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepoSearchResultItemPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull = true
		}
	}
}

// SetFake set fake values.
func (s *ReposAcceptInvitationApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposAcceptInvitationApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *ReposAcceptInvitationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposAcceptInvitationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposAcceptInvitationApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposAcceptInvitationApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddAppAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Integration
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Integration
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposAddAppAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddAppAccessRestrictionsReq) SetFake() {
	var elem ReposAddAppAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposAddAppAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposAddAppAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Apps = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Apps = append(s.Apps, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposAddCollaboratorReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposAddCollaboratorReqPermission) SetFake() {
	*s = ReposAddCollaboratorReqPermissionPull
}

// SetFake set fake values.
func (s *ReposAddStatusCheckContextsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposAddStatusCheckContextsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddStatusCheckContextsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposAddStatusCheckContextsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddStatusCheckContextsOKApplicationJSON) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposAddStatusCheckContextsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddStatusCheckContextsReq) SetFake() {
	var elem ReposAddStatusCheckContextsReq0

	{
		elem.SetFake()
	}
	s.SetReposAddStatusCheckContextsReq0(elem)
}

// SetFake set fake values.
func (s *ReposAddStatusCheckContextsReq0) SetFake() {
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposAddTeamAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposAddTeamAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddTeamAccessRestrictionsReq) SetFake() {
	var elem ReposAddTeamAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposAddTeamAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposAddTeamAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposAddUserAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposAddUserAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposAddUserAccessRestrictionsReq) SetFake() {
	var elem ReposAddUserAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposAddUserAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposAddUserAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposCompareCommitsApplicationJSONInternalServerError) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCompareCommitsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ReposCompareCommitsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCompareCommitsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateAutolinkReq) SetFake() {
	{
		{
			s.KeyPrefix = "string"
		}
	}
	{
		{
			s.URLTemplate = "string"
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateCommitCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
	{
		{
			s.Position.SetFake()
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateCommitStatusReq) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.TargetURL.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Context.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateCommitStatusReqState) SetFake() {
	*s = ReposCreateCommitStatusReqStateError
}

// SetFake set fake values.
func (s *ReposCreateDeployKeyReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.ReadOnly.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateDeploymentAccepted) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateDeploymentReq) SetFake() {
	{
		{
			s.Ref = "string"
		}
	}
	{
		{
			s.Task.SetFake()
		}
	}
	{
		{
			s.AutoMerge.SetFake()
		}
	}
	{
		{
			s.RequiredContexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredContexts = append(s.RequiredContexts, elem)
			}
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.TransientEnvironment.SetFake()
		}
	}
	{
		{
			s.ProductionEnvironment.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateDeploymentReqPayload) SetFake() {
	var elem ReposCreateDeploymentReqPayload0

	{
		elem.SetFake()
	}
	s.SetReposCreateDeploymentReqPayload0(elem)
}

// SetFake set fake values.
func (s *ReposCreateDeploymentReqPayload0) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ReposCreateDeploymentStatusReq) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.TargetURL.SetFake()
		}
	}
	{
		{
			s.LogURL.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Environment.SetFake()
		}
	}
	{
		{
			s.EnvironmentURL.SetFake()
		}
	}
	{
		{
			s.AutoInactive.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateDeploymentStatusReqEnvironment) SetFake() {
	*s = ReposCreateDeploymentStatusReqEnvironmentProduction
}

// SetFake set fake values.
func (s *ReposCreateDeploymentStatusReqState) SetFake() {
	*s = ReposCreateDeploymentStatusReqStateError
}

// SetFake set fake values.
func (s *ReposCreateDispatchEventReq) SetFake() {
	{
		{
			s.EventType = "string"
		}
	}
	{
		{
			s.ClientPayload.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateDispatchEventReqClientPayload) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ReposCreateForAuthenticatedUserApplicationJSONBadRequest) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForAuthenticatedUserApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForAuthenticatedUserReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.TeamID.SetFake()
		}
	}
	{
		{
			s.AutoInit.SetFake()
		}
	}
	{
		{
			s.GitignoreTemplate.SetFake()
		}
	}
	{
		{
			s.LicenseTemplate.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.HasDownloads.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateForkApplicationJSONBadRequest) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForkApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForkApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForkApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForkApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateForkApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateForkReq) SetFake() {
	{
		{
			s.Organization.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateInOrgReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.TeamID.SetFake()
		}
	}
	{
		{
			s.AutoInit.SetFake()
		}
	}
	{
		{
			s.GitignoreTemplate.SetFake()
		}
	}
	{
		{
			s.LicenseTemplate.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateInOrgReqVisibility) SetFake() {
	*s = ReposCreateInOrgReqVisibilityPublic
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateOrUpdateFileContentsApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONCreated) SetFake() {
	var unwrapped FileCommit
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateOrUpdateFileContentsApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateOrUpdateFileContentsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsApplicationJSONOK) SetFake() {
	var unwrapped FileCommit
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateOrUpdateFileContentsApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsReq) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Sha.SetFake()
		}
	}
	{
		{
			s.Branch.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Date.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreatePagesSiteReq) SetFake() {
	{
		{
			s.Source.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreatePagesSiteReqSource) SetFake() {
	{
		{
			s.Branch = "string"
		}
	}
	{
		{
			s.Path.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreatePagesSiteReqSourcePath) SetFake() {
	*s = ReposCreatePagesSiteReqSourcePathSlash
}

// SetFake set fake values.
func (s *ReposCreateReleaseReq) SetFake() {
	{
		{
			s.TagName = "string"
		}
	}
	{
		{
			s.TargetCommitish.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
	{
		{
			s.Prerelease.SetFake()
		}
	}
	{
		{
			s.DiscussionCategoryName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateUsingTemplateReq) SetFake() {
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.IncludeAllBranches.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateWebhookApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateWebhookApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateWebhookApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposCreateWebhookApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposCreateWebhookReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposCreateWebhookReqAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ReposCreateWebhookReqConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.Token.SetFake()
		}
	}
	{
		{
			s.Digest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposDeclineInvitationApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeclineInvitationApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeclineInvitationApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeclineInvitationApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeclineInvitationApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeclineInvitationApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeleteApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeleteApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeleteApplicationJSONTemporaryRedirect) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeleteApplicationJSONTemporaryRedirect(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeleteFileApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeleteFileApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeleteFileApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposDeleteFileApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposDeleteFileReq) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.Branch.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposDeleteFileReqAuthor) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposDeleteFileReqCommitter) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposDeleteForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposGetAllStatusCheckContextsOKApplicationJSON) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetAllStatusCheckContextsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) SetFake() {
	var unwrapped []Integration
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Integration
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetBranchApplicationJSONMovedPermanently) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetBranchApplicationJSONMovedPermanently(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetBranchApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetBranchApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetCodeFrequencyStatsOKApplicationJSON) SetFake() {
	var unwrapped []CodeFrequencyStat
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeFrequencyStat
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetCodeFrequencyStatsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetCommitActivityStatsOKApplicationJSON) SetFake() {
	var unwrapped []CommitActivity
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CommitActivity
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetCommitActivityStatsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetCommitApplicationJSONInternalServerError) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetCommitApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetCommitApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposGetCommitApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetContributorsStatsOKApplicationJSON) SetFake() {
	var unwrapped []ContributorActivity
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ContributorActivity
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetContributorsStatsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetPunchCardStatsOKApplicationJSON) SetFake() {
	var unwrapped []CodeFrequencyStat
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem CodeFrequencyStat
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetPunchCardStatsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetTopPathsOKApplicationJSON) SetFake() {
	var unwrapped []ContentTraffic
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ContentTraffic
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetTopPathsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetTopReferrersOKApplicationJSON) SetFake() {
	var unwrapped []ReferrerTraffic
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ReferrerTraffic
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetTopReferrersOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListBranchesForHeadCommitOKApplicationJSON) SetFake() {
	var unwrapped []BranchShort
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem BranchShort
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListBranchesForHeadCommitOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListBranchesOKApplicationJSON) SetFake() {
	var unwrapped []ShortBranch
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ShortBranch
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListBranchesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCollaboratorsOKApplicationJSON) SetFake() {
	var unwrapped []Collaborator
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Collaborator
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListCollaboratorsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitStatusesForRefOKApplicationJSON) SetFake() {
	var unwrapped []Status
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Status
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListCommitStatusesForRefOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitsApplicationJSONBadRequest) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListCommitsApplicationJSONBadRequest(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitsApplicationJSONConflict) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListCommitsApplicationJSONConflict(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitsApplicationJSONInternalServerError) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListCommitsApplicationJSONInternalServerError(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListCommitsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposListCommitsOKApplicationJSON) SetFake() {
	var unwrapped []Commit
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Commit
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListCommitsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListContributorsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListContributorsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposListContributorsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListContributorsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposListContributorsOKApplicationJSON) SetFake() {
	var unwrapped []Contributor
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Contributor
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListContributorsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListDeploymentStatusesOKApplicationJSON) SetFake() {
	var unwrapped []DeploymentStatus
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem DeploymentStatus
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListDeploymentStatusesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposListForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ReposListForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []Repository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Repository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListForksOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListForksOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *ReposListInvitationsForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []RepositoryInvitation
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem RepositoryInvitation
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListInvitationsForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListPublicOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListPublicOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListReleasesOKApplicationJSON) SetFake() {
	var unwrapped []Release
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Release
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListReleasesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListWebhookDeliveriesOKApplicationJSON) SetFake() {
	var unwrapped []HookDeliveryItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem HookDeliveryItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListWebhookDeliveriesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposListWebhooksOKApplicationJSON) SetFake() {
	var unwrapped []Hook
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Hook
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposListWebhooksOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposMergeReq) SetFake() {
	{
		{
			s.Base = "string"
		}
	}
	{
		{
			s.Head = "string"
		}
	}
	{
		{
			s.CommitMessage.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposMergeUpstreamReq) SetFake() {
	{
		{
			s.Branch = "string"
		}
	}
}

// SetFake set fake values.
func (s *ReposRemoveAppAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Integration
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Integration
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposRemoveAppAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposRemoveAppAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveAppAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposRemoveAppAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposRemoveAppAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Apps = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Apps = append(s.Apps, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposRemoveStatusCheckContextsOKApplicationJSON) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposRemoveStatusCheckContextsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposRemoveStatusCheckContextsReq) SetFake() {
	var elem ReposRemoveStatusCheckContextsReq0

	{
		elem.SetFake()
	}
	s.SetReposRemoveStatusCheckContextsReq0(elem)
}

// SetFake set fake values.
func (s *ReposRemoveStatusCheckContextsReq0) SetFake() {
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposRemoveTeamAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposRemoveTeamAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposRemoveTeamAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveTeamAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposRemoveTeamAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposRemoveTeamAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposRemoveUserAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposRemoveUserAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposRemoveUserAccessRestrictionsReq) SetFake() {
	var elem ReposRemoveUserAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposRemoveUserAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposRemoveUserAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposRenameBranchApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposRenameBranchApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposRenameBranchApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposRenameBranchApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposRenameBranchReq) SetFake() {
	{
		{
			s.NewName = "string"
		}
	}
}

// SetFake set fake values.
func (s *ReposReplaceAllTopicsReq) SetFake() {
	{
		{
			s.Names = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Names = append(s.Names, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposSetAppAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Integration
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Integration
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposSetAppAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposSetAppAccessRestrictionsReq) SetFake() {
	var elem ReposSetAppAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposSetAppAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposSetAppAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Apps = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Apps = append(s.Apps, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposSetStatusCheckContextsOKApplicationJSON) SetFake() {
	var unwrapped []string
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem string
			{
				elem = "string"
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposSetStatusCheckContextsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposSetStatusCheckContextsReq) SetFake() {
	var elem ReposSetStatusCheckContextsReq0

	{
		elem.SetFake()
	}
	s.SetReposSetStatusCheckContextsReq0(elem)
}

// SetFake set fake values.
func (s *ReposSetStatusCheckContextsReq0) SetFake() {
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposSetTeamAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposSetTeamAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposSetTeamAccessRestrictionsReq) SetFake() {
	var elem ReposSetTeamAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposSetTeamAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposSetTeamAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposSetUserAccessRestrictionsOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReposSetUserAccessRestrictionsOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *ReposSetUserAccessRestrictionsReq) SetFake() {
	var elem ReposSetUserAccessRestrictionsReq0

	{
		elem.SetFake()
	}
	s.SetReposSetUserAccessRestrictionsReq0(elem)
}

// SetFake set fake values.
func (s *ReposSetUserAccessRestrictionsReq0) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposTransferReq) SetFake() {
	{
		{
			s.NewOwner = "string"
		}
	}
	{
		{
			s.TeamIds = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.TeamIds = append(s.TeamIds, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposUpdateApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposUpdateApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposUpdateApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposUpdateApplicationJSONTemporaryRedirect) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposUpdateApplicationJSONTemporaryRedirect(unwrapped)
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposUpdateBranchProtectionApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = ReposUpdateBranchProtectionApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionReq) SetFake() {
	{
		{
			s.RequiredStatusChecks.SetFake()
		}
	}
	{
		{
			s.EnforceAdmins.SetFake()
		}
	}
	{
		{
			s.RequiredPullRequestReviews.SetFake()
		}
	}
	{
		{
			s.Restrictions.SetFake()
		}
	}
	{
		{
			s.RequiredLinearHistory.SetFake()
		}
	}
	{
		{
			s.AllowForcePushes.SetFake()
		}
	}
	{
		{
			s.AllowDeletions.SetFake()
		}
	}
	{
		{
			s.RequiredConversationResolution.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetFake() {
	{
		{
			s.DismissalRestrictions.SetFake()
		}
	}
	{
		{
			s.DismissStaleReviews.SetFake()
		}
	}
	{
		{
			s.RequireCodeOwnerReviews.SetFake()
		}
	}
	{
		{
			s.RequiredApprovingReviewCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) SetFake() {
	{
		{
			s.Strict = true
		}
	}
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateBranchProtectionReqRestrictions) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
	{
		{
			s.Apps = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Apps = append(s.Apps, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateCommitCommentReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateInvitationReq) SetFake() {
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateInvitationReqPermissions) SetFake() {
	*s = ReposUpdateInvitationReqPermissionsRead
}

// SetFake set fake values.
func (s *ReposUpdatePullRequestReviewProtectionReq) SetFake() {
	{
		{
			s.DismissalRestrictions.SetFake()
		}
	}
	{
		{
			s.DismissStaleReviews.SetFake()
		}
	}
	{
		{
			s.RequireCodeOwnerReviews.SetFake()
		}
	}
	{
		{
			s.RequiredApprovingReviewCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetFake() {
	{
		{
			s.Users = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Users = append(s.Users, elem)
			}
		}
	}
	{
		{
			s.Teams = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Teams = append(s.Teams, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReleaseAssetReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Label.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReleaseReq) SetFake() {
	{
		{
			s.TagName.SetFake()
		}
	}
	{
		{
			s.TargetCommitish.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Draft.SetFake()
		}
	}
	{
		{
			s.Prerelease.SetFake()
		}
	}
	{
		{
			s.DiscussionCategoryName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.SecurityAndAnalysis.SetFake()
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.DefaultBranch.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReqSecurityAndAnalysis) SetFake() {
	{
		{
			s.AdvancedSecurity.SetFake()
		}
	}
	{
		{
			s.SecretScanning.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReqSecurityAndAnalysisSecretScanning) SetFake() {
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateReqVisibility) SetFake() {
	*s = ReposUpdateReqVisibilityPublic
}

// SetFake set fake values.
func (s *ReposUpdateStatusCheckProtectionReq) SetFake() {
	{
		{
			s.Strict.SetFake()
		}
	}
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateWebhookConfigForRepoReq) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateWebhookConfigForRepoReqAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *ReposUpdateWebhookReq) SetFake() {
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.Events = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Events = append(s.Events, elem)
			}
		}
	}
	{
		{
			s.AddEvents = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AddEvents = append(s.AddEvents, elem)
			}
		}
	}
	{
		{
			s.RemoveEvents = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RemoveEvents = append(s.RemoveEvents, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReposUpdateWebhookReqConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
	{
		{
			s.Address.SetFake()
		}
	}
	{
		{
			s.Room.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Repository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Organization.SetFake()
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
	{
		{
			s.StarredAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepositoryCollaboratorPermission) SetFake() {
	{
		{
			s.Permission = "string"
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepositoryInvitation) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.Invitee.SetFake()
		}
	}
	{
		{
			s.Inviter.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.Expired.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL = "string"
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
}

// SetFake set fake values.
func (s *RepositoryInvitationPermissions) SetFake() {
	*s = RepositoryInvitationPermissionsRead
}

// SetFake set fake values.
func (s *RepositoryPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Pull = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepositorySubscription) SetFake() {
	{
		{
			s.Subscribed = true
		}
	}
	{
		{
			s.Ignored = true
		}
	}
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoryURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *RepositoryTemplateRepository) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.FullName.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ArchiveURL.SetFake()
		}
	}
	{
		{
			s.AssigneesURL.SetFake()
		}
	}
	{
		{
			s.BlobsURL.SetFake()
		}
	}
	{
		{
			s.BranchesURL.SetFake()
		}
	}
	{
		{
			s.CollaboratorsURL.SetFake()
		}
	}
	{
		{
			s.CommentsURL.SetFake()
		}
	}
	{
		{
			s.CommitsURL.SetFake()
		}
	}
	{
		{
			s.CompareURL.SetFake()
		}
	}
	{
		{
			s.ContentsURL.SetFake()
		}
	}
	{
		{
			s.ContributorsURL.SetFake()
		}
	}
	{
		{
			s.DeploymentsURL.SetFake()
		}
	}
	{
		{
			s.DownloadsURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ForksURL.SetFake()
		}
	}
	{
		{
			s.GitCommitsURL.SetFake()
		}
	}
	{
		{
			s.GitRefsURL.SetFake()
		}
	}
	{
		{
			s.GitTagsURL.SetFake()
		}
	}
	{
		{
			s.GitURL.SetFake()
		}
	}
	{
		{
			s.IssueCommentURL.SetFake()
		}
	}
	{
		{
			s.IssueEventsURL.SetFake()
		}
	}
	{
		{
			s.IssuesURL.SetFake()
		}
	}
	{
		{
			s.KeysURL.SetFake()
		}
	}
	{
		{
			s.LabelsURL.SetFake()
		}
	}
	{
		{
			s.LanguagesURL.SetFake()
		}
	}
	{
		{
			s.MergesURL.SetFake()
		}
	}
	{
		{
			s.MilestonesURL.SetFake()
		}
	}
	{
		{
			s.NotificationsURL.SetFake()
		}
	}
	{
		{
			s.PullsURL.SetFake()
		}
	}
	{
		{
			s.ReleasesURL.SetFake()
		}
	}
	{
		{
			s.SSHURL.SetFake()
		}
	}
	{
		{
			s.StargazersURL.SetFake()
		}
	}
	{
		{
			s.StatusesURL.SetFake()
		}
	}
	{
		{
			s.SubscribersURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionURL.SetFake()
		}
	}
	{
		{
			s.TagsURL.SetFake()
		}
	}
	{
		{
			s.TeamsURL.SetFake()
		}
	}
	{
		{
			s.TreesURL.SetFake()
		}
	}
	{
		{
			s.CloneURL.SetFake()
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL.SetFake()
		}
	}
	{
		{
			s.SvnURL.SetFake()
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount.SetFake()
		}
	}
	{
		{
			s.StargazersCount.SetFake()
		}
	}
	{
		{
			s.WatchersCount.SetFake()
		}
	}
	{
		{
			s.Size.SetFake()
		}
	}
	{
		{
			s.DefaultBranch.SetFake()
		}
	}
	{
		{
			s.OpenIssuesCount.SetFake()
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues.SetFake()
		}
	}
	{
		{
			s.HasProjects.SetFake()
		}
	}
	{
		{
			s.HasWiki.SetFake()
		}
	}
	{
		{
			s.HasPages.SetFake()
		}
	}
	{
		{
			s.HasDownloads.SetFake()
		}
	}
	{
		{
			s.Archived.SetFake()
		}
	}
	{
		{
			s.Disabled.SetFake()
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepositoryTemplateRepositoryOwner) SetFake() {
	{
		{
			s.Login.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.NodeID.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.FollowersURL.SetFake()
		}
	}
	{
		{
			s.FollowingURL.SetFake()
		}
	}
	{
		{
			s.GistsURL.SetFake()
		}
	}
	{
		{
			s.StarredURL.SetFake()
		}
	}
	{
		{
			s.SubscriptionsURL.SetFake()
		}
	}
	{
		{
			s.OrganizationsURL.SetFake()
		}
	}
	{
		{
			s.ReposURL.SetFake()
		}
	}
	{
		{
			s.EventsURL.SetFake()
		}
	}
	{
		{
			s.ReceivedEventsURL.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.SiteAdmin.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RepositoryTemplateRepositoryPermissions) SetFake() {
	{
		{
			s.Admin.SetFake()
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
	{
		{
			s.Push.SetFake()
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Pull.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReviewComment) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PullRequestReviewID.SetFake()
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.DiffHunk = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Position.SetFake()
		}
	}
	{
		{
			s.OriginalPosition = int(0)
		}
	}
	{
		{
			s.CommitID = "string"
		}
	}
	{
		{
			s.OriginalCommitID = "string"
		}
	}
	{
		{
			s.InReplyToID.SetFake()
		}
	}
	{
		{
			s.User.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.PullRequestURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.AuthorAssociation.SetFake()
		}
	}
	{
		{
			s.Links.SetFake()
		}
	}
	{
		{
			s.BodyText.SetFake()
		}
	}
	{
		{
			s.BodyHTML.SetFake()
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
	{
		{
			s.Side.SetFake()
		}
	}
	{
		{
			s.StartSide.SetFake()
		}
	}
	{
		{
			s.Line.SetFake()
		}
	}
	{
		{
			s.OriginalLine.SetFake()
		}
	}
	{
		{
			s.StartLine.SetFake()
		}
	}
	{
		{
			s.OriginalStartLine.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReviewCommentLinks) SetFake() {
	{
		{
			s.Self.SetFake()
		}
	}
	{
		{
			s.HTML.SetFake()
		}
	}
	{
		{
			s.PullRequest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReviewCommentSide) SetFake() {
	*s = ReviewCommentSideLEFT
}

// SetFake set fake values.
func (s *ReviewCommentStartSide) SetFake() {
	*s = ReviewCommentStartSideLEFT
}

// SetFake set fake values.
func (s *Runner) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Os = "string"
		}
	}
	{
		{
			s.Status = "string"
		}
	}
	{
		{
			s.Busy = true
		}
	}
	{
		{
			s.Labels = nil
			for i := 0; i < 0; i++ {
				var elem RunnerLabelsItem
				{
					elem.SetFake()
				}
				s.Labels = append(s.Labels, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *RunnerApplication) SetFake() {
	{
		{
			s.Os = "string"
		}
	}
	{
		{
			s.Architecture = "string"
		}
	}
	{
		{
			s.DownloadURL = "string"
		}
	}
	{
		{
			s.Filename = "string"
		}
	}
	{
		{
			s.TempDownloadToken.SetFake()
		}
	}
	{
		{
			s.SHA256Checksum.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RunnerGroupsEnterprise) SetFake() {
	{
		{
			s.ID = float64(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Visibility = "string"
		}
	}
	{
		{
			s.Default = true
		}
	}
	{
		{
			s.SelectedOrganizationsURL.SetFake()
		}
	}
	{
		{
			s.RunnersURL = "string"
		}
	}
	{
		{
			s.AllowsPublicRepositories = true
		}
	}
}

// SetFake set fake values.
func (s *RunnerGroupsOrg) SetFake() {
	{
		{
			s.ID = float64(0)
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Visibility = "string"
		}
	}
	{
		{
			s.Default = true
		}
	}
	{
		{
			s.SelectedRepositoriesURL.SetFake()
		}
	}
	{
		{
			s.RunnersURL = "string"
		}
	}
	{
		{
			s.Inherited = true
		}
	}
	{
		{
			s.InheritedAllowsPublicRepositories.SetFake()
		}
	}
	{
		{
			s.AllowsPublicRepositories = true
		}
	}
}

// SetFake set fake values.
func (s *RunnerLabelsItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *RunnerLabelsItemType) SetFake() {
	*s = RunnerLabelsItemTypeReadMinusOnly
}

// SetFake set fake values.
func (s *ScimDeleteUserFromOrgApplicationJSONForbidden) SetFake() {
	var unwrapped ScimError
	{
		unwrapped.SetFake()
	}
	*s = ScimDeleteUserFromOrgApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *ScimDeleteUserFromOrgApplicationJSONNotFound) SetFake() {
	var unwrapped ScimError
	{
		unwrapped.SetFake()
	}
	*s = ScimDeleteUserFromOrgApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *ScimEnterpriseGroup) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.ExternalId.SetFake()
		}
	}
	{
		{
			s.DisplayName.SetFake()
		}
	}
	{
		{
			s.Members = nil
			for i := 0; i < 0; i++ {
				var elem ScimEnterpriseGroupMembersItem
				{
					elem.SetFake()
				}
				s.Members = append(s.Members, elem)
			}
		}
	}
	{
		{
			s.Meta.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseGroupMembersItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Ref.SetFake()
		}
	}
	{
		{
			s.Display.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseGroupMeta) SetFake() {
	{
		{
			s.ResourceType.SetFake()
		}
	}
	{
		{
			s.Created.SetFake()
		}
	}
	{
		{
			s.LastModified.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseUser) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.ExternalId.SetFake()
		}
	}
	{
		{
			s.UserName.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem ScimEnterpriseUserEmailsItem
				{
					elem.SetFake()
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem ScimEnterpriseUserGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
	{
		{
			s.Meta.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseUserEmailsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Primary.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseUserGroupsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseUserMeta) SetFake() {
	{
		{
			s.ResourceType.SetFake()
		}
	}
	{
		{
			s.Created.SetFake()
		}
	}
	{
		{
			s.LastModified.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimEnterpriseUserName) SetFake() {
	{
		{
			s.GivenName.SetFake()
		}
	}
	{
		{
			s.FamilyName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimError) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
	{
		{
			s.Detail.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.ScimType.SetFake()
		}
	}
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ScimGroupListEnterprise) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.TotalResults = float64(0)
		}
	}
	{
		{
			s.ItemsPerPage = float64(0)
		}
	}
	{
		{
			s.StartIndex = float64(0)
		}
	}
	{
		{
			s.Resources = nil
			for i := 0; i < 0; i++ {
				var elem ScimGroupListEnterpriseResourcesItem
				{
					elem.SetFake()
				}
				s.Resources = append(s.Resources, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ScimGroupListEnterpriseResourcesItem) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.ExternalId.SetFake()
		}
	}
	{
		{
			s.DisplayName.SetFake()
		}
	}
	{
		{
			s.Members = nil
			for i := 0; i < 0; i++ {
				var elem ScimGroupListEnterpriseResourcesItemMembersItem
				{
					elem.SetFake()
				}
				s.Members = append(s.Members, elem)
			}
		}
	}
	{
		{
			s.Meta.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Ref.SetFake()
		}
	}
	{
		{
			s.Display.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimGroupListEnterpriseResourcesItemMeta) SetFake() {
	{
		{
			s.ResourceType.SetFake()
		}
	}
	{
		{
			s.Created.SetFake()
		}
	}
	{
		{
			s.LastModified.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterprise) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.TotalResults = float64(0)
		}
	}
	{
		{
			s.ItemsPerPage = float64(0)
		}
	}
	{
		{
			s.StartIndex = float64(0)
		}
	}
	{
		{
			s.Resources = nil
			for i := 0; i < 0; i++ {
				var elem ScimUserListEnterpriseResourcesItem
				{
					elem.SetFake()
				}
				s.Resources = append(s.Resources, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterpriseResourcesItem) SetFake() {
	{
		{
			s.Schemas = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Schemas = append(s.Schemas, elem)
			}
		}
	}
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.ExternalId.SetFake()
		}
	}
	{
		{
			s.UserName.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem ScimUserListEnterpriseResourcesItemEmailsItem
				{
					elem.SetFake()
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem ScimUserListEnterpriseResourcesItemGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.Active.SetFake()
		}
	}
	{
		{
			s.Meta.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Primary.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) SetFake() {
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterpriseResourcesItemMeta) SetFake() {
	{
		{
			s.ResourceType.SetFake()
		}
	}
	{
		{
			s.Created.SetFake()
		}
	}
	{
		{
			s.LastModified.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ScimUserListEnterpriseResourcesItemName) SetFake() {
	{
		{
			s.GivenName.SetFake()
		}
	}
	{
		{
			s.FamilyName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SearchCodeOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem CodeSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchCommitsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem CommitSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchIssuesAndPullRequestsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem IssueSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchLabelsApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = SearchLabelsApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *SearchLabelsApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = SearchLabelsApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *SearchLabelsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem LabelSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchReposOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem RepoSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchResultTextMatches) SetFake() {
	var unwrapped []SearchResultTextMatchesItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SearchResultTextMatchesItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = SearchResultTextMatches(unwrapped)
}

// SetFake set fake values.
func (s *SearchResultTextMatchesItem) SetFake() {
	{
		{
			s.ObjectURL.SetFake()
		}
	}
	{
		{
			s.ObjectType.SetFake()
		}
	}
	{
		{
			s.Property.SetFake()
		}
	}
	{
		{
			s.Fragment.SetFake()
		}
	}
	{
		{
			s.Matches = nil
			for i := 0; i < 0; i++ {
				var elem SearchResultTextMatchesItemMatchesItem
				{
					elem.SetFake()
				}
				s.Matches = append(s.Matches, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchResultTextMatchesItemMatchesItem) SetFake() {
	{
		{
			s.Text.SetFake()
		}
	}
	{
		{
			s.Indices = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.Indices = append(s.Indices, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchTopicsOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem TopicSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SearchUsersOK) SetFake() {
	{
		{
			s.TotalCount = int(0)
		}
	}
	{
		{
			s.IncompleteResults = true
		}
	}
	{
		{
			s.Items = nil
			for i := 0; i < 0; i++ {
				var elem UserSearchResultItem
				{
					elem.SetFake()
				}
				s.Items = append(s.Items, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SecretScanningAlert) SetFake() {
	{
		{
			s.Number.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.HTMLURL.SetFake()
		}
	}
	{
		{
			s.LocationsURL.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Resolution.SetFake()
		}
	}
	{
		{
			s.ResolvedAt.SetFake()
		}
	}
	{
		{
			s.ResolvedBy.SetFake()
		}
	}
	{
		{
			s.SecretType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SecretScanningAlertResolution) SetFake() {
	*s = SecretScanningAlertResolutionFalsePositive
}

// SetFake set fake values.
func (s *SecretScanningAlertState) SetFake() {
	*s = SecretScanningAlertStateOpen
}

// SetFake set fake values.
func (s *SecretScanningListAlertsForOrgOKApplicationJSON) SetFake() {
	var unwrapped []OrganizationSecretScanningAlert
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem OrganizationSecretScanningAlert
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = SecretScanningListAlertsForOrgOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *SecretScanningListAlertsForRepoOKApplicationJSON) SetFake() {
	var unwrapped []SecretScanningAlert
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SecretScanningAlert
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = SecretScanningListAlertsForRepoOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *SecretScanningUpdateAlertReq) SetFake() {
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.Resolution.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SelectedActions) SetFake() {
	{
		{
			s.GithubOwnedAllowed.SetFake()
		}
	}
	{
		{
			s.VerifiedAllowed.SetFake()
		}
	}
	{
		{
			s.PatternsAllowed = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PatternsAllowed = append(s.PatternsAllowed, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *SelectedActionsURL) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = SelectedActionsURL(unwrapped)
}

// SetFake set fake values.
func (s *ServiceUnavailable) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ShortBlob) SetFake() {
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Sha = "string"
		}
	}
}

// SetFake set fake values.
func (s *ShortBranch) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.Protected = true
		}
	}
	{
		{
			s.Protection.SetFake()
		}
	}
	{
		{
			s.ProtectionURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ShortBranchCommit) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *SimpleCommit) SetFake() {
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.TreeID = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.Timestamp = time.Now()
		}
	}
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Committer.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *SimpleCommitAuthor) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
}

// SetFake set fake values.
func (s *SimpleCommitCommitter) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Email = "string"
		}
	}
}

// SetFake set fake values.
func (s *SimpleCommitStatus) SetFake() {
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Context = "string"
		}
	}
	{
		{
			s.TargetURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Required.SetFake()
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
}

// SetFake set fake values.
func (s *SimpleUser) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.StarredAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Status) SetFake() {
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.AvatarURL.SetFake()
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.TargetURL = "string"
		}
	}
	{
		{
			s.Context = "string"
		}
	}
	{
		{
			s.CreatedAt = "string"
		}
	}
	{
		{
			s.UpdatedAt = "string"
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *StatusCheckPolicy) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Strict = true
		}
	}
	{
		{
			s.Contexts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Contexts = append(s.Contexts, elem)
			}
		}
	}
	{
		{
			s.ContextsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *Tag) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Commit.SetFake()
		}
	}
	{
		{
			s.ZipballURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TarballURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
}

// SetFake set fake values.
func (s *TagCommit) SetFake() {
	{
		{
			s.Sha = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
}

// SetFake set fake values.
func (s *Team) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Slug = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission = "string"
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.RepositoriesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Parent.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamDiscussion) SetFake() {
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.BodyHTML = "string"
		}
	}
	{
		{
			s.BodyVersion = "string"
		}
	}
	{
		{
			s.CommentsCount = int(0)
		}
	}
	{
		{
			s.CommentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.LastEditedAt.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.Pinned = true
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.TeamURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamDiscussionComment) SetFake() {
	{
		{
			s.Author.SetFake()
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.BodyHTML = "string"
		}
	}
	{
		{
			s.BodyVersion = "string"
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.LastEditedAt.SetFake()
		}
	}
	{
		{
			s.DiscussionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Reactions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamFull) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Slug = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission = "string"
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.RepositoriesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Parent.SetFake()
		}
	}
	{
		{
			s.MembersCount = int(0)
		}
	}
	{
		{
			s.ReposCount = int(0)
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Organization.SetFake()
		}
	}
	{
		{
			s.LdapDn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamFullPrivacy) SetFake() {
	*s = TeamFullPrivacyClosed
}

// SetFake set fake values.
func (s *TeamMembership) SetFake() {
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Role.SetFake()
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamMembershipRole) SetFake() {
	*s = TeamMembershipRoleMember
}

// SetFake set fake values.
func (s *TeamMembershipState) SetFake() {
	*s = TeamMembershipStateActive
}

// SetFake set fake values.
func (s *TeamPermissions) SetFake() {
	{
		{
			s.Pull = true
		}
	}
	{
		{
			s.Triage = true
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Maintain = true
		}
	}
	{
		{
			s.Admin = true
		}
	}
}

// SetFake set fake values.
func (s *TeamProject) SetFake() {
	{
		{
			s.OwnerURL = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL = "string"
		}
	}
	{
		{
			s.ColumnsURL = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
	{
		{
			s.Number = int(0)
		}
	}
	{
		{
			s.State = "string"
		}
	}
	{
		{
			s.Creator.SetFake()
		}
	}
	{
		{
			s.CreatedAt = "string"
		}
	}
	{
		{
			s.UpdatedAt = "string"
		}
	}
	{
		{
			s.OrganizationPermission.SetFake()
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamProjectPermissions) SetFake() {
	{
		{
			s.Read = true
		}
	}
	{
		{
			s.Write = true
		}
	}
	{
		{
			s.Admin = true
		}
	}
}

// SetFake set fake values.
func (s *TeamRepository) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.FullName = "string"
		}
	}
	{
		{
			s.License.SetFake()
		}
	}
	{
		{
			s.Forks = int(0)
		}
	}
	{
		{
			s.Permissions.SetFake()
		}
	}
	{
		{
			s.Owner.SetFake()
		}
	}
	{
		{
			s.Private = true
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Fork = true
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ArchiveURL = "string"
		}
	}
	{
		{
			s.AssigneesURL = "string"
		}
	}
	{
		{
			s.BlobsURL = "string"
		}
	}
	{
		{
			s.BranchesURL = "string"
		}
	}
	{
		{
			s.CollaboratorsURL = "string"
		}
	}
	{
		{
			s.CommentsURL = "string"
		}
	}
	{
		{
			s.CommitsURL = "string"
		}
	}
	{
		{
			s.CompareURL = "string"
		}
	}
	{
		{
			s.ContentsURL = "string"
		}
	}
	{
		{
			s.ContributorsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DeploymentsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.DownloadsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.EventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ForksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GitCommitsURL = "string"
		}
	}
	{
		{
			s.GitRefsURL = "string"
		}
	}
	{
		{
			s.GitTagsURL = "string"
		}
	}
	{
		{
			s.GitURL = "string"
		}
	}
	{
		{
			s.IssueCommentURL = "string"
		}
	}
	{
		{
			s.IssueEventsURL = "string"
		}
	}
	{
		{
			s.IssuesURL = "string"
		}
	}
	{
		{
			s.KeysURL = "string"
		}
	}
	{
		{
			s.LabelsURL = "string"
		}
	}
	{
		{
			s.LanguagesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MergesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MilestonesURL = "string"
		}
	}
	{
		{
			s.NotificationsURL = "string"
		}
	}
	{
		{
			s.PullsURL = "string"
		}
	}
	{
		{
			s.ReleasesURL = "string"
		}
	}
	{
		{
			s.SSHURL = "string"
		}
	}
	{
		{
			s.StargazersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.StatusesURL = "string"
		}
	}
	{
		{
			s.SubscribersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TagsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TeamsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.TreesURL = "string"
		}
	}
	{
		{
			s.CloneURL = "string"
		}
	}
	{
		{
			s.MirrorURL.SetFake()
		}
	}
	{
		{
			s.HooksURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SvnURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Homepage.SetFake()
		}
	}
	{
		{
			s.Language.SetFake()
		}
	}
	{
		{
			s.ForksCount = int(0)
		}
	}
	{
		{
			s.StargazersCount = int(0)
		}
	}
	{
		{
			s.WatchersCount = int(0)
		}
	}
	{
		{
			s.Size = int(0)
		}
	}
	{
		{
			s.DefaultBranch = "string"
		}
	}
	{
		{
			s.OpenIssuesCount = int(0)
		}
	}
	{
		{
			s.IsTemplate.SetFake()
		}
	}
	{
		{
			s.Topics = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Topics = append(s.Topics, elem)
			}
		}
	}
	{
		{
			s.HasIssues = true
		}
	}
	{
		{
			s.HasProjects = true
		}
	}
	{
		{
			s.HasWiki = true
		}
	}
	{
		{
			s.HasPages = true
		}
	}
	{
		{
			s.HasDownloads = true
		}
	}
	{
		{
			s.Archived = true
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.Visibility.SetFake()
		}
	}
	{
		{
			s.PushedAt.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.AllowRebaseMerge.SetFake()
		}
	}
	{
		{
			s.TemplateRepository.SetFake()
		}
	}
	{
		{
			s.TempCloneToken.SetFake()
		}
	}
	{
		{
			s.AllowSquashMerge.SetFake()
		}
	}
	{
		{
			s.AllowAutoMerge.SetFake()
		}
	}
	{
		{
			s.DeleteBranchOnMerge.SetFake()
		}
	}
	{
		{
			s.AllowMergeCommit.SetFake()
		}
	}
	{
		{
			s.AllowForking.SetFake()
		}
	}
	{
		{
			s.SubscribersCount.SetFake()
		}
	}
	{
		{
			s.NetworkCount.SetFake()
		}
	}
	{
		{
			s.OpenIssues = int(0)
		}
	}
	{
		{
			s.Watchers = int(0)
		}
	}
	{
		{
			s.MasterBranch.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamRepositoryPermissions) SetFake() {
	{
		{
			s.Admin = true
		}
	}
	{
		{
			s.Pull = true
		}
	}
	{
		{
			s.Triage.SetFake()
		}
	}
	{
		{
			s.Push = true
		}
	}
	{
		{
			s.Maintain.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamSimple) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.MembersURL = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Permission = "string"
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RepositoriesURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Slug = "string"
		}
	}
	{
		{
			s.LdapDn.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReq) SetFake() {
	{
		{
			s.Role.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReqRole) SetFake() {
	*s = TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReq) SetFake() {
	{
		{
			s.Role.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReqRole) SetFake() {
	*s = TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) SetFake() {
	*s = TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) SetFake() {
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.DocumentationURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) SetFake() {
	*s = TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) SetFake() {
	*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReq) SetFake() {
	{
		{
			s.Permission.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) SetFake() {
	*s = TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull
}

// SetFake set fake values.
func (s *TeamsCreateDiscussionCommentInOrgReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateDiscussionCommentLegacyReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateDiscussionInOrgReq) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateDiscussionLegacyReq) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.Body = "string"
		}
	}
	{
		{
			s.Private.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq) SetFake() {
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.AdditionalProps.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqAdditional) SetFake() {
	var (
		elem jx.Raw
		m    map[string]jx.Raw = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) SetFake() {
	{
		{
			s.GroupID = "string"
		}
	}
	{
		{
			s.GroupName = "string"
		}
	}
	{
		{
			s.GroupDescription = "string"
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) SetFake() {
	{
		{
			s.Groups = nil
			for i := 0; i < 0; i++ {
				var elem TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem
				{
					elem.SetFake()
				}
				s.Groups = append(s.Groups, elem)
			}
		}
	}
	{
		{
			s.SyncedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetFake() {
	{
		{
			s.GroupID = "string"
		}
	}
	{
		{
			s.GroupName = "string"
		}
	}
	{
		{
			s.GroupDescription = "string"
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Maintainers = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Maintainers = append(s.Maintainers, elem)
			}
		}
	}
	{
		{
			s.RepoNames = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RepoNames = append(s.RepoNames, elem)
			}
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission.SetFake()
		}
	}
	{
		{
			s.ParentTeamID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsCreateReqPermission) SetFake() {
	*s = TeamsCreateReqPermissionPull
}

// SetFake set fake values.
func (s *TeamsCreateReqPrivacy) SetFake() {
	*s = TeamsCreateReqPrivacySecret
}

// SetFake set fake values.
func (s *TeamsListChildLegacyApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListChildLegacyApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListChildLegacyApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListChildLegacyApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListChildLegacyOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListChildLegacyOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListForAuthenticatedUserApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListForAuthenticatedUserApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []TeamFull
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem TeamFull
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListIdpGroupsForLegacyApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListIdpGroupsForLegacyApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListIdpGroupsForLegacyApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsListIdpGroupsForLegacyApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListMembersLegacyOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListMembersLegacyOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListOKApplicationJSON) SetFake() {
	var unwrapped []Team
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Team
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListProjectsLegacyOKApplicationJSON) SetFake() {
	var unwrapped []TeamProject
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem TeamProject
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListProjectsLegacyOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsListReposLegacyOKApplicationJSON) SetFake() {
	var unwrapped []MinimalRepository
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem MinimalRepository
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = TeamsListReposLegacyOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *TeamsUpdateDiscussionCommentInOrgReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateDiscussionCommentLegacyReq) SetFake() {
	{
		{
			s.Body = "string"
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateDiscussionInOrgReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateDiscussionLegacyReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Body.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateInOrgReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission.SetFake()
		}
	}
	{
		{
			s.ParentTeamID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateInOrgReqPermission) SetFake() {
	*s = TeamsUpdateInOrgReqPermissionPull
}

// SetFake set fake values.
func (s *TeamsUpdateInOrgReqPrivacy) SetFake() {
	*s = TeamsUpdateInOrgReqPrivacySecret
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyApplicationJSONCreated) SetFake() {
	var unwrapped TeamFull
	{
		unwrapped.SetFake()
	}
	*s = TeamsUpdateLegacyApplicationJSONCreated(unwrapped)
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsUpdateLegacyApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = TeamsUpdateLegacyApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyApplicationJSONOK) SetFake() {
	var unwrapped TeamFull
	{
		unwrapped.SetFake()
	}
	*s = TeamsUpdateLegacyApplicationJSONOK(unwrapped)
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyReq) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.Privacy.SetFake()
		}
	}
	{
		{
			s.Permission.SetFake()
		}
	}
	{
		{
			s.ParentTeamID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyReqPermission) SetFake() {
	*s = TeamsUpdateLegacyReqPermissionPull
}

// SetFake set fake values.
func (s *TeamsUpdateLegacyReqPrivacy) SetFake() {
	*s = TeamsUpdateLegacyReqPrivacySecret
}

// SetFake set fake values.
func (s *Thread) SetFake() {
	{
		{
			s.ID = "string"
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.Subject.SetFake()
		}
	}
	{
		{
			s.Reason = "string"
		}
	}
	{
		{
			s.Unread = true
		}
	}
	{
		{
			s.UpdatedAt = "string"
		}
	}
	{
		{
			s.LastReadAt.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.SubscriptionURL = "string"
		}
	}
}

// SetFake set fake values.
func (s *ThreadSubject) SetFake() {
	{
		{
			s.Title = "string"
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.LatestCommentURL = "string"
		}
	}
	{
		{
			s.Type = "string"
		}
	}
}

// SetFake set fake values.
func (s *ThreadSubscription) SetFake() {
	{
		{
			s.Subscribed = true
		}
	}
	{
		{
			s.Ignored = true
		}
	}
	{
		{
			s.Reason.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ThreadURL.SetFake()
		}
	}
	{
		{
			s.RepositoryURL.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Topic) SetFake() {
	{
		{
			s.Names = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Names = append(s.Names, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *TopicSearchResultItem) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.DisplayName.SetFake()
		}
	}
	{
		{
			s.ShortDescription.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.CreatedBy.SetFake()
		}
	}
	{
		{
			s.Released.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.Featured = true
		}
	}
	{
		{
			s.Curated = true
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.RepositoryCount.SetFake()
		}
	}
	{
		{
			s.LogoURL.SetFake()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
	{
		{
			s.Related.SetFake()
		}
	}
	{
		{
			s.Aliases.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TopicSearchResultItemAliasesItem) SetFake() {
	{
		{
			s.TopicRelation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TopicSearchResultItemAliasesItemTopicRelation) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.TopicID.SetFake()
		}
	}
	{
		{
			s.RelationType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TopicSearchResultItemRelatedItem) SetFake() {
	{
		{
			s.TopicRelation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TopicSearchResultItemRelatedItemTopicRelation) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.TopicID.SetFake()
		}
	}
	{
		{
			s.RelationType.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *Traffic) SetFake() {
	{
		{
			s.Timestamp = time.Now()
		}
	}
	{
		{
			s.Uniques = int(0)
		}
	}
	{
		{
			s.Count = int(0)
		}
	}
}

// SetFake set fake values.
func (s *UserMarketplacePurchase) SetFake() {
	{
		{
			s.BillingCycle = "string"
		}
	}
	{
		{
			s.NextBillingDate.SetFake()
		}
	}
	{
		{
			s.UnitCount.SetFake()
		}
	}
	{
		{
			s.OnFreeTrial = true
		}
	}
	{
		{
			s.FreeTrialEndsOn.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Account.SetFake()
		}
	}
	{
		{
			s.Plan.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UserSearchResultItem) SetFake() {
	{
		{
			s.Login = "string"
		}
	}
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.AvatarURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.GravatarID.SetFake()
		}
	}
	{
		{
			s.URL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.HTMLURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.FollowersURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.SubscriptionsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.OrganizationsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReposURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.ReceivedEventsURL = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.Type = "string"
		}
	}
	{
		{
			s.Score = float64(0)
		}
	}
	{
		{
			s.FollowingURL = "string"
		}
	}
	{
		{
			s.GistsURL = "string"
		}
	}
	{
		{
			s.StarredURL = "string"
		}
	}
	{
		{
			s.EventsURL = "string"
		}
	}
	{
		{
			s.PublicRepos.SetFake()
		}
	}
	{
		{
			s.PublicGists.SetFake()
		}
	}
	{
		{
			s.Followers.SetFake()
		}
	}
	{
		{
			s.Following.SetFake()
		}
	}
	{
		{
			s.CreatedAt.SetFake()
		}
	}
	{
		{
			s.UpdatedAt.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Bio.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.SiteAdmin = true
		}
	}
	{
		{
			s.Hireable.SetFake()
		}
	}
	{
		{ // Keep pointer nil to prevent infinite recursion.
			s.TextMatches = nil
		}
	}
	{
		{
			s.Blog.SetFake()
		}
	}
	{
		{
			s.Company.SetFake()
		}
	}
	{
		{
			s.SuspendedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersAddEmailForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersAddEmailForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersAddEmailForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedCreatedApplicationJSON) SetFake() {
	var unwrapped []Email
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Email
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersAddEmailForAuthenticatedCreatedApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedReq) SetFake() {
	var elem UsersAddEmailForAuthenticatedReq0

	{
		elem.SetFake()
	}
	s.SetUsersAddEmailForAuthenticatedReq0(elem)
}

// SetFake set fake values.
func (s *UsersAddEmailForAuthenticatedReq0) SetFake() {
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *UsersBlockApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersBlockApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersBlockApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersBlockApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersBlockApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersBlockApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckBlockedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckBlockedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckBlockedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckBlockedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckBlockedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckBlockedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreateGpgKeyForAuthenticatedReq) SetFake() {
	{
		{
			s.ArmoredPublicKey = "string"
		}
	}
}

// SetFake set fake values.
func (s *UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) SetFake() {
	{
		{
			s.Title.SetFake()
		}
	}
	{
		{
			s.Key = "string"
		}
	}
}

// SetFake set fake values.
func (s *UsersDeleteEmailForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteEmailForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeleteEmailForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteEmailForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeleteEmailForAuthenticatedReq) SetFake() {
	var elem UsersDeleteEmailForAuthenticatedReq0

	{
		elem.SetFake()
	}
	s.SetUsersDeleteEmailForAuthenticatedReq0(elem)
}

// SetFake set fake values.
func (s *UsersDeleteEmailForAuthenticatedReq0) SetFake() {
	{
		{
			s.Emails = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Emails = append(s.Emails, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersFollowApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersFollowApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersFollowApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersFollowApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersFollowApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersFollowApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetAuthenticatedOK) SetFake() {
	var elem PrivateUser

	{
		elem.SetFake()
	}
	s.SetPrivateUser(elem)
}

// SetFake set fake values.
func (s *UsersGetByUsernameOK) SetFake() {
	var elem PrivateUser

	{
		elem.SetFake()
	}
	s.SetPrivateUser(elem)
}

// SetFake set fake values.
func (s *UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListBlockedByAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListBlockedByAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListBlockedByAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListBlockedByAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersListBlockedByAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListBlockedByAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListBlockedByAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListBlockedByAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListEmailsForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListEmailsForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListEmailsForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListEmailsForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersListEmailsForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListEmailsForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListEmailsForAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []Email
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Email
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListEmailsForAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowedByAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListFollowedByAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowedByAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListFollowedByAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowedByAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListFollowedByAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowersForAuthenticatedUserApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListFollowersForAuthenticatedUserApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListFollowersForAuthenticatedUserOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListFollowersForAuthenticatedUserOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListGpgKeysForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListGpgKeysForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListGpgKeysForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListGpgKeysForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListGpgKeysForAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []GpgKey
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem GpgKey
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListGpgKeysForAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListOKApplicationJSON) SetFake() {
	var unwrapped []SimpleUser
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem SimpleUser
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicEmailsForAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []Email
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Email
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListPublicEmailsForAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []Key
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Key
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON) SetFake() {
	var unwrapped []Email
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem Email
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReq) SetFake() {
	{
		{
			s.Visibility.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) SetFake() {
	*s = UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic
}

// SetFake set fake values.
func (s *UsersUnblockApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnblockApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersUnblockApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnblockApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersUnblockApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnblockApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersUnfollowApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnfollowApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersUnfollowApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnfollowApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersUnfollowApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUnfollowApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersUpdateAuthenticatedApplicationJSONForbidden) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUpdateAuthenticatedApplicationJSONForbidden(unwrapped)
}

// SetFake set fake values.
func (s *UsersUpdateAuthenticatedApplicationJSONNotFound) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUpdateAuthenticatedApplicationJSONNotFound(unwrapped)
}

// SetFake set fake values.
func (s *UsersUpdateAuthenticatedApplicationJSONUnauthorized) SetFake() {
	var unwrapped BasicError
	{
		unwrapped.SetFake()
	}
	*s = UsersUpdateAuthenticatedApplicationJSONUnauthorized(unwrapped)
}

// SetFake set fake values.
func (s *UsersUpdateAuthenticatedReq) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Email.SetFake()
		}
	}
	{
		{
			s.Blog.SetFake()
		}
	}
	{
		{
			s.TwitterUsername.SetFake()
		}
	}
	{
		{
			s.Company.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.Hireable.SetFake()
		}
	}
	{
		{
			s.Bio.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ValidationError) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.DocumentationURL = "string"
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem ValidationErrorErrorsItem
				{
					elem.SetFake()
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ValidationErrorErrorsItem) SetFake() {
	{
		{
			s.Resource.SetFake()
		}
	}
	{
		{
			s.Field.SetFake()
		}
	}
	{
		{
			s.Message.SetFake()
		}
	}
	{
		{
			s.Code = "string"
		}
	}
	{
		{
			s.Index.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ValidationErrorErrorsItemValue) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *ValidationErrorSimple) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
	{
		{
			s.DocumentationURL = "string"
		}
	}
	{
		{
			s.Errors = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Errors = append(s.Errors, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Verification) SetFake() {
	{
		{
			s.Verified = true
		}
	}
	{
		{
			s.Reason = "string"
		}
	}
	{
		{
			s.Payload.SetFake()
		}
	}
	{
		{
			s.Signature.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ViewTraffic) SetFake() {
	{
		{
			s.Count = int(0)
		}
	}
	{
		{
			s.Uniques = int(0)
		}
	}
	{
		{
			s.Views = nil
			for i := 0; i < 0; i++ {
				var elem Traffic
				{
					elem.SetFake()
				}
				s.Views = append(s.Views, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *WebhookConfig) SetFake() {
	{
		{
			s.URL.SetFake()
		}
	}
	{
		{
			s.ContentType.SetFake()
		}
	}
	{
		{
			s.Secret.SetFake()
		}
	}
	{
		{
			s.InsecureSsl.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WebhookConfigContentType) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = WebhookConfigContentType(unwrapped)
}

// SetFake set fake values.
func (s *WebhookConfigInsecureSsl) SetFake() {
	var elem string

	{
		elem = "string"
	}
	s.SetString(elem)
}

// SetFake set fake values.
func (s *WebhookConfigSecret) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = WebhookConfigSecret(unwrapped)
}

// SetFake set fake values.
func (s *WebhookConfigURL) SetFake() {
	var unwrapped url.URL
	{
		unwrapped = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	*s = WebhookConfigURL(unwrapped)
}

// SetFake set fake values.
func (s *Workflow) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.State.SetFake()
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL = "string"
		}
	}
	{
		{
			s.BadgeURL = "string"
		}
	}
	{
		{
			s.DeletedAt.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRun) SetFake() {
	{
		{
			s.ID = int(0)
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.NodeID = "string"
		}
	}
	{
		{
			s.CheckSuiteID.SetFake()
		}
	}
	{
		{
			s.CheckSuiteNodeID.SetFake()
		}
	}
	{
		{
			s.HeadBranch.SetFake()
		}
	}
	{
		{
			s.HeadSha = "string"
		}
	}
	{
		{
			s.RunNumber = int(0)
		}
	}
	{
		{
			s.RunAttempt.SetFake()
		}
	}
	{
		{
			s.Event = "string"
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.Conclusion.SetFake()
		}
	}
	{
		{
			s.WorkflowID = int(0)
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.HTMLURL = "string"
		}
	}
	{
		{
			s.PullRequests = nil
			for i := 0; i < 0; i++ {
				var elem PullRequestMinimal
				{
					elem.SetFake()
				}
				s.PullRequests = append(s.PullRequests, elem)
			}
		}
	}
	{
		{
			s.CreatedAt = time.Now()
		}
	}
	{
		{
			s.UpdatedAt = time.Now()
		}
	}
	{
		{
			s.JobsURL = "string"
		}
	}
	{
		{
			s.LogsURL = "string"
		}
	}
	{
		{
			s.CheckSuiteURL = "string"
		}
	}
	{
		{
			s.ArtifactsURL = "string"
		}
	}
	{
		{
			s.CancelURL = "string"
		}
	}
	{
		{
			s.RerunURL = "string"
		}
	}
	{
		{
			s.PreviousAttemptURL.SetFake()
		}
	}
	{
		{
			s.WorkflowURL = "string"
		}
	}
	{
		{
			s.HeadCommit.SetFake()
		}
	}
	{
		{
			s.Repository.SetFake()
		}
	}
	{
		{
			s.HeadRepository.SetFake()
		}
	}
	{
		{
			s.HeadRepositoryID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRunUsage) SetFake() {
	{
		{
			s.Billable.SetFake()
		}
	}
	{
		{
			s.RunDurationMs.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRunUsageBillable) SetFake() {
	{
		{
			s.UBUNTU.SetFake()
		}
	}
	{
		{
			s.MACOS.SetFake()
		}
	}
	{
		{
			s.WINDOWS.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRunUsageBillableMACOS) SetFake() {
	{
		{
			s.TotalMs = int(0)
		}
	}
	{
		{
			s.Jobs = int(0)
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRunUsageBillableUBUNTU) SetFake() {
	{
		{
			s.TotalMs = int(0)
		}
	}
	{
		{
			s.Jobs = int(0)
		}
	}
}

// SetFake set fake values.
func (s *WorkflowRunUsageBillableWINDOWS) SetFake() {
	{
		{
			s.TotalMs = int(0)
		}
	}
	{
		{
			s.Jobs = int(0)
		}
	}
}

// SetFake set fake values.
func (s *WorkflowState) SetFake() {
	*s = WorkflowStateActive
}
