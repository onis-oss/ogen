// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"
	"time"

	"github.com/go-faster/jx"
)

// Api Overview.
// Ref: #/components/schemas/api-overview
type APIOverview struct {
	VerifiablePasswordAuthentication bool                             "json:\"verifiable_password_authentication\""
	SSHKeyFingerprints               OptAPIOverviewSSHKeyFingerprints "json:\"ssh_key_fingerprints\""
	Hooks                            []string                         "json:\"hooks\""
	Web                              []string                         "json:\"web\""
	API                              []string                         "json:\"api\""
	Git                              []string                         "json:\"git\""
	Packages                         []string                         "json:\"packages\""
	Pages                            []string                         "json:\"pages\""
	Importer                         []string                         "json:\"importer\""
	Actions                          []string                         "json:\"actions\""
	Dependabot                       []string                         "json:\"dependabot\""
}

func (*APIOverview) metaGetRes() {}

type APIOverviewSSHKeyFingerprints struct {
	SHA256RSA     OptString "json:\"SHA256_RSA\""
	SHA256DSA     OptString "json:\"SHA256_DSA\""
	SHA256ECDSA   OptString "json:\"SHA256_ECDSA\""
	SHA256ED25519 OptString "json:\"SHA256_ED25519\""
}

type Accepted struct{}

func (*Accepted) appsRedeliverWebhookDeliveryRes()  {}
func (*Accepted) orgsRedeliverWebhookDeliveryRes()  {}
func (*Accepted) reposEnableLfsForRepoRes()         {}
func (*Accepted) reposGetCodeFrequencyStatsRes()    {}
func (*Accepted) reposGetCommitActivityStatsRes()   {}
func (*Accepted) reposGetContributorsStatsRes()     {}
func (*Accepted) reposRedeliverWebhookDeliveryRes() {}
func (*Accepted) usersGetByUsernameRes()            {}

// ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

// ActionsAddSelectedRepoToOrgSecretConflict is response for ActionsAddSelectedRepoToOrgSecret operation.
type ActionsAddSelectedRepoToOrgSecretConflict struct{}

func (*ActionsAddSelectedRepoToOrgSecretConflict) actionsAddSelectedRepoToOrgSecretRes() {}

// ActionsAddSelectedRepoToOrgSecretNoContent is response for ActionsAddSelectedRepoToOrgSecret operation.
type ActionsAddSelectedRepoToOrgSecretNoContent struct{}

func (*ActionsAddSelectedRepoToOrgSecretNoContent) actionsAddSelectedRepoToOrgSecretRes() {}

// ActionsAddSelfHostedRunnerToGroupForOrgNoContent is response for ActionsAddSelfHostedRunnerToGroupForOrg operation.
type ActionsAddSelfHostedRunnerToGroupForOrgNoContent struct{}

type ActionsApproveWorkflowRunApplicationJSONForbidden BasicError

func (*ActionsApproveWorkflowRunApplicationJSONForbidden) actionsApproveWorkflowRunRes() {}

type ActionsApproveWorkflowRunApplicationJSONNotFound BasicError

func (*ActionsApproveWorkflowRunApplicationJSONNotFound) actionsApproveWorkflowRunRes() {}

// Ref: #/components/schemas/actions-billing-usage
type ActionsBillingUsage struct {
	// The sum of the free and paid GitHub Actions minutes used.
	TotalMinutesUsed int "json:\"total_minutes_used\""
	// The total paid GitHub Actions minutes used.
	TotalPaidMinutesUsed int "json:\"total_paid_minutes_used\""
	// The amount of free GitHub Actions minutes available.
	IncludedMinutes      int                                     "json:\"included_minutes\""
	MinutesUsedBreakdown ActionsBillingUsageMinutesUsedBreakdown "json:\"minutes_used_breakdown\""
}

type ActionsBillingUsageMinutesUsedBreakdown struct {
	// Total minutes used on Ubuntu runner machines.
	UBUNTU OptInt "json:\"UBUNTU\""
	// Total minutes used on macOS runner machines.
	MACOS OptInt "json:\"MACOS\""
	// Total minutes used on Windows runner machines.
	WINDOWS OptInt "json:\"WINDOWS\""
}

type ActionsCancelWorkflowRunAccepted map[string]jx.Raw

func (s *ActionsCancelWorkflowRunAccepted) init() ActionsCancelWorkflowRunAccepted {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ActionsCreateOrUpdateEnvironmentSecretNoContent is response for ActionsCreateOrUpdateEnvironmentSecret operation.
type ActionsCreateOrUpdateEnvironmentSecretNoContent struct{}

func (*ActionsCreateOrUpdateEnvironmentSecretNoContent) actionsCreateOrUpdateEnvironmentSecretRes() {}

type ActionsCreateOrUpdateEnvironmentSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment
	// public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
	EncryptedValue string "json:\"encrypted_value\""
	// ID of the key you used to encrypt the secret.
	KeyID string "json:\"key_id\""
}

// ActionsCreateOrUpdateOrgSecretNoContent is response for ActionsCreateOrUpdateOrgSecret operation.
type ActionsCreateOrUpdateOrgSecretNoContent struct{}

func (*ActionsCreateOrUpdateOrgSecretNoContent) actionsCreateOrUpdateOrgSecretRes() {}

type ActionsCreateOrUpdateOrgSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization
	// public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key)
	// endpoint.
	EncryptedValue OptString "json:\"encrypted_value\""
	// ID of the key you used to encrypt the secret.
	KeyID OptString "json:\"key_id\""
	// Configures the access that repositories have to the organization secret. Can be one of:
	// \- `all` - All repositories in an organization can access the secret.
	// \- `private` - Private repositories in an organization can access the secret.
	// \- `selected` - Only specific repositories can access the secret.
	Visibility ActionsCreateOrUpdateOrgSecretReqVisibility "json:\"visibility\""
	// An array of repository ids that can access the organization secret. You can only provide a list of
	// repository ids when the `visibility` is set to `selected`. You can manage the list of selected
	// repositories using the [List selected repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected
	// repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove
	// selected repository from an organization secret](https://docs.github.
	// com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []string "json:\"selected_repository_ids\""
}

// Configures the access that repositories have to the organization secret. Can be one of:
// \- `all` - All repositories in an organization can access the secret.
// \- `private` - Private repositories in an organization can access the secret.
// \- `selected` - Only specific repositories can access the secret.
type ActionsCreateOrUpdateOrgSecretReqVisibility string

const (
	ActionsCreateOrUpdateOrgSecretReqVisibilityAll      ActionsCreateOrUpdateOrgSecretReqVisibility = "all"
	ActionsCreateOrUpdateOrgSecretReqVisibilityPrivate  ActionsCreateOrUpdateOrgSecretReqVisibility = "private"
	ActionsCreateOrUpdateOrgSecretReqVisibilitySelected ActionsCreateOrUpdateOrgSecretReqVisibility = "selected"
)

type ActionsCreateOrUpdateRepoSecretCreated map[string]jx.Raw

func (s *ActionsCreateOrUpdateRepoSecretCreated) init() ActionsCreateOrUpdateRepoSecretCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (ActionsCreateOrUpdateRepoSecretCreated) actionsCreateOrUpdateRepoSecretRes() {}

// ActionsCreateOrUpdateRepoSecretNoContent is response for ActionsCreateOrUpdateRepoSecret operation.
type ActionsCreateOrUpdateRepoSecretNoContent struct{}

func (*ActionsCreateOrUpdateRepoSecretNoContent) actionsCreateOrUpdateRepoSecretRes() {}

type ActionsCreateOrUpdateRepoSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository
	// public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
	EncryptedValue OptString "json:\"encrypted_value\""
	// ID of the key you used to encrypt the secret.
	KeyID OptString "json:\"key_id\""
}

type ActionsCreateSelfHostedRunnerGroupForOrgReq struct {
	// Name of the runner group.
	Name string "json:\"name\""
	// Visibility of a runner group. You can select all repositories, select individual repositories, or
	// limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
	Visibility OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility "json:\"visibility\""
	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds []int "json:\"selected_repository_ids\""
	// List of runner IDs to add to the runner group.
	Runners []int "json:\"runners\""
}

// Visibility of a runner group. You can select all repositories, select individual repositories, or
// limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
type ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility string

const (
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "selected"
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityAll      ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "all"
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityPrivate  ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "private"
)

// ActionsDeleteArtifactNoContent is response for ActionsDeleteArtifact operation.
type ActionsDeleteArtifactNoContent struct{}

// ActionsDeleteEnvironmentSecretNoContent is response for ActionsDeleteEnvironmentSecret operation.
type ActionsDeleteEnvironmentSecretNoContent struct{}

// ActionsDeleteOrgSecretNoContent is response for ActionsDeleteOrgSecret operation.
type ActionsDeleteOrgSecretNoContent struct{}

// ActionsDeleteRepoSecretNoContent is response for ActionsDeleteRepoSecret operation.
type ActionsDeleteRepoSecretNoContent struct{}

// ActionsDeleteSelfHostedRunnerFromOrgNoContent is response for ActionsDeleteSelfHostedRunnerFromOrg operation.
type ActionsDeleteSelfHostedRunnerFromOrgNoContent struct{}

// ActionsDeleteSelfHostedRunnerFromRepoNoContent is response for ActionsDeleteSelfHostedRunnerFromRepo operation.
type ActionsDeleteSelfHostedRunnerFromRepoNoContent struct{}

// ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent is response for ActionsDeleteSelfHostedRunnerGroupFromOrg operation.
type ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent struct{}

// ActionsDeleteWorkflowRunLogsNoContent is response for ActionsDeleteWorkflowRunLogs operation.
type ActionsDeleteWorkflowRunLogsNoContent struct{}

// ActionsDeleteWorkflowRunNoContent is response for ActionsDeleteWorkflowRun operation.
type ActionsDeleteWorkflowRunNoContent struct{}

// ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent is response for ActionsDisableSelectedRepositoryGithubActionsOrganization operation.
type ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent struct{}

// ActionsDownloadArtifactFound is response for ActionsDownloadArtifact operation.
type ActionsDownloadArtifactFound struct{}

// ActionsDownloadJobLogsForWorkflowRunFound is response for ActionsDownloadJobLogsForWorkflowRun operation.
type ActionsDownloadJobLogsForWorkflowRunFound struct{}

// ActionsDownloadWorkflowRunLogsFound is response for ActionsDownloadWorkflowRunLogs operation.
type ActionsDownloadWorkflowRunLogsFound struct{}

// ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent is response for ActionsEnableSelectedRepositoryGithubActionsOrganization operation.
type ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent struct{}

type ActionsEnabled bool

// Ref: #/components/schemas/actions-enterprise-permissions
type ActionsEnterprisePermissions struct {
	EnabledOrganizations EnabledOrganizations "json:\"enabled_organizations\""
	// The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions,
	//  when `enabled_organizations` is set to `selected`.
	SelectedOrganizationsURL OptString             "json:\"selected_organizations_url\""
	AllowedActions           OptAllowedActions     "json:\"allowed_actions\""
	SelectedActionsURL       OptSelectedActionsURL "json:\"selected_actions_url\""
}

type ActionsListArtifactsForRepoOK struct {
	TotalCount int        "json:\"total_count\""
	Artifacts  []Artifact "json:\"artifacts\""
}

type ActionsListEnvironmentSecretsOK struct {
	TotalCount int             "json:\"total_count\""
	Secrets    []ActionsSecret "json:\"secrets\""
}

type ActionsListJobsForWorkflowRunFilter string

const (
	ActionsListJobsForWorkflowRunFilterLatest ActionsListJobsForWorkflowRunFilter = "latest"
	ActionsListJobsForWorkflowRunFilterAll    ActionsListJobsForWorkflowRunFilter = "all"
)

type ActionsListJobsForWorkflowRunOK struct {
	TotalCount int   "json:\"total_count\""
	Jobs       []Job "json:\"jobs\""
}

type ActionsListOrgSecretsOK struct {
	TotalCount int                         "json:\"total_count\""
	Secrets    []OrganizationActionsSecret "json:\"secrets\""
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK struct {
	TotalCount   float64             "json:\"total_count\""
	Repositories []MinimalRepository "json:\"repositories\""
}

type ActionsListRepoSecretsOK struct {
	TotalCount int             "json:\"total_count\""
	Secrets    []ActionsSecret "json:\"secrets\""
}

type ActionsListRepoWorkflowsOK struct {
	TotalCount int        "json:\"total_count\""
	Workflows  []Workflow "json:\"workflows\""
}

type ActionsListSelectedReposForOrgSecretOK struct {
	TotalCount   int                 "json:\"total_count\""
	Repositories []MinimalRepository "json:\"repositories\""
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK struct {
	TotalCount   float64      "json:\"total_count\""
	Repositories []Repository "json:\"repositories\""
}

type ActionsListSelfHostedRunnerGroupsForOrgOK struct {
	TotalCount   float64           "json:\"total_count\""
	RunnerGroups []RunnerGroupsOrg "json:\"runner_groups\""
}

type ActionsListSelfHostedRunnersForOrgOK struct {
	TotalCount int      "json:\"total_count\""
	Runners    []Runner "json:\"runners\""
}

type ActionsListSelfHostedRunnersForRepoOK struct {
	TotalCount int      "json:\"total_count\""
	Runners    []Runner "json:\"runners\""
}

type ActionsListSelfHostedRunnersInGroupForOrgOK struct {
	TotalCount float64  "json:\"total_count\""
	Runners    []Runner "json:\"runners\""
}

type ActionsListWorkflowRunArtifactsOK struct {
	TotalCount int        "json:\"total_count\""
	Artifacts  []Artifact "json:\"artifacts\""
}

type ActionsListWorkflowRunsForRepoOK struct {
	TotalCount   int           "json:\"total_count\""
	WorkflowRuns []WorkflowRun "json:\"workflow_runs\""
}

type ActionsListWorkflowRunsForRepoStatus string

const (
	ActionsListWorkflowRunsForRepoStatusCompleted      ActionsListWorkflowRunsForRepoStatus = "completed"
	ActionsListWorkflowRunsForRepoStatusActionRequired ActionsListWorkflowRunsForRepoStatus = "action_required"
	ActionsListWorkflowRunsForRepoStatusCancelled      ActionsListWorkflowRunsForRepoStatus = "cancelled"
	ActionsListWorkflowRunsForRepoStatusFailure        ActionsListWorkflowRunsForRepoStatus = "failure"
	ActionsListWorkflowRunsForRepoStatusNeutral        ActionsListWorkflowRunsForRepoStatus = "neutral"
	ActionsListWorkflowRunsForRepoStatusSkipped        ActionsListWorkflowRunsForRepoStatus = "skipped"
	ActionsListWorkflowRunsForRepoStatusStale          ActionsListWorkflowRunsForRepoStatus = "stale"
	ActionsListWorkflowRunsForRepoStatusSuccess        ActionsListWorkflowRunsForRepoStatus = "success"
	ActionsListWorkflowRunsForRepoStatusTimedOut       ActionsListWorkflowRunsForRepoStatus = "timed_out"
	ActionsListWorkflowRunsForRepoStatusInProgress     ActionsListWorkflowRunsForRepoStatus = "in_progress"
	ActionsListWorkflowRunsForRepoStatusQueued         ActionsListWorkflowRunsForRepoStatus = "queued"
	ActionsListWorkflowRunsForRepoStatusRequested      ActionsListWorkflowRunsForRepoStatus = "requested"
	ActionsListWorkflowRunsForRepoStatusWaiting        ActionsListWorkflowRunsForRepoStatus = "waiting"
)

// Ref: #/components/schemas/actions-organization-permissions
type ActionsOrganizationPermissions struct {
	EnabledRepositories EnabledRepositories "json:\"enabled_repositories\""
	// The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions,
	// when `enabled_repositories` is set to `selected`.
	SelectedRepositoriesURL OptString             "json:\"selected_repositories_url\""
	AllowedActions          OptAllowedActions     "json:\"allowed_actions\""
	SelectedActionsURL      OptSelectedActionsURL "json:\"selected_actions_url\""
}

// The public key used for setting Actions Secrets.
// Ref: #/components/schemas/actions-public-key
type ActionsPublicKey struct {
	// The identifier for the key.
	KeyID string "json:\"key_id\""
	// The Base64 encoded public key.
	Key       string    "json:\"key\""
	ID        OptInt    "json:\"id\""
	URL       OptString "json:\"url\""
	Title     OptString "json:\"title\""
	CreatedAt OptString "json:\"created_at\""
}

type ActionsReRunWorkflowCreated map[string]jx.Raw

func (s *ActionsReRunWorkflowCreated) init() ActionsReRunWorkflowCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

// ActionsRemoveSelectedRepoFromOrgSecretConflict is response for ActionsRemoveSelectedRepoFromOrgSecret operation.
type ActionsRemoveSelectedRepoFromOrgSecretConflict struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretConflict) actionsRemoveSelectedRepoFromOrgSecretRes() {}

// ActionsRemoveSelectedRepoFromOrgSecretNoContent is response for ActionsRemoveSelectedRepoFromOrgSecret operation.
type ActionsRemoveSelectedRepoFromOrgSecretNoContent struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretNoContent) actionsRemoveSelectedRepoFromOrgSecretRes() {}

// ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent is response for ActionsRemoveSelfHostedRunnerFromGroupForOrg operation.
type ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent struct{}

// Ref: #/components/schemas/actions-repository-permissions
type ActionsRepositoryPermissions struct {
	Enabled            ActionsEnabled        "json:\"enabled\""
	AllowedActions     OptAllowedActions     "json:\"allowed_actions\""
	SelectedActionsURL OptSelectedActionsURL "json:\"selected_actions_url\""
}

type ActionsRetryWorkflowCreated map[string]jx.Raw

func (s *ActionsRetryWorkflowCreated) init() ActionsRetryWorkflowCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ActionsReviewPendingDeploymentsForRunReq struct {
	// The list of environment ids to approve or reject.
	EnvironmentIds []int "json:\"environment_ids\""
	// Whether to approve or reject deployment to the specified environments. Must be one of: `approved`
	// or `rejected`.
	State ActionsReviewPendingDeploymentsForRunReqState "json:\"state\""
	// A comment to accompany the deployment review.
	Comment string "json:\"comment\""
}

// Whether to approve or reject deployment to the specified environments. Must be one of: `approved`
// or `rejected`.
type ActionsReviewPendingDeploymentsForRunReqState string

const (
	ActionsReviewPendingDeploymentsForRunReqStateApproved ActionsReviewPendingDeploymentsForRunReqState = "approved"
	ActionsReviewPendingDeploymentsForRunReqStateRejected ActionsReviewPendingDeploymentsForRunReqState = "rejected"
)

// Set secrets for GitHub Actions.
// Ref: #/components/schemas/actions-secret
type ActionsSecret struct {
	// The name of the secret.
	Name      string    "json:\"name\""
	CreatedAt time.Time "json:\"created_at\""
	UpdatedAt time.Time "json:\"updated_at\""
}

// ActionsSetAllowedActionsOrganizationNoContent is response for ActionsSetAllowedActionsOrganization operation.
type ActionsSetAllowedActionsOrganizationNoContent struct{}

// ActionsSetAllowedActionsRepositoryNoContent is response for ActionsSetAllowedActionsRepository operation.
type ActionsSetAllowedActionsRepositoryNoContent struct{}

// ActionsSetGithubActionsPermissionsOrganizationNoContent is response for ActionsSetGithubActionsPermissionsOrganization operation.
type ActionsSetGithubActionsPermissionsOrganizationNoContent struct{}

type ActionsSetGithubActionsPermissionsOrganizationReq struct {
	EnabledRepositories EnabledRepositories "json:\"enabled_repositories\""
	AllowedActions      OptAllowedActions   "json:\"allowed_actions\""
}

// ActionsSetGithubActionsPermissionsRepositoryNoContent is response for ActionsSetGithubActionsPermissionsRepository operation.
type ActionsSetGithubActionsPermissionsRepositoryNoContent struct{}

type ActionsSetGithubActionsPermissionsRepositoryReq struct {
	Enabled        ActionsEnabled    "json:\"enabled\""
	AllowedActions OptAllowedActions "json:\"allowed_actions\""
}

// ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq struct {
	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds []int "json:\"selected_repository_ids\""
}

// ActionsSetSelectedReposForOrgSecretNoContent is response for ActionsSetSelectedReposForOrgSecret operation.
type ActionsSetSelectedReposForOrgSecretNoContent struct{}

type ActionsSetSelectedReposForOrgSecretReq struct {
	// An array of repository ids that can access the organization secret. You can only provide a list of
	// repository ids when the `visibility` is set to `selected`. You can add and remove individual
	// repositories using the [Set selected repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove
	// selected repository from an organization secret](https://docs.github.
	// com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []int "json:\"selected_repository_ids\""
}

// ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent is response for ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization operation.
type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent struct{}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq struct {
	// List of repository IDs to enable for GitHub Actions.
	SelectedRepositoryIds []int "json:\"selected_repository_ids\""
}

// ActionsSetSelfHostedRunnersInGroupForOrgNoContent is response for ActionsSetSelfHostedRunnersInGroupForOrg operation.
type ActionsSetSelfHostedRunnersInGroupForOrgNoContent struct{}

type ActionsSetSelfHostedRunnersInGroupForOrgReq struct {
	// List of runner IDs to add to the runner group.
	Runners []int "json:\"runners\""
}

type ActionsUpdateSelfHostedRunnerGroupForOrgReq struct {
	// Name of the runner group.
	Name string "json:\"name\""
	// Visibility of a runner group. You can select all repositories, select individual repositories, or
	// all private repositories. Can be one of: `all`, `selected`, or `private`.
	Visibility OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility "json:\"visibility\""
}

// Visibility of a runner group. You can select all repositories, select individual repositories, or
// all private repositories. Can be one of: `all`, `selected`, or `private`.
type ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility string

const (
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "selected"
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityAll      ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "all"
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityPrivate  ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "private"
)

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

// ActivityCheckRepoIsStarredByAuthenticatedUserNoContent is response for ActivityCheckRepoIsStarredByAuthenticatedUser operation.
type ActivityCheckRepoIsStarredByAuthenticatedUserNoContent struct{}

func (*ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

// ActivityDeleteRepoSubscriptionNoContent is response for ActivityDeleteRepoSubscription operation.
type ActivityDeleteRepoSubscriptionNoContent struct{}

type ActivityDeleteThreadSubscriptionApplicationJSONForbidden BasicError

func (*ActivityDeleteThreadSubscriptionApplicationJSONForbidden) activityDeleteThreadSubscriptionRes() {
}

type ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized BasicError

func (*ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized) activityDeleteThreadSubscriptionRes() {
}

// ActivityDeleteThreadSubscriptionNoContent is response for ActivityDeleteThreadSubscription operation.
type ActivityDeleteThreadSubscriptionNoContent struct{}

func (*ActivityDeleteThreadSubscriptionNoContent) activityDeleteThreadSubscriptionRes() {}

// ActivityGetRepoSubscriptionNotFound is response for ActivityGetRepoSubscription operation.
type ActivityGetRepoSubscriptionNotFound struct{}

func (*ActivityGetRepoSubscriptionNotFound) activityGetRepoSubscriptionRes() {}

type ActivityGetThreadApplicationJSONForbidden BasicError

func (*ActivityGetThreadApplicationJSONForbidden) activityGetThreadRes() {}

type ActivityGetThreadApplicationJSONUnauthorized BasicError

func (*ActivityGetThreadApplicationJSONUnauthorized) activityGetThreadRes() {}

type ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden) activityGetThreadSubscriptionForAuthenticatedUserRes() {
}

type ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized) activityGetThreadSubscriptionForAuthenticatedUserRes() {
}

type ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden) activityListNotificationsForAuthenticatedUserRes() {
}

type ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized) activityListNotificationsForAuthenticatedUserRes() {
}

type ActivityListNotificationsForAuthenticatedUserOKApplicationJSON []Thread

func (ActivityListNotificationsForAuthenticatedUserOKApplicationJSON) activityListNotificationsForAuthenticatedUserRes() {
}

type ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsForRepoNetworkOKApplicationJSON []Event

func (ActivityListPublicEventsForRepoNetworkOKApplicationJSON) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsOKApplicationJSON []Event

func (ActivityListPublicEventsOKApplicationJSON) activityListPublicEventsRes() {}

type ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden) activityListReposStarredByAuthenticatedUserRes() {
}

type ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized) activityListReposStarredByAuthenticatedUserRes() {
}

type ActivityListReposStarredByAuthenticatedUserDirection string

const (
	ActivityListReposStarredByAuthenticatedUserDirectionAsc  ActivityListReposStarredByAuthenticatedUserDirection = "asc"
	ActivityListReposStarredByAuthenticatedUserDirectionDesc ActivityListReposStarredByAuthenticatedUserDirection = "desc"
)

type ActivityListReposStarredByAuthenticatedUserOKApplicationJSON []Repository

func (ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) activityListReposStarredByAuthenticatedUserRes() {
}

type ActivityListReposStarredByAuthenticatedUserSort string

const (
	ActivityListReposStarredByAuthenticatedUserSortCreated ActivityListReposStarredByAuthenticatedUserSort = "created"
	ActivityListReposStarredByAuthenticatedUserSortUpdated ActivityListReposStarredByAuthenticatedUserSort = "updated"
)

type ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden) activityListWatchedReposForAuthenticatedUserRes() {
}

type ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized) activityListWatchedReposForAuthenticatedUserRes() {
}

type ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON []MinimalRepository

func (ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) activityListWatchedReposForAuthenticatedUserRes() {
}

type ActivityMarkNotificationsAsReadAccepted struct {
	Message OptString "json:\"message\""
}

func (*ActivityMarkNotificationsAsReadAccepted) activityMarkNotificationsAsReadRes() {}

type ActivityMarkNotificationsAsReadApplicationJSONForbidden BasicError

func (*ActivityMarkNotificationsAsReadApplicationJSONForbidden) activityMarkNotificationsAsReadRes() {
}

type ActivityMarkNotificationsAsReadApplicationJSONUnauthorized BasicError

func (*ActivityMarkNotificationsAsReadApplicationJSONUnauthorized) activityMarkNotificationsAsReadRes() {
}

type ActivityMarkNotificationsAsReadReq struct {
	// Describes the last point that notifications were checked.
	LastReadAt OptDateTime "json:\"last_read_at\""
	// Whether the notification has been read.
	Read OptBool "json:\"read\""
}

// ActivityMarkNotificationsAsReadResetContent is response for ActivityMarkNotificationsAsRead operation.
type ActivityMarkNotificationsAsReadResetContent struct{}

func (*ActivityMarkNotificationsAsReadResetContent) activityMarkNotificationsAsReadRes() {}

type ActivityMarkRepoNotificationsAsReadAccepted struct {
	Message OptString "json:\"message\""
	URL     OptString "json:\"url\""
}

func (*ActivityMarkRepoNotificationsAsReadAccepted) activityMarkRepoNotificationsAsReadRes() {}

type ActivityMarkRepoNotificationsAsReadReq struct {
	// Describes the last point that notifications were checked. Anything updated since this time will
	// not be marked as read. If you omit this parameter, all notifications are marked as read. This is a
	// timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	// Default: The current timestamp.
	LastReadAt OptDateTime "json:\"last_read_at\""
}

// ActivityMarkRepoNotificationsAsReadResetContent is response for ActivityMarkRepoNotificationsAsRead operation.
type ActivityMarkRepoNotificationsAsReadResetContent struct{}

func (*ActivityMarkRepoNotificationsAsReadResetContent) activityMarkRepoNotificationsAsReadRes() {}

// ActivityMarkThreadAsReadResetContent is response for ActivityMarkThreadAsRead operation.
type ActivityMarkThreadAsReadResetContent struct{}

func (*ActivityMarkThreadAsReadResetContent) activityMarkThreadAsReadRes() {}

type ActivitySetRepoSubscriptionReq struct {
	// Determines if notifications should be received from this repository.
	Subscribed OptBool "json:\"subscribed\""
	// Determines if all notifications should be blocked from this repository.
	Ignored OptBool "json:\"ignored\""
}

type ActivitySetThreadSubscriptionApplicationJSONForbidden BasicError

func (*ActivitySetThreadSubscriptionApplicationJSONForbidden) activitySetThreadSubscriptionRes() {}

type ActivitySetThreadSubscriptionApplicationJSONUnauthorized BasicError

func (*ActivitySetThreadSubscriptionApplicationJSONUnauthorized) activitySetThreadSubscriptionRes() {}

type ActivitySetThreadSubscriptionReq struct {
	// Whether to block all notifications from a thread.
	Ignored OptBool "json:\"ignored\""
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden) activityStarRepoForAuthenticatedUserRes() {
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound) activityStarRepoForAuthenticatedUserRes() {
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized) activityStarRepoForAuthenticatedUserRes() {
}

// ActivityStarRepoForAuthenticatedUserNoContent is response for ActivityStarRepoForAuthenticatedUser operation.
type ActivityStarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityStarRepoForAuthenticatedUserNoContent) activityStarRepoForAuthenticatedUserRes() {}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden) activityUnstarRepoForAuthenticatedUserRes() {
}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound) activityUnstarRepoForAuthenticatedUserRes() {
}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized) activityUnstarRepoForAuthenticatedUserRes() {
}

// ActivityUnstarRepoForAuthenticatedUserNoContent is response for ActivityUnstarRepoForAuthenticatedUser operation.
type ActivityUnstarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityUnstarRepoForAuthenticatedUserNoContent) activityUnstarRepoForAuthenticatedUserRes() {}

// Actor.
// Ref: #/components/schemas/actor
type Actor struct {
	ID           int       "json:\"id\""
	Login        string    "json:\"login\""
	DisplayLogin OptString "json:\"display_login\""
	GravatarID   NilString "json:\"gravatar_id\""
	URL          url.URL   "json:\"url\""
	AvatarURL    url.URL   "json:\"avatar_url\""
}

type AlertCreatedAt time.Time

type AlertHTMLURL url.URL

type AlertInstancesURL url.URL

type AlertNumber int

type AlertURL url.URL

// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`,
// `local_only`, or `selected`.
// Ref: #/components/schemas/allowed-actions
type AllowedActions string

const (
	AllowedActionsAll       AllowedActions = "all"
	AllowedActionsLocalOnly AllowedActions = "local_only"
	AllowedActionsSelected  AllowedActions = "selected"
)

// The permissions granted to the user-to-server access token.
// Ref: #/components/schemas/app-permissions
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and
	// artifacts. Can be one of: `read` or `write`.
	Actions OptAppPermissionsActions "json:\"actions\""
	// The level of permission to grant the access token for repository creation, deletion, settings,
	// teams, and collaborators creation. Can be one of: `read` or `write`.
	Administration OptAppPermissionsAdministration "json:\"administration\""
	// The level of permission to grant the access token for checks on code. Can be one of: `read` or
	// `write`.
	Checks OptAppPermissionsChecks "json:\"checks\""
	// The level of permission to grant the access token for notification of content references and
	// creation content attachments. Can be one of: `read` or `write`.
	ContentReferences OptAppPermissionsContentReferences "json:\"content_references\""
	// The level of permission to grant the access token for repository contents, commits, branches,
	// downloads, releases, and merges. Can be one of: `read` or `write`.
	Contents OptAppPermissionsContents "json:\"contents\""
	// The level of permission to grant the access token for deployments and deployment statuses. Can be
	// one of: `read` or `write`.
	Deployments OptAppPermissionsDeployments "json:\"deployments\""
	// The level of permission to grant the access token for managing repository environments. Can be one
	// of: `read` or `write`.
	Environments OptAppPermissionsEnvironments "json:\"environments\""
	// The level of permission to grant the access token for issues and related comments, assignees,
	// labels, and milestones. Can be one of: `read` or `write`.
	Issues OptAppPermissionsIssues "json:\"issues\""
	// The level of permission to grant the access token to search repositories, list collaborators, and
	// access repository metadata. Can be one of: `read` or `write`.
	Metadata OptAppPermissionsMetadata "json:\"metadata\""
	// The level of permission to grant the access token for packages published to GitHub Packages. Can
	// be one of: `read` or `write`.
	Packages OptAppPermissionsPackages "json:\"packages\""
	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and
	// builds, as well as create new builds. Can be one of: `read` or `write`.
	Pages OptAppPermissionsPages "json:\"pages\""
	// The level of permission to grant the access token for pull requests and related comments,
	// assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
	PullRequests OptAppPermissionsPullRequests "json:\"pull_requests\""
	// The level of permission to grant the access token to manage the post-receive hooks for a
	// repository. Can be one of: `read` or `write`.
	RepositoryHooks OptAppPermissionsRepositoryHooks "json:\"repository_hooks\""
	// The level of permission to grant the access token to manage repository projects, columns, and
	// cards. Can be one of: `read`, `write`, or `admin`.
	RepositoryProjects OptAppPermissionsRepositoryProjects "json:\"repository_projects\""
	// The level of permission to grant the access token to view and manage secret scanning alerts. Can
	// be one of: `read` or `write`.
	SecretScanningAlerts OptAppPermissionsSecretScanningAlerts "json:\"secret_scanning_alerts\""
	// The level of permission to grant the access token to manage repository secrets. Can be one of:
	// `read` or `write`.
	Secrets OptAppPermissionsSecrets "json:\"secrets\""
	// The level of permission to grant the access token to view and manage security events like code
	// scanning alerts. Can be one of: `read` or `write`.
	SecurityEvents OptAppPermissionsSecurityEvents "json:\"security_events\""
	// The level of permission to grant the access token to manage just a single file. Can be one of:
	// `read` or `write`.
	SingleFile OptAppPermissionsSingleFile "json:\"single_file\""
	// The level of permission to grant the access token for commit statuses. Can be one of: `read` or
	// `write`.
	Statuses OptAppPermissionsStatuses "json:\"statuses\""
	// The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of:
	// `read`.
	VulnerabilityAlerts OptAppPermissionsVulnerabilityAlerts "json:\"vulnerability_alerts\""
	// The level of permission to grant the access token to update GitHub Actions workflow files. Can be
	// one of: `write`.
	Workflows OptAppPermissionsWorkflows "json:\"workflows\""
	// The level of permission to grant the access token for organization teams and members. Can be one
	// of: `read` or `write`.
	Members OptAppPermissionsMembers "json:\"members\""
	// The level of permission to grant the access token to manage access to an organization. Can be one
	// of: `read` or `write`.
	OrganizationAdministration OptAppPermissionsOrganizationAdministration "json:\"organization_administration\""
	// The level of permission to grant the access token to manage the post-receive hooks for an
	// organization. Can be one of: `read` or `write`.
	OrganizationHooks OptAppPermissionsOrganizationHooks "json:\"organization_hooks\""
	// The level of permission to grant the access token for viewing an organization's plan. Can be one
	// of: `read`.
	OrganizationPlan OptAppPermissionsOrganizationPlan "json:\"organization_plan\""
	// The level of permission to grant the access token to manage organization projects, columns, and
	// cards. Can be one of: `read`, `write`, or `admin`.
	OrganizationProjects OptAppPermissionsOrganizationProjects "json:\"organization_projects\""
	// The level of permission to grant the access token for organization packages published to GitHub
	// Packages. Can be one of: `read` or `write`.
	OrganizationPackages OptAppPermissionsOrganizationPackages "json:\"organization_packages\""
	// The level of permission to grant the access token to manage organization secrets. Can be one of:
	// `read` or `write`.
	OrganizationSecrets OptAppPermissionsOrganizationSecrets "json:\"organization_secrets\""
	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted
	// runners available to an organization. Can be one of: `read` or `write`.
	OrganizationSelfHostedRunners OptAppPermissionsOrganizationSelfHostedRunners "json:\"organization_self_hosted_runners\""
	// The level of permission to grant the access token to view and manage users blocked by the
	// organization. Can be one of: `read` or `write`.
	OrganizationUserBlocking OptAppPermissionsOrganizationUserBlocking "json:\"organization_user_blocking\""
	// The level of permission to grant the access token to manage team discussions and related comments.
	// Can be one of: `read` or `write`.
	TeamDiscussions OptAppPermissionsTeamDiscussions "json:\"team_discussions\""
}

// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and
// artifacts. Can be one of: `read` or `write`.
type AppPermissionsActions string

const (
	AppPermissionsActionsRead  AppPermissionsActions = "read"
	AppPermissionsActionsWrite AppPermissionsActions = "write"
)

// The level of permission to grant the access token for repository creation, deletion, settings,
// teams, and collaborators creation. Can be one of: `read` or `write`.
type AppPermissionsAdministration string

const (
	AppPermissionsAdministrationRead  AppPermissionsAdministration = "read"
	AppPermissionsAdministrationWrite AppPermissionsAdministration = "write"
)

// The level of permission to grant the access token for checks on code. Can be one of: `read` or
// `write`.
type AppPermissionsChecks string

const (
	AppPermissionsChecksRead  AppPermissionsChecks = "read"
	AppPermissionsChecksWrite AppPermissionsChecks = "write"
)

// The level of permission to grant the access token for notification of content references and
// creation content attachments. Can be one of: `read` or `write`.
type AppPermissionsContentReferences string

const (
	AppPermissionsContentReferencesRead  AppPermissionsContentReferences = "read"
	AppPermissionsContentReferencesWrite AppPermissionsContentReferences = "write"
)

// The level of permission to grant the access token for repository contents, commits, branches,
// downloads, releases, and merges. Can be one of: `read` or `write`.
type AppPermissionsContents string

const (
	AppPermissionsContentsRead  AppPermissionsContents = "read"
	AppPermissionsContentsWrite AppPermissionsContents = "write"
)

// The level of permission to grant the access token for deployments and deployment statuses. Can be
// one of: `read` or `write`.
type AppPermissionsDeployments string

const (
	AppPermissionsDeploymentsRead  AppPermissionsDeployments = "read"
	AppPermissionsDeploymentsWrite AppPermissionsDeployments = "write"
)

// The level of permission to grant the access token for managing repository environments. Can be one
// of: `read` or `write`.
type AppPermissionsEnvironments string

const (
	AppPermissionsEnvironmentsRead  AppPermissionsEnvironments = "read"
	AppPermissionsEnvironmentsWrite AppPermissionsEnvironments = "write"
)

// The level of permission to grant the access token for issues and related comments, assignees,
// labels, and milestones. Can be one of: `read` or `write`.
type AppPermissionsIssues string

const (
	AppPermissionsIssuesRead  AppPermissionsIssues = "read"
	AppPermissionsIssuesWrite AppPermissionsIssues = "write"
)

// The level of permission to grant the access token for organization teams and members. Can be one
// of: `read` or `write`.
type AppPermissionsMembers string

const (
	AppPermissionsMembersRead  AppPermissionsMembers = "read"
	AppPermissionsMembersWrite AppPermissionsMembers = "write"
)

// The level of permission to grant the access token to search repositories, list collaborators, and
// access repository metadata. Can be one of: `read` or `write`.
type AppPermissionsMetadata string

const (
	AppPermissionsMetadataRead  AppPermissionsMetadata = "read"
	AppPermissionsMetadataWrite AppPermissionsMetadata = "write"
)

// The level of permission to grant the access token to manage access to an organization. Can be one
// of: `read` or `write`.
type AppPermissionsOrganizationAdministration string

const (
	AppPermissionsOrganizationAdministrationRead  AppPermissionsOrganizationAdministration = "read"
	AppPermissionsOrganizationAdministrationWrite AppPermissionsOrganizationAdministration = "write"
)

// The level of permission to grant the access token to manage the post-receive hooks for an
// organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationHooks string

const (
	AppPermissionsOrganizationHooksRead  AppPermissionsOrganizationHooks = "read"
	AppPermissionsOrganizationHooksWrite AppPermissionsOrganizationHooks = "write"
)

// The level of permission to grant the access token for organization packages published to GitHub
// Packages. Can be one of: `read` or `write`.
type AppPermissionsOrganizationPackages string

const (
	AppPermissionsOrganizationPackagesRead  AppPermissionsOrganizationPackages = "read"
	AppPermissionsOrganizationPackagesWrite AppPermissionsOrganizationPackages = "write"
)

// The level of permission to grant the access token for viewing an organization's plan. Can be one
// of: `read`.
type AppPermissionsOrganizationPlan string

const (
	AppPermissionsOrganizationPlanRead AppPermissionsOrganizationPlan = "read"
)

// The level of permission to grant the access token to manage organization projects, columns, and
// cards. Can be one of: `read`, `write`, or `admin`.
type AppPermissionsOrganizationProjects string

const (
	AppPermissionsOrganizationProjectsRead  AppPermissionsOrganizationProjects = "read"
	AppPermissionsOrganizationProjectsWrite AppPermissionsOrganizationProjects = "write"
	AppPermissionsOrganizationProjectsAdmin AppPermissionsOrganizationProjects = "admin"
)

// The level of permission to grant the access token to manage organization secrets. Can be one of:
// `read` or `write`.
type AppPermissionsOrganizationSecrets string

const (
	AppPermissionsOrganizationSecretsRead  AppPermissionsOrganizationSecrets = "read"
	AppPermissionsOrganizationSecretsWrite AppPermissionsOrganizationSecrets = "write"
)

// The level of permission to grant the access token to view and manage GitHub Actions self-hosted
// runners available to an organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationSelfHostedRunners string

const (
	AppPermissionsOrganizationSelfHostedRunnersRead  AppPermissionsOrganizationSelfHostedRunners = "read"
	AppPermissionsOrganizationSelfHostedRunnersWrite AppPermissionsOrganizationSelfHostedRunners = "write"
)

// The level of permission to grant the access token to view and manage users blocked by the
// organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationUserBlocking string

const (
	AppPermissionsOrganizationUserBlockingRead  AppPermissionsOrganizationUserBlocking = "read"
	AppPermissionsOrganizationUserBlockingWrite AppPermissionsOrganizationUserBlocking = "write"
)

// The level of permission to grant the access token for packages published to GitHub Packages. Can
// be one of: `read` or `write`.
type AppPermissionsPackages string

const (
	AppPermissionsPackagesRead  AppPermissionsPackages = "read"
	AppPermissionsPackagesWrite AppPermissionsPackages = "write"
)

// The level of permission to grant the access token to retrieve Pages statuses, configuration, and
// builds, as well as create new builds. Can be one of: `read` or `write`.
type AppPermissionsPages string

const (
	AppPermissionsPagesRead  AppPermissionsPages = "read"
	AppPermissionsPagesWrite AppPermissionsPages = "write"
)

// The level of permission to grant the access token for pull requests and related comments,
// assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
type AppPermissionsPullRequests string

const (
	AppPermissionsPullRequestsRead  AppPermissionsPullRequests = "read"
	AppPermissionsPullRequestsWrite AppPermissionsPullRequests = "write"
)

// The level of permission to grant the access token to manage the post-receive hooks for a
// repository. Can be one of: `read` or `write`.
type AppPermissionsRepositoryHooks string

const (
	AppPermissionsRepositoryHooksRead  AppPermissionsRepositoryHooks = "read"
	AppPermissionsRepositoryHooksWrite AppPermissionsRepositoryHooks = "write"
)

// The level of permission to grant the access token to manage repository projects, columns, and
// cards. Can be one of: `read`, `write`, or `admin`.
type AppPermissionsRepositoryProjects string

const (
	AppPermissionsRepositoryProjectsRead  AppPermissionsRepositoryProjects = "read"
	AppPermissionsRepositoryProjectsWrite AppPermissionsRepositoryProjects = "write"
	AppPermissionsRepositoryProjectsAdmin AppPermissionsRepositoryProjects = "admin"
)

// The level of permission to grant the access token to view and manage secret scanning alerts. Can
// be one of: `read` or `write`.
type AppPermissionsSecretScanningAlerts string

const (
	AppPermissionsSecretScanningAlertsRead  AppPermissionsSecretScanningAlerts = "read"
	AppPermissionsSecretScanningAlertsWrite AppPermissionsSecretScanningAlerts = "write"
)

// The level of permission to grant the access token to manage repository secrets. Can be one of:
// `read` or `write`.
type AppPermissionsSecrets string

const (
	AppPermissionsSecretsRead  AppPermissionsSecrets = "read"
	AppPermissionsSecretsWrite AppPermissionsSecrets = "write"
)

// The level of permission to grant the access token to view and manage security events like code
// scanning alerts. Can be one of: `read` or `write`.
type AppPermissionsSecurityEvents string

const (
	AppPermissionsSecurityEventsRead  AppPermissionsSecurityEvents = "read"
	AppPermissionsSecurityEventsWrite AppPermissionsSecurityEvents = "write"
)

// The level of permission to grant the access token to manage just a single file. Can be one of:
// `read` or `write`.
type AppPermissionsSingleFile string

const (
	AppPermissionsSingleFileRead  AppPermissionsSingleFile = "read"
	AppPermissionsSingleFileWrite AppPermissionsSingleFile = "write"
)

// The level of permission to grant the access token for commit statuses. Can be one of: `read` or
// `write`.
type AppPermissionsStatuses string

const (
	AppPermissionsStatusesRead  AppPermissionsStatuses = "read"
	AppPermissionsStatusesWrite AppPermissionsStatuses = "write"
)

// The level of permission to grant the access token to manage team discussions and related comments.
// Can be one of: `read` or `write`.
type AppPermissionsTeamDiscussions string

const (
	AppPermissionsTeamDiscussionsRead  AppPermissionsTeamDiscussions = "read"
	AppPermissionsTeamDiscussionsWrite AppPermissionsTeamDiscussions = "write"
)

// The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of:
// `read`.
type AppPermissionsVulnerabilityAlerts string

const (
	AppPermissionsVulnerabilityAlertsRead AppPermissionsVulnerabilityAlerts = "read"
)

// The level of permission to grant the access token to update GitHub Actions workflow files. Can be
// one of: `write`.
type AppPermissionsWorkflows string

const (
	AppPermissionsWorkflowsWrite AppPermissionsWorkflows = "write"
)

// The authorization associated with an OAuth Access.
// Ref: #/components/schemas/application-grant
type ApplicationGrant struct {
	ID        int                      "json:\"id\""
	URL       url.URL                  "json:\"url\""
	App       ApplicationGrantApp      "json:\"app\""
	CreatedAt time.Time                "json:\"created_at\""
	UpdatedAt time.Time                "json:\"updated_at\""
	Scopes    []string                 "json:\"scopes\""
	User      OptNilNullableSimpleUser "json:\"user\""
}

func (*ApplicationGrant) oAuthAuthorizationsGetGrantRes() {}

type ApplicationGrantApp struct {
	ClientID string  "json:\"client_id\""
	Name     string  "json:\"name\""
	URL      url.URL "json:\"url\""
}

type AppsAddRepoToInstallationApplicationJSONForbidden BasicError

func (*AppsAddRepoToInstallationApplicationJSONForbidden) appsAddRepoToInstallationRes() {}

type AppsAddRepoToInstallationApplicationJSONNotFound BasicError

func (*AppsAddRepoToInstallationApplicationJSONNotFound) appsAddRepoToInstallationRes() {}

// AppsAddRepoToInstallationNoContent is response for AppsAddRepoToInstallation operation.
type AppsAddRepoToInstallationNoContent struct{}

func (*AppsAddRepoToInstallationNoContent) appsAddRepoToInstallationRes() {}

type AppsCheckTokenReq struct {
	// The access_token of the OAuth application.
	AccessToken string "json:\"access_token\""
}

type AppsCreateContentAttachmentApplicationJSONForbidden BasicError

func (*AppsCreateContentAttachmentApplicationJSONForbidden) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentApplicationJSONGone BasicError

func (*AppsCreateContentAttachmentApplicationJSONGone) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentApplicationJSONNotFound BasicError

func (*AppsCreateContentAttachmentApplicationJSONNotFound) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentReq struct {
	// The title of the attachment.
	Title string "json:\"title\""
	// The body of the attachment.
	Body string "json:\"body\""
}

type AppsCreateInstallationAccessTokenApplicationJSONForbidden BasicError

func (*AppsCreateInstallationAccessTokenApplicationJSONForbidden) appsCreateInstallationAccessTokenRes() {
}

type AppsCreateInstallationAccessTokenApplicationJSONNotFound BasicError

func (*AppsCreateInstallationAccessTokenApplicationJSONNotFound) appsCreateInstallationAccessTokenRes() {
}

type AppsCreateInstallationAccessTokenApplicationJSONUnauthorized BasicError

func (*AppsCreateInstallationAccessTokenApplicationJSONUnauthorized) appsCreateInstallationAccessTokenRes() {
}

type AppsCreateInstallationAccessTokenReq struct {
	// List of repository names that the token should have access to.
	Repositories []string "json:\"repositories\""
	// List of repository IDs that the token should have access to.
	RepositoryIds []int             "json:\"repository_ids\""
	Permissions   OptAppPermissions "json:\"permissions\""
}

// AppsDeleteAuthorizationNoContent is response for AppsDeleteAuthorization operation.
type AppsDeleteAuthorizationNoContent struct{}

func (*AppsDeleteAuthorizationNoContent) appsDeleteAuthorizationRes() {}

type AppsDeleteAuthorizationReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string "json:\"access_token\""
}

// AppsDeleteInstallationNoContent is response for AppsDeleteInstallation operation.
type AppsDeleteInstallationNoContent struct{}

func (*AppsDeleteInstallationNoContent) appsDeleteInstallationRes() {}

// AppsDeleteTokenNoContent is response for AppsDeleteToken operation.
type AppsDeleteTokenNoContent struct{}

func (*AppsDeleteTokenNoContent) appsDeleteTokenRes() {}

type AppsDeleteTokenReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string "json:\"access_token\""
}

type AppsGetBySlugApplicationJSONForbidden BasicError

func (*AppsGetBySlugApplicationJSONForbidden) appsGetBySlugRes() {}

type AppsGetBySlugApplicationJSONNotFound BasicError

func (*AppsGetBySlugApplicationJSONNotFound) appsGetBySlugRes() {}

type AppsGetSubscriptionPlanForAccountApplicationJSONNotFound BasicError

func (*AppsGetSubscriptionPlanForAccountApplicationJSONNotFound) appsGetSubscriptionPlanForAccountRes() {
}

type AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized BasicError

func (*AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized) appsGetSubscriptionPlanForAccountRes() {
}

// AppsGetSubscriptionPlanForAccountStubbedNotFound is response for AppsGetSubscriptionPlanForAccountStubbed operation.
type AppsGetSubscriptionPlanForAccountStubbedNotFound struct{}

func (*AppsGetSubscriptionPlanForAccountStubbedNotFound) appsGetSubscriptionPlanForAccountStubbedRes() {
}

type AppsListAccountsForPlanApplicationJSONNotFound BasicError

func (*AppsListAccountsForPlanApplicationJSONNotFound) appsListAccountsForPlanRes() {}

type AppsListAccountsForPlanApplicationJSONUnauthorized BasicError

func (*AppsListAccountsForPlanApplicationJSONUnauthorized) appsListAccountsForPlanRes() {}

type AppsListAccountsForPlanDirection string

const (
	AppsListAccountsForPlanDirectionAsc  AppsListAccountsForPlanDirection = "asc"
	AppsListAccountsForPlanDirectionDesc AppsListAccountsForPlanDirection = "desc"
)

type AppsListAccountsForPlanOKApplicationJSON []MarketplacePurchase

func (AppsListAccountsForPlanOKApplicationJSON) appsListAccountsForPlanRes() {}

type AppsListAccountsForPlanSort string

const (
	AppsListAccountsForPlanSortCreated AppsListAccountsForPlanSort = "created"
	AppsListAccountsForPlanSortUpdated AppsListAccountsForPlanSort = "updated"
)

type AppsListAccountsForPlanStubbedDirection string

const (
	AppsListAccountsForPlanStubbedDirectionAsc  AppsListAccountsForPlanStubbedDirection = "asc"
	AppsListAccountsForPlanStubbedDirectionDesc AppsListAccountsForPlanStubbedDirection = "desc"
)

type AppsListAccountsForPlanStubbedOKApplicationJSON []MarketplacePurchase

func (AppsListAccountsForPlanStubbedOKApplicationJSON) appsListAccountsForPlanStubbedRes() {}

type AppsListAccountsForPlanStubbedSort string

const (
	AppsListAccountsForPlanStubbedSortCreated AppsListAccountsForPlanStubbedSort = "created"
	AppsListAccountsForPlanStubbedSortUpdated AppsListAccountsForPlanStubbedSort = "updated"
)

type AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden BasicError

func (*AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound BasicError

func (*AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListInstallationReposForAuthenticatedUserOK struct {
	TotalCount          int          "json:\"total_count\""
	RepositorySelection OptString    "json:\"repository_selection\""
	Repositories        []Repository "json:\"repositories\""
}

func (*AppsListInstallationReposForAuthenticatedUserOK) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListPlansApplicationJSONNotFound BasicError

func (*AppsListPlansApplicationJSONNotFound) appsListPlansRes() {}

type AppsListPlansApplicationJSONUnauthorized BasicError

func (*AppsListPlansApplicationJSONUnauthorized) appsListPlansRes() {}

type AppsListPlansOKApplicationJSON []MarketplaceListingPlan

func (AppsListPlansOKApplicationJSON) appsListPlansRes() {}

type AppsListPlansStubbedOKApplicationJSON []MarketplaceListingPlan

func (AppsListPlansStubbedOKApplicationJSON) appsListPlansStubbedRes() {}

type AppsListReposAccessibleToInstallationApplicationJSONForbidden BasicError

func (*AppsListReposAccessibleToInstallationApplicationJSONForbidden) appsListReposAccessibleToInstallationRes() {
}

type AppsListReposAccessibleToInstallationApplicationJSONUnauthorized BasicError

func (*AppsListReposAccessibleToInstallationApplicationJSONUnauthorized) appsListReposAccessibleToInstallationRes() {
}

type AppsListReposAccessibleToInstallationOK struct {
	TotalCount          int          "json:\"total_count\""
	Repositories        []Repository "json:\"repositories\""
	RepositorySelection OptString    "json:\"repository_selection\""
}

func (*AppsListReposAccessibleToInstallationOK) appsListReposAccessibleToInstallationRes() {}

type AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound BasicError

func (*AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound) appsListSubscriptionsForAuthenticatedUserRes() {
}

type AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized) appsListSubscriptionsForAuthenticatedUserRes() {
}

type AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON []UserMarketplacePurchase

func (AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) appsListSubscriptionsForAuthenticatedUserRes() {
}

type AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON []UserMarketplacePurchase

func (AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) appsListSubscriptionsForAuthenticatedUserStubbedRes() {
}

type AppsListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (AppsListWebhookDeliveriesOKApplicationJSON) appsListWebhookDeliveriesRes() {}

type AppsRemoveRepoFromInstallationApplicationJSONForbidden BasicError

func (*AppsRemoveRepoFromInstallationApplicationJSONForbidden) appsRemoveRepoFromInstallationRes() {}

type AppsRemoveRepoFromInstallationApplicationJSONNotFound BasicError

func (*AppsRemoveRepoFromInstallationApplicationJSONNotFound) appsRemoveRepoFromInstallationRes() {}

// AppsRemoveRepoFromInstallationNoContent is response for AppsRemoveRepoFromInstallation operation.
type AppsRemoveRepoFromInstallationNoContent struct{}

func (*AppsRemoveRepoFromInstallationNoContent) appsRemoveRepoFromInstallationRes() {}

type AppsResetTokenReq struct {
	// The access_token of the OAuth application.
	AccessToken string "json:\"access_token\""
}

// AppsRevokeInstallationAccessTokenNoContent is response for AppsRevokeInstallationAccessToken operation.
type AppsRevokeInstallationAccessTokenNoContent struct{}

type AppsScopeTokenApplicationJSONForbidden BasicError

func (*AppsScopeTokenApplicationJSONForbidden) appsScopeTokenRes() {}

type AppsScopeTokenApplicationJSONNotFound BasicError

func (*AppsScopeTokenApplicationJSONNotFound) appsScopeTokenRes() {}

type AppsScopeTokenApplicationJSONUnauthorized BasicError

func (*AppsScopeTokenApplicationJSONUnauthorized) appsScopeTokenRes() {}

type AppsScopeTokenReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string "json:\"access_token\""
	// The name of the user or organization to scope the user-to-server access token to. **Required**
	// unless `target_id` is specified.
	Target OptString "json:\"target\""
	// The ID of the user or organization to scope the user-to-server access token to. **Required**
	// unless `target` is specified.
	TargetID OptInt "json:\"target_id\""
	// The list of repository names to scope the user-to-server access token to. `repositories` may not
	// be specified if `repository_ids` is specified.
	Repositories []string "json:\"repositories\""
	// The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not
	// be specified if `repositories` is specified.
	RepositoryIds []int             "json:\"repository_ids\""
	Permissions   OptAppPermissions "json:\"permissions\""
}

// AppsSuspendInstallationNoContent is response for AppsSuspendInstallation operation.
type AppsSuspendInstallationNoContent struct{}

func (*AppsSuspendInstallationNoContent) appsSuspendInstallationRes() {}

// AppsUnsuspendInstallationNoContent is response for AppsUnsuspendInstallation operation.
type AppsUnsuspendInstallationNoContent struct{}

func (*AppsUnsuspendInstallationNoContent) appsUnsuspendInstallationRes() {}

type AppsUpdateWebhookConfigForAppReq struct {
	URL         OptWebhookConfigURL         "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
}

// An artifact.
// Ref: #/components/schemas/artifact
type Artifact struct {
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// The name of the artifact.
	Name string "json:\"name\""
	// The size in bytes of the artifact.
	SizeInBytes        int    "json:\"size_in_bytes\""
	URL                string "json:\"url\""
	ArchiveDownloadURL string "json:\"archive_download_url\""
	// Whether or not the artifact has expired.
	Expired   bool        "json:\"expired\""
	CreatedAt NilDateTime "json:\"created_at\""
	ExpiresAt NilDateTime "json:\"expires_at\""
	UpdatedAt NilDateTime "json:\"updated_at\""
}

// Ref: #/components/schemas/audit-log-event
type AuditLogEvent struct {
	// The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.
	// org/wiki/Unix_time).
	Timestamp OptInt "json:\"@timestamp\""
	// The name of the action that was performed, for example `user.login` or `repo.create`.
	Action    OptString "json:\"action\""
	Active    OptBool   "json:\"active\""
	ActiveWas OptBool   "json:\"active_was\""
	// The actor who performed the action.
	Actor OptString "json:\"actor\""
	// The id of the actor who performed the action.
	ActorID       OptInt                        "json:\"actor_id\""
	ActorLocation OptAuditLogEventActorLocation "json:\"actor_location\""
	Data          OptAuditLogEventData          "json:\"data\""
	OrgID         OptInt                        "json:\"org_id\""
	// The username of the account being blocked.
	BlockedUser OptString "json:\"blocked_user\""
	Business    OptString "json:\"business\""
	Config      []jx.Raw  "json:\"config\""
	ConfigWas   []jx.Raw  "json:\"config_was\""
	ContentType OptString "json:\"content_type\""
	// The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.
	// org/wiki/Unix_time).
	CreatedAt            OptInt    "json:\"created_at\""
	DeployKeyFingerprint OptString "json:\"deploy_key_fingerprint\""
	// A unique identifier for an audit event.
	DocumentID          OptString "json:\"_document_id\""
	Emoji               OptString "json:\"emoji\""
	Events              []jx.Raw  "json:\"events\""
	EventsWere          []jx.Raw  "json:\"events_were\""
	Explanation         OptString "json:\"explanation\""
	Fingerprint         OptString "json:\"fingerprint\""
	HookID              OptInt    "json:\"hook_id\""
	LimitedAvailability OptBool   "json:\"limited_availability\""
	Message             OptString "json:\"message\""
	Name                OptString "json:\"name\""
	OldUser             OptString "json:\"old_user\""
	OpensshPublicKey    OptString "json:\"openssh_public_key\""
	Org                 OptString "json:\"org\""
	PreviousVisibility  OptString "json:\"previous_visibility\""
	ReadOnly            OptBool   "json:\"read_only\""
	// The name of the repository.
	Repo OptString "json:\"repo\""
	// The name of the repository.
	Repository       OptString "json:\"repository\""
	RepositoryPublic OptBool   "json:\"repository_public\""
	TargetLogin      OptString "json:\"target_login\""
	Team             OptString "json:\"team\""
	// The type of protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocol OptInt "json:\"transport_protocol\""
	// A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocolName OptString "json:\"transport_protocol_name\""
	// The user that was affected by the action performed (if available).
	User OptString "json:\"user\""
	// The repository visibility, for example `public` or `private`.
	Visibility OptString "json:\"visibility\""
}

type AuditLogEventActorLocation struct {
	CountryName OptString "json:\"country_name\""
}

type AuditLogEventData map[string]jx.Raw

func (s *AuditLogEventData) init() AuditLogEventData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Authentication Token.
// Ref: #/components/schemas/authentication-token
type AuthenticationToken struct {
	// The token used for authentication.
	Token string "json:\"token\""
	// The time this token expires.
	ExpiresAt   time.Time                       "json:\"expires_at\""
	Permissions *AuthenticationTokenPermissions "json:\"permissions\""
	// The repositories this token has access to.
	Repositories []Repository "json:\"repositories\""
	SingleFile   OptNilString "json:\"single_file\""
	// Describe whether all repositories have been selected or there's a selection involved.
	RepositorySelection OptAuthenticationTokenRepositorySelection "json:\"repository_selection\""
}

type AuthenticationTokenPermissions struct{}

// Describe whether all repositories have been selected or there's a selection involved.
type AuthenticationTokenRepositorySelection string

const (
	AuthenticationTokenRepositorySelectionAll      AuthenticationTokenRepositorySelection = "all"
	AuthenticationTokenRepositorySelectionSelected AuthenticationTokenRepositorySelection = "selected"
)

// How the author is associated with the repository.
// Ref: #/components/schemas/author_association
type AuthorAssociation string

const (
	AuthorAssociationCOLLABORATOR         AuthorAssociation = "COLLABORATOR"
	AuthorAssociationCONTRIBUTOR          AuthorAssociation = "CONTRIBUTOR"
	AuthorAssociationFIRSTTIMER           AuthorAssociation = "FIRST_TIMER"
	AuthorAssociationFIRSTTIMECONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	AuthorAssociationMANNEQUIN            AuthorAssociation = "MANNEQUIN"
	AuthorAssociationMEMBER               AuthorAssociation = "MEMBER"
	AuthorAssociationNONE                 AuthorAssociation = "NONE"
	AuthorAssociationOWNER                AuthorAssociation = "OWNER"
)

// The authorization for an OAuth app, GitHub App, or a Personal Access Token.
// Ref: #/components/schemas/authorization
type Authorization struct {
	ID  int     "json:\"id\""
	URL url.URL "json:\"url\""
	// A list of scopes that this authorization is in.
	Scopes         []string                         "json:\"scopes\""
	Token          string                           "json:\"token\""
	TokenLastEight NilString                        "json:\"token_last_eight\""
	HashedToken    NilString                        "json:\"hashed_token\""
	App            AuthorizationApp                 "json:\"app\""
	Note           NilString                        "json:\"note\""
	NoteURL        NilURI                           "json:\"note_url\""
	UpdatedAt      time.Time                        "json:\"updated_at\""
	CreatedAt      time.Time                        "json:\"created_at\""
	Fingerprint    NilString                        "json:\"fingerprint\""
	User           OptNilNullableSimpleUser         "json:\"user\""
	Installation   OptNilNullableScopedInstallation "json:\"installation\""
	ExpiresAt      NilDateTime                      "json:\"expires_at\""
}

func (*Authorization) appsCheckTokenRes()                         {}
func (*Authorization) appsResetTokenRes()                         {}
func (*Authorization) appsScopeTokenRes()                         {}
func (*Authorization) oAuthAuthorizationsCreateAuthorizationRes() {}
func (*Authorization) oAuthAuthorizationsGetAuthorizationRes()    {}
func (*Authorization) oAuthAuthorizationsUpdateAuthorizationRes() {}

type AuthorizationApp struct {
	ClientID string  "json:\"client_id\""
	Name     string  "json:\"name\""
	URL      url.URL "json:\"url\""
}

// The status of auto merging a pull request.
// Ref: #/components/schemas/auto_merge
type AutoMerge struct {
	EnabledBy SimpleUser "json:\"enabled_by\""
	// The merge method to use.
	MergeMethod AutoMergeMergeMethod "json:\"merge_method\""
	// Title for the merge commit message.
	CommitTitle string "json:\"commit_title\""
	// Commit message for the merge commit.
	CommitMessage string "json:\"commit_message\""
}

// The merge method to use.
type AutoMergeMergeMethod string

const (
	AutoMergeMergeMethodMerge  AutoMergeMergeMethod = "merge"
	AutoMergeMergeMethodSquash AutoMergeMergeMethod = "squash"
	AutoMergeMergeMethodRebase AutoMergeMergeMethod = "rebase"
)

// An autolink reference.
// Ref: #/components/schemas/autolink
type Autolink struct {
	ID int "json:\"id\""
	// The prefix of a key that is linkified.
	KeyPrefix string "json:\"key_prefix\""
	// A template for the target URL that is generated if a key was found.
	URLTemplate string "json:\"url_template\""
}

func (*Autolink) reposCreateAutolinkRes() {}
func (*Autolink) reposGetAutolinkRes()    {}

// Base Gist.
// Ref: #/components/schemas/base-gist
type BaseGist struct {
	URL         url.URL               "json:\"url\""
	ForksURL    url.URL               "json:\"forks_url\""
	CommitsURL  url.URL               "json:\"commits_url\""
	ID          string                "json:\"id\""
	NodeID      string                "json:\"node_id\""
	GitPullURL  url.URL               "json:\"git_pull_url\""
	GitPushURL  url.URL               "json:\"git_push_url\""
	HTMLURL     url.URL               "json:\"html_url\""
	Files       BaseGistFiles         "json:\"files\""
	Public      bool                  "json:\"public\""
	CreatedAt   time.Time             "json:\"created_at\""
	UpdatedAt   time.Time             "json:\"updated_at\""
	Description NilString             "json:\"description\""
	Comments    int                   "json:\"comments\""
	User        NilNullableSimpleUser "json:\"user\""
	CommentsURL url.URL               "json:\"comments_url\""
	Owner       OptSimpleUser         "json:\"owner\""
	Truncated   OptBool               "json:\"truncated\""
	Forks       []jx.Raw              "json:\"forks\""
	History     []jx.Raw              "json:\"history\""
}

func (*BaseGist) gistsForkRes() {}

type BaseGistFiles map[string]BaseGistFilesItem

func (s *BaseGistFiles) init() BaseGistFiles {
	m := *s
	if m == nil {
		m = map[string]BaseGistFilesItem{}
		*s = m
	}
	return m
}

type BaseGistFilesItem struct {
	Filename OptString "json:\"filename\""
	Type     OptString "json:\"type\""
	Language OptString "json:\"language\""
	RawURL   OptString "json:\"raw_url\""
	Size     OptInt    "json:\"size\""
}

// Basic Error.
// Ref: #/components/schemas/basic-error
type BasicError struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
	URL              OptString "json:\"url\""
	Status           OptString "json:\"status\""
}

func (*BasicError) activityGetRepoSubscriptionRes()                      {}
func (*BasicError) activityListPublicEventsRes()                         {}
func (*BasicError) activityMarkThreadAsReadRes()                         {}
func (*BasicError) appsCheckTokenRes()                                   {}
func (*BasicError) appsDeleteInstallationRes()                           {}
func (*BasicError) appsGetSubscriptionPlanForAccountStubbedRes()         {}
func (*BasicError) appsGetWebhookDeliveryRes()                           {}
func (*BasicError) appsListAccountsForPlanStubbedRes()                   {}
func (*BasicError) appsListPlansStubbedRes()                             {}
func (*BasicError) appsListSubscriptionsForAuthenticatedUserStubbedRes() {}
func (*BasicError) appsListWebhookDeliveriesRes()                        {}
func (*BasicError) appsRedeliverWebhookDeliveryRes()                     {}
func (*BasicError) appsSuspendInstallationRes()                          {}
func (*BasicError) appsUnsuspendInstallationRes()                        {}
func (*BasicError) codeScanningGetSarifRes()                             {}
func (*BasicError) codesOfConductGetConductCodeRes()                     {}
func (*BasicError) gistsCheckIsStarredRes()                              {}
func (*BasicError) gistsGetCommentRes()                                  {}
func (*BasicError) gistsGetRes()                                         {}
func (*BasicError) gistsListPublicRes()                                  {}
func (*BasicError) gistsListRes()                                        {}
func (*BasicError) gistsUpdateCommentRes()                               {}
func (*BasicError) gitCreateCommitRes()                                  {}
func (*BasicError) gitGetCommitRes()                                     {}
func (*BasicError) gitGetRefRes()                                        {}
func (*BasicError) gitGetTagRes()                                        {}
func (*BasicError) gitGetTreeRes()                                       {}
func (*BasicError) issuesCheckUserCanBeAssignedRes()                     {}
func (*BasicError) issuesCreateLabelRes()                                {}
func (*BasicError) issuesCreateMilestoneRes()                            {}
func (*BasicError) issuesDeleteMilestoneRes()                            {}
func (*BasicError) issuesGetCommentRes()                                 {}
func (*BasicError) issuesGetLabelRes()                                   {}
func (*BasicError) issuesGetMilestoneRes()                               {}
func (*BasicError) issuesListAssigneesRes()                              {}
func (*BasicError) issuesListCommentsForRepoRes()                        {}
func (*BasicError) issuesListForAuthenticatedUserRes()                   {}
func (*BasicError) issuesListForOrgRes()                                 {}
func (*BasicError) issuesListLabelsForRepoRes()                          {}
func (*BasicError) issuesListLabelsOnIssueRes()                          {}
func (*BasicError) issuesListMilestonesRes()                             {}
func (*BasicError) issuesListRes()                                       {}
func (*BasicError) issuesRemoveAllLabelsRes()                            {}
func (*BasicError) migrationsDeleteArchiveForOrgRes()                    {}
func (*BasicError) migrationsDownloadArchiveForOrgRes()                  {}
func (*BasicError) migrationsGetCommitAuthorsRes()                       {}
func (*BasicError) migrationsGetImportStatusRes()                        {}
func (*BasicError) migrationsGetStatusForOrgRes()                        {}
func (*BasicError) migrationsListReposForOrgRes()                        {}
func (*BasicError) migrationsListReposForUserRes()                       {}
func (*BasicError) migrationsMapCommitAuthorRes()                        {}
func (*BasicError) migrationsStartForOrgRes()                            {}
func (*BasicError) migrationsStartImportRes()                            {}
func (*BasicError) migrationsUnlockRepoForOrgRes()                       {}
func (*BasicError) orgsCancelInvitationRes()                             {}
func (*BasicError) orgsCheckBlockedUserRes()                             {}
func (*BasicError) orgsConvertMemberToOutsideCollaboratorRes()           {}
func (*BasicError) orgsCreateInvitationRes()                             {}
func (*BasicError) orgsCreateWebhookRes()                                {}
func (*BasicError) orgsDeleteWebhookRes()                                {}
func (*BasicError) orgsGetRes()                                          {}
func (*BasicError) orgsGetWebhookDeliveryRes()                           {}
func (*BasicError) orgsGetWebhookRes()                                   {}
func (*BasicError) orgsListFailedInvitationsRes()                        {}
func (*BasicError) orgsListInvitationTeamsRes()                          {}
func (*BasicError) orgsListPendingInvitationsRes()                       {}
func (*BasicError) orgsListWebhookDeliveriesRes()                        {}
func (*BasicError) orgsListWebhooksRes()                                 {}
func (*BasicError) orgsPingWebhookRes()                                  {}
func (*BasicError) orgsRedeliverWebhookDeliveryRes()                     {}
func (*BasicError) orgsRemoveMemberRes()                                 {}
func (*BasicError) orgsRemoveSamlSSOAuthorizationRes()                   {}
func (*BasicError) orgsSetMembershipForUserRes()                         {}
func (*BasicError) orgsSetPublicMembershipForAuthenticatedUserRes()      {}
func (*BasicError) orgsUpdateWebhookRes()                                {}
func (*BasicError) projectsMoveCardRes()                                 {}
func (*BasicError) pullsCreateReplyForReviewCommentRes()                 {}
func (*BasicError) pullsCreateRes()                                      {}
func (*BasicError) pullsCreateReviewCommentRes()                         {}
func (*BasicError) pullsCreateReviewRes()                                {}
func (*BasicError) pullsDeletePendingReviewRes()                         {}
func (*BasicError) pullsDeleteReviewCommentRes()                         {}
func (*BasicError) pullsDismissReviewRes()                               {}
func (*BasicError) pullsGetReviewCommentRes()                            {}
func (*BasicError) pullsGetReviewRes()                                   {}
func (*BasicError) pullsListCommentsForReviewRes()                       {}
func (*BasicError) pullsListFilesRes()                                   {}
func (*BasicError) pullsUpdateBranchRes()                                {}
func (*BasicError) pullsUpdateRes()                                      {}
func (*BasicError) rateLimitGetRes()                                     {}
func (*BasicError) reactionsListForCommitCommentRes()                    {}
func (*BasicError) reactionsListForIssueCommentRes()                     {}
func (*BasicError) reactionsListForPullRequestReviewCommentRes()         {}
func (*BasicError) reposAddCollaboratorRes()                             {}
func (*BasicError) reposCreateCommitCommentRes()                         {}
func (*BasicError) reposCreateCommitSignatureProtectionRes()             {}
func (*BasicError) reposCreateInOrgRes()                                 {}
func (*BasicError) reposCreatePagesSiteRes()                             {}
func (*BasicError) reposCreateReleaseRes()                               {}
func (*BasicError) reposDeleteAdminBranchProtectionRes()                 {}
func (*BasicError) reposDeleteAutolinkRes()                              {}
func (*BasicError) reposDeleteBranchProtectionRes()                      {}
func (*BasicError) reposDeleteCommitCommentRes()                         {}
func (*BasicError) reposDeleteCommitSignatureProtectionRes()             {}
func (*BasicError) reposDeleteDeploymentRes()                            {}
func (*BasicError) reposDeletePagesSiteRes()                             {}
func (*BasicError) reposDeletePullRequestReviewProtectionRes()           {}
func (*BasicError) reposDeleteWebhookRes()                               {}
func (*BasicError) reposGetAccessRestrictionsRes()                       {}
func (*BasicError) reposGetAllStatusCheckContextsRes()                   {}
func (*BasicError) reposGetAllTopicsRes()                                {}
func (*BasicError) reposGetAppsWithAccessToProtectedBranchRes()          {}
func (*BasicError) reposGetAutolinkRes()                                 {}
func (*BasicError) reposGetBranchProtectionRes()                         {}
func (*BasicError) reposGetClonesRes()                                   {}
func (*BasicError) reposGetCollaboratorPermissionLevelRes()              {}
func (*BasicError) reposGetCombinedStatusForRefRes()                     {}
func (*BasicError) reposGetCommitCommentRes()                            {}
func (*BasicError) reposGetCommitSignatureProtectionRes()                {}
func (*BasicError) reposGetDeployKeyRes()                                {}
func (*BasicError) reposGetDeploymentRes()                               {}
func (*BasicError) reposGetDeploymentStatusRes()                         {}
func (*BasicError) reposGetPagesHealthCheckRes()                         {}
func (*BasicError) reposGetPagesRes()                                    {}
func (*BasicError) reposGetParticipationStatsRes()                       {}
func (*BasicError) reposGetReadmeInDirectoryRes()                        {}
func (*BasicError) reposGetReadmeRes()                                   {}
func (*BasicError) reposGetReleaseAssetRes()                             {}
func (*BasicError) reposGetReleaseByTagRes()                             {}
func (*BasicError) reposGetReleaseRes()                                  {}
func (*BasicError) reposGetStatusChecksProtectionRes()                   {}
func (*BasicError) reposGetTeamsWithAccessToProtectedBranchRes()         {}
func (*BasicError) reposGetTopPathsRes()                                 {}
func (*BasicError) reposGetTopReferrersRes()                             {}
func (*BasicError) reposGetUsersWithAccessToProtectedBranchRes()         {}
func (*BasicError) reposGetViewsRes()                                    {}
func (*BasicError) reposGetWebhookDeliveryRes()                          {}
func (*BasicError) reposGetWebhookRes()                                  {}
func (*BasicError) reposListBranchesRes()                                {}
func (*BasicError) reposListCollaboratorsRes()                           {}
func (*BasicError) reposListCommitStatusesForRefRes()                    {}
func (*BasicError) reposListDeploymentStatusesRes()                      {}
func (*BasicError) reposListForksRes()                                   {}
func (*BasicError) reposListReleasesRes()                                {}
func (*BasicError) reposListWebhookDeliveriesRes()                       {}
func (*BasicError) reposListWebhooksRes()                                {}
func (*BasicError) reposMergeRes()                                       {}
func (*BasicError) reposPingWebhookRes()                                 {}
func (*BasicError) reposRedeliverWebhookDeliveryRes()                    {}
func (*BasicError) reposRemoveStatusCheckContextsRes()                   {}
func (*BasicError) reposReplaceAllTopicsRes()                            {}
func (*BasicError) reposSetStatusCheckContextsRes()                      {}
func (*BasicError) reposTestPushWebhookRes()                             {}
func (*BasicError) reposUpdateCommitCommentRes()                         {}
func (*BasicError) reposUpdateReleaseRes()                               {}
func (*BasicError) reposUpdateStatusCheckProtectionRes()                 {}
func (*BasicError) reposUpdateWebhookRes()                               {}
func (*BasicError) searchCodeRes()                                       {}
func (*BasicError) searchIssuesAndPullRequestsRes()                      {}
func (*BasicError) secretScanningListAlertsForOrgRes()                   {}
func (*BasicError) teamsAddMemberLegacyRes()                             {}
func (*BasicError) teamsAddOrUpdateMembershipForUserLegacyRes()          {}
func (*BasicError) teamsAddOrUpdateProjectPermissionsLegacyRes()         {}
func (*BasicError) teamsAddOrUpdateRepoPermissionsLegacyRes()            {}
func (*BasicError) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes()     {}
func (*BasicError) teamsCreateRes()                                      {}
func (*BasicError) teamsDeleteLegacyRes()                                {}
func (*BasicError) teamsGetByNameRes()                                   {}
func (*BasicError) teamsGetLegacyRes()                                   {}
func (*BasicError) teamsGetMembershipForUserLegacyRes()                  {}
func (*BasicError) teamsListMembersLegacyRes()                           {}
func (*BasicError) teamsListProjectsLegacyRes()                          {}
func (*BasicError) teamsListReposLegacyRes()                             {}
func (*BasicError) teamsListRes()                                        {}
func (*BasicError) teamsRemoveProjectLegacyRes()                         {}
func (*BasicError) usersGetByUsernameRes()                               {}
func (*BasicError) usersGetContextForUserRes()                           {}

// Blob.
// Ref: #/components/schemas/blob
type Blob struct {
	Content            string    "json:\"content\""
	Encoding           string    "json:\"encoding\""
	URL                url.URL   "json:\"url\""
	Sha                string    "json:\"sha\""
	Size               NilInt    "json:\"size\""
	NodeID             string    "json:\"node_id\""
	HighlightedContent OptString "json:\"highlighted_content\""
}

func (*Blob) gitGetBlobRes() {}

// Branch Protection.
// Ref: #/components/schemas/branch-protection
type BranchProtection struct {
	URL                            OptString                                         "json:\"url\""
	Enabled                        OptBool                                           "json:\"enabled\""
	RequiredStatusChecks           OptBranchProtectionRequiredStatusChecks           "json:\"required_status_checks\""
	EnforceAdmins                  OptProtectedBranchAdminEnforced                   "json:\"enforce_admins\""
	RequiredPullRequestReviews     OptProtectedBranchPullRequestReview               "json:\"required_pull_request_reviews\""
	Restrictions                   OptBranchRestrictionPolicy                        "json:\"restrictions\""
	RequiredLinearHistory          OptBranchProtectionRequiredLinearHistory          "json:\"required_linear_history\""
	AllowForcePushes               OptBranchProtectionAllowForcePushes               "json:\"allow_force_pushes\""
	AllowDeletions                 OptBranchProtectionAllowDeletions                 "json:\"allow_deletions\""
	RequiredConversationResolution OptBranchProtectionRequiredConversationResolution "json:\"required_conversation_resolution\""
	Name                           OptString                                         "json:\"name\""
	ProtectionURL                  OptString                                         "json:\"protection_url\""
	RequiredSignatures             OptBranchProtectionRequiredSignatures             "json:\"required_signatures\""
}

func (*BranchProtection) reposGetBranchProtectionRes() {}

type BranchProtectionAllowDeletions struct {
	Enabled OptBool "json:\"enabled\""
}

type BranchProtectionAllowForcePushes struct {
	Enabled OptBool "json:\"enabled\""
}

type BranchProtectionRequiredConversationResolution struct {
	Enabled OptBool "json:\"enabled\""
}

type BranchProtectionRequiredLinearHistory struct {
	Enabled OptBool "json:\"enabled\""
}

type BranchProtectionRequiredSignatures struct {
	URL     url.URL "json:\"url\""
	Enabled bool    "json:\"enabled\""
}

type BranchProtectionRequiredStatusChecks struct {
	URL              OptString "json:\"url\""
	EnforcementLevel OptString "json:\"enforcement_level\""
	Contexts         []string  "json:\"contexts\""
	ContextsURL      OptString "json:\"contexts_url\""
	Strict           OptBool   "json:\"strict\""
}

// Branch Restriction Policy.
// Ref: #/components/schemas/branch-restriction-policy
type BranchRestrictionPolicy struct {
	URL      url.URL                            "json:\"url\""
	UsersURL url.URL                            "json:\"users_url\""
	TeamsURL url.URL                            "json:\"teams_url\""
	AppsURL  url.URL                            "json:\"apps_url\""
	Users    []BranchRestrictionPolicyUsersItem "json:\"users\""
	Teams    []BranchRestrictionPolicyTeamsItem "json:\"teams\""
	Apps     []BranchRestrictionPolicyAppsItem  "json:\"apps\""
}

func (*BranchRestrictionPolicy) reposGetAccessRestrictionsRes() {}

type BranchRestrictionPolicyAppsItem struct {
	ID          OptInt                                        "json:\"id\""
	Slug        OptString                                     "json:\"slug\""
	NodeID      OptString                                     "json:\"node_id\""
	Owner       OptBranchRestrictionPolicyAppsItemOwner       "json:\"owner\""
	Name        OptString                                     "json:\"name\""
	Description OptString                                     "json:\"description\""
	ExternalURL OptString                                     "json:\"external_url\""
	HTMLURL     OptString                                     "json:\"html_url\""
	CreatedAt   OptString                                     "json:\"created_at\""
	UpdatedAt   OptString                                     "json:\"updated_at\""
	Permissions OptBranchRestrictionPolicyAppsItemPermissions "json:\"permissions\""
	Events      []string                                      "json:\"events\""
}

type BranchRestrictionPolicyAppsItemOwner struct {
	Login             OptString "json:\"login\""
	ID                OptInt    "json:\"id\""
	NodeID            OptString "json:\"node_id\""
	URL               OptString "json:\"url\""
	ReposURL          OptString "json:\"repos_url\""
	EventsURL         OptString "json:\"events_url\""
	HooksURL          OptString "json:\"hooks_url\""
	IssuesURL         OptString "json:\"issues_url\""
	MembersURL        OptString "json:\"members_url\""
	PublicMembersURL  OptString "json:\"public_members_url\""
	AvatarURL         OptString "json:\"avatar_url\""
	Description       OptString "json:\"description\""
	GravatarID        OptString "json:\"gravatar_id\""
	HTMLURL           OptString "json:\"html_url\""
	FollowersURL      OptString "json:\"followers_url\""
	FollowingURL      OptString "json:\"following_url\""
	GistsURL          OptString "json:\"gists_url\""
	StarredURL        OptString "json:\"starred_url\""
	SubscriptionsURL  OptString "json:\"subscriptions_url\""
	OrganizationsURL  OptString "json:\"organizations_url\""
	ReceivedEventsURL OptString "json:\"received_events_url\""
	Type              OptString "json:\"type\""
	SiteAdmin         OptBool   "json:\"site_admin\""
}

type BranchRestrictionPolicyAppsItemPermissions struct {
	Metadata   OptString "json:\"metadata\""
	Contents   OptString "json:\"contents\""
	Issues     OptString "json:\"issues\""
	SingleFile OptString "json:\"single_file\""
}

type BranchRestrictionPolicyTeamsItem struct {
	ID              OptInt       "json:\"id\""
	NodeID          OptString    "json:\"node_id\""
	URL             OptString    "json:\"url\""
	HTMLURL         OptString    "json:\"html_url\""
	Name            OptString    "json:\"name\""
	Slug            OptString    "json:\"slug\""
	Description     OptNilString "json:\"description\""
	Privacy         OptString    "json:\"privacy\""
	Permission      OptString    "json:\"permission\""
	MembersURL      OptString    "json:\"members_url\""
	RepositoriesURL OptString    "json:\"repositories_url\""
	Parent          OptNilString "json:\"parent\""
}

type BranchRestrictionPolicyUsersItem struct {
	Login             OptString "json:\"login\""
	ID                OptInt    "json:\"id\""
	NodeID            OptString "json:\"node_id\""
	AvatarURL         OptString "json:\"avatar_url\""
	GravatarID        OptString "json:\"gravatar_id\""
	URL               OptString "json:\"url\""
	HTMLURL           OptString "json:\"html_url\""
	FollowersURL      OptString "json:\"followers_url\""
	FollowingURL      OptString "json:\"following_url\""
	GistsURL          OptString "json:\"gists_url\""
	StarredURL        OptString "json:\"starred_url\""
	SubscriptionsURL  OptString "json:\"subscriptions_url\""
	OrganizationsURL  OptString "json:\"organizations_url\""
	ReposURL          OptString "json:\"repos_url\""
	EventsURL         OptString "json:\"events_url\""
	ReceivedEventsURL OptString "json:\"received_events_url\""
	Type              OptString "json:\"type\""
	SiteAdmin         OptBool   "json:\"site_admin\""
}

// Branch Short.
// Ref: #/components/schemas/branch-short
type BranchShort struct {
	Name      string            "json:\"name\""
	Commit    BranchShortCommit "json:\"commit\""
	Protected bool              "json:\"protected\""
}

type BranchShortCommit struct {
	Sha string "json:\"sha\""
	URL string "json:\"url\""
}

// Branch With Protection.
// Ref: #/components/schemas/branch-with-protection
type BranchWithProtection struct {
	Name                         string                    "json:\"name\""
	Commit                       Commit                    "json:\"commit\""
	Links                        BranchWithProtectionLinks "json:\"_links\""
	Protected                    bool                      "json:\"protected\""
	Protection                   BranchProtection          "json:\"protection\""
	ProtectionURL                url.URL                   "json:\"protection_url\""
	Pattern                      OptString                 "json:\"pattern\""
	RequiredApprovingReviewCount OptInt                    "json:\"required_approving_review_count\""
}

func (*BranchWithProtection) reposGetBranchRes()    {}
func (*BranchWithProtection) reposRenameBranchRes() {}

type BranchWithProtectionLinks struct {
	HTML string  "json:\"html\""
	Self url.URL "json:\"self\""
}

// Check Annotation.
// Ref: #/components/schemas/check-annotation
type CheckAnnotation struct {
	Path            string    "json:\"path\""
	StartLine       int       "json:\"start_line\""
	EndLine         int       "json:\"end_line\""
	StartColumn     NilInt    "json:\"start_column\""
	EndColumn       NilInt    "json:\"end_column\""
	AnnotationLevel NilString "json:\"annotation_level\""
	Title           NilString "json:\"title\""
	Message         NilString "json:\"message\""
	RawDetails      NilString "json:\"raw_details\""
	BlobHref        string    "json:\"blob_href\""
}

// A check performed on the code of a given code change.
// Ref: #/components/schemas/check-run
type CheckRun struct {
	// The id of the check.
	ID int "json:\"id\""
	// The SHA of the commit that is being checked.
	HeadSha    string    "json:\"head_sha\""
	NodeID     string    "json:\"node_id\""
	ExternalID NilString "json:\"external_id\""
	URL        string    "json:\"url\""
	HTMLURL    NilString "json:\"html_url\""
	DetailsURL NilString "json:\"details_url\""
	// The phase of the lifecycle that the check is currently in.
	Status      CheckRunStatus        "json:\"status\""
	Conclusion  NilCheckRunConclusion "json:\"conclusion\""
	StartedAt   NilDateTime           "json:\"started_at\""
	CompletedAt NilDateTime           "json:\"completed_at\""
	Output      CheckRunOutput        "json:\"output\""
	// The name of the check.
	Name         string                 "json:\"name\""
	CheckSuite   NilCheckRunCheckSuite  "json:\"check_suite\""
	App          NilNullableIntegration "json:\"app\""
	PullRequests []PullRequestMinimal   "json:\"pull_requests\""
	Deployment   OptDeploymentSimple    "json:\"deployment\""
}

type CheckRunCheckSuite struct {
	ID int "json:\"id\""
}

type CheckRunConclusion string

const (
	CheckRunConclusionSuccess        CheckRunConclusion = "success"
	CheckRunConclusionFailure        CheckRunConclusion = "failure"
	CheckRunConclusionNeutral        CheckRunConclusion = "neutral"
	CheckRunConclusionCancelled      CheckRunConclusion = "cancelled"
	CheckRunConclusionSkipped        CheckRunConclusion = "skipped"
	CheckRunConclusionTimedOut       CheckRunConclusion = "timed_out"
	CheckRunConclusionActionRequired CheckRunConclusion = "action_required"
)

type CheckRunOutput struct {
	Title            NilString "json:\"title\""
	Summary          NilString "json:\"summary\""
	Text             NilString "json:\"text\""
	AnnotationsCount int       "json:\"annotations_count\""
	AnnotationsURL   url.URL   "json:\"annotations_url\""
}

// The phase of the lifecycle that the check is currently in.
type CheckRunStatus string

const (
	CheckRunStatusQueued     CheckRunStatus = "queued"
	CheckRunStatusInProgress CheckRunStatus = "in_progress"
	CheckRunStatusCompleted  CheckRunStatus = "completed"
)

// A suite of checks performed on the code of a given code change.
// Ref: #/components/schemas/check-suite
type CheckSuite struct {
	ID         int       "json:\"id\""
	NodeID     string    "json:\"node_id\""
	HeadBranch NilString "json:\"head_branch\""
	// The SHA of the head commit that is being checked.
	HeadSha              string                  "json:\"head_sha\""
	Status               NilCheckSuiteStatus     "json:\"status\""
	Conclusion           NilCheckSuiteConclusion "json:\"conclusion\""
	URL                  NilString               "json:\"url\""
	Before               NilString               "json:\"before\""
	After                NilString               "json:\"after\""
	PullRequests         []PullRequestMinimal    "json:\"pull_requests\""
	App                  NilNullableIntegration  "json:\"app\""
	Repository           MinimalRepository       "json:\"repository\""
	CreatedAt            NilDateTime             "json:\"created_at\""
	UpdatedAt            NilDateTime             "json:\"updated_at\""
	HeadCommit           SimpleCommit            "json:\"head_commit\""
	LatestCheckRunsCount int                     "json:\"latest_check_runs_count\""
	CheckRunsURL         string                  "json:\"check_runs_url\""
}

type CheckSuiteConclusion string

const (
	CheckSuiteConclusionSuccess        CheckSuiteConclusion = "success"
	CheckSuiteConclusionFailure        CheckSuiteConclusion = "failure"
	CheckSuiteConclusionNeutral        CheckSuiteConclusion = "neutral"
	CheckSuiteConclusionCancelled      CheckSuiteConclusion = "cancelled"
	CheckSuiteConclusionSkipped        CheckSuiteConclusion = "skipped"
	CheckSuiteConclusionTimedOut       CheckSuiteConclusion = "timed_out"
	CheckSuiteConclusionActionRequired CheckSuiteConclusion = "action_required"
)

// Check suite configuration preferences for a repository.
// Ref: #/components/schemas/check-suite-preference
type CheckSuitePreference struct {
	Preferences CheckSuitePreferencePreferences "json:\"preferences\""
	Repository  MinimalRepository               "json:\"repository\""
}

type CheckSuitePreferencePreferences struct {
	AutoTriggerChecks []CheckSuitePreferencePreferencesAutoTriggerChecksItem "json:\"auto_trigger_checks\""
}

type CheckSuitePreferencePreferencesAutoTriggerChecksItem struct {
	AppID   int  "json:\"app_id\""
	Setting bool "json:\"setting\""
}

type CheckSuiteStatus string

const (
	CheckSuiteStatusQueued     CheckSuiteStatus = "queued"
	CheckSuiteStatusInProgress CheckSuiteStatus = "in_progress"
	CheckSuiteStatusCompleted  CheckSuiteStatus = "completed"
)

type ChecksCreateSuiteApplicationJSONCreated CheckSuite

func (*ChecksCreateSuiteApplicationJSONCreated) checksCreateSuiteRes() {}

type ChecksCreateSuiteApplicationJSONOK CheckSuite

func (*ChecksCreateSuiteApplicationJSONOK) checksCreateSuiteRes() {}

type ChecksCreateSuiteReq struct {
	// The sha of the head commit.
	HeadSha string "json:\"head_sha\""
}

type ChecksListForRefFilter string

const (
	ChecksListForRefFilterLatest ChecksListForRefFilter = "latest"
	ChecksListForRefFilterAll    ChecksListForRefFilter = "all"
)

type ChecksListForRefOK struct {
	TotalCount int        "json:\"total_count\""
	CheckRuns  []CheckRun "json:\"check_runs\""
}

type ChecksListForRefStatus string

const (
	ChecksListForRefStatusQueued     ChecksListForRefStatus = "queued"
	ChecksListForRefStatusInProgress ChecksListForRefStatus = "in_progress"
	ChecksListForRefStatusCompleted  ChecksListForRefStatus = "completed"
)

type ChecksListForSuiteFilter string

const (
	ChecksListForSuiteFilterLatest ChecksListForSuiteFilter = "latest"
	ChecksListForSuiteFilterAll    ChecksListForSuiteFilter = "all"
)

type ChecksListForSuiteOK struct {
	TotalCount int        "json:\"total_count\""
	CheckRuns  []CheckRun "json:\"check_runs\""
}

type ChecksListForSuiteStatus string

const (
	ChecksListForSuiteStatusQueued     ChecksListForSuiteStatus = "queued"
	ChecksListForSuiteStatusInProgress ChecksListForSuiteStatus = "in_progress"
	ChecksListForSuiteStatusCompleted  ChecksListForSuiteStatus = "completed"
)

type ChecksListSuitesForRefOK struct {
	TotalCount  int          "json:\"total_count\""
	CheckSuites []CheckSuite "json:\"check_suites\""
}

type ChecksRerequestSuiteCreated map[string]jx.Raw

func (s *ChecksRerequestSuiteCreated) init() ChecksRerequestSuiteCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ChecksSetSuitesPreferencesReq struct {
	// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled
	// by default. See the [`auto_trigger_checks` object](https://docs.github.
	// com/rest/reference/checks#auto_trigger_checks-object) description for details.
	AutoTriggerChecks []ChecksSetSuitesPreferencesReqAutoTriggerChecksItem "json:\"auto_trigger_checks\""
}

type ChecksSetSuitesPreferencesReqAutoTriggerChecksItem struct {
	// The `id` of the GitHub App.
	AppID int "json:\"app_id\""
	// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or
	// `false` to disable them.
	Setting bool "json:\"setting\""
}

// Clone Traffic.
// Ref: #/components/schemas/clone-traffic
type CloneTraffic struct {
	Count   int       "json:\"count\""
	Uniques int       "json:\"uniques\""
	Clones  []Traffic "json:\"clones\""
}

func (*CloneTraffic) reposGetClonesRes() {}

type CodeFrequencyStat []int

// Code Of Conduct.
// Ref: #/components/schemas/code-of-conduct
type CodeOfConduct struct {
	Key     string    "json:\"key\""
	Name    string    "json:\"name\""
	URL     url.URL   "json:\"url\""
	Body    OptString "json:\"body\""
	HTMLURL NilURI    "json:\"html_url\""
}

func (*CodeOfConduct) codesOfConductGetConductCodeRes() {}

// Code of Conduct Simple.
// Ref: #/components/schemas/code-of-conduct-simple
type CodeOfConductSimple struct {
	URL     url.URL "json:\"url\""
	Key     string  "json:\"key\""
	Name    string  "json:\"name\""
	HTMLURL NilURI  "json:\"html_url\""
}

// Ref: #/components/schemas/code-scanning-alert
type CodeScanningAlert struct {
	Number             AlertNumber                         "json:\"number\""
	CreatedAt          AlertCreatedAt                      "json:\"created_at\""
	URL                AlertURL                            "json:\"url\""
	HTMLURL            AlertHTMLURL                        "json:\"html_url\""
	Instances          jx.Raw                              "json:\"instances\""
	InstancesURL       AlertInstancesURL                   "json:\"instances_url\""
	State              CodeScanningAlertState              "json:\"state\""
	DismissedBy        NilNullableSimpleUser               "json:\"dismissed_by\""
	DismissedAt        NilCodeScanningAlertDismissedAt     "json:\"dismissed_at\""
	DismissedReason    NilCodeScanningAlertDismissedReason "json:\"dismissed_reason\""
	Rule               CodeScanningAlertRule               "json:\"rule\""
	Tool               CodeScanningAnalysisTool            "json:\"tool\""
	MostRecentInstance CodeScanningAlertInstance           "json:\"most_recent_instance\""
}

func (*CodeScanningAlert) codeScanningGetAlertRes()    {}
func (*CodeScanningAlert) codeScanningUpdateAlertRes() {}

// A classification of the file. For example to identify it as generated.
// Ref: #/components/schemas/code-scanning-alert-classification
type CodeScanningAlertClassification string

const (
	CodeScanningAlertClassificationSource    CodeScanningAlertClassification = "source"
	CodeScanningAlertClassificationGenerated CodeScanningAlertClassification = "generated"
	CodeScanningAlertClassificationTest      CodeScanningAlertClassification = "test"
	CodeScanningAlertClassificationLibrary   CodeScanningAlertClassification = "library"
)

type CodeScanningAlertDismissedAt time.Time

// **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be
// one of: `false positive`, `won't fix`, and `used in tests`.
// Ref: #/components/schemas/code-scanning-alert-dismissed-reason
type CodeScanningAlertDismissedReason string

const (
	CodeScanningAlertDismissedReasonFalsePositive CodeScanningAlertDismissedReason = "false positive"
	CodeScanningAlertDismissedReasonWonTFix       CodeScanningAlertDismissedReason = "won't fix"
	CodeScanningAlertDismissedReasonUsedInTests   CodeScanningAlertDismissedReason = "used in tests"
)

type CodeScanningAlertEnvironment string

// Ref: #/components/schemas/code-scanning-alert-instance
type CodeScanningAlertInstance struct {
	Ref         OptCodeScanningRef                  "json:\"ref\""
	AnalysisKey OptCodeScanningAnalysisAnalysisKey  "json:\"analysis_key\""
	Environment OptCodeScanningAlertEnvironment     "json:\"environment\""
	Category    OptCodeScanningAnalysisCategory     "json:\"category\""
	State       OptCodeScanningAlertState           "json:\"state\""
	CommitSha   OptString                           "json:\"commit_sha\""
	Message     OptCodeScanningAlertInstanceMessage "json:\"message\""
	Location    OptCodeScanningAlertLocation        "json:\"location\""
	HTMLURL     OptString                           "json:\"html_url\""
	// Classifications that have been applied to the file that triggered the alert.
	// For example identifying it as documentation, or a generated file.
	Classifications []CodeScanningAlertClassification "json:\"classifications\""
}

type CodeScanningAlertInstanceMessage struct {
	Text OptString "json:\"text\""
}

// Ref: #/components/schemas/code-scanning-alert-items
type CodeScanningAlertItems struct {
	Number             AlertNumber                         "json:\"number\""
	CreatedAt          AlertCreatedAt                      "json:\"created_at\""
	URL                AlertURL                            "json:\"url\""
	HTMLURL            AlertHTMLURL                        "json:\"html_url\""
	InstancesURL       AlertInstancesURL                   "json:\"instances_url\""
	State              CodeScanningAlertState              "json:\"state\""
	DismissedBy        NilNullableSimpleUser               "json:\"dismissed_by\""
	DismissedAt        NilCodeScanningAlertDismissedAt     "json:\"dismissed_at\""
	DismissedReason    NilCodeScanningAlertDismissedReason "json:\"dismissed_reason\""
	Rule               CodeScanningAlertRuleSummary        "json:\"rule\""
	Tool               CodeScanningAnalysisTool            "json:\"tool\""
	MostRecentInstance CodeScanningAlertInstance           "json:\"most_recent_instance\""
}

// Describe a region within a file for the alert.
// Ref: #/components/schemas/code-scanning-alert-location
type CodeScanningAlertLocation struct {
	Path        OptString "json:\"path\""
	StartLine   OptInt    "json:\"start_line\""
	EndLine     OptInt    "json:\"end_line\""
	StartColumn OptInt    "json:\"start_column\""
	EndColumn   OptInt    "json:\"end_column\""
}

// Ref: #/components/schemas/code-scanning-alert-rule
type CodeScanningAlertRule struct {
	// A unique identifier for the rule used to detect the alert.
	ID OptNilString "json:\"id\""
	// The name of the rule used to detect the alert.
	Name OptString "json:\"name\""
	// The severity of the alert.
	Severity OptNilCodeScanningAlertRuleSeverity "json:\"severity\""
	// The security severity of the alert.
	SecuritySeverityLevel OptNilCodeScanningAlertRuleSecuritySeverityLevel "json:\"security_severity_level\""
	// A short description of the rule used to detect the alert.
	Description OptString "json:\"description\""
	// Description of the rule used to detect the alert.
	FullDescription OptString "json:\"full_description\""
	// A set of tags applicable for the rule.
	Tags OptNilStringArray "json:\"tags\""
	// Detailed documentation for the rule as GitHub Flavored Markdown.
	Help OptNilString "json:\"help\""
}

// The security severity of the alert.
type CodeScanningAlertRuleSecuritySeverityLevel string

const (
	CodeScanningAlertRuleSecuritySeverityLevelLow      CodeScanningAlertRuleSecuritySeverityLevel = "low"
	CodeScanningAlertRuleSecuritySeverityLevelMedium   CodeScanningAlertRuleSecuritySeverityLevel = "medium"
	CodeScanningAlertRuleSecuritySeverityLevelHigh     CodeScanningAlertRuleSecuritySeverityLevel = "high"
	CodeScanningAlertRuleSecuritySeverityLevelCritical CodeScanningAlertRuleSecuritySeverityLevel = "critical"
)

// The severity of the alert.
type CodeScanningAlertRuleSeverity string

const (
	CodeScanningAlertRuleSeverityNone    CodeScanningAlertRuleSeverity = "none"
	CodeScanningAlertRuleSeverityNote    CodeScanningAlertRuleSeverity = "note"
	CodeScanningAlertRuleSeverityWarning CodeScanningAlertRuleSeverity = "warning"
	CodeScanningAlertRuleSeverityError   CodeScanningAlertRuleSeverity = "error"
)

// Ref: #/components/schemas/code-scanning-alert-rule-summary
type CodeScanningAlertRuleSummary struct {
	// A unique identifier for the rule used to detect the alert.
	ID OptNilString "json:\"id\""
	// The name of the rule used to detect the alert.
	Name OptString "json:\"name\""
	// The severity of the alert.
	Severity OptNilCodeScanningAlertRuleSummarySeverity "json:\"severity\""
	// A short description of the rule used to detect the alert.
	Description OptString "json:\"description\""
}

// The severity of the alert.
type CodeScanningAlertRuleSummarySeverity string

const (
	CodeScanningAlertRuleSummarySeverityNone    CodeScanningAlertRuleSummarySeverity = "none"
	CodeScanningAlertRuleSummarySeverityNote    CodeScanningAlertRuleSummarySeverity = "note"
	CodeScanningAlertRuleSummarySeverityWarning CodeScanningAlertRuleSummarySeverity = "warning"
	CodeScanningAlertRuleSummarySeverityError   CodeScanningAlertRuleSummarySeverity = "error"
)

// Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide
// `dismissed_reason` when you set the state to `dismissed`.
// Ref: #/components/schemas/code-scanning-alert-set-state
type CodeScanningAlertSetState string

const (
	CodeScanningAlertSetStateOpen      CodeScanningAlertSetState = "open"
	CodeScanningAlertSetStateDismissed CodeScanningAlertSetState = "dismissed"
)

// State of a code scanning alert.
// Ref: #/components/schemas/code-scanning-alert-state
type CodeScanningAlertState string

const (
	CodeScanningAlertStateOpen      CodeScanningAlertState = "open"
	CodeScanningAlertStateClosed    CodeScanningAlertState = "closed"
	CodeScanningAlertStateDismissed CodeScanningAlertState = "dismissed"
	CodeScanningAlertStateFixed     CodeScanningAlertState = "fixed"
)

// Ref: #/components/schemas/code-scanning-analysis
type CodeScanningAnalysis struct {
	Ref         CodeScanningRef                 "json:\"ref\""
	CommitSha   CodeScanningAnalysisCommitSha   "json:\"commit_sha\""
	AnalysisKey CodeScanningAnalysisAnalysisKey "json:\"analysis_key\""
	Environment CodeScanningAnalysisEnvironment "json:\"environment\""
	Category    OptCodeScanningAnalysisCategory "json:\"category\""
	Error       string                          "json:\"error\""
	CreatedAt   CodeScanningAnalysisCreatedAt   "json:\"created_at\""
	// The total number of results in the analysis.
	ResultsCount int "json:\"results_count\""
	// The total number of rules used in the analysis.
	RulesCount int "json:\"rules_count\""
	// Unique identifier for this analysis.
	ID        int                         "json:\"id\""
	URL       CodeScanningAnalysisURL     "json:\"url\""
	SarifID   CodeScanningAnalysisSarifID "json:\"sarif_id\""
	Tool      CodeScanningAnalysisTool    "json:\"tool\""
	Deletable bool                        "json:\"deletable\""
	// Warning generated when processing the analysis.
	Warning  string    "json:\"warning\""
	ToolName OptString "json:\"tool_name\""
}

func (*CodeScanningAnalysis) codeScanningGetAnalysisRes() {}

type CodeScanningAnalysisAnalysisKey string

type CodeScanningAnalysisCategory string

type CodeScanningAnalysisCommitSha string

type CodeScanningAnalysisCreatedAt time.Time

// Successful deletion of a code scanning analysis.
// Ref: #/components/schemas/code-scanning-analysis-deletion
type CodeScanningAnalysisDeletion struct {
	// Next deletable analysis in chain, without last analysis deletion confirmation.
	NextAnalysisURL NilURI "json:\"next_analysis_url\""
	// Next deletable analysis in chain, with last analysis deletion confirmation.
	ConfirmDeleteURL NilURI "json:\"confirm_delete_url\""
}

func (*CodeScanningAnalysisDeletion) codeScanningDeleteAnalysisRes() {}

type CodeScanningAnalysisEnvironment string

type CodeScanningAnalysisSarifFile string

type CodeScanningAnalysisSarifID string

// Ref: #/components/schemas/code-scanning-analysis-tool
type CodeScanningAnalysisTool struct {
	Name    OptCodeScanningAnalysisToolName       "json:\"name\""
	Version OptNilCodeScanningAnalysisToolVersion "json:\"version\""
	GUID    OptNilCodeScanningAnalysisToolGUID    "json:\"guid\""
}

type CodeScanningAnalysisToolGUID string

type CodeScanningAnalysisToolName string

type CodeScanningAnalysisToolVersion string

type CodeScanningAnalysisURL url.URL

type CodeScanningDeleteAnalysisApplicationJSONBadRequest BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONBadRequest) codeScanningDeleteAnalysisRes() {}

type CodeScanningDeleteAnalysisApplicationJSONForbidden BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONForbidden) codeScanningDeleteAnalysisRes() {}

type CodeScanningDeleteAnalysisApplicationJSONNotFound BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONNotFound) codeScanningDeleteAnalysisRes() {}

type CodeScanningGetAlertApplicationJSONForbidden BasicError

func (*CodeScanningGetAlertApplicationJSONForbidden) codeScanningGetAlertRes() {}

type CodeScanningGetAlertApplicationJSONNotFound BasicError

func (*CodeScanningGetAlertApplicationJSONNotFound) codeScanningGetAlertRes() {}

type CodeScanningGetAnalysisApplicationJSONForbidden BasicError

func (*CodeScanningGetAnalysisApplicationJSONForbidden) codeScanningGetAnalysisRes() {}

type CodeScanningGetAnalysisApplicationJSONNotFound BasicError

func (*CodeScanningGetAnalysisApplicationJSONNotFound) codeScanningGetAnalysisRes() {}

// CodeScanningGetSarifNotFound is response for CodeScanningGetSarif operation.
type CodeScanningGetSarifNotFound struct{}

func (*CodeScanningGetSarifNotFound) codeScanningGetSarifRes() {}

type CodeScanningListAlertInstancesApplicationJSONForbidden BasicError

func (*CodeScanningListAlertInstancesApplicationJSONForbidden) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertInstancesApplicationJSONNotFound BasicError

func (*CodeScanningListAlertInstancesApplicationJSONNotFound) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertInstancesOKApplicationJSON []CodeScanningAlertInstance

func (CodeScanningListAlertInstancesOKApplicationJSON) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertsForRepoApplicationJSONForbidden BasicError

func (*CodeScanningListAlertsForRepoApplicationJSONForbidden) codeScanningListAlertsForRepoRes() {}

type CodeScanningListAlertsForRepoApplicationJSONNotFound BasicError

func (*CodeScanningListAlertsForRepoApplicationJSONNotFound) codeScanningListAlertsForRepoRes() {}

type CodeScanningListAlertsForRepoOKApplicationJSON []CodeScanningAlertItems

func (CodeScanningListAlertsForRepoOKApplicationJSON) codeScanningListAlertsForRepoRes() {}

type CodeScanningListRecentAnalysesApplicationJSONForbidden BasicError

func (*CodeScanningListRecentAnalysesApplicationJSONForbidden) codeScanningListRecentAnalysesRes() {}

type CodeScanningListRecentAnalysesApplicationJSONNotFound BasicError

func (*CodeScanningListRecentAnalysesApplicationJSONNotFound) codeScanningListRecentAnalysesRes() {}

type CodeScanningListRecentAnalysesOKApplicationJSON []CodeScanningAnalysis

func (CodeScanningListRecentAnalysesOKApplicationJSON) codeScanningListRecentAnalysesRes() {}

type CodeScanningRef string

// Ref: #/components/schemas/code-scanning-sarifs-receipt
type CodeScanningSarifsReceipt struct {
	ID OptCodeScanningAnalysisSarifID "json:\"id\""
	// The REST API URL for checking the status of the upload.
	URL OptURI "json:\"url\""
}

func (*CodeScanningSarifsReceipt) codeScanningUploadSarifRes() {}

// Ref: #/components/schemas/code-scanning-sarifs-status
type CodeScanningSarifsStatus struct {
	// `pending` files have not yet been processed, while `complete` means all results in the SARIF have
	// been stored.
	ProcessingStatus OptCodeScanningSarifsStatusProcessingStatus "json:\"processing_status\""
	// The REST API URL for getting the analyses associated with the upload.
	AnalysesURL OptNilURI "json:\"analyses_url\""
}

func (*CodeScanningSarifsStatus) codeScanningGetSarifRes() {}

// `pending` files have not yet been processed, while `complete` means all results in the SARIF have
// been stored.
type CodeScanningSarifsStatusProcessingStatus string

const (
	CodeScanningSarifsStatusProcessingStatusPending  CodeScanningSarifsStatusProcessingStatus = "pending"
	CodeScanningSarifsStatusProcessingStatusComplete CodeScanningSarifsStatusProcessingStatus = "complete"
)

type CodeScanningUpdateAlertApplicationJSONForbidden BasicError

func (*CodeScanningUpdateAlertApplicationJSONForbidden) codeScanningUpdateAlertRes() {}

type CodeScanningUpdateAlertApplicationJSONNotFound BasicError

func (*CodeScanningUpdateAlertApplicationJSONNotFound) codeScanningUpdateAlertRes() {}

type CodeScanningUpdateAlertReq struct {
	State           CodeScanningAlertSetState              "json:\"state\""
	DismissedReason OptNilCodeScanningAlertDismissedReason "json:\"dismissed_reason\""
}

type CodeScanningUploadSarifApplicationJSONForbidden BasicError

func (*CodeScanningUploadSarifApplicationJSONForbidden) codeScanningUploadSarifRes() {}

type CodeScanningUploadSarifApplicationJSONNotFound BasicError

func (*CodeScanningUploadSarifApplicationJSONNotFound) codeScanningUploadSarifRes() {}

// CodeScanningUploadSarifBadRequest is response for CodeScanningUploadSarif operation.
type CodeScanningUploadSarifBadRequest struct{}

func (*CodeScanningUploadSarifBadRequest) codeScanningUploadSarifRes() {}

type CodeScanningUploadSarifReq struct {
	CommitSha CodeScanningAnalysisCommitSha "json:\"commit_sha\""
	Ref       CodeScanningRef               "json:\"ref\""
	Sarif     CodeScanningAnalysisSarifFile "json:\"sarif\""
	// The base directory used in the analysis, as it appears in the SARIF file.
	// This property is used to convert file paths from absolute to relative, so that alerts can be
	// mapped to their correct location in the repository.
	CheckoutURI OptURI "json:\"checkout_uri\""
	// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.
	// org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	StartedAt OptDateTime "json:\"started_at\""
	// The name of the tool used to generate the code scanning analysis. If this parameter is not used,
	// the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be
	// available for filtering using the `tool_guid` parameter of operations such as `GET
	// /repos/{owner}/{repo}/code-scanning/alerts`.
	ToolName OptString "json:\"tool_name\""
}

// CodeScanningUploadSarifRequestEntityTooLarge is response for CodeScanningUploadSarif operation.
type CodeScanningUploadSarifRequestEntityTooLarge struct{}

func (*CodeScanningUploadSarifRequestEntityTooLarge) codeScanningUploadSarifRes() {}

// Code Search Result Item.
// Ref: #/components/schemas/code-search-result-item
type CodeSearchResultItem struct {
	Name           string                   "json:\"name\""
	Path           string                   "json:\"path\""
	Sha            string                   "json:\"sha\""
	URL            url.URL                  "json:\"url\""
	GitURL         url.URL                  "json:\"git_url\""
	HTMLURL        url.URL                  "json:\"html_url\""
	Repository     MinimalRepository        "json:\"repository\""
	Score          float64                  "json:\"score\""
	FileSize       OptInt                   "json:\"file_size\""
	Language       OptNilString             "json:\"language\""
	LastModifiedAt OptDateTime              "json:\"last_modified_at\""
	LineNumbers    []string                 "json:\"line_numbers\""
	TextMatches    *SearchResultTextMatches "json:\"text_matches\""
}

type CodesOfConductGetAllCodesOfConductOKApplicationJSON []CodeOfConduct

func (CodesOfConductGetAllCodesOfConductOKApplicationJSON) codesOfConductGetAllCodesOfConductRes() {}

// Collaborator.
// Ref: #/components/schemas/collaborator
type Collaborator struct {
	Login             string                     "json:\"login\""
	ID                int                        "json:\"id\""
	Email             OptNilString               "json:\"email\""
	Name              OptNilString               "json:\"name\""
	NodeID            string                     "json:\"node_id\""
	AvatarURL         url.URL                    "json:\"avatar_url\""
	GravatarID        NilString                  "json:\"gravatar_id\""
	URL               url.URL                    "json:\"url\""
	HTMLURL           url.URL                    "json:\"html_url\""
	FollowersURL      url.URL                    "json:\"followers_url\""
	FollowingURL      string                     "json:\"following_url\""
	GistsURL          string                     "json:\"gists_url\""
	StarredURL        string                     "json:\"starred_url\""
	SubscriptionsURL  url.URL                    "json:\"subscriptions_url\""
	OrganizationsURL  url.URL                    "json:\"organizations_url\""
	ReposURL          url.URL                    "json:\"repos_url\""
	EventsURL         string                     "json:\"events_url\""
	ReceivedEventsURL url.URL                    "json:\"received_events_url\""
	Type              string                     "json:\"type\""
	SiteAdmin         bool                       "json:\"site_admin\""
	Permissions       OptCollaboratorPermissions "json:\"permissions\""
}

type CollaboratorPermissions struct {
	Pull     bool    "json:\"pull\""
	Triage   OptBool "json:\"triage\""
	Push     bool    "json:\"push\""
	Maintain OptBool "json:\"maintain\""
	Admin    bool    "json:\"admin\""
}

// Ref: #/components/schemas/combined-billing-usage
type CombinedBillingUsage struct {
	// Numbers of days left in billing cycle.
	DaysLeftInBillingCycle int "json:\"days_left_in_billing_cycle\""
	// Estimated storage space (GB) used in billing cycle.
	EstimatedPaidStorageForMonth int "json:\"estimated_paid_storage_for_month\""
	// Estimated sum of free and paid storage space (GB) used in billing cycle.
	EstimatedStorageForMonth int "json:\"estimated_storage_for_month\""
}

// Combined Commit Status.
// Ref: #/components/schemas/combined-commit-status
type CombinedCommitStatus struct {
	State      string               "json:\"state\""
	Statuses   []SimpleCommitStatus "json:\"statuses\""
	Sha        string               "json:\"sha\""
	TotalCount int                  "json:\"total_count\""
	Repository MinimalRepository    "json:\"repository\""
	CommitURL  url.URL              "json:\"commit_url\""
	URL        url.URL              "json:\"url\""
}

func (*CombinedCommitStatus) reposGetCombinedStatusForRefRes() {}

// Commit.
// Ref: #/components/schemas/commit
type Commit struct {
	URL         url.URL               "json:\"url\""
	Sha         string                "json:\"sha\""
	NodeID      string                "json:\"node_id\""
	HTMLURL     url.URL               "json:\"html_url\""
	CommentsURL url.URL               "json:\"comments_url\""
	Commit      CommitCommit          "json:\"commit\""
	Author      NilNullableSimpleUser "json:\"author\""
	Committer   NilNullableSimpleUser "json:\"committer\""
	Parents     []CommitParentsItem   "json:\"parents\""
	Stats       OptCommitStats        "json:\"stats\""
	Files       []CommitFilesItem     "json:\"files\""
}

func (*Commit) reposGetCommitRes() {}
func (*Commit) reposMergeRes()     {}

// Commit Activity.
// Ref: #/components/schemas/commit-activity
type CommitActivity struct {
	Days  []int "json:\"days\""
	Total int   "json:\"total\""
	Week  int   "json:\"week\""
}

// Commit Comment.
// Ref: #/components/schemas/commit-comment
type CommitComment struct {
	HTMLURL           url.URL               "json:\"html_url\""
	URL               url.URL               "json:\"url\""
	ID                int                   "json:\"id\""
	NodeID            string                "json:\"node_id\""
	Body              string                "json:\"body\""
	Path              NilString             "json:\"path\""
	Position          NilInt                "json:\"position\""
	Line              NilInt                "json:\"line\""
	CommitID          string                "json:\"commit_id\""
	User              NilNullableSimpleUser "json:\"user\""
	CreatedAt         time.Time             "json:\"created_at\""
	UpdatedAt         time.Time             "json:\"updated_at\""
	AuthorAssociation AuthorAssociation     "json:\"author_association\""
	Reactions         OptReactionRollup     "json:\"reactions\""
}

func (*CommitComment) reposCreateCommitCommentRes() {}
func (*CommitComment) reposGetCommitCommentRes()    {}
func (*CommitComment) reposUpdateCommitCommentRes() {}

type CommitCommit struct {
	URL          url.URL            "json:\"url\""
	Author       NilNullableGitUser "json:\"author\""
	Committer    NilNullableGitUser "json:\"committer\""
	Message      string             "json:\"message\""
	CommentCount int                "json:\"comment_count\""
	Tree         CommitCommitTree   "json:\"tree\""
	Verification OptVerification    "json:\"verification\""
}

type CommitCommitTree struct {
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

// Commit Comparison.
// Ref: #/components/schemas/commit-comparison
type CommitComparison struct {
	URL             url.URL                "json:\"url\""
	HTMLURL         url.URL                "json:\"html_url\""
	PermalinkURL    url.URL                "json:\"permalink_url\""
	DiffURL         url.URL                "json:\"diff_url\""
	PatchURL        url.URL                "json:\"patch_url\""
	BaseCommit      Commit                 "json:\"base_commit\""
	MergeBaseCommit Commit                 "json:\"merge_base_commit\""
	Status          CommitComparisonStatus "json:\"status\""
	AheadBy         int                    "json:\"ahead_by\""
	BehindBy        int                    "json:\"behind_by\""
	TotalCommits    int                    "json:\"total_commits\""
	Commits         []Commit               "json:\"commits\""
	Files           []DiffEntry            "json:\"files\""
}

func (*CommitComparison) reposCompareCommitsRes() {}

type CommitComparisonStatus string

const (
	CommitComparisonStatusDiverged  CommitComparisonStatus = "diverged"
	CommitComparisonStatusAhead     CommitComparisonStatus = "ahead"
	CommitComparisonStatusBehind    CommitComparisonStatus = "behind"
	CommitComparisonStatusIdentical CommitComparisonStatus = "identical"
)

type CommitFilesItem struct {
	Filename         OptString "json:\"filename\""
	Additions        OptInt    "json:\"additions\""
	Deletions        OptInt    "json:\"deletions\""
	Changes          OptInt    "json:\"changes\""
	Status           OptString "json:\"status\""
	RawURL           OptString "json:\"raw_url\""
	BlobURL          OptString "json:\"blob_url\""
	Patch            OptString "json:\"patch\""
	Sha              OptString "json:\"sha\""
	ContentsURL      OptString "json:\"contents_url\""
	PreviousFilename OptString "json:\"previous_filename\""
}

type CommitParentsItem struct {
	Sha     string  "json:\"sha\""
	URL     url.URL "json:\"url\""
	HTMLURL OptURI  "json:\"html_url\""
}

// Commit Search Result Item.
// Ref: #/components/schemas/commit-search-result-item
type CommitSearchResultItem struct {
	URL         url.URL                             "json:\"url\""
	Sha         string                              "json:\"sha\""
	HTMLURL     url.URL                             "json:\"html_url\""
	CommentsURL url.URL                             "json:\"comments_url\""
	Commit      CommitSearchResultItemCommit        "json:\"commit\""
	Author      NilNullableSimpleUser               "json:\"author\""
	Committer   NilNullableGitUser                  "json:\"committer\""
	Parents     []CommitSearchResultItemParentsItem "json:\"parents\""
	Repository  MinimalRepository                   "json:\"repository\""
	Score       float64                             "json:\"score\""
	NodeID      string                              "json:\"node_id\""
	TextMatches *SearchResultTextMatches            "json:\"text_matches\""
}

type CommitSearchResultItemCommit struct {
	Author       CommitSearchResultItemCommitAuthor "json:\"author\""
	Committer    NilNullableGitUser                 "json:\"committer\""
	CommentCount int                                "json:\"comment_count\""
	Message      string                             "json:\"message\""
	Tree         CommitSearchResultItemCommitTree   "json:\"tree\""
	URL          url.URL                            "json:\"url\""
	Verification OptVerification                    "json:\"verification\""
}

type CommitSearchResultItemCommitAuthor struct {
	Name  string    "json:\"name\""
	Email string    "json:\"email\""
	Date  time.Time "json:\"date\""
}

type CommitSearchResultItemCommitTree struct {
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

type CommitSearchResultItemParentsItem struct {
	URL     OptString "json:\"url\""
	HTMLURL OptString "json:\"html_url\""
	Sha     OptString "json:\"sha\""
}

type CommitStats struct {
	Additions OptInt "json:\"additions\""
	Deletions OptInt "json:\"deletions\""
	Total     OptInt "json:\"total\""
}

// Community Profile.
// Ref: #/components/schemas/community-profile
type CommunityProfile struct {
	HealthPercentage      int                   "json:\"health_percentage\""
	Description           NilString             "json:\"description\""
	Documentation         NilString             "json:\"documentation\""
	Files                 CommunityProfileFiles "json:\"files\""
	UpdatedAt             NilDateTime           "json:\"updated_at\""
	ContentReportsEnabled OptBool               "json:\"content_reports_enabled\""
}

type CommunityProfileFiles struct {
	CodeOfConduct       NilNullableCodeOfConductSimple "json:\"code_of_conduct\""
	CodeOfConductFile   NilNullableCommunityHealthFile "json:\"code_of_conduct_file\""
	License             NilNullableLicenseSimple       "json:\"license\""
	Contributing        NilNullableCommunityHealthFile "json:\"contributing\""
	Readme              NilNullableCommunityHealthFile "json:\"readme\""
	IssueTemplate       NilNullableCommunityHealthFile "json:\"issue_template\""
	PullRequestTemplate NilNullableCommunityHealthFile "json:\"pull_request_template\""
}

// Content File.
// Ref: #/components/schemas/content-file
type ContentFile struct {
	Type            string           "json:\"type\""
	Encoding        string           "json:\"encoding\""
	Size            int              "json:\"size\""
	Name            string           "json:\"name\""
	Path            string           "json:\"path\""
	Content         string           "json:\"content\""
	Sha             string           "json:\"sha\""
	URL             url.URL          "json:\"url\""
	GitURL          NilURI           "json:\"git_url\""
	HTMLURL         NilURI           "json:\"html_url\""
	DownloadURL     NilURI           "json:\"download_url\""
	Links           ContentFileLinks "json:\"_links\""
	Target          OptString        "json:\"target\""
	SubmoduleGitURL OptString        "json:\"submodule_git_url\""
}

func (*ContentFile) reposGetReadmeInDirectoryRes() {}
func (*ContentFile) reposGetReadmeRes()            {}

type ContentFileLinks struct {
	Git  NilURI  "json:\"git\""
	HTML NilURI  "json:\"html\""
	Self url.URL "json:\"self\""
}

// Content Reference attachments allow you to provide context around URLs posted in comments.
// Ref: #/components/schemas/content-reference-attachment
type ContentReferenceAttachment struct {
	// The ID of the attachment.
	ID int "json:\"id\""
	// The title of the attachment.
	Title string "json:\"title\""
	// The body of the attachment.
	Body string "json:\"body\""
	// The node_id of the content attachment.
	NodeID OptString "json:\"node_id\""
}

func (*ContentReferenceAttachment) appsCreateContentAttachmentRes() {}

// Content Traffic.
// Ref: #/components/schemas/content-traffic
type ContentTraffic struct {
	Path    string "json:\"path\""
	Title   string "json:\"title\""
	Count   int    "json:\"count\""
	Uniques int    "json:\"uniques\""
}

// Contributor.
// Ref: #/components/schemas/contributor
type Contributor struct {
	Login             OptString    "json:\"login\""
	ID                OptInt       "json:\"id\""
	NodeID            OptString    "json:\"node_id\""
	AvatarURL         OptURI       "json:\"avatar_url\""
	GravatarID        OptNilString "json:\"gravatar_id\""
	URL               OptURI       "json:\"url\""
	HTMLURL           OptURI       "json:\"html_url\""
	FollowersURL      OptURI       "json:\"followers_url\""
	FollowingURL      OptString    "json:\"following_url\""
	GistsURL          OptString    "json:\"gists_url\""
	StarredURL        OptString    "json:\"starred_url\""
	SubscriptionsURL  OptURI       "json:\"subscriptions_url\""
	OrganizationsURL  OptURI       "json:\"organizations_url\""
	ReposURL          OptURI       "json:\"repos_url\""
	EventsURL         OptString    "json:\"events_url\""
	ReceivedEventsURL OptURI       "json:\"received_events_url\""
	Type              string       "json:\"type\""
	SiteAdmin         OptBool      "json:\"site_admin\""
	Contributions     int          "json:\"contributions\""
	Email             OptString    "json:\"email\""
	Name              OptString    "json:\"name\""
}

// Contributor Activity.
// Ref: #/components/schemas/contributor-activity
type ContributorActivity struct {
	Author NilNullableSimpleUser          "json:\"author\""
	Total  int                            "json:\"total\""
	Weeks  []ContributorActivityWeeksItem "json:\"weeks\""
}

type ContributorActivityWeeksItem struct {
	W OptInt "json:\"w\""
	A OptInt "json:\"a\""
	D OptInt "json:\"d\""
	C OptInt "json:\"c\""
}

// Credential Authorization.
// Ref: #/components/schemas/credential-authorization
type CredentialAuthorization struct {
	// User login that owns the underlying credential.
	Login string "json:\"login\""
	// Unique identifier for the credential.
	CredentialID int "json:\"credential_id\""
	// Human-readable description of the credential type.
	CredentialType string "json:\"credential_type\""
	// Last eight characters of the credential. Only included in responses with credential_type of
	// personal access token.
	TokenLastEight OptString "json:\"token_last_eight\""
	// Date when the credential was authorized for use.
	CredentialAuthorizedAt time.Time "json:\"credential_authorized_at\""
	// List of oauth scopes the token has been granted.
	Scopes []string "json:\"scopes\""
	// Unique string to distinguish the credential. Only included in responses with credential_type of
	// SSH Key.
	Fingerprint OptString "json:\"fingerprint\""
	// Date when the credential was last accessed. May be null if it was never accessed.
	CredentialAccessedAt   OptNilDateTime "json:\"credential_accessed_at\""
	AuthorizedCredentialID OptNilInt      "json:\"authorized_credential_id\""
	// The title given to the ssh key. This will only be present when the credential is an ssh key.
	AuthorizedCredentialTitle OptNilString "json:\"authorized_credential_title\""
	// The note given to the token. This will only be present when the credential is a token.
	AuthorizedCredentialNote OptNilString "json:\"authorized_credential_note\""
}

// An SSH key granting access to a single repository.
// Ref: #/components/schemas/deploy-key
type DeployKey struct {
	ID        int    "json:\"id\""
	Key       string "json:\"key\""
	URL       string "json:\"url\""
	Title     string "json:\"title\""
	Verified  bool   "json:\"verified\""
	CreatedAt string "json:\"created_at\""
	ReadOnly  bool   "json:\"read_only\""
}

func (*DeployKey) reposCreateDeployKeyRes() {}
func (*DeployKey) reposGetDeployKeyRes()    {}

// A request for a specific ref(branch,sha,tag) to be deployed.
// Ref: #/components/schemas/deployment
type Deployment struct {
	URL url.URL "json:\"url\""
	// Unique identifier of the deployment.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	Sha    string "json:\"sha\""
	// The ref to deploy. This can be a branch, tag, or sha.
	Ref string "json:\"ref\""
	// Parameter to specify a task to execute.
	Task                string            "json:\"task\""
	Payload             DeploymentPayload "json:\"payload\""
	OriginalEnvironment OptString         "json:\"original_environment\""
	// Name for the target deployment environment.
	Environment   string                "json:\"environment\""
	Description   NilString             "json:\"description\""
	Creator       NilNullableSimpleUser "json:\"creator\""
	CreatedAt     time.Time             "json:\"created_at\""
	UpdatedAt     time.Time             "json:\"updated_at\""
	StatusesURL   url.URL               "json:\"statuses_url\""
	RepositoryURL url.URL               "json:\"repository_url\""
	// Specifies if the given environment is will no longer exist at some point in the future. Default:
	// false.
	TransientEnvironment OptBool "json:\"transient_environment\""
	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment OptBool                   "json:\"production_environment\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
}

func (*Deployment) reposCreateDeploymentRes() {}
func (*Deployment) reposGetDeploymentRes()    {}

// DeploymentPayload represents sum type.
type DeploymentPayload struct {
	Type               DeploymentPayloadType // switch on this field
	DeploymentPayload0 DeploymentPayload0
	String             string
}

// DeploymentPayloadType is oneOf type of DeploymentPayload.
type DeploymentPayloadType string

// Possible values for DeploymentPayloadType.
const (
	DeploymentPayload0DeploymentPayload DeploymentPayloadType = "DeploymentPayload0"
	StringDeploymentPayload             DeploymentPayloadType = "string"
)

// IsDeploymentPayload0 reports whether DeploymentPayload is DeploymentPayload0.
func (s DeploymentPayload) IsDeploymentPayload0() bool {
	return s.Type == DeploymentPayload0DeploymentPayload
}

// IsString reports whether DeploymentPayload is string.
func (s DeploymentPayload) IsString() bool { return s.Type == StringDeploymentPayload }

// SetDeploymentPayload0 sets DeploymentPayload to DeploymentPayload0.
func (s *DeploymentPayload) SetDeploymentPayload0(v DeploymentPayload0) {
	s.Type = DeploymentPayload0DeploymentPayload
	s.DeploymentPayload0 = v
}

// GetDeploymentPayload0 returns DeploymentPayload0 and true boolean if DeploymentPayload is DeploymentPayload0.
func (s DeploymentPayload) GetDeploymentPayload0() (v DeploymentPayload0, ok bool) {
	if !s.IsDeploymentPayload0() {
		return v, false
	}
	return s.DeploymentPayload0, true
}

// NewDeploymentPayload0DeploymentPayload returns new DeploymentPayload from DeploymentPayload0.
func NewDeploymentPayload0DeploymentPayload(v DeploymentPayload0) DeploymentPayload {
	var s DeploymentPayload
	s.SetDeploymentPayload0(v)
	return s
}

// SetString sets DeploymentPayload to string.
func (s *DeploymentPayload) SetString(v string) {
	s.Type = StringDeploymentPayload
	s.String = v
}

// GetString returns string and true boolean if DeploymentPayload is string.
func (s DeploymentPayload) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDeploymentPayload returns new DeploymentPayload from string.
func NewStringDeploymentPayload(v string) DeploymentPayload {
	var s DeploymentPayload
	s.SetString(v)
	return s
}

type DeploymentPayload0 map[string]jx.Raw

func (s *DeploymentPayload0) init() DeploymentPayload0 {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A deployment created as the result of an Actions check run from a workflow that references an
// environment.
// Ref: #/components/schemas/deployment-simple
type DeploymentSimple struct {
	URL url.URL "json:\"url\""
	// Unique identifier of the deployment.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// Parameter to specify a task to execute.
	Task                string    "json:\"task\""
	OriginalEnvironment OptString "json:\"original_environment\""
	// Name for the target deployment environment.
	Environment   string    "json:\"environment\""
	Description   NilString "json:\"description\""
	CreatedAt     time.Time "json:\"created_at\""
	UpdatedAt     time.Time "json:\"updated_at\""
	StatusesURL   url.URL   "json:\"statuses_url\""
	RepositoryURL url.URL   "json:\"repository_url\""
	// Specifies if the given environment is will no longer exist at some point in the future. Default:
	// false.
	TransientEnvironment OptBool "json:\"transient_environment\""
	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment OptBool                   "json:\"production_environment\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
}

// The status of a deployment.
// Ref: #/components/schemas/deployment-status
type DeploymentStatus struct {
	URL    url.URL "json:\"url\""
	ID     int     "json:\"id\""
	NodeID string  "json:\"node_id\""
	// The state of the status.
	State   DeploymentStatusState "json:\"state\""
	Creator NilNullableSimpleUser "json:\"creator\""
	// A short description of the status.
	Description string "json:\"description\""
	// The environment of the deployment that the status is for.
	Environment OptString "json:\"environment\""
	// Deprecated: the URL to associate with this status.
	TargetURL     url.URL   "json:\"target_url\""
	CreatedAt     time.Time "json:\"created_at\""
	UpdatedAt     time.Time "json:\"updated_at\""
	DeploymentURL url.URL   "json:\"deployment_url\""
	RepositoryURL url.URL   "json:\"repository_url\""
	// The URL for accessing your environment.
	EnvironmentURL OptURI "json:\"environment_url\""
	// The URL to associate with this status.
	LogURL                OptURI                    "json:\"log_url\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
}

func (*DeploymentStatus) reposCreateDeploymentStatusRes() {}
func (*DeploymentStatus) reposGetDeploymentStatusRes()    {}

// The state of the status.
type DeploymentStatusState string

const (
	DeploymentStatusStateError      DeploymentStatusState = "error"
	DeploymentStatusStateFailure    DeploymentStatusState = "failure"
	DeploymentStatusStateInactive   DeploymentStatusState = "inactive"
	DeploymentStatusStatePending    DeploymentStatusState = "pending"
	DeploymentStatusStateSuccess    DeploymentStatusState = "success"
	DeploymentStatusStateQueued     DeploymentStatusState = "queued"
	DeploymentStatusStateInProgress DeploymentStatusState = "in_progress"
)

// Diff Entry.
// Ref: #/components/schemas/diff-entry
type DiffEntry struct {
	Sha              string          "json:\"sha\""
	Filename         string          "json:\"filename\""
	Status           DiffEntryStatus "json:\"status\""
	Additions        int             "json:\"additions\""
	Deletions        int             "json:\"deletions\""
	Changes          int             "json:\"changes\""
	BlobURL          url.URL         "json:\"blob_url\""
	RawURL           url.URL         "json:\"raw_url\""
	ContentsURL      url.URL         "json:\"contents_url\""
	Patch            OptString       "json:\"patch\""
	PreviousFilename OptString       "json:\"previous_filename\""
}

type DiffEntryStatus string

const (
	DiffEntryStatusAdded     DiffEntryStatus = "added"
	DiffEntryStatusRemoved   DiffEntryStatus = "removed"
	DiffEntryStatusModified  DiffEntryStatus = "modified"
	DiffEntryStatusRenamed   DiffEntryStatus = "renamed"
	DiffEntryStatusCopied    DiffEntryStatus = "copied"
	DiffEntryStatusChanged   DiffEntryStatus = "changed"
	DiffEntryStatusUnchanged DiffEntryStatus = "unchanged"
)

// Email.
// Ref: #/components/schemas/email
type Email struct {
	Email      string    "json:\"email\""
	Primary    bool      "json:\"primary\""
	Verified   bool      "json:\"verified\""
	Visibility NilString "json:\"visibility\""
}

type EmojisGetOK map[string]string

func (s *EmojisGetOK) init() EmojisGetOK {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

func (EmojisGetOK) emojisGetRes() {}

// An object without any properties.
// Ref: #/components/schemas/empty-object
type EmptyObject map[string]jx.Raw

func (s *EmptyObject) init() EmptyObject {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (EmptyObject) actionsApproveWorkflowRunRes()              {}
func (EmptyObject) actionsCreateOrUpdateEnvironmentSecretRes() {}
func (EmptyObject) actionsCreateOrUpdateOrgSecretRes()         {}
func (EmptyObject) reposGetPagesHealthCheckRes()               {}

// The policy that controls the organizations in the enterprise that are allowed to run GitHub
// Actions. Can be one of: `all`, `none`, or `selected`.
// Ref: #/components/schemas/enabled-organizations
type EnabledOrganizations string

const (
	EnabledOrganizationsAll      EnabledOrganizations = "all"
	EnabledOrganizationsNone     EnabledOrganizations = "none"
	EnabledOrganizationsSelected EnabledOrganizations = "selected"
)

// The policy that controls the repositories in the organization that are allowed to run GitHub
// Actions. Can be one of: `all`, `none`, or `selected`.
// Ref: #/components/schemas/enabled-repositories
type EnabledRepositories string

const (
	EnabledRepositoriesAll      EnabledRepositories = "all"
	EnabledRepositoriesNone     EnabledRepositories = "none"
	EnabledRepositoriesSelected EnabledRepositories = "selected"
)

// EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

// EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent is response for EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise operation.
type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent struct{}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq struct {
	// Name of the runner group.
	Name string "json:\"name\""
	// Visibility of a runner group. You can select all organizations or select individual organization.
	// Can be one of: `all` or `selected`.
	Visibility OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility "json:\"visibility\""
	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds []int "json:\"selected_organization_ids\""
	// List of runner IDs to add to the runner group.
	Runners []int "json:\"runners\""
}

// Visibility of a runner group. You can select all organizations or select individual organization.
// Can be one of: `all` or `selected`.
type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility string

const (
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility = "selected"
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility = "all"
)

// EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent is response for EnterpriseAdminDeleteScimGroupFromEnterprise operation.
type EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent is response for EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise operation.
type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent is response for EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise operation.
type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteUserFromEnterpriseNoContent is response for EnterpriseAdminDeleteUserFromEnterprise operation.
type EnterpriseAdminDeleteUserFromEnterpriseNoContent struct{}

// EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent is response for EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise operation.
type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent struct{}

// EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent is response for EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise operation.
type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent struct{}

type EnterpriseAdminGetAuditLogInclude string

const (
	EnterpriseAdminGetAuditLogIncludeWeb EnterpriseAdminGetAuditLogInclude = "web"
	EnterpriseAdminGetAuditLogIncludeGit EnterpriseAdminGetAuditLogInclude = "git"
	EnterpriseAdminGetAuditLogIncludeAll EnterpriseAdminGetAuditLogInclude = "all"
)

type EnterpriseAdminGetAuditLogOrder string

const (
	EnterpriseAdminGetAuditLogOrderDesc EnterpriseAdminGetAuditLogOrder = "desc"
	EnterpriseAdminGetAuditLogOrderAsc  EnterpriseAdminGetAuditLogOrder = "asc"
)

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK struct {
	TotalCount    float64              "json:\"total_count\""
	Organizations []OrganizationSimple "json:\"organizations\""
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK struct {
	TotalCount    float64              "json:\"total_count\""
	Organizations []OrganizationSimple "json:\"organizations\""
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK struct {
	TotalCount   float64                  "json:\"total_count\""
	RunnerGroups []RunnerGroupsEnterprise "json:\"runner_groups\""
}

type EnterpriseAdminListSelfHostedRunnersForEnterpriseOK struct {
	TotalCount OptFloat64 "json:\"total_count\""
	Runners    []Runner   "json:\"runners\""
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK struct {
	TotalCount float64  "json:\"total_count\""
	Runners    []Runner "json:\"runners\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string                                                           "json:\"displayName\""
	Members     []EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem "json:\"members\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem struct {
	// The SCIM user ID for a user.
	Value string "json:\"value\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// The username for the user.
	UserName string                                                 "json:\"userName\""
	Name     EnterpriseAdminProvisionAndInviteEnterpriseUserReqName "json:\"name\""
	// List of user emails.
	Emails []EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem "json:\"emails\""
	// List of SCIM group IDs the user is a member of.
	Groups []EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem "json:\"groups\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem struct {
	// The email address.
	Value string "json:\"value\""
	// The type of email address.
	Type string "json:\"type\""
	// Whether this email address is the primary address.
	Primary bool "json:\"primary\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem struct {
	Value OptString "json:\"value\""
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqName struct {
	// The first name of the user.
	GivenName string "json:\"givenName\""
	// The last name of the user.
	FamilyName string "json:\"familyName\""
}

// EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

// EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent is response for EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise operation.
type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent struct{}

// EnterpriseAdminSetAllowedActionsEnterpriseNoContent is response for EnterpriseAdminSetAllowedActionsEnterprise operation.
type EnterpriseAdminSetAllowedActionsEnterpriseNoContent struct{}

// EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent is response for EnterpriseAdminSetGithubActionsPermissionsEnterprise operation.
type EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq struct {
	EnabledOrganizations EnabledOrganizations "json:\"enabled_organizations\""
	AllowedActions       OptAllowedActions    "json:\"allowed_actions\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string                                                                     "json:\"displayName\""
	Members     []EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem "json:\"members\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem struct {
	// The SCIM user ID for a user.
	Value string "json:\"value\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// The username for the user.
	UserName string                                                           "json:\"userName\""
	Name     EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName "json:\"name\""
	// List of user emails.
	Emails []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem "json:\"emails\""
	// List of SCIM group IDs the user is a member of.
	Groups []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem "json:\"groups\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem struct {
	// The email address.
	Value string "json:\"value\""
	// The type of email address.
	Type string "json:\"type\""
	// Whether this email address is the primary address.
	Primary bool "json:\"primary\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem struct {
	Value OptString "json:\"value\""
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName struct {
	// The first name of the user.
	GivenName string "json:\"givenName\""
	// The last name of the user.
	FamilyName string "json:\"familyName\""
}

// EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq struct {
	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds []int "json:\"selected_organization_ids\""
}

// EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent is response for EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise operation.
type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent struct{}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq struct {
	// List of organization IDs to enable for GitHub Actions.
	SelectedOrganizationIds []int "json:\"selected_organization_ids\""
}

// EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent is response for EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise operation.
type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent struct{}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq struct {
	// List of runner IDs to add to the runner group.
	Runners []int "json:\"runners\""
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem "json:\"Operations\""
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem struct {
	Op    EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp       "json:\"op\""
	Path  OptString                                                                 "json:\"path\""
	Value OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue "json:\"value\""
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp string

const (
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add     EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "add"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Add     EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Add"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_remove  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "remove"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Remove  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Remove"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_replace EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "replace"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Replace EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Replace"
)

// EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue represents sum type.
type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue struct {
	Type                                                                    EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType // switch on this field
	String                                                                  string
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1
	AnyArray                                                                []jx.Raw
}

// EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType is oneOf type of EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue.
type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType string

// Possible values for EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType.
const (
	StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue                                                                  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "string"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1"
	AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue                                                                EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "[]jx.Raw"
)

// IsString reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is string.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsString() bool {
	return s.Type == StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() bool {
	return s.Type == EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// IsAnyArray reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is []jx.Raw.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsAnyArray() bool {
	return s.Type == AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// SetString sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to string.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetString(v string) {
	s.Type = StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.String = v
}

// GetString returns string and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is string.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from string.
func NewStringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v string) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetString(v)
	return s
}

// SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1) {
	s.Type = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 = v
}

// GetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 returns EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() (v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1, ok bool) {
	if !s.IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() {
		return v, false
	}
	return s.EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1, true
}

// NewEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func NewEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1(v)
	return s
}

// SetAnyArray sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to []jx.Raw.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetAnyArray(v []jx.Raw) {
	s.Type = AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.AnyArray = v
}

// GetAnyArray returns []jx.Raw and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is []jx.Raw.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetAnyArray() (v []jx.Raw, ok bool) {
	if !s.IsAnyArray() {
		return v, false
	}
	return s.AnyArray, true
}

// NewAnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from []jx.Raw.
func NewAnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v []jx.Raw) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetAnyArray(v)
	return s
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 struct{}

type EnterpriseAdminUpdateAttributeForEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string "json:\"schemas\""
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem "json:\"Operations\""
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem struct{}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq struct {
	// Name of the runner group.
	Name OptString "json:\"name\""
	// Visibility of a runner group. You can select all organizations or select individual organizations.
	// Can be one of: `all` or `selected`.
	Visibility OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility "json:\"visibility\""
}

// Visibility of a runner group. You can select all organizations or select individual organizations.
// Can be one of: `all` or `selected`.
type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility string

const (
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility = "selected"
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility = "all"
)

// An entry in the reviews log for environment deployments.
// Ref: #/components/schemas/environment-approvals
type EnvironmentApprovals struct {
	// The list of environments that were approved or rejected.
	Environments []EnvironmentApprovalsEnvironmentsItem "json:\"environments\""
	// Whether deployment to the environment(s) was approved or rejected.
	State EnvironmentApprovalsState "json:\"state\""
	User  SimpleUser                "json:\"user\""
	// The comment submitted with the deployment review.
	Comment string "json:\"comment\""
}

type EnvironmentApprovalsEnvironmentsItem struct {
	// The id of the environment.
	ID     OptInt    "json:\"id\""
	NodeID OptString "json:\"node_id\""
	// The name of the environment.
	Name    OptString "json:\"name\""
	URL     OptString "json:\"url\""
	HTMLURL OptString "json:\"html_url\""
	// The time that the environment was created, in ISO 8601 format.
	CreatedAt OptDateTime "json:\"created_at\""
	// The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt OptDateTime "json:\"updated_at\""
}

// Whether deployment to the environment(s) was approved or rejected.
type EnvironmentApprovalsState string

const (
	EnvironmentApprovalsStateApproved EnvironmentApprovalsState = "approved"
	EnvironmentApprovalsStateRejected EnvironmentApprovalsState = "rejected"
)

// Event.
// Ref: #/components/schemas/event
type Event struct {
	ID        string       "json:\"id\""
	Type      NilString    "json:\"type\""
	Actor     Actor        "json:\"actor\""
	Repo      EventRepo    "json:\"repo\""
	Org       OptActor     "json:\"org\""
	Payload   EventPayload "json:\"payload\""
	Public    bool         "json:\"public\""
	CreatedAt NilDateTime  "json:\"created_at\""
}

type EventPayload struct {
	Action  OptString               "json:\"action\""
	Issue   OptIssueSimple          "json:\"issue\""
	Comment OptIssueComment         "json:\"comment\""
	Pages   []EventPayloadPagesItem "json:\"pages\""
}

type EventPayloadPagesItem struct {
	PageName OptString    "json:\"page_name\""
	Title    OptString    "json:\"title\""
	Summary  OptNilString "json:\"summary\""
	Action   OptString    "json:\"action\""
	Sha      OptString    "json:\"sha\""
	HTMLURL  OptString    "json:\"html_url\""
}

type EventRepo struct {
	ID   int     "json:\"id\""
	Name string  "json:\"name\""
	URL  url.URL "json:\"url\""
}

// Feed.
// Ref: #/components/schemas/feed
type Feed struct {
	TimelineURL                 string    "json:\"timeline_url\""
	UserURL                     string    "json:\"user_url\""
	CurrentUserPublicURL        OptString "json:\"current_user_public_url\""
	CurrentUserURL              OptString "json:\"current_user_url\""
	CurrentUserActorURL         OptString "json:\"current_user_actor_url\""
	CurrentUserOrganizationURL  OptString "json:\"current_user_organization_url\""
	CurrentUserOrganizationUrls []url.URL "json:\"current_user_organization_urls\""
	SecurityAdvisoriesURL       OptString "json:\"security_advisories_url\""
	Links                       FeedLinks "json:\"_links\""
}

type FeedLinks struct {
	Timeline                 LinkWithType    "json:\"timeline\""
	User                     LinkWithType    "json:\"user\""
	SecurityAdvisories       OptLinkWithType "json:\"security_advisories\""
	CurrentUser              OptLinkWithType "json:\"current_user\""
	CurrentUserPublic        OptLinkWithType "json:\"current_user_public\""
	CurrentUserActor         OptLinkWithType "json:\"current_user_actor\""
	CurrentUserOrganization  OptLinkWithType "json:\"current_user_organization\""
	CurrentUserOrganizations []LinkWithType  "json:\"current_user_organizations\""
}

// File Commit.
// Ref: #/components/schemas/file-commit
type FileCommit struct {
	Content NilFileCommitContent "json:\"content\""
	Commit  FileCommitCommit     "json:\"commit\""
}

func (*FileCommit) reposDeleteFileRes() {}

type FileCommitCommit struct {
	Sha          OptString                       "json:\"sha\""
	NodeID       OptString                       "json:\"node_id\""
	URL          OptString                       "json:\"url\""
	HTMLURL      OptString                       "json:\"html_url\""
	Author       OptFileCommitCommitAuthor       "json:\"author\""
	Committer    OptFileCommitCommitCommitter    "json:\"committer\""
	Message      OptString                       "json:\"message\""
	Tree         OptFileCommitCommitTree         "json:\"tree\""
	Parents      []FileCommitCommitParentsItem   "json:\"parents\""
	Verification OptFileCommitCommitVerification "json:\"verification\""
}

type FileCommitCommitAuthor struct {
	Date  OptString "json:\"date\""
	Name  OptString "json:\"name\""
	Email OptString "json:\"email\""
}

type FileCommitCommitCommitter struct {
	Date  OptString "json:\"date\""
	Name  OptString "json:\"name\""
	Email OptString "json:\"email\""
}

type FileCommitCommitParentsItem struct {
	URL     OptString "json:\"url\""
	HTMLURL OptString "json:\"html_url\""
	Sha     OptString "json:\"sha\""
}

type FileCommitCommitTree struct {
	URL OptString "json:\"url\""
	Sha OptString "json:\"sha\""
}

type FileCommitCommitVerification struct {
	Verified  OptBool      "json:\"verified\""
	Reason    OptString    "json:\"reason\""
	Signature OptNilString "json:\"signature\""
	Payload   OptNilString "json:\"payload\""
}

type FileCommitContent struct {
	Name        OptString                 "json:\"name\""
	Path        OptString                 "json:\"path\""
	Sha         OptString                 "json:\"sha\""
	Size        OptInt                    "json:\"size\""
	URL         OptString                 "json:\"url\""
	HTMLURL     OptString                 "json:\"html_url\""
	GitURL      OptString                 "json:\"git_url\""
	DownloadURL OptString                 "json:\"download_url\""
	Type        OptString                 "json:\"type\""
	Links       OptFileCommitContentLinks "json:\"_links\""
}

type FileCommitContentLinks struct {
	Self OptString "json:\"self\""
	Git  OptString "json:\"git\""
	HTML OptString "json:\"html\""
}

type ForbiddenGist struct {
	Block            OptForbiddenGistBlock "json:\"block\""
	Message          OptString             "json:\"message\""
	DocumentationURL OptString             "json:\"documentation_url\""
}

func (*ForbiddenGist) gistsGetCommentRes() {}
func (*ForbiddenGist) gistsGetRes()        {}

type ForbiddenGistBlock struct {
	Reason    OptString    "json:\"reason\""
	CreatedAt OptString    "json:\"created_at\""
	HTMLURL   OptNilString "json:\"html_url\""
}

// Ref: #/components/responses/found
type Found struct{}

func (*Found) reposGetReleaseAssetRes() {}

// Full Repository.
// Ref: #/components/schemas/full-repository
type FullRepository struct {
	ID               int        "json:\"id\""
	NodeID           string     "json:\"node_id\""
	Name             string     "json:\"name\""
	FullName         string     "json:\"full_name\""
	Owner            SimpleUser "json:\"owner\""
	Private          bool       "json:\"private\""
	HTMLURL          url.URL    "json:\"html_url\""
	Description      NilString  "json:\"description\""
	Fork             bool       "json:\"fork\""
	URL              url.URL    "json:\"url\""
	ArchiveURL       string     "json:\"archive_url\""
	AssigneesURL     string     "json:\"assignees_url\""
	BlobsURL         string     "json:\"blobs_url\""
	BranchesURL      string     "json:\"branches_url\""
	CollaboratorsURL string     "json:\"collaborators_url\""
	CommentsURL      string     "json:\"comments_url\""
	CommitsURL       string     "json:\"commits_url\""
	CompareURL       string     "json:\"compare_url\""
	ContentsURL      string     "json:\"contents_url\""
	ContributorsURL  url.URL    "json:\"contributors_url\""
	DeploymentsURL   url.URL    "json:\"deployments_url\""
	DownloadsURL     url.URL    "json:\"downloads_url\""
	EventsURL        url.URL    "json:\"events_url\""
	ForksURL         url.URL    "json:\"forks_url\""
	GitCommitsURL    string     "json:\"git_commits_url\""
	GitRefsURL       string     "json:\"git_refs_url\""
	GitTagsURL       string     "json:\"git_tags_url\""
	GitURL           string     "json:\"git_url\""
	IssueCommentURL  string     "json:\"issue_comment_url\""
	IssueEventsURL   string     "json:\"issue_events_url\""
	IssuesURL        string     "json:\"issues_url\""
	KeysURL          string     "json:\"keys_url\""
	LabelsURL        string     "json:\"labels_url\""
	LanguagesURL     url.URL    "json:\"languages_url\""
	MergesURL        url.URL    "json:\"merges_url\""
	MilestonesURL    string     "json:\"milestones_url\""
	NotificationsURL string     "json:\"notifications_url\""
	PullsURL         string     "json:\"pulls_url\""
	ReleasesURL      string     "json:\"releases_url\""
	SSHURL           string     "json:\"ssh_url\""
	StargazersURL    url.URL    "json:\"stargazers_url\""
	StatusesURL      string     "json:\"statuses_url\""
	SubscribersURL   url.URL    "json:\"subscribers_url\""
	SubscriptionURL  url.URL    "json:\"subscription_url\""
	TagsURL          url.URL    "json:\"tags_url\""
	TeamsURL         url.URL    "json:\"teams_url\""
	TreesURL         string     "json:\"trees_url\""
	CloneURL         string     "json:\"clone_url\""
	MirrorURL        NilURI     "json:\"mirror_url\""
	HooksURL         url.URL    "json:\"hooks_url\""
	SvnURL           url.URL    "json:\"svn_url\""
	Homepage         NilURI     "json:\"homepage\""
	Language         NilString  "json:\"language\""
	ForksCount       int        "json:\"forks_count\""
	StargazersCount  int        "json:\"stargazers_count\""
	WatchersCount    int        "json:\"watchers_count\""
	Size             int        "json:\"size\""
	DefaultBranch    string     "json:\"default_branch\""
	OpenIssuesCount  int        "json:\"open_issues_count\""
	IsTemplate       OptBool    "json:\"is_template\""
	Topics           []string   "json:\"topics\""
	HasIssues        bool       "json:\"has_issues\""
	HasProjects      bool       "json:\"has_projects\""
	HasWiki          bool       "json:\"has_wiki\""
	HasPages         bool       "json:\"has_pages\""
	HasDownloads     bool       "json:\"has_downloads\""
	Archived         bool       "json:\"archived\""
	// Returns whether or not this repository disabled.
	Disabled bool "json:\"disabled\""
	// The repository visibility: public, private, or internal.
	Visibility          OptString                    "json:\"visibility\""
	PushedAt            time.Time                    "json:\"pushed_at\""
	CreatedAt           time.Time                    "json:\"created_at\""
	UpdatedAt           time.Time                    "json:\"updated_at\""
	Permissions         OptFullRepositoryPermissions "json:\"permissions\""
	AllowRebaseMerge    OptBool                      "json:\"allow_rebase_merge\""
	TemplateRepository  OptNilNullableRepository     "json:\"template_repository\""
	TempCloneToken      OptNilString                 "json:\"temp_clone_token\""
	AllowSquashMerge    OptBool                      "json:\"allow_squash_merge\""
	AllowAutoMerge      OptBool                      "json:\"allow_auto_merge\""
	DeleteBranchOnMerge OptBool                      "json:\"delete_branch_on_merge\""
	AllowMergeCommit    OptBool                      "json:\"allow_merge_commit\""
	AllowForking        OptBool                      "json:\"allow_forking\""
	SubscribersCount    int                          "json:\"subscribers_count\""
	NetworkCount        int                          "json:\"network_count\""
	License             NilNullableLicenseSimple     "json:\"license\""
	Organization        OptNilNullableSimpleUser     "json:\"organization\""
	Parent              OptRepository                "json:\"parent\""
	Source              OptRepository                "json:\"source\""
	Forks               int                          "json:\"forks\""
	MasterBranch        OptString                    "json:\"master_branch\""
	OpenIssues          int                          "json:\"open_issues\""
	Watchers            int                          "json:\"watchers\""
	// Whether anonymous git access is allowed.
	AnonymousAccessEnabled OptBool                                 "json:\"anonymous_access_enabled\""
	CodeOfConduct          OptCodeOfConductSimple                  "json:\"code_of_conduct\""
	SecurityAndAnalysis    OptNilFullRepositorySecurityAndAnalysis "json:\"security_and_analysis\""
}

func (*FullRepository) reposCreateForkRes() {}
func (*FullRepository) reposGetRes()        {}
func (*FullRepository) reposUpdateRes()     {}

type FullRepositoryPermissions struct {
	Admin    bool    "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     bool    "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     bool    "json:\"pull\""
}

type FullRepositorySecurityAndAnalysis struct {
	AdvancedSecurity OptFullRepositorySecurityAndAnalysisAdvancedSecurity "json:\"advanced_security\""
	SecretScanning   OptFullRepositorySecurityAndAnalysisSecretScanning   "json:\"secret_scanning\""
}

type FullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Status OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus "json:\"status\""
}

type FullRepositorySecurityAndAnalysisAdvancedSecurityStatus string

const (
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled  FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "enabled"
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "disabled"
)

type FullRepositorySecurityAndAnalysisSecretScanning struct {
	Status OptFullRepositorySecurityAndAnalysisSecretScanningStatus "json:\"status\""
}

type FullRepositorySecurityAndAnalysisSecretScanningStatus string

const (
	FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled  FullRepositorySecurityAndAnalysisSecretScanningStatus = "enabled"
	FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled FullRepositorySecurityAndAnalysisSecretScanningStatus = "disabled"
)

// A comment made to a gist.
// Ref: #/components/schemas/gist-comment
type GistComment struct {
	ID     int     "json:\"id\""
	NodeID string  "json:\"node_id\""
	URL    url.URL "json:\"url\""
	// The comment text.
	Body              string                "json:\"body\""
	User              NilNullableSimpleUser "json:\"user\""
	CreatedAt         time.Time             "json:\"created_at\""
	UpdatedAt         time.Time             "json:\"updated_at\""
	AuthorAssociation AuthorAssociation     "json:\"author_association\""
}

func (*GistComment) gistsCreateCommentRes() {}
func (*GistComment) gistsGetCommentRes()    {}
func (*GistComment) gistsUpdateCommentRes() {}

// Gist Commit.
// Ref: #/components/schemas/gist-commit
type GistCommit struct {
	URL          url.URL                "json:\"url\""
	Version      string                 "json:\"version\""
	User         NilNullableSimpleUser  "json:\"user\""
	ChangeStatus GistCommitChangeStatus "json:\"change_status\""
	CommittedAt  time.Time              "json:\"committed_at\""
}

type GistCommitChangeStatus struct {
	Total     OptInt "json:\"total\""
	Additions OptInt "json:\"additions\""
	Deletions OptInt "json:\"deletions\""
}

// Gist History.
// Ref: #/components/schemas/gist-history
type GistHistory struct {
	User         OptNilNullableSimpleUser   "json:\"user\""
	Version      OptString                  "json:\"version\""
	CommittedAt  OptDateTime                "json:\"committed_at\""
	ChangeStatus OptGistHistoryChangeStatus "json:\"change_status\""
	URL          OptURI                     "json:\"url\""
}

type GistHistoryChangeStatus struct {
	Total     OptInt "json:\"total\""
	Additions OptInt "json:\"additions\""
	Deletions OptInt "json:\"deletions\""
}

// Gist Simple.
// Ref: #/components/schemas/gist-simple
type GistSimple struct {
	Forks   OptNilGistSimpleForksItemArray "json:\"forks\""
	History OptNilGistHistoryArray         "json:\"history\""
	// Gist.
	ForkOf      OptNilGistSimpleForkOf "json:\"fork_of\""
	URL         OptString              "json:\"url\""
	ForksURL    OptString              "json:\"forks_url\""
	CommitsURL  OptString              "json:\"commits_url\""
	ID          OptString              "json:\"id\""
	NodeID      OptString              "json:\"node_id\""
	GitPullURL  OptString              "json:\"git_pull_url\""
	GitPushURL  OptString              "json:\"git_push_url\""
	HTMLURL     OptString              "json:\"html_url\""
	Files       OptGistSimpleFiles     "json:\"files\""
	Public      OptBool                "json:\"public\""
	CreatedAt   OptString              "json:\"created_at\""
	UpdatedAt   OptString              "json:\"updated_at\""
	Description OptNilString           "json:\"description\""
	Comments    OptInt                 "json:\"comments\""
	User        OptNilString           "json:\"user\""
	CommentsURL OptString              "json:\"comments_url\""
	Owner       OptSimpleUser          "json:\"owner\""
	Truncated   OptBool                "json:\"truncated\""
}

func (*GistSimple) gistsCreateRes()      {}
func (*GistSimple) gistsGetRes()         {}
func (*GistSimple) gistsGetRevisionRes() {}

type GistSimpleFiles map[string]GistSimpleFilesItem

func (s *GistSimpleFiles) init() GistSimpleFiles {
	m := *s
	if m == nil {
		m = map[string]GistSimpleFilesItem{}
		*s = m
	}
	return m
}

type GistSimpleFilesItem struct {
	Filename  OptString "json:\"filename\""
	Type      OptString "json:\"type\""
	Language  OptString "json:\"language\""
	RawURL    OptString "json:\"raw_url\""
	Size      OptInt    "json:\"size\""
	Truncated OptBool   "json:\"truncated\""
	Content   OptString "json:\"content\""
}

// Gist.
type GistSimpleForkOf struct {
	URL         url.URL                  "json:\"url\""
	ForksURL    url.URL                  "json:\"forks_url\""
	CommitsURL  url.URL                  "json:\"commits_url\""
	ID          string                   "json:\"id\""
	NodeID      string                   "json:\"node_id\""
	GitPullURL  url.URL                  "json:\"git_pull_url\""
	GitPushURL  url.URL                  "json:\"git_push_url\""
	HTMLURL     url.URL                  "json:\"html_url\""
	Files       GistSimpleForkOfFiles    "json:\"files\""
	Public      bool                     "json:\"public\""
	CreatedAt   time.Time                "json:\"created_at\""
	UpdatedAt   time.Time                "json:\"updated_at\""
	Description NilString                "json:\"description\""
	Comments    int                      "json:\"comments\""
	User        NilNullableSimpleUser    "json:\"user\""
	CommentsURL url.URL                  "json:\"comments_url\""
	Owner       OptNilNullableSimpleUser "json:\"owner\""
	Truncated   OptBool                  "json:\"truncated\""
	Forks       []jx.Raw                 "json:\"forks\""
	History     []jx.Raw                 "json:\"history\""
}

type GistSimpleForkOfFiles map[string]GistSimpleForkOfFilesItem

func (s *GistSimpleForkOfFiles) init() GistSimpleForkOfFiles {
	m := *s
	if m == nil {
		m = map[string]GistSimpleForkOfFilesItem{}
		*s = m
	}
	return m
}

type GistSimpleForkOfFilesItem struct {
	Filename OptString "json:\"filename\""
	Type     OptString "json:\"type\""
	Language OptString "json:\"language\""
	RawURL   OptString "json:\"raw_url\""
	Size     OptInt    "json:\"size\""
}

type GistSimpleForksItem struct {
	ID        OptString     "json:\"id\""
	URL       OptURI        "json:\"url\""
	User      OptPublicUser "json:\"user\""
	CreatedAt OptDateTime   "json:\"created_at\""
	UpdatedAt OptDateTime   "json:\"updated_at\""
}

// GistsCheckIsStarredNoContent is response for GistsCheckIsStarred operation.
type GistsCheckIsStarredNoContent struct{}

func (*GistsCheckIsStarredNoContent) gistsCheckIsStarredRes() {}

type GistsCheckIsStarredNotFound map[string]jx.Raw

func (s *GistsCheckIsStarredNotFound) init() GistsCheckIsStarredNotFound {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (GistsCheckIsStarredNotFound) gistsCheckIsStarredRes() {}

type GistsCreateApplicationJSONForbidden BasicError

func (*GistsCreateApplicationJSONForbidden) gistsCreateRes() {}

type GistsCreateApplicationJSONNotFound BasicError

func (*GistsCreateApplicationJSONNotFound) gistsCreateRes() {}

type GistsCreateCommentApplicationJSONForbidden BasicError

func (*GistsCreateCommentApplicationJSONForbidden) gistsCreateCommentRes() {}

type GistsCreateCommentApplicationJSONNotFound BasicError

func (*GistsCreateCommentApplicationJSONNotFound) gistsCreateCommentRes() {}

type GistsCreateCommentReq struct {
	// The comment text.
	Body string "json:\"body\""
}

type GistsCreateReq struct {
	// Description of the gist.
	Description OptString "json:\"description\""
	// Names and content for the files that make up the gist.
	Files  GistsCreateReqFiles     "json:\"files\""
	Public OptGistsCreateReqPublic "json:\"public\""
}

// Names and content for the files that make up the gist.
type GistsCreateReqFiles map[string]GistsCreateReqFilesItem

func (s *GistsCreateReqFiles) init() GistsCreateReqFiles {
	m := *s
	if m == nil {
		m = map[string]GistsCreateReqFilesItem{}
		*s = m
	}
	return m
}

type GistsCreateReqFilesItem struct {
	// Content of the file.
	Content string "json:\"content\""
}

// GistsCreateReqPublic represents sum type.
type GistsCreateReqPublic struct {
	Type                  GistsCreateReqPublicType // switch on this field
	Bool                  bool
	GistsCreateReqPublic1 GistsCreateReqPublic1
}

// GistsCreateReqPublicType is oneOf type of GistsCreateReqPublic.
type GistsCreateReqPublicType string

// Possible values for GistsCreateReqPublicType.
const (
	BoolGistsCreateReqPublic                  GistsCreateReqPublicType = "bool"
	GistsCreateReqPublic1GistsCreateReqPublic GistsCreateReqPublicType = "GistsCreateReqPublic1"
)

// IsBool reports whether GistsCreateReqPublic is bool.
func (s GistsCreateReqPublic) IsBool() bool { return s.Type == BoolGistsCreateReqPublic }

// IsGistsCreateReqPublic1 reports whether GistsCreateReqPublic is GistsCreateReqPublic1.
func (s GistsCreateReqPublic) IsGistsCreateReqPublic1() bool {
	return s.Type == GistsCreateReqPublic1GistsCreateReqPublic
}

// SetBool sets GistsCreateReqPublic to bool.
func (s *GistsCreateReqPublic) SetBool(v bool) {
	s.Type = BoolGistsCreateReqPublic
	s.Bool = v
}

// GetBool returns bool and true boolean if GistsCreateReqPublic is bool.
func (s GistsCreateReqPublic) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolGistsCreateReqPublic returns new GistsCreateReqPublic from bool.
func NewBoolGistsCreateReqPublic(v bool) GistsCreateReqPublic {
	var s GistsCreateReqPublic
	s.SetBool(v)
	return s
}

// SetGistsCreateReqPublic1 sets GistsCreateReqPublic to GistsCreateReqPublic1.
func (s *GistsCreateReqPublic) SetGistsCreateReqPublic1(v GistsCreateReqPublic1) {
	s.Type = GistsCreateReqPublic1GistsCreateReqPublic
	s.GistsCreateReqPublic1 = v
}

// GetGistsCreateReqPublic1 returns GistsCreateReqPublic1 and true boolean if GistsCreateReqPublic is GistsCreateReqPublic1.
func (s GistsCreateReqPublic) GetGistsCreateReqPublic1() (v GistsCreateReqPublic1, ok bool) {
	if !s.IsGistsCreateReqPublic1() {
		return v, false
	}
	return s.GistsCreateReqPublic1, true
}

// NewGistsCreateReqPublic1GistsCreateReqPublic returns new GistsCreateReqPublic from GistsCreateReqPublic1.
func NewGistsCreateReqPublic1GistsCreateReqPublic(v GistsCreateReqPublic1) GistsCreateReqPublic {
	var s GistsCreateReqPublic
	s.SetGistsCreateReqPublic1(v)
	return s
}

type GistsCreateReqPublic1 string

const (
	GistsCreateReqPublic1True  GistsCreateReqPublic1 = "true"
	GistsCreateReqPublic1False GistsCreateReqPublic1 = "false"
)

type GistsDeleteApplicationJSONForbidden BasicError

func (*GistsDeleteApplicationJSONForbidden) gistsDeleteRes() {}

type GistsDeleteApplicationJSONNotFound BasicError

func (*GistsDeleteApplicationJSONNotFound) gistsDeleteRes() {}

type GistsDeleteCommentApplicationJSONForbidden BasicError

func (*GistsDeleteCommentApplicationJSONForbidden) gistsDeleteCommentRes() {}

type GistsDeleteCommentApplicationJSONNotFound BasicError

func (*GistsDeleteCommentApplicationJSONNotFound) gistsDeleteCommentRes() {}

// GistsDeleteCommentNoContent is response for GistsDeleteComment operation.
type GistsDeleteCommentNoContent struct{}

func (*GistsDeleteCommentNoContent) gistsDeleteCommentRes() {}

// GistsDeleteNoContent is response for GistsDelete operation.
type GistsDeleteNoContent struct{}

func (*GistsDeleteNoContent) gistsDeleteRes() {}

type GistsForkApplicationJSONForbidden BasicError

func (*GistsForkApplicationJSONForbidden) gistsForkRes() {}

type GistsForkApplicationJSONNotFound BasicError

func (*GistsForkApplicationJSONNotFound) gistsForkRes() {}

type GistsGetRevisionApplicationJSONForbidden BasicError

func (*GistsGetRevisionApplicationJSONForbidden) gistsGetRevisionRes() {}

type GistsGetRevisionApplicationJSONNotFound BasicError

func (*GistsGetRevisionApplicationJSONNotFound) gistsGetRevisionRes() {}

type GistsListCommentsApplicationJSONForbidden BasicError

func (*GistsListCommentsApplicationJSONForbidden) gistsListCommentsRes() {}

type GistsListCommentsApplicationJSONNotFound BasicError

func (*GistsListCommentsApplicationJSONNotFound) gistsListCommentsRes() {}

type GistsListCommentsOKApplicationJSON []GistComment

func (GistsListCommentsOKApplicationJSON) gistsListCommentsRes() {}

type GistsListCommitsApplicationJSONForbidden BasicError

func (*GistsListCommitsApplicationJSONForbidden) gistsListCommitsRes() {}

type GistsListCommitsApplicationJSONNotFound BasicError

func (*GistsListCommitsApplicationJSONNotFound) gistsListCommitsRes() {}

type GistsListCommitsOKApplicationJSON []GistCommit

func (GistsListCommitsOKApplicationJSON) gistsListCommitsRes() {}

type GistsListForUserOKApplicationJSON []BaseGist

func (GistsListForUserOKApplicationJSON) gistsListForUserRes() {}

type GistsListForksApplicationJSONForbidden BasicError

func (*GistsListForksApplicationJSONForbidden) gistsListForksRes() {}

type GistsListForksApplicationJSONNotFound BasicError

func (*GistsListForksApplicationJSONNotFound) gistsListForksRes() {}

type GistsListForksOKApplicationJSON []GistSimple

func (GistsListForksOKApplicationJSON) gistsListForksRes() {}

type GistsListOKApplicationJSON []BaseGist

func (GistsListOKApplicationJSON) gistsListRes() {}

type GistsListPublicOKApplicationJSON []BaseGist

func (GistsListPublicOKApplicationJSON) gistsListPublicRes() {}

type GistsListStarredApplicationJSONForbidden BasicError

func (*GistsListStarredApplicationJSONForbidden) gistsListStarredRes() {}

type GistsListStarredApplicationJSONUnauthorized BasicError

func (*GistsListStarredApplicationJSONUnauthorized) gistsListStarredRes() {}

type GistsListStarredOKApplicationJSON []BaseGist

func (GistsListStarredOKApplicationJSON) gistsListStarredRes() {}

type GistsStarApplicationJSONForbidden BasicError

func (*GistsStarApplicationJSONForbidden) gistsStarRes() {}

type GistsStarApplicationJSONNotFound BasicError

func (*GistsStarApplicationJSONNotFound) gistsStarRes() {}

// GistsStarNoContent is response for GistsStar operation.
type GistsStarNoContent struct{}

func (*GistsStarNoContent) gistsStarRes() {}

type GistsUnstarApplicationJSONForbidden BasicError

func (*GistsUnstarApplicationJSONForbidden) gistsUnstarRes() {}

type GistsUnstarApplicationJSONNotFound BasicError

func (*GistsUnstarApplicationJSONNotFound) gistsUnstarRes() {}

// GistsUnstarNoContent is response for GistsUnstar operation.
type GistsUnstarNoContent struct{}

func (*GistsUnstarNoContent) gistsUnstarRes() {}

type GistsUpdateCommentReq struct {
	// The comment text.
	Body string "json:\"body\""
}

// Low-level Git commit operations within a repository.
// Ref: #/components/schemas/git-commit
type GitCommit struct {
	// SHA for the commit.
	Sha    string  "json:\"sha\""
	NodeID string  "json:\"node_id\""
	URL    url.URL "json:\"url\""
	// Identifying information for the git-user.
	Author GitCommitAuthor "json:\"author\""
	// Identifying information for the git-user.
	Committer GitCommitCommitter "json:\"committer\""
	// Message describing the purpose of the commit.
	Message      string                 "json:\"message\""
	Tree         GitCommitTree          "json:\"tree\""
	Parents      []GitCommitParentsItem "json:\"parents\""
	Verification GitCommitVerification  "json:\"verification\""
	HTMLURL      url.URL                "json:\"html_url\""
}

func (*GitCommit) gitCreateCommitRes() {}
func (*GitCommit) gitGetCommitRes()    {}

// Identifying information for the git-user.
type GitCommitAuthor struct {
	// Timestamp of the commit.
	Date time.Time "json:\"date\""
	// Git email address of the user.
	Email string "json:\"email\""
	// Name of the git user.
	Name string "json:\"name\""
}

// Identifying information for the git-user.
type GitCommitCommitter struct {
	// Timestamp of the commit.
	Date time.Time "json:\"date\""
	// Git email address of the user.
	Email string "json:\"email\""
	// Name of the git user.
	Name string "json:\"name\""
}

type GitCommitParentsItem struct {
	// SHA for the commit.
	Sha     string  "json:\"sha\""
	URL     url.URL "json:\"url\""
	HTMLURL url.URL "json:\"html_url\""
}

type GitCommitTree struct {
	// SHA for the commit.
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

type GitCommitVerification struct {
	Verified  bool      "json:\"verified\""
	Reason    string    "json:\"reason\""
	Signature NilString "json:\"signature\""
	Payload   NilString "json:\"payload\""
}

type GitCreateBlobApplicationJSONConflict BasicError

func (*GitCreateBlobApplicationJSONConflict) gitCreateBlobRes() {}

type GitCreateBlobApplicationJSONForbidden BasicError

func (*GitCreateBlobApplicationJSONForbidden) gitCreateBlobRes() {}

type GitCreateBlobApplicationJSONNotFound BasicError

func (*GitCreateBlobApplicationJSONNotFound) gitCreateBlobRes() {}

type GitCreateBlobReq struct {
	// The new blob's content.
	Content string "json:\"content\""
	// The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
	Encoding OptString "json:\"encoding\""
}

type GitCreateCommitReq struct {
	// The commit message.
	Message string "json:\"message\""
	// The SHA of the tree object this commit points to.
	Tree string "json:\"tree\""
	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will
	// be written as a root commit. For a single parent, an array of one SHA should be provided; for a
	// merge commit, an array of more than one should be provided.
	Parents []string "json:\"parents\""
	// Information about the author of the commit. By default, the `author` will be the authenticated
	// user and the current date. See the `author` and `committer` object below for details.
	Author OptGitCreateCommitReqAuthor "json:\"author\""
	// Information about the person who is making the commit. By default, `committer` will use the
	// information set in `author`. See the `author` and `committer` object below for details.
	Committer OptGitCreateCommitReqCommitter "json:\"committer\""
	// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds
	// the signature to the `gpgsig` header of the created commit. For a commit signature to be
	// verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string
	// commit as it would be written to the object database. To pass a `signature` parameter, you need to
	// first manually create a valid PGP signature, which can be complicated. You may find it easier to
	// [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create
	// signed commits.
	Signature OptString "json:\"signature\""
}

// Information about the author of the commit. By default, the `author` will be the authenticated
// user and the current date. See the `author` and `committer` object below for details.
type GitCreateCommitReqAuthor struct {
	// The name of the author (or committer) of the commit.
	Name string "json:\"name\""
	// The email of the author (or committer) of the commit.
	Email string "json:\"email\""
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime "json:\"date\""
}

// Information about the person who is making the commit. By default, `committer` will use the
// information set in `author`. See the `author` and `committer` object below for details.
type GitCreateCommitReqCommitter struct {
	// The name of the author (or committer) of the commit.
	Name OptString "json:\"name\""
	// The email of the author (or committer) of the commit.
	Email OptString "json:\"email\""
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime "json:\"date\""
}

type GitCreateRefReq struct {
	// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with
	// 'refs' and have at least two slashes, it will be rejected.
	Ref string "json:\"ref\""
	// The SHA1 value for this reference.
	Sha string    "json:\"sha\""
	Key OptString "json:\"key\""
}

type GitCreateTagReq struct {
	// The tag's name. This is typically a version (e.g., "v0.0.1").
	Tag string "json:\"tag\""
	// The tag message.
	Message string "json:\"message\""
	// The SHA of the git object this is tagging.
	Object string "json:\"object\""
	// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a
	// `blob`.
	Type GitCreateTagReqType "json:\"type\""
	// An object with information about the individual creating the tag.
	Tagger OptGitCreateTagReqTagger "json:\"tagger\""
}

// An object with information about the individual creating the tag.
type GitCreateTagReqTagger struct {
	// The name of the author of the tag.
	Name string "json:\"name\""
	// The email of the author of the tag.
	Email string "json:\"email\""
	// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.
	// org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime "json:\"date\""
}

// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a
// `blob`.
type GitCreateTagReqType string

const (
	GitCreateTagReqTypeCommit GitCreateTagReqType = "commit"
	GitCreateTagReqTypeTree   GitCreateTagReqType = "tree"
	GitCreateTagReqTypeBlob   GitCreateTagReqType = "blob"
)

type GitCreateTreeApplicationJSONForbidden BasicError

func (*GitCreateTreeApplicationJSONForbidden) gitCreateTreeRes() {}

type GitCreateTreeApplicationJSONNotFound BasicError

func (*GitCreateTreeApplicationJSONNotFound) gitCreateTreeRes() {}

type GitCreateTreeReq struct {
	// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
	Tree []GitCreateTreeReqTreeItem "json:\"tree\""
	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If
	// provided, a new Git tree object will be created from entries in the Git tree object pointed to by
	// `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter
	// will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a
	// branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current
	// latest commit on the branch you're working on.
	// If not provided, GitHub will create a new Git tree object from only the entries defined in the
	// `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a
	// part of the parent commit's tree and were not defined in the `tree` parameter will be listed as
	// deleted by the new commit.
	BaseTree OptString "json:\"base_tree\""
}

type GitCreateTreeReqTreeItem struct {
	// The file referenced in the tree.
	Path OptString "json:\"path\""
	// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for
	// subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the
	// path of a symlink.
	Mode OptGitCreateTreeReqTreeItemMode "json:\"mode\""
	// Either `blob`, `tree`, or `commit`.
	Type OptGitCreateTreeReqTreeItemType "json:\"type\""
	// The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null`
	// then the file will be deleted.
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both
	// `tree.sha` and `content` will return an error.
	Sha OptNilString "json:\"sha\""
	// The content you want this file to have. GitHub will write this blob out and use that SHA for this
	// entry. Use either this, or `tree.sha`.
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both
	// `tree.sha` and `content` will return an error.
	Content OptString "json:\"content\""
}

// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for
// subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the
// path of a symlink.
type GitCreateTreeReqTreeItemMode string

const (
	GitCreateTreeReqTreeItemMode100644 GitCreateTreeReqTreeItemMode = "100644"
	GitCreateTreeReqTreeItemMode100755 GitCreateTreeReqTreeItemMode = "100755"
	GitCreateTreeReqTreeItemMode040000 GitCreateTreeReqTreeItemMode = "040000"
	GitCreateTreeReqTreeItemMode160000 GitCreateTreeReqTreeItemMode = "160000"
	GitCreateTreeReqTreeItemMode120000 GitCreateTreeReqTreeItemMode = "120000"
)

// Either `blob`, `tree`, or `commit`.
type GitCreateTreeReqTreeItemType string

const (
	GitCreateTreeReqTreeItemTypeBlob   GitCreateTreeReqTreeItemType = "blob"
	GitCreateTreeReqTreeItemTypeTree   GitCreateTreeReqTreeItemType = "tree"
	GitCreateTreeReqTreeItemTypeCommit GitCreateTreeReqTreeItemType = "commit"
)

// GitDeleteRefNoContent is response for GitDeleteRef operation.
type GitDeleteRefNoContent struct{}

func (*GitDeleteRefNoContent) gitDeleteRefRes() {}

type GitGetBlobApplicationJSONForbidden BasicError

func (*GitGetBlobApplicationJSONForbidden) gitGetBlobRes() {}

type GitGetBlobApplicationJSONNotFound BasicError

func (*GitGetBlobApplicationJSONNotFound) gitGetBlobRes() {}

// Git references within a repository.
// Ref: #/components/schemas/git-ref
type GitRef struct {
	Ref    string       "json:\"ref\""
	NodeID string       "json:\"node_id\""
	URL    url.URL      "json:\"url\""
	Object GitRefObject "json:\"object\""
}

func (*GitRef) gitCreateRefRes() {}
func (*GitRef) gitGetRefRes()    {}
func (*GitRef) gitUpdateRefRes() {}

type GitRefObject struct {
	Type string "json:\"type\""
	// SHA for the reference.
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

// Metadata for a Git tag.
// Ref: #/components/schemas/git-tag
type GitTag struct {
	NodeID string "json:\"node_id\""
	// Name of the tag.
	Tag string "json:\"tag\""
	Sha string "json:\"sha\""
	// URL for the tag.
	URL url.URL "json:\"url\""
	// Message describing the purpose of the tag.
	Message      string          "json:\"message\""
	Tagger       GitTagTagger    "json:\"tagger\""
	Object       GitTagObject    "json:\"object\""
	Verification OptVerification "json:\"verification\""
}

func (*GitTag) gitCreateTagRes() {}
func (*GitTag) gitGetTagRes()    {}

type GitTagObject struct {
	Sha  string  "json:\"sha\""
	Type string  "json:\"type\""
	URL  url.URL "json:\"url\""
}

type GitTagTagger struct {
	Date  string "json:\"date\""
	Email string "json:\"email\""
	Name  string "json:\"name\""
}

// The hierarchy between files in a Git repository.
// Ref: #/components/schemas/git-tree
type GitTree struct {
	Sha       string  "json:\"sha\""
	URL       url.URL "json:\"url\""
	Truncated bool    "json:\"truncated\""
	// Objects specifying a tree structure.
	Tree []GitTreeTreeItem "json:\"tree\""
}

func (*GitTree) gitCreateTreeRes() {}
func (*GitTree) gitGetTreeRes()    {}

type GitTreeTreeItem struct {
	Path OptString "json:\"path\""
	Mode OptString "json:\"mode\""
	Type OptString "json:\"type\""
	Sha  OptString "json:\"sha\""
	Size OptInt    "json:\"size\""
	URL  OptString "json:\"url\""
}

type GitUpdateRefReq struct {
	// The SHA1 value to set this reference to.
	Sha string "json:\"sha\""
	// Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving
	// this out or setting it to `false` will make sure you're not overwriting work.
	Force OptBool "json:\"force\""
}

type GitignoreGetAllTemplatesOKApplicationJSON []string

func (GitignoreGetAllTemplatesOKApplicationJSON) gitignoreGetAllTemplatesRes() {}

// Gitignore Template.
// Ref: #/components/schemas/gitignore-template
type GitignoreTemplate struct {
	Name   string "json:\"name\""
	Source string "json:\"source\""
}

func (*GitignoreTemplate) gitignoreGetTemplateRes() {}

// A unique encryption key.
// Ref: #/components/schemas/gpg-key
type GpgKey struct {
	ID                int                 "json:\"id\""
	PrimaryKeyID      NilInt              "json:\"primary_key_id\""
	KeyID             string              "json:\"key_id\""
	PublicKey         string              "json:\"public_key\""
	Emails            []GpgKeyEmailsItem  "json:\"emails\""
	Subkeys           []GpgKeySubkeysItem "json:\"subkeys\""
	CanSign           bool                "json:\"can_sign\""
	CanEncryptComms   bool                "json:\"can_encrypt_comms\""
	CanEncryptStorage bool                "json:\"can_encrypt_storage\""
	CanCertify        bool                "json:\"can_certify\""
	CreatedAt         time.Time           "json:\"created_at\""
	ExpiresAt         NilDateTime         "json:\"expires_at\""
	RawKey            NilString           "json:\"raw_key\""
}

func (*GpgKey) usersCreateGpgKeyForAuthenticatedRes() {}
func (*GpgKey) usersGetGpgKeyForAuthenticatedRes()    {}

type GpgKeyEmailsItem struct {
	Email    OptString "json:\"email\""
	Verified OptBool   "json:\"verified\""
}

type GpgKeySubkeysItem struct {
	ID                OptInt       "json:\"id\""
	PrimaryKeyID      OptInt       "json:\"primary_key_id\""
	KeyID             OptString    "json:\"key_id\""
	PublicKey         OptString    "json:\"public_key\""
	Emails            []jx.Raw     "json:\"emails\""
	Subkeys           []jx.Raw     "json:\"subkeys\""
	CanSign           OptBool      "json:\"can_sign\""
	CanEncryptComms   OptBool      "json:\"can_encrypt_comms\""
	CanEncryptStorage OptBool      "json:\"can_encrypt_storage\""
	CanCertify        OptBool      "json:\"can_certify\""
	CreatedAt         OptString    "json:\"created_at\""
	ExpiresAt         OptNilString "json:\"expires_at\""
	RawKey            OptNilString "json:\"raw_key\""
}

// External Groups to be mapped to a team for membership.
// Ref: #/components/schemas/group-mapping
type GroupMapping struct {
	// Array of groups to be mapped to this team.
	Groups []GroupMappingGroupsItem "json:\"groups\""
}

func (*GroupMapping) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes() {}
func (*GroupMapping) teamsListIdpGroupsForLegacyRes()                  {}

type GroupMappingGroupsItem struct {
	// The ID of the group.
	GroupID string "json:\"group_id\""
	// The name of the group.
	GroupName string "json:\"group_name\""
	// A description of the group.
	GroupDescription string "json:\"group_description\""
	// Synchronization status for this group mapping.
	Status OptString "json:\"status\""
	// The time of the last sync for this group-mapping.
	SyncedAt OptNilString "json:\"synced_at\""
}

// Webhooks for repositories.
// Ref: #/components/schemas/hook
type Hook struct {
	Type string "json:\"type\""
	// Unique identifier of the webhook.
	ID int "json:\"id\""
	// The name of a valid service, use 'web' for a webhook.
	Name string "json:\"name\""
	// Determines whether the hook is actually triggered on pushes.
	Active bool "json:\"active\""
	// Determines what events the hook is triggered for. Default: ['push'].
	Events        []string     "json:\"events\""
	Config        HookConfig   "json:\"config\""
	UpdatedAt     time.Time    "json:\"updated_at\""
	CreatedAt     time.Time    "json:\"created_at\""
	URL           url.URL      "json:\"url\""
	TestURL       url.URL      "json:\"test_url\""
	PingURL       url.URL      "json:\"ping_url\""
	DeliveriesURL OptURI       "json:\"deliveries_url\""
	LastResponse  HookResponse "json:\"last_response\""
}

func (*Hook) reposCreateWebhookRes() {}
func (*Hook) reposGetWebhookRes()    {}
func (*Hook) reposUpdateWebhookRes() {}

type HookConfig struct {
	Email       OptString                   "json:\"email\""
	Password    OptString                   "json:\"password\""
	Room        OptString                   "json:\"room\""
	Subdomain   OptString                   "json:\"subdomain\""
	URL         OptWebhookConfigURL         "json:\"url\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Digest      OptString                   "json:\"digest\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	Token       OptString                   "json:\"token\""
}

// Delivery made by a webhook.
// Ref: #/components/schemas/hook-delivery
type HookDelivery struct {
	// Unique identifier of the delivery.
	ID int "json:\"id\""
	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to
	// this event).
	GUID string "json:\"guid\""
	// Time when the delivery was delivered.
	DeliveredAt time.Time "json:\"delivered_at\""
	// Whether the delivery is a redelivery.
	Redelivery bool "json:\"redelivery\""
	// Time spent delivering.
	Duration float64 "json:\"duration\""
	// Description of the status of the attempted delivery.
	Status string "json:\"status\""
	// Status code received when delivery was made.
	StatusCode int "json:\"status_code\""
	// The event that triggered the delivery.
	Event string "json:\"event\""
	// The type of activity for the event that triggered the delivery.
	Action NilString "json:\"action\""
	// The id of the GitHub App installation associated with this event.
	InstallationID NilInt "json:\"installation_id\""
	// The id of the repository associated with this event.
	RepositoryID NilInt "json:\"repository_id\""
	// The URL target of the delivery.
	URL      OptString            "json:\"url\""
	Request  HookDeliveryRequest  "json:\"request\""
	Response HookDeliveryResponse "json:\"response\""
}

func (*HookDelivery) appsGetWebhookDeliveryRes()  {}
func (*HookDelivery) orgsGetWebhookDeliveryRes()  {}
func (*HookDelivery) reposGetWebhookDeliveryRes() {}

// Delivery made by a webhook, without request and response information.
// Ref: #/components/schemas/hook-delivery-item
type HookDeliveryItem struct {
	// Unique identifier of the webhook delivery.
	ID int "json:\"id\""
	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to
	// this event).
	GUID string "json:\"guid\""
	// Time when the webhook delivery occurred.
	DeliveredAt time.Time "json:\"delivered_at\""
	// Whether the webhook delivery is a redelivery.
	Redelivery bool "json:\"redelivery\""
	// Time spent delivering.
	Duration float64 "json:\"duration\""
	// Describes the response returned after attempting the delivery.
	Status string "json:\"status\""
	// Status code received when delivery was made.
	StatusCode int "json:\"status_code\""
	// The event that triggered the delivery.
	Event string "json:\"event\""
	// The type of activity for the event that triggered the delivery.
	Action NilString "json:\"action\""
	// The id of the GitHub App installation associated with this event.
	InstallationID NilInt "json:\"installation_id\""
	// The id of the repository associated with this event.
	RepositoryID NilInt "json:\"repository_id\""
}

type HookDeliveryRequest struct {
	// The request headers sent with the webhook delivery.
	Headers NilHookDeliveryRequestHeaders "json:\"headers\""
	// The webhook payload.
	Payload NilHookDeliveryRequestPayload "json:\"payload\""
}

// The request headers sent with the webhook delivery.
type HookDeliveryRequestHeaders map[string]jx.Raw

func (s *HookDeliveryRequestHeaders) init() HookDeliveryRequestHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The webhook payload.
type HookDeliveryRequestPayload map[string]jx.Raw

func (s *HookDeliveryRequestPayload) init() HookDeliveryRequestPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type HookDeliveryResponse struct {
	// The response headers received when the delivery was made.
	Headers NilHookDeliveryResponseHeaders "json:\"headers\""
	// The response payload received.
	Payload NilString "json:\"payload\""
}

// The response headers received when the delivery was made.
type HookDeliveryResponseHeaders map[string]jx.Raw

func (s *HookDeliveryResponseHeaders) init() HookDeliveryResponseHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/hook-response
type HookResponse struct {
	Code    NilInt    "json:\"code\""
	Status  NilString "json:\"status\""
	Message NilString "json:\"message\""
}

// Hovercard.
// Ref: #/components/schemas/hovercard
type Hovercard struct {
	Contexts []HovercardContextsItem "json:\"contexts\""
}

func (*Hovercard) usersGetContextForUserRes() {}

type HovercardContextsItem struct {
	Message string "json:\"message\""
	Octicon string "json:\"octicon\""
}

// A repository import from an external source.
// Ref: #/components/schemas/import
type Import struct {
	Vcs    NilString "json:\"vcs\""
	UseLfs OptBool   "json:\"use_lfs\""
	// The URL of the originating repository.
	VcsURL          string                     "json:\"vcs_url\""
	SvcRoot         OptString                  "json:\"svc_root\""
	TfvcProject     OptString                  "json:\"tfvc_project\""
	Status          ImportStatus               "json:\"status\""
	StatusText      OptNilString               "json:\"status_text\""
	FailedStep      OptNilString               "json:\"failed_step\""
	ErrorMessage    OptNilString               "json:\"error_message\""
	ImportPercent   OptNilInt                  "json:\"import_percent\""
	CommitCount     OptNilInt                  "json:\"commit_count\""
	PushPercent     OptNilInt                  "json:\"push_percent\""
	HasLargeFiles   OptBool                    "json:\"has_large_files\""
	LargeFilesSize  OptInt                     "json:\"large_files_size\""
	LargeFilesCount OptInt                     "json:\"large_files_count\""
	ProjectChoices  []ImportProjectChoicesItem "json:\"project_choices\""
	Message         OptString                  "json:\"message\""
	AuthorsCount    OptNilInt                  "json:\"authors_count\""
	URL             url.URL                    "json:\"url\""
	HTMLURL         url.URL                    "json:\"html_url\""
	AuthorsURL      url.URL                    "json:\"authors_url\""
	RepositoryURL   url.URL                    "json:\"repository_url\""
	SvnRoot         OptString                  "json:\"svn_root\""
}

func (*Import) migrationsGetImportStatusRes()  {}
func (*Import) migrationsSetLfsPreferenceRes() {}
func (*Import) migrationsStartImportRes()      {}

type ImportProjectChoicesItem struct {
	Vcs         OptString "json:\"vcs\""
	TfvcProject OptString "json:\"tfvc_project\""
	HumanName   OptString "json:\"human_name\""
}

type ImportStatus string

const (
	ImportStatusAuth                   ImportStatus = "auth"
	ImportStatusError                  ImportStatus = "error"
	ImportStatusNone                   ImportStatus = "none"
	ImportStatusDetecting              ImportStatus = "detecting"
	ImportStatusChoose                 ImportStatus = "choose"
	ImportStatusAuthFailed             ImportStatus = "auth_failed"
	ImportStatusImporting              ImportStatus = "importing"
	ImportStatusMapping                ImportStatus = "mapping"
	ImportStatusWaitingToPush          ImportStatus = "waiting_to_push"
	ImportStatusPushing                ImportStatus = "pushing"
	ImportStatusComplete               ImportStatus = "complete"
	ImportStatusSetup                  ImportStatus = "setup"
	ImportStatusUnknown                ImportStatus = "unknown"
	ImportStatusDetectionFoundMultiple ImportStatus = "detection_found_multiple"
	ImportStatusDetectionFoundNothing  ImportStatus = "detection_found_nothing"
	ImportStatusDetectionNeedsAuth     ImportStatus = "detection_needs_auth"
)

// Authentication token for a GitHub App installed on a user or org.
// Ref: #/components/schemas/installation-token
type InstallationToken struct {
	Token                  string                                  "json:\"token\""
	ExpiresAt              string                                  "json:\"expires_at\""
	Permissions            OptAppPermissions                       "json:\"permissions\""
	RepositorySelection    OptInstallationTokenRepositorySelection "json:\"repository_selection\""
	Repositories           []Repository                            "json:\"repositories\""
	SingleFile             OptString                               "json:\"single_file\""
	HasMultipleSingleFiles OptBool                                 "json:\"has_multiple_single_files\""
	SingleFilePaths        []string                                "json:\"single_file_paths\""
}

func (*InstallationToken) appsCreateInstallationAccessTokenRes() {}

type InstallationTokenRepositorySelection string

const (
	InstallationTokenRepositorySelectionAll      InstallationTokenRepositorySelection = "all"
	InstallationTokenRepositorySelectionSelected InstallationTokenRepositorySelection = "selected"
)

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and
// user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
// Ref: #/components/schemas/integration
type Integration struct {
	// Unique identifier of the GitHub app.
	ID int "json:\"id\""
	// The slug name of the GitHub app.
	Slug   OptString             "json:\"slug\""
	NodeID string                "json:\"node_id\""
	Owner  NilNullableSimpleUser "json:\"owner\""
	// The name of the GitHub app.
	Name        string    "json:\"name\""
	Description NilString "json:\"description\""
	ExternalURL url.URL   "json:\"external_url\""
	HTMLURL     url.URL   "json:\"html_url\""
	CreatedAt   time.Time "json:\"created_at\""
	UpdatedAt   time.Time "json:\"updated_at\""
	// The set of permissions for the GitHub app.
	Permissions IntegrationPermissions "json:\"permissions\""
	// The list of events for the GitHub app.
	Events []string "json:\"events\""
	// The number of installations associated with the GitHub app.
	InstallationsCount OptInt       "json:\"installations_count\""
	ClientID           OptString    "json:\"client_id\""
	ClientSecret       OptString    "json:\"client_secret\""
	WebhookSecret      OptNilString "json:\"webhook_secret\""
	Pem                OptString    "json:\"pem\""
}

func (*Integration) appsGetBySlugRes() {}

// The set of permissions for the GitHub app.
type IntegrationPermissions struct {
	Issues          OptString "json:\"issues\""
	Checks          OptString "json:\"checks\""
	Metadata        OptString "json:\"metadata\""
	Contents        OptString "json:\"contents\""
	Deployments     OptString "json:\"deployments\""
	AdditionalProps IntegrationPermissionsAdditional
}

type IntegrationPermissionsAdditional map[string]string

func (s *IntegrationPermissionsAdditional) init() IntegrationPermissionsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`,
// `one_month`, `six_months`. Default: `one_day`.
// Ref: #/components/schemas/interaction-expiry
type InteractionExpiry string

const (
	InteractionExpiryOneDay    InteractionExpiry = "one_day"
	InteractionExpiryThreeDays InteractionExpiry = "three_days"
	InteractionExpiryOneWeek   InteractionExpiry = "one_week"
	InteractionExpiryOneMonth  InteractionExpiry = "one_month"
	InteractionExpirySixMonths InteractionExpiry = "six_months"
)

// The type of GitHub user that can comment, open issues, or create pull requests while the
// interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`,
// `collaborators_only`.
// Ref: #/components/schemas/interaction-group
type InteractionGroup string

const (
	InteractionGroupExistingUsers     InteractionGroup = "existing_users"
	InteractionGroupContributorsOnly  InteractionGroup = "contributors_only"
	InteractionGroupCollaboratorsOnly InteractionGroup = "collaborators_only"
)

// Limit interactions to a specific type of user for a specified duration.
// Ref: #/components/schemas/interaction-limit
type InteractionLimit struct {
	Limit  InteractionGroup     "json:\"limit\""
	Expiry OptInteractionExpiry "json:\"expiry\""
}

// Interaction limit settings.
// Ref: #/components/schemas/interaction-limit-response
type InteractionLimitResponse struct {
	Limit     InteractionGroup "json:\"limit\""
	Origin    string           "json:\"origin\""
	ExpiresAt time.Time        "json:\"expires_at\""
}

func (*InteractionLimitResponse) interactionsSetRestrictionsForAuthenticatedUserRes() {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForOrgRes()               {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForRepoRes()              {}

// InteractionsRemoveRestrictionsForAuthenticatedUserNoContent is response for InteractionsRemoveRestrictionsForAuthenticatedUser operation.
type InteractionsRemoveRestrictionsForAuthenticatedUserNoContent struct{}

// InteractionsRemoveRestrictionsForOrgNoContent is response for InteractionsRemoveRestrictionsForOrg operation.
type InteractionsRemoveRestrictionsForOrgNoContent struct{}

// InteractionsRemoveRestrictionsForRepoConflict is response for InteractionsRemoveRestrictionsForRepo operation.
type InteractionsRemoveRestrictionsForRepoConflict struct{}

func (*InteractionsRemoveRestrictionsForRepoConflict) interactionsRemoveRestrictionsForRepoRes() {}

// InteractionsRemoveRestrictionsForRepoNoContent is response for InteractionsRemoveRestrictionsForRepo operation.
type InteractionsRemoveRestrictionsForRepoNoContent struct{}

func (*InteractionsRemoveRestrictionsForRepoNoContent) interactionsRemoveRestrictionsForRepoRes() {}

// InteractionsSetRestrictionsForRepoConflict is response for InteractionsSetRestrictionsForRepo operation.
type InteractionsSetRestrictionsForRepoConflict struct{}

func (*InteractionsSetRestrictionsForRepoConflict) interactionsSetRestrictionsForRepoRes() {}

// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
// Ref: #/components/schemas/issue
type Issue struct {
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the issue.
	URL           url.URL "json:\"url\""
	RepositoryURL url.URL "json:\"repository_url\""
	LabelsURL     string  "json:\"labels_url\""
	CommentsURL   url.URL "json:\"comments_url\""
	EventsURL     url.URL "json:\"events_url\""
	HTMLURL       url.URL "json:\"html_url\""
	// Number uniquely identifying the issue within its repository.
	Number int "json:\"number\""
	// State of the issue; either 'open' or 'closed'.
	State string "json:\"state\""
	// Title of the issue.
	Title string "json:\"title\""
	// Contents of the issue.
	Body OptNilString          "json:\"body\""
	User NilNullableSimpleUser "json:\"user\""
	// Labels to associate with this issue; pass one or more label names to replace the set of labels on
	// this issue; send an empty array to clear all labels from the issue; note that the labels are
	// silently dropped for users without push access to the repository.
	Labels                []IssueLabelsItem         "json:\"labels\""
	Assignee              NilNullableSimpleUser     "json:\"assignee\""
	Assignees             OptNilSimpleUserArray     "json:\"assignees\""
	Milestone             NilNullableMilestone      "json:\"milestone\""
	Locked                bool                      "json:\"locked\""
	ActiveLockReason      OptNilString              "json:\"active_lock_reason\""
	Comments              int                       "json:\"comments\""
	PullRequest           OptIssuePullRequest       "json:\"pull_request\""
	ClosedAt              NilDateTime               "json:\"closed_at\""
	CreatedAt             time.Time                 "json:\"created_at\""
	UpdatedAt             time.Time                 "json:\"updated_at\""
	ClosedBy              OptNilNullableSimpleUser  "json:\"closed_by\""
	BodyHTML              OptString                 "json:\"body_html\""
	BodyText              OptString                 "json:\"body_text\""
	TimelineURL           OptURI                    "json:\"timeline_url\""
	Repository            OptRepository             "json:\"repository\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
	AuthorAssociation     AuthorAssociation         "json:\"author_association\""
	Reactions             OptReactionRollup         "json:\"reactions\""
}

func (*Issue) issuesCreateRes() {}
func (*Issue) issuesGetRes()    {}
func (*Issue) issuesUpdateRes() {}

// Comments provide a way for people to collaborate on an issue.
// Ref: #/components/schemas/issue-comment
type IssueComment struct {
	// Unique identifier of the issue comment.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the issue comment.
	URL url.URL "json:\"url\""
	// Contents of the issue comment.
	Body                  OptString                 "json:\"body\""
	BodyText              OptString                 "json:\"body_text\""
	BodyHTML              OptString                 "json:\"body_html\""
	HTMLURL               url.URL                   "json:\"html_url\""
	User                  NilNullableSimpleUser     "json:\"user\""
	CreatedAt             time.Time                 "json:\"created_at\""
	UpdatedAt             time.Time                 "json:\"updated_at\""
	IssueURL              url.URL                   "json:\"issue_url\""
	AuthorAssociation     AuthorAssociation         "json:\"author_association\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
	Reactions             OptReactionRollup         "json:\"reactions\""
}

func (*IssueComment) issuesCreateCommentRes() {}
func (*IssueComment) issuesGetCommentRes()    {}
func (*IssueComment) issuesUpdateCommentRes() {}

// Issue Event.
// Ref: #/components/schemas/issue-event
type IssueEvent struct {
	ID                    int                          "json:\"id\""
	NodeID                string                       "json:\"node_id\""
	URL                   url.URL                      "json:\"url\""
	Actor                 NilNullableSimpleUser        "json:\"actor\""
	Event                 string                       "json:\"event\""
	CommitID              NilString                    "json:\"commit_id\""
	CommitURL             NilString                    "json:\"commit_url\""
	CreatedAt             time.Time                    "json:\"created_at\""
	Issue                 OptIssueSimple               "json:\"issue\""
	Label                 OptIssueEventLabel           "json:\"label\""
	Assignee              OptNilNullableSimpleUser     "json:\"assignee\""
	Assigner              OptNilNullableSimpleUser     "json:\"assigner\""
	ReviewRequester       OptNilNullableSimpleUser     "json:\"review_requester\""
	RequestedReviewer     OptNilNullableSimpleUser     "json:\"requested_reviewer\""
	RequestedTeam         OptTeam                      "json:\"requested_team\""
	DismissedReview       OptIssueEventDismissedReview "json:\"dismissed_review\""
	Milestone             OptIssueEventMilestone       "json:\"milestone\""
	ProjectCard           OptIssueEventProjectCard     "json:\"project_card\""
	Rename                OptIssueEventRename          "json:\"rename\""
	AuthorAssociation     OptAuthorAssociation         "json:\"author_association\""
	LockReason            OptNilString                 "json:\"lock_reason\""
	PerformedViaGithubApp OptNilNullableIntegration    "json:\"performed_via_github_app\""
}

func (*IssueEvent) issuesGetEventRes() {}

// Ref: #/components/schemas/issue-event-dismissed-review
type IssueEventDismissedReview struct {
	State             string       "json:\"state\""
	ReviewID          int          "json:\"review_id\""
	DismissalMessage  NilString    "json:\"dismissal_message\""
	DismissalCommitID OptNilString "json:\"dismissal_commit_id\""
}

// Issue Event Label.
// Ref: #/components/schemas/issue-event-label
type IssueEventLabel struct {
	Name  NilString "json:\"name\""
	Color NilString "json:\"color\""
}

// Issue Event Milestone.
// Ref: #/components/schemas/issue-event-milestone
type IssueEventMilestone struct {
	Title string "json:\"title\""
}

// Issue Event Project Card.
// Ref: #/components/schemas/issue-event-project-card
type IssueEventProjectCard struct {
	URL                url.URL   "json:\"url\""
	ID                 int       "json:\"id\""
	ProjectURL         url.URL   "json:\"project_url\""
	ProjectID          int       "json:\"project_id\""
	ColumnName         string    "json:\"column_name\""
	PreviousColumnName OptString "json:\"previous_column_name\""
}

// Issue Event Rename.
// Ref: #/components/schemas/issue-event-rename
type IssueEventRename struct {
	From string "json:\"from\""
	To   string "json:\"to\""
}

// IssueLabelsItem represents sum type.
type IssueLabelsItem struct {
	Type             IssueLabelsItemType // switch on this field
	String           string
	IssueLabelsItem1 IssueLabelsItem1
}

// IssueLabelsItemType is oneOf type of IssueLabelsItem.
type IssueLabelsItemType string

// Possible values for IssueLabelsItemType.
const (
	StringIssueLabelsItem           IssueLabelsItemType = "string"
	IssueLabelsItem1IssueLabelsItem IssueLabelsItemType = "IssueLabelsItem1"
)

// IsString reports whether IssueLabelsItem is string.
func (s IssueLabelsItem) IsString() bool { return s.Type == StringIssueLabelsItem }

// IsIssueLabelsItem1 reports whether IssueLabelsItem is IssueLabelsItem1.
func (s IssueLabelsItem) IsIssueLabelsItem1() bool { return s.Type == IssueLabelsItem1IssueLabelsItem }

// SetString sets IssueLabelsItem to string.
func (s *IssueLabelsItem) SetString(v string) {
	s.Type = StringIssueLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssueLabelsItem is string.
func (s IssueLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssueLabelsItem returns new IssueLabelsItem from string.
func NewStringIssueLabelsItem(v string) IssueLabelsItem {
	var s IssueLabelsItem
	s.SetString(v)
	return s
}

// SetIssueLabelsItem1 sets IssueLabelsItem to IssueLabelsItem1.
func (s *IssueLabelsItem) SetIssueLabelsItem1(v IssueLabelsItem1) {
	s.Type = IssueLabelsItem1IssueLabelsItem
	s.IssueLabelsItem1 = v
}

// GetIssueLabelsItem1 returns IssueLabelsItem1 and true boolean if IssueLabelsItem is IssueLabelsItem1.
func (s IssueLabelsItem) GetIssueLabelsItem1() (v IssueLabelsItem1, ok bool) {
	if !s.IsIssueLabelsItem1() {
		return v, false
	}
	return s.IssueLabelsItem1, true
}

// NewIssueLabelsItem1IssueLabelsItem returns new IssueLabelsItem from IssueLabelsItem1.
func NewIssueLabelsItem1IssueLabelsItem(v IssueLabelsItem1) IssueLabelsItem {
	var s IssueLabelsItem
	s.SetIssueLabelsItem1(v)
	return s
}

type IssueLabelsItem1 struct {
	ID          OptInt64     "json:\"id\""
	NodeID      OptString    "json:\"node_id\""
	URL         OptURI       "json:\"url\""
	Name        OptString    "json:\"name\""
	Description OptNilString "json:\"description\""
	Color       OptNilString "json:\"color\""
	Default     OptBool      "json:\"default\""
}

type IssuePullRequest struct {
	MergedAt OptNilDateTime "json:\"merged_at\""
	DiffURL  NilURI         "json:\"diff_url\""
	HTMLURL  NilURI         "json:\"html_url\""
	PatchURL NilURI         "json:\"patch_url\""
	URL      NilURI         "json:\"url\""
}

// Issue Search Result Item.
// Ref: #/components/schemas/issue-search-result-item
type IssueSearchResultItem struct {
	URL                   url.URL                             "json:\"url\""
	RepositoryURL         url.URL                             "json:\"repository_url\""
	LabelsURL             string                              "json:\"labels_url\""
	CommentsURL           url.URL                             "json:\"comments_url\""
	EventsURL             url.URL                             "json:\"events_url\""
	HTMLURL               url.URL                             "json:\"html_url\""
	ID                    int                                 "json:\"id\""
	NodeID                string                              "json:\"node_id\""
	Number                int                                 "json:\"number\""
	Title                 string                              "json:\"title\""
	Locked                bool                                "json:\"locked\""
	ActiveLockReason      OptNilString                        "json:\"active_lock_reason\""
	Assignees             OptNilSimpleUserArray               "json:\"assignees\""
	User                  NilNullableSimpleUser               "json:\"user\""
	Labels                []IssueSearchResultItemLabelsItem   "json:\"labels\""
	State                 string                              "json:\"state\""
	Assignee              NilNullableSimpleUser               "json:\"assignee\""
	Milestone             NilNullableMilestone                "json:\"milestone\""
	Comments              int                                 "json:\"comments\""
	CreatedAt             time.Time                           "json:\"created_at\""
	UpdatedAt             time.Time                           "json:\"updated_at\""
	ClosedAt              NilDateTime                         "json:\"closed_at\""
	TextMatches           *SearchResultTextMatches            "json:\"text_matches\""
	PullRequest           OptIssueSearchResultItemPullRequest "json:\"pull_request\""
	Body                  OptString                           "json:\"body\""
	Score                 float64                             "json:\"score\""
	AuthorAssociation     AuthorAssociation                   "json:\"author_association\""
	Draft                 OptBool                             "json:\"draft\""
	Repository            OptRepository                       "json:\"repository\""
	BodyHTML              OptString                           "json:\"body_html\""
	BodyText              OptString                           "json:\"body_text\""
	TimelineURL           OptURI                              "json:\"timeline_url\""
	PerformedViaGithubApp OptNilNullableIntegration           "json:\"performed_via_github_app\""
}

type IssueSearchResultItemLabelsItem struct {
	ID          OptInt64     "json:\"id\""
	NodeID      OptString    "json:\"node_id\""
	URL         OptString    "json:\"url\""
	Name        OptString    "json:\"name\""
	Color       OptString    "json:\"color\""
	Default     OptBool      "json:\"default\""
	Description OptNilString "json:\"description\""
}

type IssueSearchResultItemPullRequest struct {
	MergedAt OptNilDateTime "json:\"merged_at\""
	DiffURL  NilURI         "json:\"diff_url\""
	HTMLURL  NilURI         "json:\"html_url\""
	PatchURL NilURI         "json:\"patch_url\""
	URL      NilURI         "json:\"url\""
}

// Issue Simple.
// Ref: #/components/schemas/issue-simple
type IssueSimple struct {
	ID                    int                       "json:\"id\""
	NodeID                string                    "json:\"node_id\""
	URL                   url.URL                   "json:\"url\""
	RepositoryURL         url.URL                   "json:\"repository_url\""
	LabelsURL             string                    "json:\"labels_url\""
	CommentsURL           url.URL                   "json:\"comments_url\""
	EventsURL             url.URL                   "json:\"events_url\""
	HTMLURL               url.URL                   "json:\"html_url\""
	Number                int                       "json:\"number\""
	State                 string                    "json:\"state\""
	Title                 string                    "json:\"title\""
	Body                  OptString                 "json:\"body\""
	User                  NilNullableSimpleUser     "json:\"user\""
	Labels                []Label                   "json:\"labels\""
	Assignee              NilNullableSimpleUser     "json:\"assignee\""
	Assignees             OptNilSimpleUserArray     "json:\"assignees\""
	Milestone             NilNullableMilestone      "json:\"milestone\""
	Locked                bool                      "json:\"locked\""
	ActiveLockReason      OptNilString              "json:\"active_lock_reason\""
	Comments              int                       "json:\"comments\""
	PullRequest           OptIssueSimplePullRequest "json:\"pull_request\""
	ClosedAt              NilDateTime               "json:\"closed_at\""
	CreatedAt             time.Time                 "json:\"created_at\""
	UpdatedAt             time.Time                 "json:\"updated_at\""
	AuthorAssociation     AuthorAssociation         "json:\"author_association\""
	BodyHTML              OptString                 "json:\"body_html\""
	BodyText              OptString                 "json:\"body_text\""
	TimelineURL           OptURI                    "json:\"timeline_url\""
	Repository            OptRepository             "json:\"repository\""
	PerformedViaGithubApp OptNilNullableIntegration "json:\"performed_via_github_app\""
}

type IssueSimplePullRequest struct {
	MergedAt OptNilDateTime "json:\"merged_at\""
	DiffURL  NilURI         "json:\"diff_url\""
	HTMLURL  NilURI         "json:\"html_url\""
	PatchURL NilURI         "json:\"patch_url\""
	URL      NilURI         "json:\"url\""
}

type IssuesAddAssigneesReq struct {
	// Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees
	// to an issue. Assignees are silently ignored otherwise._.
	Assignees []string "json:\"assignees\""
}

// IssuesCheckUserCanBeAssignedNoContent is response for IssuesCheckUserCanBeAssigned operation.
type IssuesCheckUserCanBeAssignedNoContent struct{}

func (*IssuesCheckUserCanBeAssignedNoContent) issuesCheckUserCanBeAssignedRes() {}

type IssuesCreateApplicationJSONForbidden BasicError

func (*IssuesCreateApplicationJSONForbidden) issuesCreateRes() {}

type IssuesCreateApplicationJSONGone BasicError

func (*IssuesCreateApplicationJSONGone) issuesCreateRes() {}

type IssuesCreateApplicationJSONNotFound BasicError

func (*IssuesCreateApplicationJSONNotFound) issuesCreateRes() {}

type IssuesCreateCommentApplicationJSONForbidden BasicError

func (*IssuesCreateCommentApplicationJSONForbidden) issuesCreateCommentRes() {}

type IssuesCreateCommentApplicationJSONGone BasicError

func (*IssuesCreateCommentApplicationJSONGone) issuesCreateCommentRes() {}

type IssuesCreateCommentApplicationJSONNotFound BasicError

func (*IssuesCreateCommentApplicationJSONNotFound) issuesCreateCommentRes() {}

type IssuesCreateCommentReq struct {
	// The contents of the comment.
	Body string "json:\"body\""
}

type IssuesCreateLabelReq struct {
	// The name of the label. Emoji can be added to label names, using either native emoji or colon-style
	// markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.
	// githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of
	// available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).
	// ".
	Name string "json:\"name\""
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color OptString "json:\"color\""
	// A short description of the label.
	Description OptString "json:\"description\""
}

type IssuesCreateMilestoneReq struct {
	// The title of the milestone.
	Title string "json:\"title\""
	// The state of the milestone. Either `open` or `closed`.
	State OptIssuesCreateMilestoneReqState "json:\"state\""
	// A description of the milestone.
	Description OptString "json:\"description\""
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn OptDateTime "json:\"due_on\""
}

// The state of the milestone. Either `open` or `closed`.
type IssuesCreateMilestoneReqState string

const (
	IssuesCreateMilestoneReqStateOpen   IssuesCreateMilestoneReqState = "open"
	IssuesCreateMilestoneReqStateClosed IssuesCreateMilestoneReqState = "closed"
)

type IssuesCreateReq struct {
	// The title of the issue.
	Title IssuesCreateReqTitle "json:\"title\""
	// The contents of the issue.
	Body OptString "json:\"body\""
	// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can
	// set the assignee for new issues. The assignee is silently dropped otherwise. **This field is
	// deprecated.**_.
	Assignee  OptNilString                   "json:\"assignee\""
	Milestone OptNilIssuesCreateReqMilestone "json:\"milestone\""
	// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new
	// issues. Labels are silently dropped otherwise._.
	Labels []IssuesCreateReqLabelsItem "json:\"labels\""
	// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for
	// new issues. Assignees are silently dropped otherwise._.
	Assignees []string "json:\"assignees\""
}

// IssuesCreateReqLabelsItem represents sum type.
type IssuesCreateReqLabelsItem struct {
	Type                       IssuesCreateReqLabelsItemType // switch on this field
	String                     string
	IssuesCreateReqLabelsItem1 IssuesCreateReqLabelsItem1
}

// IssuesCreateReqLabelsItemType is oneOf type of IssuesCreateReqLabelsItem.
type IssuesCreateReqLabelsItemType string

// Possible values for IssuesCreateReqLabelsItemType.
const (
	StringIssuesCreateReqLabelsItem                     IssuesCreateReqLabelsItemType = "string"
	IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem IssuesCreateReqLabelsItemType = "IssuesCreateReqLabelsItem1"
)

// IsString reports whether IssuesCreateReqLabelsItem is string.
func (s IssuesCreateReqLabelsItem) IsString() bool { return s.Type == StringIssuesCreateReqLabelsItem }

// IsIssuesCreateReqLabelsItem1 reports whether IssuesCreateReqLabelsItem is IssuesCreateReqLabelsItem1.
func (s IssuesCreateReqLabelsItem) IsIssuesCreateReqLabelsItem1() bool {
	return s.Type == IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem
}

// SetString sets IssuesCreateReqLabelsItem to string.
func (s *IssuesCreateReqLabelsItem) SetString(v string) {
	s.Type = StringIssuesCreateReqLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqLabelsItem is string.
func (s IssuesCreateReqLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqLabelsItem returns new IssuesCreateReqLabelsItem from string.
func NewStringIssuesCreateReqLabelsItem(v string) IssuesCreateReqLabelsItem {
	var s IssuesCreateReqLabelsItem
	s.SetString(v)
	return s
}

// SetIssuesCreateReqLabelsItem1 sets IssuesCreateReqLabelsItem to IssuesCreateReqLabelsItem1.
func (s *IssuesCreateReqLabelsItem) SetIssuesCreateReqLabelsItem1(v IssuesCreateReqLabelsItem1) {
	s.Type = IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem
	s.IssuesCreateReqLabelsItem1 = v
}

// GetIssuesCreateReqLabelsItem1 returns IssuesCreateReqLabelsItem1 and true boolean if IssuesCreateReqLabelsItem is IssuesCreateReqLabelsItem1.
func (s IssuesCreateReqLabelsItem) GetIssuesCreateReqLabelsItem1() (v IssuesCreateReqLabelsItem1, ok bool) {
	if !s.IsIssuesCreateReqLabelsItem1() {
		return v, false
	}
	return s.IssuesCreateReqLabelsItem1, true
}

// NewIssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem returns new IssuesCreateReqLabelsItem from IssuesCreateReqLabelsItem1.
func NewIssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem(v IssuesCreateReqLabelsItem1) IssuesCreateReqLabelsItem {
	var s IssuesCreateReqLabelsItem
	s.SetIssuesCreateReqLabelsItem1(v)
	return s
}

type IssuesCreateReqLabelsItem1 struct {
	ID          OptInt       "json:\"id\""
	Name        OptString    "json:\"name\""
	Description OptNilString "json:\"description\""
	Color       OptNilString "json:\"color\""
}

// IssuesCreateReqMilestone represents sum type.
type IssuesCreateReqMilestone struct {
	Type   IssuesCreateReqMilestoneType // switch on this field
	String string
	Int    int
}

// IssuesCreateReqMilestoneType is oneOf type of IssuesCreateReqMilestone.
type IssuesCreateReqMilestoneType string

// Possible values for IssuesCreateReqMilestoneType.
const (
	StringIssuesCreateReqMilestone IssuesCreateReqMilestoneType = "string"
	IntIssuesCreateReqMilestone    IssuesCreateReqMilestoneType = "int"
)

// IsString reports whether IssuesCreateReqMilestone is string.
func (s IssuesCreateReqMilestone) IsString() bool { return s.Type == StringIssuesCreateReqMilestone }

// IsInt reports whether IssuesCreateReqMilestone is int.
func (s IssuesCreateReqMilestone) IsInt() bool { return s.Type == IntIssuesCreateReqMilestone }

// SetString sets IssuesCreateReqMilestone to string.
func (s *IssuesCreateReqMilestone) SetString(v string) {
	s.Type = StringIssuesCreateReqMilestone
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqMilestone is string.
func (s IssuesCreateReqMilestone) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqMilestone returns new IssuesCreateReqMilestone from string.
func NewStringIssuesCreateReqMilestone(v string) IssuesCreateReqMilestone {
	var s IssuesCreateReqMilestone
	s.SetString(v)
	return s
}

// SetInt sets IssuesCreateReqMilestone to int.
func (s *IssuesCreateReqMilestone) SetInt(v int) {
	s.Type = IntIssuesCreateReqMilestone
	s.Int = v
}

// GetInt returns int and true boolean if IssuesCreateReqMilestone is int.
func (s IssuesCreateReqMilestone) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesCreateReqMilestone returns new IssuesCreateReqMilestone from int.
func NewIntIssuesCreateReqMilestone(v int) IssuesCreateReqMilestone {
	var s IssuesCreateReqMilestone
	s.SetInt(v)
	return s
}

// The title of the issue.
// IssuesCreateReqTitle represents sum type.
type IssuesCreateReqTitle struct {
	Type   IssuesCreateReqTitleType // switch on this field
	String string
	Int    int
}

// IssuesCreateReqTitleType is oneOf type of IssuesCreateReqTitle.
type IssuesCreateReqTitleType string

// Possible values for IssuesCreateReqTitleType.
const (
	StringIssuesCreateReqTitle IssuesCreateReqTitleType = "string"
	IntIssuesCreateReqTitle    IssuesCreateReqTitleType = "int"
)

// IsString reports whether IssuesCreateReqTitle is string.
func (s IssuesCreateReqTitle) IsString() bool { return s.Type == StringIssuesCreateReqTitle }

// IsInt reports whether IssuesCreateReqTitle is int.
func (s IssuesCreateReqTitle) IsInt() bool { return s.Type == IntIssuesCreateReqTitle }

// SetString sets IssuesCreateReqTitle to string.
func (s *IssuesCreateReqTitle) SetString(v string) {
	s.Type = StringIssuesCreateReqTitle
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqTitle is string.
func (s IssuesCreateReqTitle) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqTitle returns new IssuesCreateReqTitle from string.
func NewStringIssuesCreateReqTitle(v string) IssuesCreateReqTitle {
	var s IssuesCreateReqTitle
	s.SetString(v)
	return s
}

// SetInt sets IssuesCreateReqTitle to int.
func (s *IssuesCreateReqTitle) SetInt(v int) {
	s.Type = IntIssuesCreateReqTitle
	s.Int = v
}

// GetInt returns int and true boolean if IssuesCreateReqTitle is int.
func (s IssuesCreateReqTitle) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesCreateReqTitle returns new IssuesCreateReqTitle from int.
func NewIntIssuesCreateReqTitle(v int) IssuesCreateReqTitle {
	var s IssuesCreateReqTitle
	s.SetInt(v)
	return s
}

// IssuesDeleteCommentNoContent is response for IssuesDeleteComment operation.
type IssuesDeleteCommentNoContent struct{}

// IssuesDeleteLabelNoContent is response for IssuesDeleteLabel operation.
type IssuesDeleteLabelNoContent struct{}

// IssuesDeleteMilestoneNoContent is response for IssuesDeleteMilestone operation.
type IssuesDeleteMilestoneNoContent struct{}

func (*IssuesDeleteMilestoneNoContent) issuesDeleteMilestoneRes() {}

type IssuesGetApplicationJSONGone BasicError

func (*IssuesGetApplicationJSONGone) issuesGetRes() {}

type IssuesGetApplicationJSONMovedPermanently BasicError

func (*IssuesGetApplicationJSONMovedPermanently) issuesGetRes() {}

type IssuesGetApplicationJSONNotFound BasicError

func (*IssuesGetApplicationJSONNotFound) issuesGetRes() {}

type IssuesGetEventApplicationJSONForbidden BasicError

func (*IssuesGetEventApplicationJSONForbidden) issuesGetEventRes() {}

type IssuesGetEventApplicationJSONGone BasicError

func (*IssuesGetEventApplicationJSONGone) issuesGetEventRes() {}

type IssuesGetEventApplicationJSONNotFound BasicError

func (*IssuesGetEventApplicationJSONNotFound) issuesGetEventRes() {}

type IssuesListAssigneesOKApplicationJSON []SimpleUser

func (IssuesListAssigneesOKApplicationJSON) issuesListAssigneesRes() {}

type IssuesListCommentsApplicationJSONGone BasicError

func (*IssuesListCommentsApplicationJSONGone) issuesListCommentsRes() {}

type IssuesListCommentsApplicationJSONNotFound BasicError

func (*IssuesListCommentsApplicationJSONNotFound) issuesListCommentsRes() {}

type IssuesListCommentsForRepoDirection string

const (
	IssuesListCommentsForRepoDirectionAsc  IssuesListCommentsForRepoDirection = "asc"
	IssuesListCommentsForRepoDirectionDesc IssuesListCommentsForRepoDirection = "desc"
)

type IssuesListCommentsForRepoOKApplicationJSON []IssueComment

func (IssuesListCommentsForRepoOKApplicationJSON) issuesListCommentsForRepoRes() {}

type IssuesListCommentsForRepoSort string

const (
	IssuesListCommentsForRepoSortCreated IssuesListCommentsForRepoSort = "created"
	IssuesListCommentsForRepoSortUpdated IssuesListCommentsForRepoSort = "updated"
)

type IssuesListCommentsOKApplicationJSON []IssueComment

func (IssuesListCommentsOKApplicationJSON) issuesListCommentsRes() {}

type IssuesListDirection string

const (
	IssuesListDirectionAsc  IssuesListDirection = "asc"
	IssuesListDirectionDesc IssuesListDirection = "desc"
)

type IssuesListEventsForRepoOKApplicationJSON []IssueEvent

func (IssuesListEventsForRepoOKApplicationJSON) issuesListEventsForRepoRes() {}

type IssuesListFilter string

const (
	IssuesListFilterAssigned   IssuesListFilter = "assigned"
	IssuesListFilterCreated    IssuesListFilter = "created"
	IssuesListFilterMentioned  IssuesListFilter = "mentioned"
	IssuesListFilterSubscribed IssuesListFilter = "subscribed"
	IssuesListFilterRepos      IssuesListFilter = "repos"
	IssuesListFilterAll        IssuesListFilter = "all"
)

type IssuesListForAuthenticatedUserDirection string

const (
	IssuesListForAuthenticatedUserDirectionAsc  IssuesListForAuthenticatedUserDirection = "asc"
	IssuesListForAuthenticatedUserDirectionDesc IssuesListForAuthenticatedUserDirection = "desc"
)

type IssuesListForAuthenticatedUserFilter string

const (
	IssuesListForAuthenticatedUserFilterAssigned   IssuesListForAuthenticatedUserFilter = "assigned"
	IssuesListForAuthenticatedUserFilterCreated    IssuesListForAuthenticatedUserFilter = "created"
	IssuesListForAuthenticatedUserFilterMentioned  IssuesListForAuthenticatedUserFilter = "mentioned"
	IssuesListForAuthenticatedUserFilterSubscribed IssuesListForAuthenticatedUserFilter = "subscribed"
	IssuesListForAuthenticatedUserFilterRepos      IssuesListForAuthenticatedUserFilter = "repos"
	IssuesListForAuthenticatedUserFilterAll        IssuesListForAuthenticatedUserFilter = "all"
)

type IssuesListForAuthenticatedUserOKApplicationJSON []Issue

func (IssuesListForAuthenticatedUserOKApplicationJSON) issuesListForAuthenticatedUserRes() {}

type IssuesListForAuthenticatedUserSort string

const (
	IssuesListForAuthenticatedUserSortCreated  IssuesListForAuthenticatedUserSort = "created"
	IssuesListForAuthenticatedUserSortUpdated  IssuesListForAuthenticatedUserSort = "updated"
	IssuesListForAuthenticatedUserSortComments IssuesListForAuthenticatedUserSort = "comments"
)

type IssuesListForAuthenticatedUserState string

const (
	IssuesListForAuthenticatedUserStateOpen   IssuesListForAuthenticatedUserState = "open"
	IssuesListForAuthenticatedUserStateClosed IssuesListForAuthenticatedUserState = "closed"
	IssuesListForAuthenticatedUserStateAll    IssuesListForAuthenticatedUserState = "all"
)

type IssuesListForOrgDirection string

const (
	IssuesListForOrgDirectionAsc  IssuesListForOrgDirection = "asc"
	IssuesListForOrgDirectionDesc IssuesListForOrgDirection = "desc"
)

type IssuesListForOrgFilter string

const (
	IssuesListForOrgFilterAssigned   IssuesListForOrgFilter = "assigned"
	IssuesListForOrgFilterCreated    IssuesListForOrgFilter = "created"
	IssuesListForOrgFilterMentioned  IssuesListForOrgFilter = "mentioned"
	IssuesListForOrgFilterSubscribed IssuesListForOrgFilter = "subscribed"
	IssuesListForOrgFilterRepos      IssuesListForOrgFilter = "repos"
	IssuesListForOrgFilterAll        IssuesListForOrgFilter = "all"
)

type IssuesListForOrgOKApplicationJSON []Issue

func (IssuesListForOrgOKApplicationJSON) issuesListForOrgRes() {}

type IssuesListForOrgSort string

const (
	IssuesListForOrgSortCreated  IssuesListForOrgSort = "created"
	IssuesListForOrgSortUpdated  IssuesListForOrgSort = "updated"
	IssuesListForOrgSortComments IssuesListForOrgSort = "comments"
)

type IssuesListForOrgState string

const (
	IssuesListForOrgStateOpen   IssuesListForOrgState = "open"
	IssuesListForOrgStateClosed IssuesListForOrgState = "closed"
	IssuesListForOrgStateAll    IssuesListForOrgState = "all"
)

type IssuesListForRepoApplicationJSONMovedPermanently BasicError

func (*IssuesListForRepoApplicationJSONMovedPermanently) issuesListForRepoRes() {}

type IssuesListForRepoApplicationJSONNotFound BasicError

func (*IssuesListForRepoApplicationJSONNotFound) issuesListForRepoRes() {}

type IssuesListForRepoDirection string

const (
	IssuesListForRepoDirectionAsc  IssuesListForRepoDirection = "asc"
	IssuesListForRepoDirectionDesc IssuesListForRepoDirection = "desc"
)

type IssuesListForRepoOKApplicationJSON []IssueSimple

func (IssuesListForRepoOKApplicationJSON) issuesListForRepoRes() {}

type IssuesListForRepoSort string

const (
	IssuesListForRepoSortCreated  IssuesListForRepoSort = "created"
	IssuesListForRepoSortUpdated  IssuesListForRepoSort = "updated"
	IssuesListForRepoSortComments IssuesListForRepoSort = "comments"
)

type IssuesListForRepoState string

const (
	IssuesListForRepoStateOpen   IssuesListForRepoState = "open"
	IssuesListForRepoStateClosed IssuesListForRepoState = "closed"
	IssuesListForRepoStateAll    IssuesListForRepoState = "all"
)

type IssuesListLabelsForRepoOKApplicationJSON []Label

func (IssuesListLabelsForRepoOKApplicationJSON) issuesListLabelsForRepoRes() {}

type IssuesListLabelsOnIssueOKApplicationJSON []Label

func (IssuesListLabelsOnIssueOKApplicationJSON) issuesListLabelsOnIssueRes() {}

type IssuesListMilestonesDirection string

const (
	IssuesListMilestonesDirectionAsc  IssuesListMilestonesDirection = "asc"
	IssuesListMilestonesDirectionDesc IssuesListMilestonesDirection = "desc"
)

type IssuesListMilestonesOKApplicationJSON []Milestone

func (IssuesListMilestonesOKApplicationJSON) issuesListMilestonesRes() {}

type IssuesListMilestonesSort string

const (
	IssuesListMilestonesSortDueOn        IssuesListMilestonesSort = "due_on"
	IssuesListMilestonesSortCompleteness IssuesListMilestonesSort = "completeness"
)

type IssuesListMilestonesState string

const (
	IssuesListMilestonesStateOpen   IssuesListMilestonesState = "open"
	IssuesListMilestonesStateClosed IssuesListMilestonesState = "closed"
	IssuesListMilestonesStateAll    IssuesListMilestonesState = "all"
)

type IssuesListOKApplicationJSON []Issue

func (IssuesListOKApplicationJSON) issuesListRes() {}

type IssuesListSort string

const (
	IssuesListSortCreated  IssuesListSort = "created"
	IssuesListSortUpdated  IssuesListSort = "updated"
	IssuesListSortComments IssuesListSort = "comments"
)

type IssuesListState string

const (
	IssuesListStateOpen   IssuesListState = "open"
	IssuesListStateClosed IssuesListState = "closed"
	IssuesListStateAll    IssuesListState = "all"
)

type IssuesLockApplicationJSONForbidden BasicError

func (*IssuesLockApplicationJSONForbidden) issuesLockRes() {}

type IssuesLockApplicationJSONGone BasicError

func (*IssuesLockApplicationJSONGone) issuesLockRes() {}

type IssuesLockApplicationJSONNotFound BasicError

func (*IssuesLockApplicationJSONNotFound) issuesLockRes() {}

// IssuesLockNoContent is response for IssuesLock operation.
type IssuesLockNoContent struct{}

func (*IssuesLockNoContent) issuesLockRes() {}

type IssuesLockReq struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one
	// of these reasons:
	// \* `off-topic`
	// \* `too heated`
	// \* `resolved`
	// \* `spam`.
	LockReason OptIssuesLockReqLockReason "json:\"lock_reason\""
}

// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one
// of these reasons:
// \* `off-topic`
// \* `too heated`
// \* `resolved`
// \* `spam`.
type IssuesLockReqLockReason string

const (
	IssuesLockReqLockReasonOffMinusTopic IssuesLockReqLockReason = "off-topic"
	IssuesLockReqLockReasonTooHeated     IssuesLockReqLockReason = "too heated"
	IssuesLockReqLockReasonResolved      IssuesLockReqLockReason = "resolved"
	IssuesLockReqLockReasonSpam          IssuesLockReqLockReason = "spam"
)

// IssuesRemoveAllLabelsNoContent is response for IssuesRemoveAllLabels operation.
type IssuesRemoveAllLabelsNoContent struct{}

func (*IssuesRemoveAllLabelsNoContent) issuesRemoveAllLabelsRes() {}

type IssuesRemoveAssigneesReq struct {
	// Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove
	// assignees from an issue. Assignees are silently ignored otherwise._.
	Assignees []string "json:\"assignees\""
}

type IssuesRemoveLabelApplicationJSONGone BasicError

func (*IssuesRemoveLabelApplicationJSONGone) issuesRemoveLabelRes() {}

type IssuesRemoveLabelApplicationJSONNotFound BasicError

func (*IssuesRemoveLabelApplicationJSONNotFound) issuesRemoveLabelRes() {}

type IssuesRemoveLabelOKApplicationJSON []Label

func (IssuesRemoveLabelOKApplicationJSON) issuesRemoveLabelRes() {}

type IssuesUnlockApplicationJSONForbidden BasicError

func (*IssuesUnlockApplicationJSONForbidden) issuesUnlockRes() {}

type IssuesUnlockApplicationJSONNotFound BasicError

func (*IssuesUnlockApplicationJSONNotFound) issuesUnlockRes() {}

// IssuesUnlockNoContent is response for IssuesUnlock operation.
type IssuesUnlockNoContent struct{}

func (*IssuesUnlockNoContent) issuesUnlockRes() {}

type IssuesUpdateApplicationJSONForbidden BasicError

func (*IssuesUpdateApplicationJSONForbidden) issuesUpdateRes() {}

type IssuesUpdateApplicationJSONGone BasicError

func (*IssuesUpdateApplicationJSONGone) issuesUpdateRes() {}

type IssuesUpdateApplicationJSONMovedPermanently BasicError

func (*IssuesUpdateApplicationJSONMovedPermanently) issuesUpdateRes() {}

type IssuesUpdateApplicationJSONNotFound BasicError

func (*IssuesUpdateApplicationJSONNotFound) issuesUpdateRes() {}

type IssuesUpdateCommentReq struct {
	// The contents of the comment.
	Body string "json:\"body\""
}

type IssuesUpdateLabelReq struct {
	// The new name of the label. Emoji can be added to label names, using either native emoji or
	// colon-style markup. For example, typing `:strawberry:` will render the emoji
	// ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
	// ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat
	// sheet](https://github.com/ikatyang/emoji-cheat-sheet).".
	NewName OptString "json:\"new_name\""
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color OptString "json:\"color\""
	// A short description of the label.
	Description OptString "json:\"description\""
}

type IssuesUpdateMilestoneReq struct {
	// The title of the milestone.
	Title OptString "json:\"title\""
	// The state of the milestone. Either `open` or `closed`.
	State OptIssuesUpdateMilestoneReqState "json:\"state\""
	// A description of the milestone.
	Description OptString "json:\"description\""
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn OptDateTime "json:\"due_on\""
}

// The state of the milestone. Either `open` or `closed`.
type IssuesUpdateMilestoneReqState string

const (
	IssuesUpdateMilestoneReqStateOpen   IssuesUpdateMilestoneReqState = "open"
	IssuesUpdateMilestoneReqStateClosed IssuesUpdateMilestoneReqState = "closed"
)

type IssuesUpdateReq struct {
	// The title of the issue.
	Title OptNilIssuesUpdateReqTitle "json:\"title\""
	// The contents of the issue.
	Body OptNilString "json:\"body\""
	// Login for the user that this issue should be assigned to. **This field is deprecated.**.
	Assignee OptNilString "json:\"assignee\""
	// State of the issue. Either `open` or `closed`.
	State     OptIssuesUpdateReqState        "json:\"state\""
	Milestone OptNilIssuesUpdateReqMilestone "json:\"milestone\""
	// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on
	// this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with
	// push access can set labels for issues. Labels are silently dropped otherwise._.
	Labels []IssuesUpdateReqLabelsItem "json:\"labels\""
	// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of
	// assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE:
	// Only users with push access can set assignees for new issues. Assignees are silently dropped
	// otherwise._.
	Assignees []string "json:\"assignees\""
}

// IssuesUpdateReqLabelsItem represents sum type.
type IssuesUpdateReqLabelsItem struct {
	Type                       IssuesUpdateReqLabelsItemType // switch on this field
	String                     string
	IssuesUpdateReqLabelsItem1 IssuesUpdateReqLabelsItem1
}

// IssuesUpdateReqLabelsItemType is oneOf type of IssuesUpdateReqLabelsItem.
type IssuesUpdateReqLabelsItemType string

// Possible values for IssuesUpdateReqLabelsItemType.
const (
	StringIssuesUpdateReqLabelsItem                     IssuesUpdateReqLabelsItemType = "string"
	IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem IssuesUpdateReqLabelsItemType = "IssuesUpdateReqLabelsItem1"
)

// IsString reports whether IssuesUpdateReqLabelsItem is string.
func (s IssuesUpdateReqLabelsItem) IsString() bool { return s.Type == StringIssuesUpdateReqLabelsItem }

// IsIssuesUpdateReqLabelsItem1 reports whether IssuesUpdateReqLabelsItem is IssuesUpdateReqLabelsItem1.
func (s IssuesUpdateReqLabelsItem) IsIssuesUpdateReqLabelsItem1() bool {
	return s.Type == IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem
}

// SetString sets IssuesUpdateReqLabelsItem to string.
func (s *IssuesUpdateReqLabelsItem) SetString(v string) {
	s.Type = StringIssuesUpdateReqLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqLabelsItem is string.
func (s IssuesUpdateReqLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqLabelsItem returns new IssuesUpdateReqLabelsItem from string.
func NewStringIssuesUpdateReqLabelsItem(v string) IssuesUpdateReqLabelsItem {
	var s IssuesUpdateReqLabelsItem
	s.SetString(v)
	return s
}

// SetIssuesUpdateReqLabelsItem1 sets IssuesUpdateReqLabelsItem to IssuesUpdateReqLabelsItem1.
func (s *IssuesUpdateReqLabelsItem) SetIssuesUpdateReqLabelsItem1(v IssuesUpdateReqLabelsItem1) {
	s.Type = IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem
	s.IssuesUpdateReqLabelsItem1 = v
}

// GetIssuesUpdateReqLabelsItem1 returns IssuesUpdateReqLabelsItem1 and true boolean if IssuesUpdateReqLabelsItem is IssuesUpdateReqLabelsItem1.
func (s IssuesUpdateReqLabelsItem) GetIssuesUpdateReqLabelsItem1() (v IssuesUpdateReqLabelsItem1, ok bool) {
	if !s.IsIssuesUpdateReqLabelsItem1() {
		return v, false
	}
	return s.IssuesUpdateReqLabelsItem1, true
}

// NewIssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem returns new IssuesUpdateReqLabelsItem from IssuesUpdateReqLabelsItem1.
func NewIssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem(v IssuesUpdateReqLabelsItem1) IssuesUpdateReqLabelsItem {
	var s IssuesUpdateReqLabelsItem
	s.SetIssuesUpdateReqLabelsItem1(v)
	return s
}

type IssuesUpdateReqLabelsItem1 struct {
	ID          OptInt       "json:\"id\""
	Name        OptString    "json:\"name\""
	Description OptNilString "json:\"description\""
	Color       OptNilString "json:\"color\""
}

// IssuesUpdateReqMilestone represents sum type.
type IssuesUpdateReqMilestone struct {
	Type   IssuesUpdateReqMilestoneType // switch on this field
	String string
	Int    int
}

// IssuesUpdateReqMilestoneType is oneOf type of IssuesUpdateReqMilestone.
type IssuesUpdateReqMilestoneType string

// Possible values for IssuesUpdateReqMilestoneType.
const (
	StringIssuesUpdateReqMilestone IssuesUpdateReqMilestoneType = "string"
	IntIssuesUpdateReqMilestone    IssuesUpdateReqMilestoneType = "int"
)

// IsString reports whether IssuesUpdateReqMilestone is string.
func (s IssuesUpdateReqMilestone) IsString() bool { return s.Type == StringIssuesUpdateReqMilestone }

// IsInt reports whether IssuesUpdateReqMilestone is int.
func (s IssuesUpdateReqMilestone) IsInt() bool { return s.Type == IntIssuesUpdateReqMilestone }

// SetString sets IssuesUpdateReqMilestone to string.
func (s *IssuesUpdateReqMilestone) SetString(v string) {
	s.Type = StringIssuesUpdateReqMilestone
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqMilestone is string.
func (s IssuesUpdateReqMilestone) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqMilestone returns new IssuesUpdateReqMilestone from string.
func NewStringIssuesUpdateReqMilestone(v string) IssuesUpdateReqMilestone {
	var s IssuesUpdateReqMilestone
	s.SetString(v)
	return s
}

// SetInt sets IssuesUpdateReqMilestone to int.
func (s *IssuesUpdateReqMilestone) SetInt(v int) {
	s.Type = IntIssuesUpdateReqMilestone
	s.Int = v
}

// GetInt returns int and true boolean if IssuesUpdateReqMilestone is int.
func (s IssuesUpdateReqMilestone) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesUpdateReqMilestone returns new IssuesUpdateReqMilestone from int.
func NewIntIssuesUpdateReqMilestone(v int) IssuesUpdateReqMilestone {
	var s IssuesUpdateReqMilestone
	s.SetInt(v)
	return s
}

// State of the issue. Either `open` or `closed`.
type IssuesUpdateReqState string

const (
	IssuesUpdateReqStateOpen   IssuesUpdateReqState = "open"
	IssuesUpdateReqStateClosed IssuesUpdateReqState = "closed"
)

// The title of the issue.
// IssuesUpdateReqTitle represents sum type.
type IssuesUpdateReqTitle struct {
	Type   IssuesUpdateReqTitleType // switch on this field
	String string
	Int    int
}

// IssuesUpdateReqTitleType is oneOf type of IssuesUpdateReqTitle.
type IssuesUpdateReqTitleType string

// Possible values for IssuesUpdateReqTitleType.
const (
	StringIssuesUpdateReqTitle IssuesUpdateReqTitleType = "string"
	IntIssuesUpdateReqTitle    IssuesUpdateReqTitleType = "int"
)

// IsString reports whether IssuesUpdateReqTitle is string.
func (s IssuesUpdateReqTitle) IsString() bool { return s.Type == StringIssuesUpdateReqTitle }

// IsInt reports whether IssuesUpdateReqTitle is int.
func (s IssuesUpdateReqTitle) IsInt() bool { return s.Type == IntIssuesUpdateReqTitle }

// SetString sets IssuesUpdateReqTitle to string.
func (s *IssuesUpdateReqTitle) SetString(v string) {
	s.Type = StringIssuesUpdateReqTitle
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqTitle is string.
func (s IssuesUpdateReqTitle) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqTitle returns new IssuesUpdateReqTitle from string.
func NewStringIssuesUpdateReqTitle(v string) IssuesUpdateReqTitle {
	var s IssuesUpdateReqTitle
	s.SetString(v)
	return s
}

// SetInt sets IssuesUpdateReqTitle to int.
func (s *IssuesUpdateReqTitle) SetInt(v int) {
	s.Type = IntIssuesUpdateReqTitle
	s.Int = v
}

// GetInt returns int and true boolean if IssuesUpdateReqTitle is int.
func (s IssuesUpdateReqTitle) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesUpdateReqTitle returns new IssuesUpdateReqTitle from int.
func NewIntIssuesUpdateReqTitle(v int) IssuesUpdateReqTitle {
	var s IssuesUpdateReqTitle
	s.SetInt(v)
	return s
}

// Information of a job execution in a workflow run.
// Ref: #/components/schemas/job
type Job struct {
	// The id of the job.
	ID int "json:\"id\""
	// The id of the associated workflow run.
	RunID  int    "json:\"run_id\""
	RunURL string "json:\"run_url\""
	NodeID string "json:\"node_id\""
	// The SHA of the commit that is being run.
	HeadSha string    "json:\"head_sha\""
	URL     string    "json:\"url\""
	HTMLURL NilString "json:\"html_url\""
	// The phase of the lifecycle that the job is currently in.
	Status JobStatus "json:\"status\""
	// The outcome of the job.
	Conclusion NilString "json:\"conclusion\""
	// The time that the job started, in ISO 8601 format.
	StartedAt time.Time "json:\"started_at\""
	// The time that the job finished, in ISO 8601 format.
	CompletedAt NilDateTime "json:\"completed_at\""
	// The name of the job.
	Name string "json:\"name\""
	// Steps in this job.
	Steps       []JobStepsItem "json:\"steps\""
	CheckRunURL string         "json:\"check_run_url\""
}

// The phase of the lifecycle that the job is currently in.
type JobStatus string

const (
	JobStatusQueued     JobStatus = "queued"
	JobStatusInProgress JobStatus = "in_progress"
	JobStatusCompleted  JobStatus = "completed"
)

type JobStepsItem struct {
	// The phase of the lifecycle that the job is currently in.
	Status JobStepsItemStatus "json:\"status\""
	// The outcome of the job.
	Conclusion NilString "json:\"conclusion\""
	// The name of the job.
	Name   string "json:\"name\""
	Number int    "json:\"number\""
	// The time that the step started, in ISO 8601 format.
	StartedAt OptNilDateTime "json:\"started_at\""
	// The time that the job finished, in ISO 8601 format.
	CompletedAt OptNilDateTime "json:\"completed_at\""
}

// The phase of the lifecycle that the job is currently in.
type JobStepsItemStatus string

const (
	JobStepsItemStatusQueued     JobStepsItemStatus = "queued"
	JobStepsItemStatusInProgress JobStepsItemStatus = "in_progress"
	JobStepsItemStatusCompleted  JobStepsItemStatus = "completed"
)

// Key.
// Ref: #/components/schemas/key
type Key struct {
	Key       string    "json:\"key\""
	ID        int       "json:\"id\""
	URL       string    "json:\"url\""
	Title     string    "json:\"title\""
	CreatedAt time.Time "json:\"created_at\""
	Verified  bool      "json:\"verified\""
	ReadOnly  bool      "json:\"read_only\""
}

func (*Key) usersCreatePublicSSHKeyForAuthenticatedRes() {}
func (*Key) usersGetPublicSSHKeyForAuthenticatedRes()    {}

// Key Simple.
// Ref: #/components/schemas/key-simple
type KeySimple struct {
	ID  int    "json:\"id\""
	Key string "json:\"key\""
}

// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
// Ref: #/components/schemas/label
type Label struct {
	ID     int64  "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the label.
	URL url.URL "json:\"url\""
	// The name of the label.
	Name        string    "json:\"name\""
	Description NilString "json:\"description\""
	// 6-character hex code, without the leading #, identifying the color.
	Color   string "json:\"color\""
	Default bool   "json:\"default\""
}

func (*Label) issuesCreateLabelRes() {}
func (*Label) issuesGetLabelRes()    {}

// Label Search Result Item.
// Ref: #/components/schemas/label-search-result-item
type LabelSearchResultItem struct {
	ID          int                      "json:\"id\""
	NodeID      string                   "json:\"node_id\""
	URL         url.URL                  "json:\"url\""
	Name        string                   "json:\"name\""
	Color       string                   "json:\"color\""
	Default     bool                     "json:\"default\""
	Description NilString                "json:\"description\""
	Score       float64                  "json:\"score\""
	TextMatches *SearchResultTextMatches "json:\"text_matches\""
}

// Language.
// Ref: #/components/schemas/language
type Language map[string]int

func (s *Language) init() Language {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// License.
// Ref: #/components/schemas/license
type License struct {
	Key            string    "json:\"key\""
	Name           string    "json:\"name\""
	SpdxID         NilString "json:\"spdx_id\""
	URL            NilURI    "json:\"url\""
	NodeID         string    "json:\"node_id\""
	HTMLURL        url.URL   "json:\"html_url\""
	Description    string    "json:\"description\""
	Implementation string    "json:\"implementation\""
	Permissions    []string  "json:\"permissions\""
	Conditions     []string  "json:\"conditions\""
	Limitations    []string  "json:\"limitations\""
	Body           string    "json:\"body\""
	Featured       bool      "json:\"featured\""
}

func (*License) licensesGetRes() {}

// License Content.
// Ref: #/components/schemas/license-content
type LicenseContent struct {
	Name        string                   "json:\"name\""
	Path        string                   "json:\"path\""
	Sha         string                   "json:\"sha\""
	Size        int                      "json:\"size\""
	URL         url.URL                  "json:\"url\""
	HTMLURL     NilURI                   "json:\"html_url\""
	GitURL      NilURI                   "json:\"git_url\""
	DownloadURL NilURI                   "json:\"download_url\""
	Type        string                   "json:\"type\""
	Content     string                   "json:\"content\""
	Encoding    string                   "json:\"encoding\""
	Links       LicenseContentLinks      "json:\"_links\""
	License     NilNullableLicenseSimple "json:\"license\""
}

type LicenseContentLinks struct {
	Git  NilURI  "json:\"git\""
	HTML NilURI  "json:\"html\""
	Self url.URL "json:\"self\""
}

// License Simple.
// Ref: #/components/schemas/license-simple
type LicenseSimple struct {
	Key     string    "json:\"key\""
	Name    string    "json:\"name\""
	URL     NilURI    "json:\"url\""
	SpdxID  NilString "json:\"spdx_id\""
	NodeID  string    "json:\"node_id\""
	HTMLURL OptURI    "json:\"html_url\""
}

type LicensesGetAllCommonlyUsedOKApplicationJSON []LicenseSimple

func (LicensesGetAllCommonlyUsedOKApplicationJSON) licensesGetAllCommonlyUsedRes() {}

type LicensesGetApplicationJSONForbidden BasicError

func (*LicensesGetApplicationJSONForbidden) licensesGetRes() {}

type LicensesGetApplicationJSONNotFound BasicError

func (*LicensesGetApplicationJSONNotFound) licensesGetRes() {}

// Hypermedia Link.
// Ref: #/components/schemas/link
type Link struct {
	Href string "json:\"href\""
}

// Hypermedia Link with Type.
// Ref: #/components/schemas/link-with-type
type LinkWithType struct {
	Href string "json:\"href\""
	Type string "json:\"type\""
}

// Ref: #/components/schemas/marketplace-account
type MarketplaceAccount struct {
	URL                      url.URL      "json:\"url\""
	ID                       int          "json:\"id\""
	Type                     string       "json:\"type\""
	NodeID                   OptString    "json:\"node_id\""
	Login                    string       "json:\"login\""
	Email                    OptNilString "json:\"email\""
	OrganizationBillingEmail OptNilString "json:\"organization_billing_email\""
}

// Marketplace Listing Plan.
// Ref: #/components/schemas/marketplace-listing-plan
type MarketplaceListingPlan struct {
	URL                 url.URL   "json:\"url\""
	AccountsURL         url.URL   "json:\"accounts_url\""
	ID                  int       "json:\"id\""
	Number              int       "json:\"number\""
	Name                string    "json:\"name\""
	Description         string    "json:\"description\""
	MonthlyPriceInCents int       "json:\"monthly_price_in_cents\""
	YearlyPriceInCents  int       "json:\"yearly_price_in_cents\""
	PriceModel          string    "json:\"price_model\""
	HasFreeTrial        bool      "json:\"has_free_trial\""
	UnitName            NilString "json:\"unit_name\""
	State               string    "json:\"state\""
	Bullets             []string  "json:\"bullets\""
}

// Marketplace Purchase.
// Ref: #/components/schemas/marketplace-purchase
type MarketplacePurchase struct {
	URL                      string                                            "json:\"url\""
	Type                     string                                            "json:\"type\""
	ID                       int                                               "json:\"id\""
	Login                    string                                            "json:\"login\""
	OrganizationBillingEmail OptString                                         "json:\"organization_billing_email\""
	Email                    OptNilString                                      "json:\"email\""
	MarketplacePendingChange OptNilMarketplacePurchaseMarketplacePendingChange "json:\"marketplace_pending_change\""
	MarketplacePurchase      MarketplacePurchaseMarketplacePurchase            "json:\"marketplace_purchase\""
}

func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountRes()        {}
func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountStubbedRes() {}

type MarketplacePurchaseMarketplacePendingChange struct {
	IsInstalled   OptBool                   "json:\"is_installed\""
	EffectiveDate OptString                 "json:\"effective_date\""
	UnitCount     OptNilInt                 "json:\"unit_count\""
	ID            OptInt                    "json:\"id\""
	Plan          OptMarketplaceListingPlan "json:\"plan\""
}

type MarketplacePurchaseMarketplacePurchase struct {
	BillingCycle    OptString                 "json:\"billing_cycle\""
	NextBillingDate OptNilString              "json:\"next_billing_date\""
	IsInstalled     OptBool                   "json:\"is_installed\""
	UnitCount       OptNilInt                 "json:\"unit_count\""
	OnFreeTrial     OptBool                   "json:\"on_free_trial\""
	FreeTrialEndsOn OptNilString              "json:\"free_trial_ends_on\""
	UpdatedAt       OptString                 "json:\"updated_at\""
	Plan            OptMarketplaceListingPlan "json:\"plan\""
}

// Results of a successful merge upstream request.
// Ref: #/components/schemas/merged-upstream
type MergedUpstream struct {
	Message    OptString                  "json:\"message\""
	MergeType  OptMergedUpstreamMergeType "json:\"merge_type\""
	BaseBranch OptString                  "json:\"base_branch\""
}

func (*MergedUpstream) reposMergeUpstreamRes() {}

type MergedUpstreamMergeType string

const (
	MergedUpstreamMergeTypeMerge            MergedUpstreamMergeType = "merge"
	MergedUpstreamMergeTypeFastMinusForward MergedUpstreamMergeType = "fast-forward"
	MergedUpstreamMergeTypeNone             MergedUpstreamMergeType = "none"
)

type MetaRootOK struct {
	CurrentUserURL                   string    "json:\"current_user_url\""
	CurrentUserAuthorizationsHTMLURL string    "json:\"current_user_authorizations_html_url\""
	AuthorizationsURL                string    "json:\"authorizations_url\""
	CodeSearchURL                    string    "json:\"code_search_url\""
	CommitSearchURL                  string    "json:\"commit_search_url\""
	EmailsURL                        string    "json:\"emails_url\""
	EmojisURL                        string    "json:\"emojis_url\""
	EventsURL                        string    "json:\"events_url\""
	FeedsURL                         string    "json:\"feeds_url\""
	FollowersURL                     string    "json:\"followers_url\""
	FollowingURL                     string    "json:\"following_url\""
	GistsURL                         string    "json:\"gists_url\""
	HubURL                           string    "json:\"hub_url\""
	IssueSearchURL                   string    "json:\"issue_search_url\""
	IssuesURL                        string    "json:\"issues_url\""
	KeysURL                          string    "json:\"keys_url\""
	LabelSearchURL                   string    "json:\"label_search_url\""
	NotificationsURL                 string    "json:\"notifications_url\""
	OrganizationURL                  string    "json:\"organization_url\""
	OrganizationRepositoriesURL      string    "json:\"organization_repositories_url\""
	OrganizationTeamsURL             string    "json:\"organization_teams_url\""
	PublicGistsURL                   string    "json:\"public_gists_url\""
	RateLimitURL                     string    "json:\"rate_limit_url\""
	RepositoryURL                    string    "json:\"repository_url\""
	RepositorySearchURL              string    "json:\"repository_search_url\""
	CurrentUserRepositoriesURL       string    "json:\"current_user_repositories_url\""
	StarredURL                       string    "json:\"starred_url\""
	StarredGistsURL                  string    "json:\"starred_gists_url\""
	TopicSearchURL                   OptString "json:\"topic_search_url\""
	UserURL                          string    "json:\"user_url\""
	UserOrganizationsURL             string    "json:\"user_organizations_url\""
	UserRepositoriesURL              string    "json:\"user_repositories_url\""
	UserSearchURL                    string    "json:\"user_search_url\""
}

// A migration.
// Ref: #/components/schemas/migration
type Migration struct {
	ID                   int                   "json:\"id\""
	Owner                NilNullableSimpleUser "json:\"owner\""
	GUID                 string                "json:\"guid\""
	State                string                "json:\"state\""
	LockRepositories     bool                  "json:\"lock_repositories\""
	ExcludeMetadata      bool                  "json:\"exclude_metadata\""
	ExcludeGitData       bool                  "json:\"exclude_git_data\""
	ExcludeAttachments   bool                  "json:\"exclude_attachments\""
	ExcludeReleases      bool                  "json:\"exclude_releases\""
	ExcludeOwnerProjects bool                  "json:\"exclude_owner_projects\""
	Repositories         []Repository          "json:\"repositories\""
	URL                  url.URL               "json:\"url\""
	CreatedAt            time.Time             "json:\"created_at\""
	UpdatedAt            time.Time             "json:\"updated_at\""
	NodeID               string                "json:\"node_id\""
	ArchiveURL           OptURI                "json:\"archive_url\""
	Exclude              []jx.Raw              "json:\"exclude\""
}

func (*Migration) migrationsGetStatusForAuthenticatedUserRes() {}
func (*Migration) migrationsGetStatusForOrgRes()               {}
func (*Migration) migrationsStartForAuthenticatedUserRes()     {}
func (*Migration) migrationsStartForOrgRes()                   {}

// MigrationsCancelImportNoContent is response for MigrationsCancelImport operation.
type MigrationsCancelImportNoContent struct{}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

// MigrationsDeleteArchiveForAuthenticatedUserNoContent is response for MigrationsDeleteArchiveForAuthenticatedUser operation.
type MigrationsDeleteArchiveForAuthenticatedUserNoContent struct{}

func (*MigrationsDeleteArchiveForAuthenticatedUserNoContent) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

// MigrationsDeleteArchiveForOrgNoContent is response for MigrationsDeleteArchiveForOrg operation.
type MigrationsDeleteArchiveForOrgNoContent struct{}

func (*MigrationsDeleteArchiveForOrgNoContent) migrationsDeleteArchiveForOrgRes() {}

// MigrationsDownloadArchiveForOrgFound is response for MigrationsDownloadArchiveForOrg operation.
type MigrationsDownloadArchiveForOrgFound struct{}

func (*MigrationsDownloadArchiveForOrgFound) migrationsDownloadArchiveForOrgRes() {}

type MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden) migrationsGetArchiveForAuthenticatedUserRes() {
}

type MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized) migrationsGetArchiveForAuthenticatedUserRes() {
}

// MigrationsGetArchiveForAuthenticatedUserFound is response for MigrationsGetArchiveForAuthenticatedUser operation.
type MigrationsGetArchiveForAuthenticatedUserFound struct{}

func (*MigrationsGetArchiveForAuthenticatedUserFound) migrationsGetArchiveForAuthenticatedUserRes() {}

type MigrationsGetCommitAuthorsOKApplicationJSON []PorterAuthor

func (MigrationsGetCommitAuthorsOKApplicationJSON) migrationsGetCommitAuthorsRes() {}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden) migrationsGetStatusForAuthenticatedUserRes() {
}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound) migrationsGetStatusForAuthenticatedUserRes() {
}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized) migrationsGetStatusForAuthenticatedUserRes() {
}

// Allowed values that can be passed to the exclude param.
type MigrationsGetStatusForOrgExcludeItem string

const (
	MigrationsGetStatusForOrgExcludeItemRepositories MigrationsGetStatusForOrgExcludeItem = "repositories"
)

type MigrationsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsListForAuthenticatedUserApplicationJSONForbidden) migrationsListForAuthenticatedUserRes() {
}

type MigrationsListForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsListForAuthenticatedUserApplicationJSONUnauthorized) migrationsListForAuthenticatedUserRes() {
}

type MigrationsListForAuthenticatedUserOKApplicationJSON []Migration

func (MigrationsListForAuthenticatedUserOKApplicationJSON) migrationsListForAuthenticatedUserRes() {}

// Allowed values that can be passed to the exclude param.
type MigrationsListForOrgExcludeItem string

const (
	MigrationsListForOrgExcludeItemRepositories MigrationsListForOrgExcludeItem = "repositories"
)

type MigrationsListReposForOrgOKApplicationJSON []MinimalRepository

func (MigrationsListReposForOrgOKApplicationJSON) migrationsListReposForOrgRes() {}

type MigrationsListReposForUserOKApplicationJSON []MinimalRepository

func (MigrationsListReposForUserOKApplicationJSON) migrationsListReposForUserRes() {}

type MigrationsMapCommitAuthorReq struct {
	// The new Git author email.
	Email OptString "json:\"email\""
	// The new Git author name.
	Name            OptString "json:\"name\""
	AdditionalProps MigrationsMapCommitAuthorReqAdditional
}

type MigrationsMapCommitAuthorReqAdditional map[string]jx.Raw

func (s *MigrationsMapCommitAuthorReqAdditional) init() MigrationsMapCommitAuthorReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MigrationsSetLfsPreferenceReq struct {
	// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will
	// be removed during the import).
	UseLfs MigrationsSetLfsPreferenceReqUseLfs "json:\"use_lfs\""
}

// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will
// be removed during the import).
type MigrationsSetLfsPreferenceReqUseLfs string

const (
	MigrationsSetLfsPreferenceReqUseLfsOptIn  MigrationsSetLfsPreferenceReqUseLfs = "opt_in"
	MigrationsSetLfsPreferenceReqUseLfsOptOut MigrationsSetLfsPreferenceReqUseLfs = "opt_out"
)

type MigrationsStartForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsStartForAuthenticatedUserApplicationJSONForbidden) migrationsStartForAuthenticatedUserRes() {
}

type MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized) migrationsStartForAuthenticatedUserRes() {
}

type MigrationsStartForAuthenticatedUserReq struct {
	// Lock the repositories being migrated at the start of the migration.
	LockRepositories OptBool "json:\"lock_repositories\""
	// Do not include attachments in the migration.
	ExcludeAttachments OptBool "json:\"exclude_attachments\""
	// Do not include releases in the migration.
	ExcludeReleases OptBool "json:\"exclude_releases\""
	// Indicates whether projects owned by the organization or users should be excluded.
	ExcludeOwnerProjects OptBool "json:\"exclude_owner_projects\""
	// Exclude attributes from the API response to improve performance.
	Exclude      []MigrationsStartForAuthenticatedUserReqExcludeItem "json:\"exclude\""
	Repositories []string                                            "json:\"repositories\""
}

// Allowed values that can be passed to the exclude param.
type MigrationsStartForAuthenticatedUserReqExcludeItem string

const (
	MigrationsStartForAuthenticatedUserReqExcludeItemRepositories MigrationsStartForAuthenticatedUserReqExcludeItem = "repositories"
)

type MigrationsStartForOrgReq struct {
	// A list of arrays indicating which repositories should be migrated.
	Repositories []string "json:\"repositories\""
	// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
	LockRepositories OptBool "json:\"lock_repositories\""
	// Indicates whether attachments should be excluded from the migration (to reduce migration archive
	// file size).
	ExcludeAttachments OptBool "json:\"exclude_attachments\""
	// Indicates whether releases should be excluded from the migration (to reduce migration archive file
	// size).
	ExcludeReleases OptBool "json:\"exclude_releases\""
	// Indicates whether projects owned by the organization or users should be excluded. from the
	// migration.
	ExcludeOwnerProjects OptBool                               "json:\"exclude_owner_projects\""
	Exclude              []MigrationsStartForOrgReqExcludeItem "json:\"exclude\""
}

type MigrationsStartForOrgReqExcludeItem string

const (
	MigrationsStartForOrgReqExcludeItemRepositories MigrationsStartForOrgReqExcludeItem = "repositories"
)

type MigrationsStartImportReq struct {
	// The URL of the originating repository.
	VcsURL string "json:\"vcs_url\""
	// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be
	// aware that without this parameter, the import job will take additional time to detect the VCS type
	// before beginning the import. This detection step will be reflected in the response.
	Vcs OptMigrationsStartImportReqVcs "json:\"vcs\""
	// If authentication is required, the username to provide to `vcs_url`.
	VcsUsername OptString "json:\"vcs_username\""
	// If authentication is required, the password to provide to `vcs_url`.
	VcsPassword OptString "json:\"vcs_password\""
	// For a tfvc import, the name of the project that is being imported.
	TfvcProject OptString "json:\"tfvc_project\""
}

// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be
// aware that without this parameter, the import job will take additional time to detect the VCS type
// before beginning the import. This detection step will be reflected in the response.
type MigrationsStartImportReqVcs string

const (
	MigrationsStartImportReqVcsSubversion MigrationsStartImportReqVcs = "subversion"
	MigrationsStartImportReqVcsGit        MigrationsStartImportReqVcs = "git"
	MigrationsStartImportReqVcsMercurial  MigrationsStartImportReqVcs = "mercurial"
	MigrationsStartImportReqVcsTfvc       MigrationsStartImportReqVcs = "tfvc"
)

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden) migrationsUnlockRepoForAuthenticatedUserRes() {
}

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound) migrationsUnlockRepoForAuthenticatedUserRes() {
}

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized) migrationsUnlockRepoForAuthenticatedUserRes() {
}

// MigrationsUnlockRepoForAuthenticatedUserNoContent is response for MigrationsUnlockRepoForAuthenticatedUser operation.
type MigrationsUnlockRepoForAuthenticatedUserNoContent struct{}

func (*MigrationsUnlockRepoForAuthenticatedUserNoContent) migrationsUnlockRepoForAuthenticatedUserRes() {
}

// MigrationsUnlockRepoForOrgNoContent is response for MigrationsUnlockRepoForOrg operation.
type MigrationsUnlockRepoForOrgNoContent struct{}

func (*MigrationsUnlockRepoForOrgNoContent) migrationsUnlockRepoForOrgRes() {}

type MigrationsUpdateImportReq struct {
	// The username to provide to the originating repository.
	VcsUsername OptString "json:\"vcs_username\""
	// The password to provide to the originating repository.
	VcsPassword OptString "json:\"vcs_password\""
	Vcs         OptString "json:\"vcs\""
	TfvcProject OptString "json:\"tfvc_project\""
}

// A collection of related issues and pull requests.
// Ref: #/components/schemas/milestone
type Milestone struct {
	URL       url.URL "json:\"url\""
	HTMLURL   url.URL "json:\"html_url\""
	LabelsURL url.URL "json:\"labels_url\""
	ID        int     "json:\"id\""
	NodeID    string  "json:\"node_id\""
	// The number of the milestone.
	Number int "json:\"number\""
	// The state of the milestone.
	State MilestoneState "json:\"state\""
	// The title of the milestone.
	Title        string                "json:\"title\""
	Description  NilString             "json:\"description\""
	Creator      NilNullableSimpleUser "json:\"creator\""
	OpenIssues   int                   "json:\"open_issues\""
	ClosedIssues int                   "json:\"closed_issues\""
	CreatedAt    time.Time             "json:\"created_at\""
	UpdatedAt    time.Time             "json:\"updated_at\""
	ClosedAt     NilDateTime           "json:\"closed_at\""
	DueOn        NilDateTime           "json:\"due_on\""
}

func (*Milestone) issuesCreateMilestoneRes() {}
func (*Milestone) issuesGetMilestoneRes()    {}

// The state of the milestone.
type MilestoneState string

const (
	MilestoneStateOpen   MilestoneState = "open"
	MilestoneStateClosed MilestoneState = "closed"
)

// Minimal Repository.
// Ref: #/components/schemas/minimal-repository
type MinimalRepository struct {
	ID                  int                             "json:\"id\""
	NodeID              string                          "json:\"node_id\""
	Name                string                          "json:\"name\""
	FullName            string                          "json:\"full_name\""
	Owner               SimpleUser                      "json:\"owner\""
	Private             bool                            "json:\"private\""
	HTMLURL             url.URL                         "json:\"html_url\""
	Description         NilString                       "json:\"description\""
	Fork                bool                            "json:\"fork\""
	URL                 url.URL                         "json:\"url\""
	ArchiveURL          string                          "json:\"archive_url\""
	AssigneesURL        string                          "json:\"assignees_url\""
	BlobsURL            string                          "json:\"blobs_url\""
	BranchesURL         string                          "json:\"branches_url\""
	CollaboratorsURL    string                          "json:\"collaborators_url\""
	CommentsURL         string                          "json:\"comments_url\""
	CommitsURL          string                          "json:\"commits_url\""
	CompareURL          string                          "json:\"compare_url\""
	ContentsURL         string                          "json:\"contents_url\""
	ContributorsURL     url.URL                         "json:\"contributors_url\""
	DeploymentsURL      url.URL                         "json:\"deployments_url\""
	DownloadsURL        url.URL                         "json:\"downloads_url\""
	EventsURL           url.URL                         "json:\"events_url\""
	ForksURL            url.URL                         "json:\"forks_url\""
	GitCommitsURL       string                          "json:\"git_commits_url\""
	GitRefsURL          string                          "json:\"git_refs_url\""
	GitTagsURL          string                          "json:\"git_tags_url\""
	GitURL              OptString                       "json:\"git_url\""
	IssueCommentURL     string                          "json:\"issue_comment_url\""
	IssueEventsURL      string                          "json:\"issue_events_url\""
	IssuesURL           string                          "json:\"issues_url\""
	KeysURL             string                          "json:\"keys_url\""
	LabelsURL           string                          "json:\"labels_url\""
	LanguagesURL        url.URL                         "json:\"languages_url\""
	MergesURL           url.URL                         "json:\"merges_url\""
	MilestonesURL       string                          "json:\"milestones_url\""
	NotificationsURL    string                          "json:\"notifications_url\""
	PullsURL            string                          "json:\"pulls_url\""
	ReleasesURL         string                          "json:\"releases_url\""
	SSHURL              OptString                       "json:\"ssh_url\""
	StargazersURL       url.URL                         "json:\"stargazers_url\""
	StatusesURL         string                          "json:\"statuses_url\""
	SubscribersURL      url.URL                         "json:\"subscribers_url\""
	SubscriptionURL     url.URL                         "json:\"subscription_url\""
	TagsURL             url.URL                         "json:\"tags_url\""
	TeamsURL            url.URL                         "json:\"teams_url\""
	TreesURL            string                          "json:\"trees_url\""
	CloneURL            OptString                       "json:\"clone_url\""
	MirrorURL           OptNilString                    "json:\"mirror_url\""
	HooksURL            url.URL                         "json:\"hooks_url\""
	SvnURL              OptString                       "json:\"svn_url\""
	Homepage            OptNilString                    "json:\"homepage\""
	Language            OptNilString                    "json:\"language\""
	ForksCount          OptInt                          "json:\"forks_count\""
	StargazersCount     OptInt                          "json:\"stargazers_count\""
	WatchersCount       OptInt                          "json:\"watchers_count\""
	Size                OptInt                          "json:\"size\""
	DefaultBranch       OptString                       "json:\"default_branch\""
	OpenIssuesCount     OptInt                          "json:\"open_issues_count\""
	IsTemplate          OptBool                         "json:\"is_template\""
	Topics              []string                        "json:\"topics\""
	HasIssues           OptBool                         "json:\"has_issues\""
	HasProjects         OptBool                         "json:\"has_projects\""
	HasWiki             OptBool                         "json:\"has_wiki\""
	HasPages            OptBool                         "json:\"has_pages\""
	HasDownloads        OptBool                         "json:\"has_downloads\""
	Archived            OptBool                         "json:\"archived\""
	Disabled            OptBool                         "json:\"disabled\""
	Visibility          OptString                       "json:\"visibility\""
	PushedAt            OptNilDateTime                  "json:\"pushed_at\""
	CreatedAt           OptNilDateTime                  "json:\"created_at\""
	UpdatedAt           OptNilDateTime                  "json:\"updated_at\""
	Permissions         OptMinimalRepositoryPermissions "json:\"permissions\""
	TemplateRepository  OptNilNullableRepository        "json:\"template_repository\""
	TempCloneToken      OptString                       "json:\"temp_clone_token\""
	DeleteBranchOnMerge OptBool                         "json:\"delete_branch_on_merge\""
	SubscribersCount    OptInt                          "json:\"subscribers_count\""
	NetworkCount        OptInt                          "json:\"network_count\""
	CodeOfConduct       OptCodeOfConduct                "json:\"code_of_conduct\""
	License             OptNilMinimalRepositoryLicense  "json:\"license\""
	Forks               OptInt                          "json:\"forks\""
	OpenIssues          OptInt                          "json:\"open_issues\""
	Watchers            OptInt                          "json:\"watchers\""
	AllowForking        OptBool                         "json:\"allow_forking\""
}

type MinimalRepositoryLicense struct {
	Key    OptString "json:\"key\""
	Name   OptString "json:\"name\""
	SpdxID OptString "json:\"spdx_id\""
	URL    OptString "json:\"url\""
	NodeID OptString "json:\"node_id\""
}

type MinimalRepositoryPermissions struct {
	Admin    OptBool "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     OptBool "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     OptBool "json:\"pull\""
}

// NewNilAutoMerge returns new NilAutoMerge with value set to v.
func NewNilAutoMerge(v AutoMerge) NilAutoMerge {
	return NilAutoMerge{
		Value: v,
	}
}

// NilAutoMerge is nullable AutoMerge.
type NilAutoMerge struct {
	Value AutoMerge
	Null  bool
}

// SetTo sets value to v.
func (o *NilAutoMerge) SetTo(v AutoMerge) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilAutoMerge) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilAutoMerge) Get() (v AutoMerge, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilAutoMerge) Or(d AutoMerge) AutoMerge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilBool returns new NilBool with value set to v.
func NewNilBool(v bool) NilBool {
	return NilBool{
		Value: v,
	}
}

// NilBool is nullable bool.
type NilBool struct {
	Value bool
	Null  bool
}

// SetTo sets value to v.
func (o *NilBool) SetTo(v bool) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilBool) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckRunCheckSuite returns new NilCheckRunCheckSuite with value set to v.
func NewNilCheckRunCheckSuite(v CheckRunCheckSuite) NilCheckRunCheckSuite {
	return NilCheckRunCheckSuite{
		Value: v,
	}
}

// NilCheckRunCheckSuite is nullable CheckRunCheckSuite.
type NilCheckRunCheckSuite struct {
	Value CheckRunCheckSuite
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckRunCheckSuite) SetTo(v CheckRunCheckSuite) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckRunCheckSuite) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckRunCheckSuite) Get() (v CheckRunCheckSuite, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckRunCheckSuite) Or(d CheckRunCheckSuite) CheckRunCheckSuite {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckRunConclusion returns new NilCheckRunConclusion with value set to v.
func NewNilCheckRunConclusion(v CheckRunConclusion) NilCheckRunConclusion {
	return NilCheckRunConclusion{
		Value: v,
	}
}

// NilCheckRunConclusion is nullable CheckRunConclusion.
type NilCheckRunConclusion struct {
	Value CheckRunConclusion
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckRunConclusion) SetTo(v CheckRunConclusion) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckRunConclusion) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckRunConclusion) Get() (v CheckRunConclusion, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckRunConclusion) Or(d CheckRunConclusion) CheckRunConclusion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckSuiteConclusion returns new NilCheckSuiteConclusion with value set to v.
func NewNilCheckSuiteConclusion(v CheckSuiteConclusion) NilCheckSuiteConclusion {
	return NilCheckSuiteConclusion{
		Value: v,
	}
}

// NilCheckSuiteConclusion is nullable CheckSuiteConclusion.
type NilCheckSuiteConclusion struct {
	Value CheckSuiteConclusion
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckSuiteConclusion) SetTo(v CheckSuiteConclusion) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckSuiteConclusion) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckSuiteConclusion) Get() (v CheckSuiteConclusion, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckSuiteConclusion) Or(d CheckSuiteConclusion) CheckSuiteConclusion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckSuiteStatus returns new NilCheckSuiteStatus with value set to v.
func NewNilCheckSuiteStatus(v CheckSuiteStatus) NilCheckSuiteStatus {
	return NilCheckSuiteStatus{
		Value: v,
	}
}

// NilCheckSuiteStatus is nullable CheckSuiteStatus.
type NilCheckSuiteStatus struct {
	Value CheckSuiteStatus
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckSuiteStatus) SetTo(v CheckSuiteStatus) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckSuiteStatus) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckSuiteStatus) Get() (v CheckSuiteStatus, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckSuiteStatus) Or(d CheckSuiteStatus) CheckSuiteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCodeScanningAlertDismissedAt returns new NilCodeScanningAlertDismissedAt with value set to v.
func NewNilCodeScanningAlertDismissedAt(v CodeScanningAlertDismissedAt) NilCodeScanningAlertDismissedAt {
	return NilCodeScanningAlertDismissedAt{
		Value: v,
	}
}

// NilCodeScanningAlertDismissedAt is nullable CodeScanningAlertDismissedAt.
type NilCodeScanningAlertDismissedAt struct {
	Value CodeScanningAlertDismissedAt
	Null  bool
}

// SetTo sets value to v.
func (o *NilCodeScanningAlertDismissedAt) SetTo(v CodeScanningAlertDismissedAt) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCodeScanningAlertDismissedAt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCodeScanningAlertDismissedAt) Get() (v CodeScanningAlertDismissedAt, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCodeScanningAlertDismissedAt) Or(d CodeScanningAlertDismissedAt) CodeScanningAlertDismissedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCodeScanningAlertDismissedReason returns new NilCodeScanningAlertDismissedReason with value set to v.
func NewNilCodeScanningAlertDismissedReason(v CodeScanningAlertDismissedReason) NilCodeScanningAlertDismissedReason {
	return NilCodeScanningAlertDismissedReason{
		Value: v,
	}
}

// NilCodeScanningAlertDismissedReason is nullable CodeScanningAlertDismissedReason.
type NilCodeScanningAlertDismissedReason struct {
	Value CodeScanningAlertDismissedReason
	Null  bool
}

// SetTo sets value to v.
func (o *NilCodeScanningAlertDismissedReason) SetTo(v CodeScanningAlertDismissedReason) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCodeScanningAlertDismissedReason) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCodeScanningAlertDismissedReason) Get() (v CodeScanningAlertDismissedReason, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCodeScanningAlertDismissedReason) Or(d CodeScanningAlertDismissedReason) CodeScanningAlertDismissedReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilDateTime returns new NilDateTime with value set to v.
func NewNilDateTime(v time.Time) NilDateTime {
	return NilDateTime{
		Value: v,
	}
}

// NilDateTime is nullable time.Time.
type NilDateTime struct {
	Value time.Time
	Null  bool
}

// SetTo sets value to v.
func (o *NilDateTime) SetTo(v time.Time) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDateTime) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFileCommitContent returns new NilFileCommitContent with value set to v.
func NewNilFileCommitContent(v FileCommitContent) NilFileCommitContent {
	return NilFileCommitContent{
		Value: v,
	}
}

// NilFileCommitContent is nullable FileCommitContent.
type NilFileCommitContent struct {
	Value FileCommitContent
	Null  bool
}

// SetTo sets value to v.
func (o *NilFileCommitContent) SetTo(v FileCommitContent) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFileCommitContent) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilFileCommitContent) Get() (v FileCommitContent, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFileCommitContent) Or(d FileCommitContent) FileCommitContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryRequestHeaders returns new NilHookDeliveryRequestHeaders with value set to v.
func NewNilHookDeliveryRequestHeaders(v HookDeliveryRequestHeaders) NilHookDeliveryRequestHeaders {
	return NilHookDeliveryRequestHeaders{
		Value: v,
	}
}

// NilHookDeliveryRequestHeaders is nullable HookDeliveryRequestHeaders.
type NilHookDeliveryRequestHeaders struct {
	Value HookDeliveryRequestHeaders
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryRequestHeaders) SetTo(v HookDeliveryRequestHeaders) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryRequestHeaders) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryRequestHeaders) Get() (v HookDeliveryRequestHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryRequestHeaders) Or(d HookDeliveryRequestHeaders) HookDeliveryRequestHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryRequestPayload returns new NilHookDeliveryRequestPayload with value set to v.
func NewNilHookDeliveryRequestPayload(v HookDeliveryRequestPayload) NilHookDeliveryRequestPayload {
	return NilHookDeliveryRequestPayload{
		Value: v,
	}
}

// NilHookDeliveryRequestPayload is nullable HookDeliveryRequestPayload.
type NilHookDeliveryRequestPayload struct {
	Value HookDeliveryRequestPayload
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryRequestPayload) SetTo(v HookDeliveryRequestPayload) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryRequestPayload) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryRequestPayload) Get() (v HookDeliveryRequestPayload, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryRequestPayload) Or(d HookDeliveryRequestPayload) HookDeliveryRequestPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryResponseHeaders returns new NilHookDeliveryResponseHeaders with value set to v.
func NewNilHookDeliveryResponseHeaders(v HookDeliveryResponseHeaders) NilHookDeliveryResponseHeaders {
	return NilHookDeliveryResponseHeaders{
		Value: v,
	}
}

// NilHookDeliveryResponseHeaders is nullable HookDeliveryResponseHeaders.
type NilHookDeliveryResponseHeaders struct {
	Value HookDeliveryResponseHeaders
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryResponseHeaders) SetTo(v HookDeliveryResponseHeaders) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryResponseHeaders) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryResponseHeaders) Get() (v HookDeliveryResponseHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryResponseHeaders) Or(d HookDeliveryResponseHeaders) HookDeliveryResponseHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableCodeOfConductSimple returns new NilNullableCodeOfConductSimple with value set to v.
func NewNilNullableCodeOfConductSimple(v NullableCodeOfConductSimple) NilNullableCodeOfConductSimple {
	return NilNullableCodeOfConductSimple{
		Value: v,
	}
}

// NilNullableCodeOfConductSimple is nullable NullableCodeOfConductSimple.
type NilNullableCodeOfConductSimple struct {
	Value NullableCodeOfConductSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableCodeOfConductSimple) SetTo(v NullableCodeOfConductSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableCodeOfConductSimple) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableCodeOfConductSimple) Get() (v NullableCodeOfConductSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableCodeOfConductSimple) Or(d NullableCodeOfConductSimple) NullableCodeOfConductSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableCommunityHealthFile returns new NilNullableCommunityHealthFile with value set to v.
func NewNilNullableCommunityHealthFile(v NullableCommunityHealthFile) NilNullableCommunityHealthFile {
	return NilNullableCommunityHealthFile{
		Value: v,
	}
}

// NilNullableCommunityHealthFile is nullable NullableCommunityHealthFile.
type NilNullableCommunityHealthFile struct {
	Value NullableCommunityHealthFile
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableCommunityHealthFile) SetTo(v NullableCommunityHealthFile) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableCommunityHealthFile) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableCommunityHealthFile) Get() (v NullableCommunityHealthFile, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableCommunityHealthFile) Or(d NullableCommunityHealthFile) NullableCommunityHealthFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableGitUser returns new NilNullableGitUser with value set to v.
func NewNilNullableGitUser(v NullableGitUser) NilNullableGitUser {
	return NilNullableGitUser{
		Value: v,
	}
}

// NilNullableGitUser is nullable NullableGitUser.
type NilNullableGitUser struct {
	Value NullableGitUser
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableGitUser) SetTo(v NullableGitUser) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableGitUser) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableGitUser) Get() (v NullableGitUser, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableGitUser) Or(d NullableGitUser) NullableGitUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableIntegration returns new NilNullableIntegration with value set to v.
func NewNilNullableIntegration(v NullableIntegration) NilNullableIntegration {
	return NilNullableIntegration{
		Value: v,
	}
}

// NilNullableIntegration is nullable NullableIntegration.
type NilNullableIntegration struct {
	Value NullableIntegration
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableIntegration) SetTo(v NullableIntegration) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableIntegration) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableIntegration) Get() (v NullableIntegration, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableIntegration) Or(d NullableIntegration) NullableIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableLicenseSimple returns new NilNullableLicenseSimple with value set to v.
func NewNilNullableLicenseSimple(v NullableLicenseSimple) NilNullableLicenseSimple {
	return NilNullableLicenseSimple{
		Value: v,
	}
}

// NilNullableLicenseSimple is nullable NullableLicenseSimple.
type NilNullableLicenseSimple struct {
	Value NullableLicenseSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableLicenseSimple) SetTo(v NullableLicenseSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableLicenseSimple) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableLicenseSimple) Get() (v NullableLicenseSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableLicenseSimple) Or(d NullableLicenseSimple) NullableLicenseSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableMilestone returns new NilNullableMilestone with value set to v.
func NewNilNullableMilestone(v NullableMilestone) NilNullableMilestone {
	return NilNullableMilestone{
		Value: v,
	}
}

// NilNullableMilestone is nullable NullableMilestone.
type NilNullableMilestone struct {
	Value NullableMilestone
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableMilestone) SetTo(v NullableMilestone) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableMilestone) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableMilestone) Get() (v NullableMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableMilestone) Or(d NullableMilestone) NullableMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommit returns new NilNullableSimpleCommit with value set to v.
func NewNilNullableSimpleCommit(v NullableSimpleCommit) NilNullableSimpleCommit {
	return NilNullableSimpleCommit{
		Value: v,
	}
}

// NilNullableSimpleCommit is nullable NullableSimpleCommit.
type NilNullableSimpleCommit struct {
	Value NullableSimpleCommit
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommit) SetTo(v NullableSimpleCommit) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommit) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommit) Get() (v NullableSimpleCommit, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommit) Or(d NullableSimpleCommit) NullableSimpleCommit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommitAuthor returns new NilNullableSimpleCommitAuthor with value set to v.
func NewNilNullableSimpleCommitAuthor(v NullableSimpleCommitAuthor) NilNullableSimpleCommitAuthor {
	return NilNullableSimpleCommitAuthor{
		Value: v,
	}
}

// NilNullableSimpleCommitAuthor is nullable NullableSimpleCommitAuthor.
type NilNullableSimpleCommitAuthor struct {
	Value NullableSimpleCommitAuthor
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommitAuthor) SetTo(v NullableSimpleCommitAuthor) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommitAuthor) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommitAuthor) Get() (v NullableSimpleCommitAuthor, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommitAuthor) Or(d NullableSimpleCommitAuthor) NullableSimpleCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommitCommitter returns new NilNullableSimpleCommitCommitter with value set to v.
func NewNilNullableSimpleCommitCommitter(v NullableSimpleCommitCommitter) NilNullableSimpleCommitCommitter {
	return NilNullableSimpleCommitCommitter{
		Value: v,
	}
}

// NilNullableSimpleCommitCommitter is nullable NullableSimpleCommitCommitter.
type NilNullableSimpleCommitCommitter struct {
	Value NullableSimpleCommitCommitter
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommitCommitter) SetTo(v NullableSimpleCommitCommitter) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommitCommitter) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommitCommitter) Get() (v NullableSimpleCommitCommitter, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommitCommitter) Or(d NullableSimpleCommitCommitter) NullableSimpleCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleUser returns new NilNullableSimpleUser with value set to v.
func NewNilNullableSimpleUser(v NullableSimpleUser) NilNullableSimpleUser {
	return NilNullableSimpleUser{
		Value: v,
	}
}

// NilNullableSimpleUser is nullable NullableSimpleUser.
type NilNullableSimpleUser struct {
	Value NullableSimpleUser
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleUser) SetTo(v NullableSimpleUser) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleUser) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleUser) Get() (v NullableSimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleUser) Or(d NullableSimpleUser) NullableSimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableTeamSimple returns new NilNullableTeamSimple with value set to v.
func NewNilNullableTeamSimple(v NullableTeamSimple) NilNullableTeamSimple {
	return NilNullableTeamSimple{
		Value: v,
	}
}

// NilNullableTeamSimple is nullable NullableTeamSimple.
type NilNullableTeamSimple struct {
	Value NullableTeamSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableTeamSimple) SetTo(v NullableTeamSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableTeamSimple) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableTeamSimple) Get() (v NullableTeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableTeamSimple) Or(d NullableTeamSimple) NullableTeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPageStatus returns new NilPageStatus with value set to v.
func NewNilPageStatus(v PageStatus) NilPageStatus {
	return NilPageStatus{
		Value: v,
	}
}

// NilPageStatus is nullable PageStatus.
type NilPageStatus struct {
	Value PageStatus
	Null  bool
}

// SetTo sets value to v.
func (o *NilPageStatus) SetTo(v PageStatus) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPageStatus) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilPageStatus) Get() (v PageStatus, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPageStatus) Or(d PageStatus) PageStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPullRequestHeadRepo returns new NilPullRequestHeadRepo with value set to v.
func NewNilPullRequestHeadRepo(v PullRequestHeadRepo) NilPullRequestHeadRepo {
	return NilPullRequestHeadRepo{
		Value: v,
	}
}

// NilPullRequestHeadRepo is nullable PullRequestHeadRepo.
type NilPullRequestHeadRepo struct {
	Value PullRequestHeadRepo
	Null  bool
}

// SetTo sets value to v.
func (o *NilPullRequestHeadRepo) SetTo(v PullRequestHeadRepo) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPullRequestHeadRepo) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilPullRequestHeadRepo) Get() (v PullRequestHeadRepo, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPullRequestHeadRepo) Or(d PullRequestHeadRepo) PullRequestHeadRepo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPullRequestHeadRepoLicense returns new NilPullRequestHeadRepoLicense with value set to v.
func NewNilPullRequestHeadRepoLicense(v PullRequestHeadRepoLicense) NilPullRequestHeadRepoLicense {
	return NilPullRequestHeadRepoLicense{
		Value: v,
	}
}

// NilPullRequestHeadRepoLicense is nullable PullRequestHeadRepoLicense.
type NilPullRequestHeadRepoLicense struct {
	Value PullRequestHeadRepoLicense
	Null  bool
}

// SetTo sets value to v.
func (o *NilPullRequestHeadRepoLicense) SetTo(v PullRequestHeadRepoLicense) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPullRequestHeadRepoLicense) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilPullRequestHeadRepoLicense) Get() (v PullRequestHeadRepoLicense, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPullRequestHeadRepoLicense) Or(d PullRequestHeadRepoLicense) PullRequestHeadRepoLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposCreatePagesSiteReq returns new NilReposCreatePagesSiteReq with value set to v.
func NewNilReposCreatePagesSiteReq(v ReposCreatePagesSiteReq) NilReposCreatePagesSiteReq {
	return NilReposCreatePagesSiteReq{
		Value: v,
	}
}

// NilReposCreatePagesSiteReq is nullable ReposCreatePagesSiteReq.
type NilReposCreatePagesSiteReq struct {
	Value ReposCreatePagesSiteReq
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposCreatePagesSiteReq) SetTo(v ReposCreatePagesSiteReq) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposCreatePagesSiteReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilReposCreatePagesSiteReq) Get() (v ReposCreatePagesSiteReq, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposCreatePagesSiteReq) Or(d ReposCreatePagesSiteReq) ReposCreatePagesSiteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRequiredPullRequestReviews returns new NilReposUpdateBranchProtectionReqRequiredPullRequestReviews with value set to v.
func NewNilReposUpdateBranchProtectionReqRequiredPullRequestReviews(v ReposUpdateBranchProtectionReqRequiredPullRequestReviews) NilReposUpdateBranchProtectionReqRequiredPullRequestReviews {
	return NilReposUpdateBranchProtectionReqRequiredPullRequestReviews{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRequiredPullRequestReviews is nullable ReposUpdateBranchProtectionReqRequiredPullRequestReviews.
type NilReposUpdateBranchProtectionReqRequiredPullRequestReviews struct {
	Value ReposUpdateBranchProtectionReqRequiredPullRequestReviews
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetTo(v ReposUpdateBranchProtectionReqRequiredPullRequestReviews) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) Get() (v ReposUpdateBranchProtectionReqRequiredPullRequestReviews, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) Or(d ReposUpdateBranchProtectionReqRequiredPullRequestReviews) ReposUpdateBranchProtectionReqRequiredPullRequestReviews {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRequiredStatusChecks returns new NilReposUpdateBranchProtectionReqRequiredStatusChecks with value set to v.
func NewNilReposUpdateBranchProtectionReqRequiredStatusChecks(v ReposUpdateBranchProtectionReqRequiredStatusChecks) NilReposUpdateBranchProtectionReqRequiredStatusChecks {
	return NilReposUpdateBranchProtectionReqRequiredStatusChecks{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRequiredStatusChecks is nullable ReposUpdateBranchProtectionReqRequiredStatusChecks.
type NilReposUpdateBranchProtectionReqRequiredStatusChecks struct {
	Value ReposUpdateBranchProtectionReqRequiredStatusChecks
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRequiredStatusChecks) SetTo(v ReposUpdateBranchProtectionReqRequiredStatusChecks) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) Get() (v ReposUpdateBranchProtectionReqRequiredStatusChecks, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) Or(d ReposUpdateBranchProtectionReqRequiredStatusChecks) ReposUpdateBranchProtectionReqRequiredStatusChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRestrictions returns new NilReposUpdateBranchProtectionReqRestrictions with value set to v.
func NewNilReposUpdateBranchProtectionReqRestrictions(v ReposUpdateBranchProtectionReqRestrictions) NilReposUpdateBranchProtectionReqRestrictions {
	return NilReposUpdateBranchProtectionReqRestrictions{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRestrictions is nullable ReposUpdateBranchProtectionReqRestrictions.
type NilReposUpdateBranchProtectionReqRestrictions struct {
	Value ReposUpdateBranchProtectionReqRestrictions
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRestrictions) SetTo(v ReposUpdateBranchProtectionReqRestrictions) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRestrictions) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRestrictions) Get() (v ReposUpdateBranchProtectionReqRestrictions, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRestrictions) Or(d ReposUpdateBranchProtectionReqRestrictions) ReposUpdateBranchProtectionReqRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilSimpleCommitAuthor returns new NilSimpleCommitAuthor with value set to v.
func NewNilSimpleCommitAuthor(v SimpleCommitAuthor) NilSimpleCommitAuthor {
	return NilSimpleCommitAuthor{
		Value: v,
	}
}

// NilSimpleCommitAuthor is nullable SimpleCommitAuthor.
type NilSimpleCommitAuthor struct {
	Value SimpleCommitAuthor
	Null  bool
}

// SetTo sets value to v.
func (o *NilSimpleCommitAuthor) SetTo(v SimpleCommitAuthor) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilSimpleCommitAuthor) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilSimpleCommitAuthor) Get() (v SimpleCommitAuthor, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilSimpleCommitAuthor) Or(d SimpleCommitAuthor) SimpleCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilSimpleCommitCommitter returns new NilSimpleCommitCommitter with value set to v.
func NewNilSimpleCommitCommitter(v SimpleCommitCommitter) NilSimpleCommitCommitter {
	return NilSimpleCommitCommitter{
		Value: v,
	}
}

// NilSimpleCommitCommitter is nullable SimpleCommitCommitter.
type NilSimpleCommitCommitter struct {
	Value SimpleCommitCommitter
	Null  bool
}

// SetTo sets value to v.
func (o *NilSimpleCommitCommitter) SetTo(v SimpleCommitCommitter) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilSimpleCommitCommitter) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilSimpleCommitCommitter) Get() (v SimpleCommitCommitter, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilSimpleCommitCommitter) Or(d SimpleCommitCommitter) SimpleCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilURI returns new NilURI with value set to v.
func NewNilURI(v url.URL) NilURI {
	return NilURI{
		Value: v,
	}
}

// NilURI is nullable url.URL.
type NilURI struct {
	Value url.URL
	Null  bool
}

// SetTo sets value to v.
func (o *NilURI) SetTo(v url.URL) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilURI) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/no_content
type NoContent struct{}

func (*NoContent) reposGetCodeFrequencyStatsRes()  {}
func (*NoContent) reposGetCommitActivityStatsRes() {}
func (*NoContent) reposGetContributorsStatsRes()   {}
func (*NoContent) reposGetPunchCardStatsRes()      {}

// Ref: #/components/responses/not_modified
type NotModified struct{}

func (*NotModified) activityCheckRepoIsStarredByAuthenticatedUserRes()     {}
func (*NotModified) activityDeleteThreadSubscriptionRes()                  {}
func (*NotModified) activityGetThreadRes()                                 {}
func (*NotModified) activityGetThreadSubscriptionForAuthenticatedUserRes() {}
func (*NotModified) activityListNotificationsForAuthenticatedUserRes()     {}
func (*NotModified) activityListPublicEventsForRepoNetworkRes()            {}
func (*NotModified) activityListPublicEventsRes()                          {}
func (*NotModified) activityListReposStarredByAuthenticatedUserRes()       {}
func (*NotModified) activityListWatchedReposForAuthenticatedUserRes()      {}
func (*NotModified) activityMarkNotificationsAsReadRes()                   {}
func (*NotModified) activityMarkThreadAsReadRes()                          {}
func (*NotModified) activitySetThreadSubscriptionRes()                     {}
func (*NotModified) activityStarRepoForAuthenticatedUserRes()              {}
func (*NotModified) activityUnstarRepoForAuthenticatedUserRes()            {}
func (*NotModified) appsAddRepoToInstallationRes()                         {}
func (*NotModified) appsCreateContentAttachmentRes()                       {}
func (*NotModified) appsListInstallationReposForAuthenticatedUserRes()     {}
func (*NotModified) appsListReposAccessibleToInstallationRes()             {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserRes()         {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserStubbedRes()  {}
func (*NotModified) appsRemoveRepoFromInstallationRes()                    {}
func (*NotModified) codesOfConductGetAllCodesOfConductRes()                {}
func (*NotModified) codesOfConductGetConductCodeRes()                      {}
func (*NotModified) emojisGetRes()                                         {}
func (*NotModified) gistsCheckIsStarredRes()                               {}
func (*NotModified) gistsCreateCommentRes()                                {}
func (*NotModified) gistsCreateRes()                                       {}
func (*NotModified) gistsDeleteCommentRes()                                {}
func (*NotModified) gistsDeleteRes()                                       {}
func (*NotModified) gistsForkRes()                                         {}
func (*NotModified) gistsGetCommentRes()                                   {}
func (*NotModified) gistsGetRes()                                          {}
func (*NotModified) gistsListCommentsRes()                                 {}
func (*NotModified) gistsListCommitsRes()                                  {}
func (*NotModified) gistsListForksRes()                                    {}
func (*NotModified) gistsListPublicRes()                                   {}
func (*NotModified) gistsListRes()                                         {}
func (*NotModified) gistsListStarredRes()                                  {}
func (*NotModified) gistsStarRes()                                         {}
func (*NotModified) gistsUnstarRes()                                       {}
func (*NotModified) gitignoreGetAllTemplatesRes()                          {}
func (*NotModified) gitignoreGetTemplateRes()                              {}
func (*NotModified) issuesGetRes()                                         {}
func (*NotModified) issuesListForAuthenticatedUserRes()                    {}
func (*NotModified) issuesListRes()                                        {}
func (*NotModified) licensesGetAllCommonlyUsedRes()                        {}
func (*NotModified) licensesGetRes()                                       {}
func (*NotModified) metaGetRes()                                           {}
func (*NotModified) migrationsDeleteArchiveForAuthenticatedUserRes()       {}
func (*NotModified) migrationsGetArchiveForAuthenticatedUserRes()          {}
func (*NotModified) migrationsGetStatusForAuthenticatedUserRes()           {}
func (*NotModified) migrationsListForAuthenticatedUserRes()                {}
func (*NotModified) migrationsStartForAuthenticatedUserRes()               {}
func (*NotModified) migrationsUnlockRepoForAuthenticatedUserRes()          {}
func (*NotModified) oAuthAuthorizationsCreateAuthorizationRes()            {}
func (*NotModified) oAuthAuthorizationsDeleteAuthorizationRes()            {}
func (*NotModified) oAuthAuthorizationsDeleteGrantRes()                    {}
func (*NotModified) oAuthAuthorizationsGetAuthorizationRes()               {}
func (*NotModified) oAuthAuthorizationsGetGrantRes()                       {}
func (*NotModified) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {}
func (*NotModified) oAuthAuthorizationsListAuthorizationsRes()             {}
func (*NotModified) oAuthAuthorizationsListGrantsRes()                     {}
func (*NotModified) orgsListForAuthenticatedUserRes()                      {}
func (*NotModified) orgsListMembershipsForAuthenticatedUserRes()           {}
func (*NotModified) orgsListRes()                                          {}
func (*NotModified) projectsAddCollaboratorRes()                           {}
func (*NotModified) projectsCreateColumnRes()                              {}
func (*NotModified) projectsCreateForAuthenticatedUserRes()                {}
func (*NotModified) projectsDeleteCardRes()                                {}
func (*NotModified) projectsDeleteColumnRes()                              {}
func (*NotModified) projectsDeleteRes()                                    {}
func (*NotModified) projectsGetCardRes()                                   {}
func (*NotModified) projectsGetColumnRes()                                 {}
func (*NotModified) projectsGetPermissionForUserRes()                      {}
func (*NotModified) projectsGetRes()                                       {}
func (*NotModified) projectsListCardsRes()                                 {}
func (*NotModified) projectsListCollaboratorsRes()                         {}
func (*NotModified) projectsListColumnsRes()                               {}
func (*NotModified) projectsMoveCardRes()                                  {}
func (*NotModified) projectsMoveColumnRes()                                {}
func (*NotModified) projectsRemoveCollaboratorRes()                        {}
func (*NotModified) projectsUpdateCardRes()                                {}
func (*NotModified) projectsUpdateColumnRes()                              {}
func (*NotModified) projectsUpdateRes()                                    {}
func (*NotModified) pullsGetRes()                                          {}
func (*NotModified) pullsListRes()                                         {}
func (*NotModified) rateLimitGetRes()                                      {}
func (*NotModified) reactionsDeleteLegacyRes()                             {}
func (*NotModified) reposAcceptInvitationRes()                             {}
func (*NotModified) reposCreateForAuthenticatedUserRes()                   {}
func (*NotModified) reposDeclineInvitationRes()                            {}
func (*NotModified) reposListForAuthenticatedUserRes()                     {}
func (*NotModified) reposListInvitationsForAuthenticatedUserRes()          {}
func (*NotModified) reposListPublicRes()                                   {}
func (*NotModified) scimDeleteUserFromOrgRes()                             {}
func (*NotModified) searchCodeRes()                                        {}
func (*NotModified) searchCommitsRes()                                     {}
func (*NotModified) searchIssuesAndPullRequestsRes()                       {}
func (*NotModified) searchLabelsRes()                                      {}
func (*NotModified) searchReposRes()                                       {}
func (*NotModified) searchTopicsRes()                                      {}
func (*NotModified) searchUsersRes()                                       {}
func (*NotModified) teamsListForAuthenticatedUserRes()                     {}
func (*NotModified) usersAddEmailForAuthenticatedRes()                     {}
func (*NotModified) usersBlockRes()                                        {}
func (*NotModified) usersCheckBlockedRes()                                 {}
func (*NotModified) usersCheckPersonIsFollowedByAuthenticatedRes()         {}
func (*NotModified) usersCreateGpgKeyForAuthenticatedRes()                 {}
func (*NotModified) usersCreatePublicSSHKeyForAuthenticatedRes()           {}
func (*NotModified) usersDeleteEmailForAuthenticatedRes()                  {}
func (*NotModified) usersDeleteGpgKeyForAuthenticatedRes()                 {}
func (*NotModified) usersDeletePublicSSHKeyForAuthenticatedRes()           {}
func (*NotModified) usersFollowRes()                                       {}
func (*NotModified) usersGetAuthenticatedRes()                             {}
func (*NotModified) usersGetGpgKeyForAuthenticatedRes()                    {}
func (*NotModified) usersGetPublicSSHKeyForAuthenticatedRes()              {}
func (*NotModified) usersListBlockedByAuthenticatedRes()                   {}
func (*NotModified) usersListEmailsForAuthenticatedRes()                   {}
func (*NotModified) usersListFollowedByAuthenticatedRes()                  {}
func (*NotModified) usersListFollowersForAuthenticatedUserRes()            {}
func (*NotModified) usersListGpgKeysForAuthenticatedRes()                  {}
func (*NotModified) usersListPublicEmailsForAuthenticatedRes()             {}
func (*NotModified) usersListPublicSSHKeysForAuthenticatedRes()            {}
func (*NotModified) usersListRes()                                         {}
func (*NotModified) usersSetPrimaryEmailVisibilityForAuthenticatedRes()    {}
func (*NotModified) usersUnblockRes()                                      {}
func (*NotModified) usersUnfollowRes()                                     {}
func (*NotModified) usersUpdateAuthenticatedRes()                          {}

// Code of Conduct Simple.
// Ref: #/components/schemas/nullable-code-of-conduct-simple
type NullableCodeOfConductSimple struct {
	URL     url.URL "json:\"url\""
	Key     string  "json:\"key\""
	Name    string  "json:\"name\""
	HTMLURL NilURI  "json:\"html_url\""
}

// Ref: #/components/schemas/nullable-community-health-file
type NullableCommunityHealthFile struct {
	URL     url.URL "json:\"url\""
	HTMLURL url.URL "json:\"html_url\""
}

// Metaproperties for Git author/committer information.
// Ref: #/components/schemas/nullable-git-user
type NullableGitUser struct {
	Name  OptString "json:\"name\""
	Email OptString "json:\"email\""
	Date  OptString "json:\"date\""
}

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and
// user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
// Ref: #/components/schemas/nullable-integration
type NullableIntegration struct {
	// Unique identifier of the GitHub app.
	ID int "json:\"id\""
	// The slug name of the GitHub app.
	Slug   OptString             "json:\"slug\""
	NodeID string                "json:\"node_id\""
	Owner  NilNullableSimpleUser "json:\"owner\""
	// The name of the GitHub app.
	Name        string    "json:\"name\""
	Description NilString "json:\"description\""
	ExternalURL url.URL   "json:\"external_url\""
	HTMLURL     url.URL   "json:\"html_url\""
	CreatedAt   time.Time "json:\"created_at\""
	UpdatedAt   time.Time "json:\"updated_at\""
	// The set of permissions for the GitHub app.
	Permissions NullableIntegrationPermissions "json:\"permissions\""
	// The list of events for the GitHub app.
	Events []string "json:\"events\""
	// The number of installations associated with the GitHub app.
	InstallationsCount OptInt       "json:\"installations_count\""
	ClientID           OptString    "json:\"client_id\""
	ClientSecret       OptString    "json:\"client_secret\""
	WebhookSecret      OptNilString "json:\"webhook_secret\""
	Pem                OptString    "json:\"pem\""
}

// The set of permissions for the GitHub app.
type NullableIntegrationPermissions struct {
	Issues          OptString "json:\"issues\""
	Checks          OptString "json:\"checks\""
	Metadata        OptString "json:\"metadata\""
	Contents        OptString "json:\"contents\""
	Deployments     OptString "json:\"deployments\""
	AdditionalProps NullableIntegrationPermissionsAdditional
}

type NullableIntegrationPermissionsAdditional map[string]string

func (s *NullableIntegrationPermissionsAdditional) init() NullableIntegrationPermissionsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// License Simple.
// Ref: #/components/schemas/nullable-license-simple
type NullableLicenseSimple struct {
	Key     string    "json:\"key\""
	Name    string    "json:\"name\""
	URL     NilURI    "json:\"url\""
	SpdxID  NilString "json:\"spdx_id\""
	NodeID  string    "json:\"node_id\""
	HTMLURL OptURI    "json:\"html_url\""
}

// A collection of related issues and pull requests.
// Ref: #/components/schemas/nullable-milestone
type NullableMilestone struct {
	URL       url.URL "json:\"url\""
	HTMLURL   url.URL "json:\"html_url\""
	LabelsURL url.URL "json:\"labels_url\""
	ID        int     "json:\"id\""
	NodeID    string  "json:\"node_id\""
	// The number of the milestone.
	Number int "json:\"number\""
	// The state of the milestone.
	State NullableMilestoneState "json:\"state\""
	// The title of the milestone.
	Title        string                "json:\"title\""
	Description  NilString             "json:\"description\""
	Creator      NilNullableSimpleUser "json:\"creator\""
	OpenIssues   int                   "json:\"open_issues\""
	ClosedIssues int                   "json:\"closed_issues\""
	CreatedAt    time.Time             "json:\"created_at\""
	UpdatedAt    time.Time             "json:\"updated_at\""
	ClosedAt     NilDateTime           "json:\"closed_at\""
	DueOn        NilDateTime           "json:\"due_on\""
}

// The state of the milestone.
type NullableMilestoneState string

const (
	NullableMilestoneStateOpen   NullableMilestoneState = "open"
	NullableMilestoneStateClosed NullableMilestoneState = "closed"
)

// Minimal Repository.
// Ref: #/components/schemas/nullable-minimal-repository
type NullableMinimalRepository struct {
	ID                  int                                     "json:\"id\""
	NodeID              string                                  "json:\"node_id\""
	Name                string                                  "json:\"name\""
	FullName            string                                  "json:\"full_name\""
	Owner               SimpleUser                              "json:\"owner\""
	Private             bool                                    "json:\"private\""
	HTMLURL             url.URL                                 "json:\"html_url\""
	Description         NilString                               "json:\"description\""
	Fork                bool                                    "json:\"fork\""
	URL                 url.URL                                 "json:\"url\""
	ArchiveURL          string                                  "json:\"archive_url\""
	AssigneesURL        string                                  "json:\"assignees_url\""
	BlobsURL            string                                  "json:\"blobs_url\""
	BranchesURL         string                                  "json:\"branches_url\""
	CollaboratorsURL    string                                  "json:\"collaborators_url\""
	CommentsURL         string                                  "json:\"comments_url\""
	CommitsURL          string                                  "json:\"commits_url\""
	CompareURL          string                                  "json:\"compare_url\""
	ContentsURL         string                                  "json:\"contents_url\""
	ContributorsURL     url.URL                                 "json:\"contributors_url\""
	DeploymentsURL      url.URL                                 "json:\"deployments_url\""
	DownloadsURL        url.URL                                 "json:\"downloads_url\""
	EventsURL           url.URL                                 "json:\"events_url\""
	ForksURL            url.URL                                 "json:\"forks_url\""
	GitCommitsURL       string                                  "json:\"git_commits_url\""
	GitRefsURL          string                                  "json:\"git_refs_url\""
	GitTagsURL          string                                  "json:\"git_tags_url\""
	GitURL              OptString                               "json:\"git_url\""
	IssueCommentURL     string                                  "json:\"issue_comment_url\""
	IssueEventsURL      string                                  "json:\"issue_events_url\""
	IssuesURL           string                                  "json:\"issues_url\""
	KeysURL             string                                  "json:\"keys_url\""
	LabelsURL           string                                  "json:\"labels_url\""
	LanguagesURL        url.URL                                 "json:\"languages_url\""
	MergesURL           url.URL                                 "json:\"merges_url\""
	MilestonesURL       string                                  "json:\"milestones_url\""
	NotificationsURL    string                                  "json:\"notifications_url\""
	PullsURL            string                                  "json:\"pulls_url\""
	ReleasesURL         string                                  "json:\"releases_url\""
	SSHURL              OptString                               "json:\"ssh_url\""
	StargazersURL       url.URL                                 "json:\"stargazers_url\""
	StatusesURL         string                                  "json:\"statuses_url\""
	SubscribersURL      url.URL                                 "json:\"subscribers_url\""
	SubscriptionURL     url.URL                                 "json:\"subscription_url\""
	TagsURL             url.URL                                 "json:\"tags_url\""
	TeamsURL            url.URL                                 "json:\"teams_url\""
	TreesURL            string                                  "json:\"trees_url\""
	CloneURL            OptString                               "json:\"clone_url\""
	MirrorURL           OptNilString                            "json:\"mirror_url\""
	HooksURL            url.URL                                 "json:\"hooks_url\""
	SvnURL              OptString                               "json:\"svn_url\""
	Homepage            OptNilString                            "json:\"homepage\""
	Language            OptNilString                            "json:\"language\""
	ForksCount          OptInt                                  "json:\"forks_count\""
	StargazersCount     OptInt                                  "json:\"stargazers_count\""
	WatchersCount       OptInt                                  "json:\"watchers_count\""
	Size                OptInt                                  "json:\"size\""
	DefaultBranch       OptString                               "json:\"default_branch\""
	OpenIssuesCount     OptInt                                  "json:\"open_issues_count\""
	IsTemplate          OptBool                                 "json:\"is_template\""
	Topics              []string                                "json:\"topics\""
	HasIssues           OptBool                                 "json:\"has_issues\""
	HasProjects         OptBool                                 "json:\"has_projects\""
	HasWiki             OptBool                                 "json:\"has_wiki\""
	HasPages            OptBool                                 "json:\"has_pages\""
	HasDownloads        OptBool                                 "json:\"has_downloads\""
	Archived            OptBool                                 "json:\"archived\""
	Disabled            OptBool                                 "json:\"disabled\""
	Visibility          OptString                               "json:\"visibility\""
	PushedAt            OptNilDateTime                          "json:\"pushed_at\""
	CreatedAt           OptNilDateTime                          "json:\"created_at\""
	UpdatedAt           OptNilDateTime                          "json:\"updated_at\""
	Permissions         OptNullableMinimalRepositoryPermissions "json:\"permissions\""
	TemplateRepository  OptNilNullableRepository                "json:\"template_repository\""
	TempCloneToken      OptString                               "json:\"temp_clone_token\""
	DeleteBranchOnMerge OptBool                                 "json:\"delete_branch_on_merge\""
	SubscribersCount    OptInt                                  "json:\"subscribers_count\""
	NetworkCount        OptInt                                  "json:\"network_count\""
	CodeOfConduct       OptCodeOfConduct                        "json:\"code_of_conduct\""
	License             OptNilNullableMinimalRepositoryLicense  "json:\"license\""
	Forks               OptInt                                  "json:\"forks\""
	OpenIssues          OptInt                                  "json:\"open_issues\""
	Watchers            OptInt                                  "json:\"watchers\""
	AllowForking        OptBool                                 "json:\"allow_forking\""
}

type NullableMinimalRepositoryLicense struct {
	Key    OptString "json:\"key\""
	Name   OptString "json:\"name\""
	SpdxID OptString "json:\"spdx_id\""
	URL    OptString "json:\"url\""
	NodeID OptString "json:\"node_id\""
}

type NullableMinimalRepositoryPermissions struct {
	Admin    OptBool "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     OptBool "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     OptBool "json:\"pull\""
}

// A git repository.
// Ref: #/components/schemas/nullable-repository
type NullableRepository struct {
	// Unique identifier of the repository.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// The name of the repository.
	Name         string                           "json:\"name\""
	FullName     string                           "json:\"full_name\""
	License      NilNullableLicenseSimple         "json:\"license\""
	Organization OptNilNullableSimpleUser         "json:\"organization\""
	Forks        int                              "json:\"forks\""
	Permissions  OptNullableRepositoryPermissions "json:\"permissions\""
	Owner        SimpleUser                       "json:\"owner\""
	// Whether the repository is private or public.
	Private          bool      "json:\"private\""
	HTMLURL          url.URL   "json:\"html_url\""
	Description      NilString "json:\"description\""
	Fork             bool      "json:\"fork\""
	URL              url.URL   "json:\"url\""
	ArchiveURL       string    "json:\"archive_url\""
	AssigneesURL     string    "json:\"assignees_url\""
	BlobsURL         string    "json:\"blobs_url\""
	BranchesURL      string    "json:\"branches_url\""
	CollaboratorsURL string    "json:\"collaborators_url\""
	CommentsURL      string    "json:\"comments_url\""
	CommitsURL       string    "json:\"commits_url\""
	CompareURL       string    "json:\"compare_url\""
	ContentsURL      string    "json:\"contents_url\""
	ContributorsURL  url.URL   "json:\"contributors_url\""
	DeploymentsURL   url.URL   "json:\"deployments_url\""
	DownloadsURL     url.URL   "json:\"downloads_url\""
	EventsURL        url.URL   "json:\"events_url\""
	ForksURL         url.URL   "json:\"forks_url\""
	GitCommitsURL    string    "json:\"git_commits_url\""
	GitRefsURL       string    "json:\"git_refs_url\""
	GitTagsURL       string    "json:\"git_tags_url\""
	GitURL           string    "json:\"git_url\""
	IssueCommentURL  string    "json:\"issue_comment_url\""
	IssueEventsURL   string    "json:\"issue_events_url\""
	IssuesURL        string    "json:\"issues_url\""
	KeysURL          string    "json:\"keys_url\""
	LabelsURL        string    "json:\"labels_url\""
	LanguagesURL     url.URL   "json:\"languages_url\""
	MergesURL        url.URL   "json:\"merges_url\""
	MilestonesURL    string    "json:\"milestones_url\""
	NotificationsURL string    "json:\"notifications_url\""
	PullsURL         string    "json:\"pulls_url\""
	ReleasesURL      string    "json:\"releases_url\""
	SSHURL           string    "json:\"ssh_url\""
	StargazersURL    url.URL   "json:\"stargazers_url\""
	StatusesURL      string    "json:\"statuses_url\""
	SubscribersURL   url.URL   "json:\"subscribers_url\""
	SubscriptionURL  url.URL   "json:\"subscription_url\""
	TagsURL          url.URL   "json:\"tags_url\""
	TeamsURL         url.URL   "json:\"teams_url\""
	TreesURL         string    "json:\"trees_url\""
	CloneURL         string    "json:\"clone_url\""
	MirrorURL        NilURI    "json:\"mirror_url\""
	HooksURL         url.URL   "json:\"hooks_url\""
	SvnURL           url.URL   "json:\"svn_url\""
	Homepage         NilURI    "json:\"homepage\""
	Language         NilString "json:\"language\""
	ForksCount       int       "json:\"forks_count\""
	StargazersCount  int       "json:\"stargazers_count\""
	WatchersCount    int       "json:\"watchers_count\""
	Size             int       "json:\"size\""
	// The default branch of the repository.
	DefaultBranch   string "json:\"default_branch\""
	OpenIssuesCount int    "json:\"open_issues_count\""
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  "json:\"is_template\""
	Topics     []string "json:\"topics\""
	// Whether issues are enabled.
	HasIssues bool "json:\"has_issues\""
	// Whether projects are enabled.
	HasProjects bool "json:\"has_projects\""
	// Whether the wiki is enabled.
	HasWiki  bool "json:\"has_wiki\""
	HasPages bool "json:\"has_pages\""
	// Whether downloads are enabled.
	HasDownloads bool "json:\"has_downloads\""
	// Whether the repository is archived.
	Archived bool "json:\"archived\""
	// Returns whether or not this repository disabled.
	Disabled bool "json:\"disabled\""
	// The repository visibility: public, private, or internal.
	Visibility OptString   "json:\"visibility\""
	PushedAt   NilDateTime "json:\"pushed_at\""
	CreatedAt  NilDateTime "json:\"created_at\""
	UpdatedAt  NilDateTime "json:\"updated_at\""
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                                    "json:\"allow_rebase_merge\""
	TemplateRepository OptNilNullableRepositoryTemplateRepository "json:\"template_repository\""
	TempCloneToken     OptString                                  "json:\"temp_clone_token\""
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Whether to allow forking this repo.
	AllowForking     OptBool   "json:\"allow_forking\""
	SubscribersCount OptInt    "json:\"subscribers_count\""
	NetworkCount     OptInt    "json:\"network_count\""
	OpenIssues       int       "json:\"open_issues\""
	Watchers         int       "json:\"watchers\""
	MasterBranch     OptString "json:\"master_branch\""
	StarredAt        OptString "json:\"starred_at\""
}

type NullableRepositoryPermissions struct {
	Admin    bool    "json:\"admin\""
	Pull     bool    "json:\"pull\""
	Triage   OptBool "json:\"triage\""
	Push     bool    "json:\"push\""
	Maintain OptBool "json:\"maintain\""
}

type NullableRepositoryTemplateRepository struct {
	ID                  OptInt                                             "json:\"id\""
	NodeID              OptString                                          "json:\"node_id\""
	Name                OptString                                          "json:\"name\""
	FullName            OptString                                          "json:\"full_name\""
	Owner               OptNullableRepositoryTemplateRepositoryOwner       "json:\"owner\""
	Private             OptBool                                            "json:\"private\""
	HTMLURL             OptString                                          "json:\"html_url\""
	Description         OptString                                          "json:\"description\""
	Fork                OptBool                                            "json:\"fork\""
	URL                 OptString                                          "json:\"url\""
	ArchiveURL          OptString                                          "json:\"archive_url\""
	AssigneesURL        OptString                                          "json:\"assignees_url\""
	BlobsURL            OptString                                          "json:\"blobs_url\""
	BranchesURL         OptString                                          "json:\"branches_url\""
	CollaboratorsURL    OptString                                          "json:\"collaborators_url\""
	CommentsURL         OptString                                          "json:\"comments_url\""
	CommitsURL          OptString                                          "json:\"commits_url\""
	CompareURL          OptString                                          "json:\"compare_url\""
	ContentsURL         OptString                                          "json:\"contents_url\""
	ContributorsURL     OptString                                          "json:\"contributors_url\""
	DeploymentsURL      OptString                                          "json:\"deployments_url\""
	DownloadsURL        OptString                                          "json:\"downloads_url\""
	EventsURL           OptString                                          "json:\"events_url\""
	ForksURL            OptString                                          "json:\"forks_url\""
	GitCommitsURL       OptString                                          "json:\"git_commits_url\""
	GitRefsURL          OptString                                          "json:\"git_refs_url\""
	GitTagsURL          OptString                                          "json:\"git_tags_url\""
	GitURL              OptString                                          "json:\"git_url\""
	IssueCommentURL     OptString                                          "json:\"issue_comment_url\""
	IssueEventsURL      OptString                                          "json:\"issue_events_url\""
	IssuesURL           OptString                                          "json:\"issues_url\""
	KeysURL             OptString                                          "json:\"keys_url\""
	LabelsURL           OptString                                          "json:\"labels_url\""
	LanguagesURL        OptString                                          "json:\"languages_url\""
	MergesURL           OptString                                          "json:\"merges_url\""
	MilestonesURL       OptString                                          "json:\"milestones_url\""
	NotificationsURL    OptString                                          "json:\"notifications_url\""
	PullsURL            OptString                                          "json:\"pulls_url\""
	ReleasesURL         OptString                                          "json:\"releases_url\""
	SSHURL              OptString                                          "json:\"ssh_url\""
	StargazersURL       OptString                                          "json:\"stargazers_url\""
	StatusesURL         OptString                                          "json:\"statuses_url\""
	SubscribersURL      OptString                                          "json:\"subscribers_url\""
	SubscriptionURL     OptString                                          "json:\"subscription_url\""
	TagsURL             OptString                                          "json:\"tags_url\""
	TeamsURL            OptString                                          "json:\"teams_url\""
	TreesURL            OptString                                          "json:\"trees_url\""
	CloneURL            OptString                                          "json:\"clone_url\""
	MirrorURL           OptString                                          "json:\"mirror_url\""
	HooksURL            OptString                                          "json:\"hooks_url\""
	SvnURL              OptString                                          "json:\"svn_url\""
	Homepage            OptString                                          "json:\"homepage\""
	Language            OptString                                          "json:\"language\""
	ForksCount          OptInt                                             "json:\"forks_count\""
	StargazersCount     OptInt                                             "json:\"stargazers_count\""
	WatchersCount       OptInt                                             "json:\"watchers_count\""
	Size                OptInt                                             "json:\"size\""
	DefaultBranch       OptString                                          "json:\"default_branch\""
	OpenIssuesCount     OptInt                                             "json:\"open_issues_count\""
	IsTemplate          OptBool                                            "json:\"is_template\""
	Topics              []string                                           "json:\"topics\""
	HasIssues           OptBool                                            "json:\"has_issues\""
	HasProjects         OptBool                                            "json:\"has_projects\""
	HasWiki             OptBool                                            "json:\"has_wiki\""
	HasPages            OptBool                                            "json:\"has_pages\""
	HasDownloads        OptBool                                            "json:\"has_downloads\""
	Archived            OptBool                                            "json:\"archived\""
	Disabled            OptBool                                            "json:\"disabled\""
	Visibility          OptString                                          "json:\"visibility\""
	PushedAt            OptString                                          "json:\"pushed_at\""
	CreatedAt           OptString                                          "json:\"created_at\""
	UpdatedAt           OptString                                          "json:\"updated_at\""
	Permissions         OptNullableRepositoryTemplateRepositoryPermissions "json:\"permissions\""
	AllowRebaseMerge    OptBool                                            "json:\"allow_rebase_merge\""
	TempCloneToken      OptString                                          "json:\"temp_clone_token\""
	AllowSquashMerge    OptBool                                            "json:\"allow_squash_merge\""
	AllowAutoMerge      OptBool                                            "json:\"allow_auto_merge\""
	DeleteBranchOnMerge OptBool                                            "json:\"delete_branch_on_merge\""
	AllowMergeCommit    OptBool                                            "json:\"allow_merge_commit\""
	SubscribersCount    OptInt                                             "json:\"subscribers_count\""
	NetworkCount        OptInt                                             "json:\"network_count\""
}

type NullableRepositoryTemplateRepositoryOwner struct {
	Login             OptString "json:\"login\""
	ID                OptInt    "json:\"id\""
	NodeID            OptString "json:\"node_id\""
	AvatarURL         OptString "json:\"avatar_url\""
	GravatarID        OptString "json:\"gravatar_id\""
	URL               OptString "json:\"url\""
	HTMLURL           OptString "json:\"html_url\""
	FollowersURL      OptString "json:\"followers_url\""
	FollowingURL      OptString "json:\"following_url\""
	GistsURL          OptString "json:\"gists_url\""
	StarredURL        OptString "json:\"starred_url\""
	SubscriptionsURL  OptString "json:\"subscriptions_url\""
	OrganizationsURL  OptString "json:\"organizations_url\""
	ReposURL          OptString "json:\"repos_url\""
	EventsURL         OptString "json:\"events_url\""
	ReceivedEventsURL OptString "json:\"received_events_url\""
	Type              OptString "json:\"type\""
	SiteAdmin         OptBool   "json:\"site_admin\""
}

type NullableRepositoryTemplateRepositoryPermissions struct {
	Admin    OptBool "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     OptBool "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     OptBool "json:\"pull\""
}

// Ref: #/components/schemas/nullable-scoped-installation
type NullableScopedInstallation struct {
	Permissions AppPermissions "json:\"permissions\""
	// Describe whether all repositories have been selected or there's a selection involved.
	RepositorySelection    NullableScopedInstallationRepositorySelection "json:\"repository_selection\""
	SingleFileName         NilString                                     "json:\"single_file_name\""
	HasMultipleSingleFiles OptBool                                       "json:\"has_multiple_single_files\""
	SingleFilePaths        []string                                      "json:\"single_file_paths\""
	RepositoriesURL        url.URL                                       "json:\"repositories_url\""
	Account                SimpleUser                                    "json:\"account\""
}

// Describe whether all repositories have been selected or there's a selection involved.
type NullableScopedInstallationRepositorySelection string

const (
	NullableScopedInstallationRepositorySelectionAll      NullableScopedInstallationRepositorySelection = "all"
	NullableScopedInstallationRepositorySelectionSelected NullableScopedInstallationRepositorySelection = "selected"
)

// Simple Commit.
// Ref: #/components/schemas/nullable-simple-commit
type NullableSimpleCommit struct {
	ID        string                           "json:\"id\""
	TreeID    string                           "json:\"tree_id\""
	Message   string                           "json:\"message\""
	Timestamp time.Time                        "json:\"timestamp\""
	Author    NilNullableSimpleCommitAuthor    "json:\"author\""
	Committer NilNullableSimpleCommitCommitter "json:\"committer\""
}

type NullableSimpleCommitAuthor struct {
	Name  string "json:\"name\""
	Email string "json:\"email\""
}

type NullableSimpleCommitCommitter struct {
	Name  string "json:\"name\""
	Email string "json:\"email\""
}

// Simple User.
// Ref: #/components/schemas/nullable-simple-user
type NullableSimpleUser struct {
	Name              OptNilString "json:\"name\""
	Email             OptNilString "json:\"email\""
	Login             string       "json:\"login\""
	ID                int          "json:\"id\""
	NodeID            string       "json:\"node_id\""
	AvatarURL         url.URL      "json:\"avatar_url\""
	GravatarID        NilString    "json:\"gravatar_id\""
	URL               url.URL      "json:\"url\""
	HTMLURL           url.URL      "json:\"html_url\""
	FollowersURL      url.URL      "json:\"followers_url\""
	FollowingURL      string       "json:\"following_url\""
	GistsURL          string       "json:\"gists_url\""
	StarredURL        string       "json:\"starred_url\""
	SubscriptionsURL  url.URL      "json:\"subscriptions_url\""
	OrganizationsURL  url.URL      "json:\"organizations_url\""
	ReposURL          url.URL      "json:\"repos_url\""
	EventsURL         string       "json:\"events_url\""
	ReceivedEventsURL url.URL      "json:\"received_events_url\""
	Type              string       "json:\"type\""
	SiteAdmin         bool         "json:\"site_admin\""
	StarredAt         OptString    "json:\"starred_at\""
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/nullable-team-simple
type NullableTeamSimple struct {
	// Unique identifier of the team.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the team.
	URL        url.URL "json:\"url\""
	MembersURL string  "json:\"members_url\""
	// Name of the team.
	Name string "json:\"name\""
	// Description of the team.
	Description NilString "json:\"description\""
	// Permission that the team will have for its repositories.
	Permission string "json:\"permission\""
	// The level of privacy this team should have.
	Privacy         OptString "json:\"privacy\""
	HTMLURL         url.URL   "json:\"html_url\""
	RepositoriesURL url.URL   "json:\"repositories_url\""
	Slug            string    "json:\"slug\""
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString "json:\"ldap_dn\""
}

type OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden) oAuthAuthorizationsCreateAuthorizationRes() {
}

type OAuthAuthorizationsCreateAuthorizationApplicationJSONGone BasicError

func (*OAuthAuthorizationsCreateAuthorizationApplicationJSONGone) oAuthAuthorizationsCreateAuthorizationRes() {
}

type OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized) oAuthAuthorizationsCreateAuthorizationRes() {
}

type OAuthAuthorizationsCreateAuthorizationReq struct {
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray "json:\"scopes\""
	// A note to remind you what the OAuth token is for.
	Note OptString "json:\"note\""
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString "json:\"note_url\""
	// The OAuth app client key for which to create the token.
	ClientID OptString "json:\"client_id\""
	// The OAuth app client secret for which to create the token.
	ClientSecret OptString "json:\"client_secret\""
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString "json:\"fingerprint\""
}

type OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden) oAuthAuthorizationsDeleteAuthorizationRes() {
}

type OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized) oAuthAuthorizationsDeleteAuthorizationRes() {
}

// OAuthAuthorizationsDeleteAuthorizationNoContent is response for OAuthAuthorizationsDeleteAuthorization operation.
type OAuthAuthorizationsDeleteAuthorizationNoContent struct{}

func (*OAuthAuthorizationsDeleteAuthorizationNoContent) oAuthAuthorizationsDeleteAuthorizationRes() {}

type OAuthAuthorizationsDeleteGrantApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsDeleteGrantApplicationJSONForbidden) oAuthAuthorizationsDeleteGrantRes() {}

type OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized) oAuthAuthorizationsDeleteGrantRes() {
}

// OAuthAuthorizationsDeleteGrantNoContent is response for OAuthAuthorizationsDeleteGrant operation.
type OAuthAuthorizationsDeleteGrantNoContent struct{}

func (*OAuthAuthorizationsDeleteGrantNoContent) oAuthAuthorizationsDeleteGrantRes() {}

type OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden) oAuthAuthorizationsGetAuthorizationRes() {
}

type OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized) oAuthAuthorizationsGetAuthorizationRes() {
}

type OAuthAuthorizationsGetGrantApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsGetGrantApplicationJSONForbidden) oAuthAuthorizationsGetGrantRes() {}

type OAuthAuthorizationsGetGrantApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsGetGrantApplicationJSONUnauthorized) oAuthAuthorizationsGetGrantRes() {}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated Authorization

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK Authorization

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string "json:\"client_secret\""
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray "json:\"scopes\""
	// A note to remind you what the OAuth token is for.
	Note OptString "json:\"note\""
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString "json:\"note_url\""
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated Authorization

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK Authorization

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppReq struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string "json:\"client_secret\""
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray "json:\"scopes\""
	// A note to remind you what the OAuth token is for.
	Note OptString "json:\"note\""
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString "json:\"note_url\""
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString "json:\"fingerprint\""
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden) oAuthAuthorizationsListAuthorizationsRes() {
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound) oAuthAuthorizationsListAuthorizationsRes() {
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized) oAuthAuthorizationsListAuthorizationsRes() {
}

type OAuthAuthorizationsListAuthorizationsOKApplicationJSON []Authorization

func (OAuthAuthorizationsListAuthorizationsOKApplicationJSON) oAuthAuthorizationsListAuthorizationsRes() {
}

type OAuthAuthorizationsListGrantsApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONForbidden) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsListGrantsApplicationJSONNotFound BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONNotFound) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsListGrantsApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONUnauthorized) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsListGrantsOKApplicationJSON []ApplicationGrant

func (OAuthAuthorizationsListGrantsOKApplicationJSON) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsUpdateAuthorizationReq struct {
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray "json:\"scopes\""
	// A list of scopes to add to this authorization.
	AddScopes []string "json:\"add_scopes\""
	// A list of scopes to remove from this authorization.
	RemoveScopes []string "json:\"remove_scopes\""
	// A note to remind you what the OAuth token is for.
	Note OptString "json:\"note\""
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString "json:\"note_url\""
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString "json:\"fingerprint\""
}

// NewOptAPIOverviewSSHKeyFingerprints returns new OptAPIOverviewSSHKeyFingerprints with value set to v.
func NewOptAPIOverviewSSHKeyFingerprints(v APIOverviewSSHKeyFingerprints) OptAPIOverviewSSHKeyFingerprints {
	return OptAPIOverviewSSHKeyFingerprints{
		Value: v,
		Set:   true,
	}
}

// OptAPIOverviewSSHKeyFingerprints is optional APIOverviewSSHKeyFingerprints.
type OptAPIOverviewSSHKeyFingerprints struct {
	Value APIOverviewSSHKeyFingerprints
	Set   bool
}

// IsSet returns true if OptAPIOverviewSSHKeyFingerprints was set.
func (o OptAPIOverviewSSHKeyFingerprints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIOverviewSSHKeyFingerprints) Reset() {
	var v APIOverviewSSHKeyFingerprints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIOverviewSSHKeyFingerprints) SetTo(v APIOverviewSSHKeyFingerprints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIOverviewSSHKeyFingerprints) Get() (v APIOverviewSSHKeyFingerprints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIOverviewSSHKeyFingerprints) Or(d APIOverviewSSHKeyFingerprints) APIOverviewSSHKeyFingerprints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility returns new OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility with value set to v.
func NewOptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility(v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility {
	return OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility is optional ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility.
type OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility struct {
	Value ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility was set.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Reset() {
	var v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) SetTo(v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Get() (v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Or(d ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsListJobsForWorkflowRunFilter returns new OptActionsListJobsForWorkflowRunFilter with value set to v.
func NewOptActionsListJobsForWorkflowRunFilter(v ActionsListJobsForWorkflowRunFilter) OptActionsListJobsForWorkflowRunFilter {
	return OptActionsListJobsForWorkflowRunFilter{
		Value: v,
		Set:   true,
	}
}

// OptActionsListJobsForWorkflowRunFilter is optional ActionsListJobsForWorkflowRunFilter.
type OptActionsListJobsForWorkflowRunFilter struct {
	Value ActionsListJobsForWorkflowRunFilter
	Set   bool
}

// IsSet returns true if OptActionsListJobsForWorkflowRunFilter was set.
func (o OptActionsListJobsForWorkflowRunFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsListJobsForWorkflowRunFilter) Reset() {
	var v ActionsListJobsForWorkflowRunFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsListJobsForWorkflowRunFilter) SetTo(v ActionsListJobsForWorkflowRunFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsListJobsForWorkflowRunFilter) Get() (v ActionsListJobsForWorkflowRunFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsListJobsForWorkflowRunFilter) Or(d ActionsListJobsForWorkflowRunFilter) ActionsListJobsForWorkflowRunFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsListWorkflowRunsForRepoStatus returns new OptActionsListWorkflowRunsForRepoStatus with value set to v.
func NewOptActionsListWorkflowRunsForRepoStatus(v ActionsListWorkflowRunsForRepoStatus) OptActionsListWorkflowRunsForRepoStatus {
	return OptActionsListWorkflowRunsForRepoStatus{
		Value: v,
		Set:   true,
	}
}

// OptActionsListWorkflowRunsForRepoStatus is optional ActionsListWorkflowRunsForRepoStatus.
type OptActionsListWorkflowRunsForRepoStatus struct {
	Value ActionsListWorkflowRunsForRepoStatus
	Set   bool
}

// IsSet returns true if OptActionsListWorkflowRunsForRepoStatus was set.
func (o OptActionsListWorkflowRunsForRepoStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsListWorkflowRunsForRepoStatus) Reset() {
	var v ActionsListWorkflowRunsForRepoStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsListWorkflowRunsForRepoStatus) SetTo(v ActionsListWorkflowRunsForRepoStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsListWorkflowRunsForRepoStatus) Get() (v ActionsListWorkflowRunsForRepoStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsListWorkflowRunsForRepoStatus) Or(d ActionsListWorkflowRunsForRepoStatus) ActionsListWorkflowRunsForRepoStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility returns new OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility with value set to v.
func NewOptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility(v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility {
	return OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility is optional ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility.
type OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility struct {
	Value ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility was set.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Reset() {
	var v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) SetTo(v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Get() (v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Or(d ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityListReposStarredByAuthenticatedUserDirection returns new OptActivityListReposStarredByAuthenticatedUserDirection with value set to v.
func NewOptActivityListReposStarredByAuthenticatedUserDirection(v ActivityListReposStarredByAuthenticatedUserDirection) OptActivityListReposStarredByAuthenticatedUserDirection {
	return OptActivityListReposStarredByAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptActivityListReposStarredByAuthenticatedUserDirection is optional ActivityListReposStarredByAuthenticatedUserDirection.
type OptActivityListReposStarredByAuthenticatedUserDirection struct {
	Value ActivityListReposStarredByAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptActivityListReposStarredByAuthenticatedUserDirection was set.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityListReposStarredByAuthenticatedUserDirection) Reset() {
	var v ActivityListReposStarredByAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityListReposStarredByAuthenticatedUserDirection) SetTo(v ActivityListReposStarredByAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) Get() (v ActivityListReposStarredByAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) Or(d ActivityListReposStarredByAuthenticatedUserDirection) ActivityListReposStarredByAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityListReposStarredByAuthenticatedUserSort returns new OptActivityListReposStarredByAuthenticatedUserSort with value set to v.
func NewOptActivityListReposStarredByAuthenticatedUserSort(v ActivityListReposStarredByAuthenticatedUserSort) OptActivityListReposStarredByAuthenticatedUserSort {
	return OptActivityListReposStarredByAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptActivityListReposStarredByAuthenticatedUserSort is optional ActivityListReposStarredByAuthenticatedUserSort.
type OptActivityListReposStarredByAuthenticatedUserSort struct {
	Value ActivityListReposStarredByAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptActivityListReposStarredByAuthenticatedUserSort was set.
func (o OptActivityListReposStarredByAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityListReposStarredByAuthenticatedUserSort) Reset() {
	var v ActivityListReposStarredByAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityListReposStarredByAuthenticatedUserSort) SetTo(v ActivityListReposStarredByAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityListReposStarredByAuthenticatedUserSort) Get() (v ActivityListReposStarredByAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityListReposStarredByAuthenticatedUserSort) Or(d ActivityListReposStarredByAuthenticatedUserSort) ActivityListReposStarredByAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityMarkNotificationsAsReadReq returns new OptActivityMarkNotificationsAsReadReq with value set to v.
func NewOptActivityMarkNotificationsAsReadReq(v ActivityMarkNotificationsAsReadReq) OptActivityMarkNotificationsAsReadReq {
	return OptActivityMarkNotificationsAsReadReq{
		Value: v,
		Set:   true,
	}
}

// OptActivityMarkNotificationsAsReadReq is optional ActivityMarkNotificationsAsReadReq.
type OptActivityMarkNotificationsAsReadReq struct {
	Value ActivityMarkNotificationsAsReadReq
	Set   bool
}

// IsSet returns true if OptActivityMarkNotificationsAsReadReq was set.
func (o OptActivityMarkNotificationsAsReadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityMarkNotificationsAsReadReq) Reset() {
	var v ActivityMarkNotificationsAsReadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityMarkNotificationsAsReadReq) SetTo(v ActivityMarkNotificationsAsReadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityMarkNotificationsAsReadReq) Get() (v ActivityMarkNotificationsAsReadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityMarkNotificationsAsReadReq) Or(d ActivityMarkNotificationsAsReadReq) ActivityMarkNotificationsAsReadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityMarkRepoNotificationsAsReadReq returns new OptActivityMarkRepoNotificationsAsReadReq with value set to v.
func NewOptActivityMarkRepoNotificationsAsReadReq(v ActivityMarkRepoNotificationsAsReadReq) OptActivityMarkRepoNotificationsAsReadReq {
	return OptActivityMarkRepoNotificationsAsReadReq{
		Value: v,
		Set:   true,
	}
}

// OptActivityMarkRepoNotificationsAsReadReq is optional ActivityMarkRepoNotificationsAsReadReq.
type OptActivityMarkRepoNotificationsAsReadReq struct {
	Value ActivityMarkRepoNotificationsAsReadReq
	Set   bool
}

// IsSet returns true if OptActivityMarkRepoNotificationsAsReadReq was set.
func (o OptActivityMarkRepoNotificationsAsReadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityMarkRepoNotificationsAsReadReq) Reset() {
	var v ActivityMarkRepoNotificationsAsReadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityMarkRepoNotificationsAsReadReq) SetTo(v ActivityMarkRepoNotificationsAsReadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityMarkRepoNotificationsAsReadReq) Get() (v ActivityMarkRepoNotificationsAsReadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityMarkRepoNotificationsAsReadReq) Or(d ActivityMarkRepoNotificationsAsReadReq) ActivityMarkRepoNotificationsAsReadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivitySetRepoSubscriptionReq returns new OptActivitySetRepoSubscriptionReq with value set to v.
func NewOptActivitySetRepoSubscriptionReq(v ActivitySetRepoSubscriptionReq) OptActivitySetRepoSubscriptionReq {
	return OptActivitySetRepoSubscriptionReq{
		Value: v,
		Set:   true,
	}
}

// OptActivitySetRepoSubscriptionReq is optional ActivitySetRepoSubscriptionReq.
type OptActivitySetRepoSubscriptionReq struct {
	Value ActivitySetRepoSubscriptionReq
	Set   bool
}

// IsSet returns true if OptActivitySetRepoSubscriptionReq was set.
func (o OptActivitySetRepoSubscriptionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivitySetRepoSubscriptionReq) Reset() {
	var v ActivitySetRepoSubscriptionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivitySetRepoSubscriptionReq) SetTo(v ActivitySetRepoSubscriptionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivitySetRepoSubscriptionReq) Get() (v ActivitySetRepoSubscriptionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivitySetRepoSubscriptionReq) Or(d ActivitySetRepoSubscriptionReq) ActivitySetRepoSubscriptionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivitySetThreadSubscriptionReq returns new OptActivitySetThreadSubscriptionReq with value set to v.
func NewOptActivitySetThreadSubscriptionReq(v ActivitySetThreadSubscriptionReq) OptActivitySetThreadSubscriptionReq {
	return OptActivitySetThreadSubscriptionReq{
		Value: v,
		Set:   true,
	}
}

// OptActivitySetThreadSubscriptionReq is optional ActivitySetThreadSubscriptionReq.
type OptActivitySetThreadSubscriptionReq struct {
	Value ActivitySetThreadSubscriptionReq
	Set   bool
}

// IsSet returns true if OptActivitySetThreadSubscriptionReq was set.
func (o OptActivitySetThreadSubscriptionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivitySetThreadSubscriptionReq) Reset() {
	var v ActivitySetThreadSubscriptionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivitySetThreadSubscriptionReq) SetTo(v ActivitySetThreadSubscriptionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivitySetThreadSubscriptionReq) Get() (v ActivitySetThreadSubscriptionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivitySetThreadSubscriptionReq) Or(d ActivitySetThreadSubscriptionReq) ActivitySetThreadSubscriptionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActor returns new OptActor with value set to v.
func NewOptActor(v Actor) OptActor {
	return OptActor{
		Value: v,
		Set:   true,
	}
}

// OptActor is optional Actor.
type OptActor struct {
	Value Actor
	Set   bool
}

// IsSet returns true if OptActor was set.
func (o OptActor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActor) Reset() {
	var v Actor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActor) SetTo(v Actor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActor) Get() (v Actor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActor) Or(d Actor) Actor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertCreatedAt returns new OptAlertCreatedAt with value set to v.
func NewOptAlertCreatedAt(v AlertCreatedAt) OptAlertCreatedAt {
	return OptAlertCreatedAt{
		Value: v,
		Set:   true,
	}
}

// OptAlertCreatedAt is optional AlertCreatedAt.
type OptAlertCreatedAt struct {
	Value AlertCreatedAt
	Set   bool
}

// IsSet returns true if OptAlertCreatedAt was set.
func (o OptAlertCreatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertCreatedAt) Reset() {
	var v AlertCreatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertCreatedAt) SetTo(v AlertCreatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertCreatedAt) Get() (v AlertCreatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertCreatedAt) Or(d AlertCreatedAt) AlertCreatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertHTMLURL returns new OptAlertHTMLURL with value set to v.
func NewOptAlertHTMLURL(v AlertHTMLURL) OptAlertHTMLURL {
	return OptAlertHTMLURL{
		Value: v,
		Set:   true,
	}
}

// OptAlertHTMLURL is optional AlertHTMLURL.
type OptAlertHTMLURL struct {
	Value AlertHTMLURL
	Set   bool
}

// IsSet returns true if OptAlertHTMLURL was set.
func (o OptAlertHTMLURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertHTMLURL) Reset() {
	var v AlertHTMLURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertHTMLURL) SetTo(v AlertHTMLURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertHTMLURL) Get() (v AlertHTMLURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertHTMLURL) Or(d AlertHTMLURL) AlertHTMLURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertNumber returns new OptAlertNumber with value set to v.
func NewOptAlertNumber(v AlertNumber) OptAlertNumber {
	return OptAlertNumber{
		Value: v,
		Set:   true,
	}
}

// OptAlertNumber is optional AlertNumber.
type OptAlertNumber struct {
	Value AlertNumber
	Set   bool
}

// IsSet returns true if OptAlertNumber was set.
func (o OptAlertNumber) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertNumber) Reset() {
	var v AlertNumber
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertNumber) SetTo(v AlertNumber) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertNumber) Get() (v AlertNumber, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertNumber) Or(d AlertNumber) AlertNumber {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertURL returns new OptAlertURL with value set to v.
func NewOptAlertURL(v AlertURL) OptAlertURL {
	return OptAlertURL{
		Value: v,
		Set:   true,
	}
}

// OptAlertURL is optional AlertURL.
type OptAlertURL struct {
	Value AlertURL
	Set   bool
}

// IsSet returns true if OptAlertURL was set.
func (o OptAlertURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertURL) Reset() {
	var v AlertURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertURL) SetTo(v AlertURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertURL) Get() (v AlertURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertURL) Or(d AlertURL) AlertURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAllowedActions returns new OptAllowedActions with value set to v.
func NewOptAllowedActions(v AllowedActions) OptAllowedActions {
	return OptAllowedActions{
		Value: v,
		Set:   true,
	}
}

// OptAllowedActions is optional AllowedActions.
type OptAllowedActions struct {
	Value AllowedActions
	Set   bool
}

// IsSet returns true if OptAllowedActions was set.
func (o OptAllowedActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAllowedActions) Reset() {
	var v AllowedActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAllowedActions) SetTo(v AllowedActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAllowedActions) Get() (v AllowedActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAllowedActions) Or(d AllowedActions) AllowedActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissions returns new OptAppPermissions with value set to v.
func NewOptAppPermissions(v AppPermissions) OptAppPermissions {
	return OptAppPermissions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissions is optional AppPermissions.
type OptAppPermissions struct {
	Value AppPermissions
	Set   bool
}

// IsSet returns true if OptAppPermissions was set.
func (o OptAppPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissions) Reset() {
	var v AppPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissions) SetTo(v AppPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissions) Get() (v AppPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissions) Or(d AppPermissions) AppPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsActions returns new OptAppPermissionsActions with value set to v.
func NewOptAppPermissionsActions(v AppPermissionsActions) OptAppPermissionsActions {
	return OptAppPermissionsActions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsActions is optional AppPermissionsActions.
type OptAppPermissionsActions struct {
	Value AppPermissionsActions
	Set   bool
}

// IsSet returns true if OptAppPermissionsActions was set.
func (o OptAppPermissionsActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsActions) Reset() {
	var v AppPermissionsActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsActions) SetTo(v AppPermissionsActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsActions) Get() (v AppPermissionsActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsActions) Or(d AppPermissionsActions) AppPermissionsActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsAdministration returns new OptAppPermissionsAdministration with value set to v.
func NewOptAppPermissionsAdministration(v AppPermissionsAdministration) OptAppPermissionsAdministration {
	return OptAppPermissionsAdministration{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsAdministration is optional AppPermissionsAdministration.
type OptAppPermissionsAdministration struct {
	Value AppPermissionsAdministration
	Set   bool
}

// IsSet returns true if OptAppPermissionsAdministration was set.
func (o OptAppPermissionsAdministration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsAdministration) Reset() {
	var v AppPermissionsAdministration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsAdministration) SetTo(v AppPermissionsAdministration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsAdministration) Get() (v AppPermissionsAdministration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsAdministration) Or(d AppPermissionsAdministration) AppPermissionsAdministration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsChecks returns new OptAppPermissionsChecks with value set to v.
func NewOptAppPermissionsChecks(v AppPermissionsChecks) OptAppPermissionsChecks {
	return OptAppPermissionsChecks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsChecks is optional AppPermissionsChecks.
type OptAppPermissionsChecks struct {
	Value AppPermissionsChecks
	Set   bool
}

// IsSet returns true if OptAppPermissionsChecks was set.
func (o OptAppPermissionsChecks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsChecks) Reset() {
	var v AppPermissionsChecks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsChecks) SetTo(v AppPermissionsChecks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsChecks) Get() (v AppPermissionsChecks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsChecks) Or(d AppPermissionsChecks) AppPermissionsChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsContentReferences returns new OptAppPermissionsContentReferences with value set to v.
func NewOptAppPermissionsContentReferences(v AppPermissionsContentReferences) OptAppPermissionsContentReferences {
	return OptAppPermissionsContentReferences{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsContentReferences is optional AppPermissionsContentReferences.
type OptAppPermissionsContentReferences struct {
	Value AppPermissionsContentReferences
	Set   bool
}

// IsSet returns true if OptAppPermissionsContentReferences was set.
func (o OptAppPermissionsContentReferences) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsContentReferences) Reset() {
	var v AppPermissionsContentReferences
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsContentReferences) SetTo(v AppPermissionsContentReferences) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsContentReferences) Get() (v AppPermissionsContentReferences, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsContentReferences) Or(d AppPermissionsContentReferences) AppPermissionsContentReferences {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsContents returns new OptAppPermissionsContents with value set to v.
func NewOptAppPermissionsContents(v AppPermissionsContents) OptAppPermissionsContents {
	return OptAppPermissionsContents{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsContents is optional AppPermissionsContents.
type OptAppPermissionsContents struct {
	Value AppPermissionsContents
	Set   bool
}

// IsSet returns true if OptAppPermissionsContents was set.
func (o OptAppPermissionsContents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsContents) Reset() {
	var v AppPermissionsContents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsContents) SetTo(v AppPermissionsContents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsContents) Get() (v AppPermissionsContents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsContents) Or(d AppPermissionsContents) AppPermissionsContents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsDeployments returns new OptAppPermissionsDeployments with value set to v.
func NewOptAppPermissionsDeployments(v AppPermissionsDeployments) OptAppPermissionsDeployments {
	return OptAppPermissionsDeployments{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsDeployments is optional AppPermissionsDeployments.
type OptAppPermissionsDeployments struct {
	Value AppPermissionsDeployments
	Set   bool
}

// IsSet returns true if OptAppPermissionsDeployments was set.
func (o OptAppPermissionsDeployments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsDeployments) Reset() {
	var v AppPermissionsDeployments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsDeployments) SetTo(v AppPermissionsDeployments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsDeployments) Get() (v AppPermissionsDeployments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsDeployments) Or(d AppPermissionsDeployments) AppPermissionsDeployments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsEnvironments returns new OptAppPermissionsEnvironments with value set to v.
func NewOptAppPermissionsEnvironments(v AppPermissionsEnvironments) OptAppPermissionsEnvironments {
	return OptAppPermissionsEnvironments{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsEnvironments is optional AppPermissionsEnvironments.
type OptAppPermissionsEnvironments struct {
	Value AppPermissionsEnvironments
	Set   bool
}

// IsSet returns true if OptAppPermissionsEnvironments was set.
func (o OptAppPermissionsEnvironments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsEnvironments) Reset() {
	var v AppPermissionsEnvironments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsEnvironments) SetTo(v AppPermissionsEnvironments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsEnvironments) Get() (v AppPermissionsEnvironments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsEnvironments) Or(d AppPermissionsEnvironments) AppPermissionsEnvironments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsIssues returns new OptAppPermissionsIssues with value set to v.
func NewOptAppPermissionsIssues(v AppPermissionsIssues) OptAppPermissionsIssues {
	return OptAppPermissionsIssues{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsIssues is optional AppPermissionsIssues.
type OptAppPermissionsIssues struct {
	Value AppPermissionsIssues
	Set   bool
}

// IsSet returns true if OptAppPermissionsIssues was set.
func (o OptAppPermissionsIssues) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsIssues) Reset() {
	var v AppPermissionsIssues
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsIssues) SetTo(v AppPermissionsIssues) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsIssues) Get() (v AppPermissionsIssues, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsIssues) Or(d AppPermissionsIssues) AppPermissionsIssues {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsMembers returns new OptAppPermissionsMembers with value set to v.
func NewOptAppPermissionsMembers(v AppPermissionsMembers) OptAppPermissionsMembers {
	return OptAppPermissionsMembers{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsMembers is optional AppPermissionsMembers.
type OptAppPermissionsMembers struct {
	Value AppPermissionsMembers
	Set   bool
}

// IsSet returns true if OptAppPermissionsMembers was set.
func (o OptAppPermissionsMembers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsMembers) Reset() {
	var v AppPermissionsMembers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsMembers) SetTo(v AppPermissionsMembers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsMembers) Get() (v AppPermissionsMembers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsMembers) Or(d AppPermissionsMembers) AppPermissionsMembers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsMetadata returns new OptAppPermissionsMetadata with value set to v.
func NewOptAppPermissionsMetadata(v AppPermissionsMetadata) OptAppPermissionsMetadata {
	return OptAppPermissionsMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsMetadata is optional AppPermissionsMetadata.
type OptAppPermissionsMetadata struct {
	Value AppPermissionsMetadata
	Set   bool
}

// IsSet returns true if OptAppPermissionsMetadata was set.
func (o OptAppPermissionsMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsMetadata) Reset() {
	var v AppPermissionsMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsMetadata) SetTo(v AppPermissionsMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsMetadata) Get() (v AppPermissionsMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsMetadata) Or(d AppPermissionsMetadata) AppPermissionsMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationAdministration returns new OptAppPermissionsOrganizationAdministration with value set to v.
func NewOptAppPermissionsOrganizationAdministration(v AppPermissionsOrganizationAdministration) OptAppPermissionsOrganizationAdministration {
	return OptAppPermissionsOrganizationAdministration{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationAdministration is optional AppPermissionsOrganizationAdministration.
type OptAppPermissionsOrganizationAdministration struct {
	Value AppPermissionsOrganizationAdministration
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationAdministration was set.
func (o OptAppPermissionsOrganizationAdministration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationAdministration) Reset() {
	var v AppPermissionsOrganizationAdministration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationAdministration) SetTo(v AppPermissionsOrganizationAdministration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationAdministration) Get() (v AppPermissionsOrganizationAdministration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationAdministration) Or(d AppPermissionsOrganizationAdministration) AppPermissionsOrganizationAdministration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationHooks returns new OptAppPermissionsOrganizationHooks with value set to v.
func NewOptAppPermissionsOrganizationHooks(v AppPermissionsOrganizationHooks) OptAppPermissionsOrganizationHooks {
	return OptAppPermissionsOrganizationHooks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationHooks is optional AppPermissionsOrganizationHooks.
type OptAppPermissionsOrganizationHooks struct {
	Value AppPermissionsOrganizationHooks
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationHooks was set.
func (o OptAppPermissionsOrganizationHooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationHooks) Reset() {
	var v AppPermissionsOrganizationHooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationHooks) SetTo(v AppPermissionsOrganizationHooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationHooks) Get() (v AppPermissionsOrganizationHooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationHooks) Or(d AppPermissionsOrganizationHooks) AppPermissionsOrganizationHooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationPackages returns new OptAppPermissionsOrganizationPackages with value set to v.
func NewOptAppPermissionsOrganizationPackages(v AppPermissionsOrganizationPackages) OptAppPermissionsOrganizationPackages {
	return OptAppPermissionsOrganizationPackages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationPackages is optional AppPermissionsOrganizationPackages.
type OptAppPermissionsOrganizationPackages struct {
	Value AppPermissionsOrganizationPackages
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationPackages was set.
func (o OptAppPermissionsOrganizationPackages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationPackages) Reset() {
	var v AppPermissionsOrganizationPackages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationPackages) SetTo(v AppPermissionsOrganizationPackages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationPackages) Get() (v AppPermissionsOrganizationPackages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationPackages) Or(d AppPermissionsOrganizationPackages) AppPermissionsOrganizationPackages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationPlan returns new OptAppPermissionsOrganizationPlan with value set to v.
func NewOptAppPermissionsOrganizationPlan(v AppPermissionsOrganizationPlan) OptAppPermissionsOrganizationPlan {
	return OptAppPermissionsOrganizationPlan{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationPlan is optional AppPermissionsOrganizationPlan.
type OptAppPermissionsOrganizationPlan struct {
	Value AppPermissionsOrganizationPlan
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationPlan was set.
func (o OptAppPermissionsOrganizationPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationPlan) Reset() {
	var v AppPermissionsOrganizationPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationPlan) SetTo(v AppPermissionsOrganizationPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationPlan) Get() (v AppPermissionsOrganizationPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationPlan) Or(d AppPermissionsOrganizationPlan) AppPermissionsOrganizationPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationProjects returns new OptAppPermissionsOrganizationProjects with value set to v.
func NewOptAppPermissionsOrganizationProjects(v AppPermissionsOrganizationProjects) OptAppPermissionsOrganizationProjects {
	return OptAppPermissionsOrganizationProjects{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationProjects is optional AppPermissionsOrganizationProjects.
type OptAppPermissionsOrganizationProjects struct {
	Value AppPermissionsOrganizationProjects
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationProjects was set.
func (o OptAppPermissionsOrganizationProjects) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationProjects) Reset() {
	var v AppPermissionsOrganizationProjects
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationProjects) SetTo(v AppPermissionsOrganizationProjects) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationProjects) Get() (v AppPermissionsOrganizationProjects, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationProjects) Or(d AppPermissionsOrganizationProjects) AppPermissionsOrganizationProjects {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationSecrets returns new OptAppPermissionsOrganizationSecrets with value set to v.
func NewOptAppPermissionsOrganizationSecrets(v AppPermissionsOrganizationSecrets) OptAppPermissionsOrganizationSecrets {
	return OptAppPermissionsOrganizationSecrets{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationSecrets is optional AppPermissionsOrganizationSecrets.
type OptAppPermissionsOrganizationSecrets struct {
	Value AppPermissionsOrganizationSecrets
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationSecrets was set.
func (o OptAppPermissionsOrganizationSecrets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationSecrets) Reset() {
	var v AppPermissionsOrganizationSecrets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationSecrets) SetTo(v AppPermissionsOrganizationSecrets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationSecrets) Get() (v AppPermissionsOrganizationSecrets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationSecrets) Or(d AppPermissionsOrganizationSecrets) AppPermissionsOrganizationSecrets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationSelfHostedRunners returns new OptAppPermissionsOrganizationSelfHostedRunners with value set to v.
func NewOptAppPermissionsOrganizationSelfHostedRunners(v AppPermissionsOrganizationSelfHostedRunners) OptAppPermissionsOrganizationSelfHostedRunners {
	return OptAppPermissionsOrganizationSelfHostedRunners{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationSelfHostedRunners is optional AppPermissionsOrganizationSelfHostedRunners.
type OptAppPermissionsOrganizationSelfHostedRunners struct {
	Value AppPermissionsOrganizationSelfHostedRunners
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationSelfHostedRunners was set.
func (o OptAppPermissionsOrganizationSelfHostedRunners) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) Reset() {
	var v AppPermissionsOrganizationSelfHostedRunners
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) SetTo(v AppPermissionsOrganizationSelfHostedRunners) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationSelfHostedRunners) Get() (v AppPermissionsOrganizationSelfHostedRunners, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationSelfHostedRunners) Or(d AppPermissionsOrganizationSelfHostedRunners) AppPermissionsOrganizationSelfHostedRunners {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationUserBlocking returns new OptAppPermissionsOrganizationUserBlocking with value set to v.
func NewOptAppPermissionsOrganizationUserBlocking(v AppPermissionsOrganizationUserBlocking) OptAppPermissionsOrganizationUserBlocking {
	return OptAppPermissionsOrganizationUserBlocking{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationUserBlocking is optional AppPermissionsOrganizationUserBlocking.
type OptAppPermissionsOrganizationUserBlocking struct {
	Value AppPermissionsOrganizationUserBlocking
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationUserBlocking was set.
func (o OptAppPermissionsOrganizationUserBlocking) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationUserBlocking) Reset() {
	var v AppPermissionsOrganizationUserBlocking
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationUserBlocking) SetTo(v AppPermissionsOrganizationUserBlocking) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationUserBlocking) Get() (v AppPermissionsOrganizationUserBlocking, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationUserBlocking) Or(d AppPermissionsOrganizationUserBlocking) AppPermissionsOrganizationUserBlocking {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPackages returns new OptAppPermissionsPackages with value set to v.
func NewOptAppPermissionsPackages(v AppPermissionsPackages) OptAppPermissionsPackages {
	return OptAppPermissionsPackages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPackages is optional AppPermissionsPackages.
type OptAppPermissionsPackages struct {
	Value AppPermissionsPackages
	Set   bool
}

// IsSet returns true if OptAppPermissionsPackages was set.
func (o OptAppPermissionsPackages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPackages) Reset() {
	var v AppPermissionsPackages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPackages) SetTo(v AppPermissionsPackages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPackages) Get() (v AppPermissionsPackages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPackages) Or(d AppPermissionsPackages) AppPermissionsPackages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPages returns new OptAppPermissionsPages with value set to v.
func NewOptAppPermissionsPages(v AppPermissionsPages) OptAppPermissionsPages {
	return OptAppPermissionsPages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPages is optional AppPermissionsPages.
type OptAppPermissionsPages struct {
	Value AppPermissionsPages
	Set   bool
}

// IsSet returns true if OptAppPermissionsPages was set.
func (o OptAppPermissionsPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPages) Reset() {
	var v AppPermissionsPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPages) SetTo(v AppPermissionsPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPages) Get() (v AppPermissionsPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPages) Or(d AppPermissionsPages) AppPermissionsPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPullRequests returns new OptAppPermissionsPullRequests with value set to v.
func NewOptAppPermissionsPullRequests(v AppPermissionsPullRequests) OptAppPermissionsPullRequests {
	return OptAppPermissionsPullRequests{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPullRequests is optional AppPermissionsPullRequests.
type OptAppPermissionsPullRequests struct {
	Value AppPermissionsPullRequests
	Set   bool
}

// IsSet returns true if OptAppPermissionsPullRequests was set.
func (o OptAppPermissionsPullRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPullRequests) Reset() {
	var v AppPermissionsPullRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPullRequests) SetTo(v AppPermissionsPullRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPullRequests) Get() (v AppPermissionsPullRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPullRequests) Or(d AppPermissionsPullRequests) AppPermissionsPullRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsRepositoryHooks returns new OptAppPermissionsRepositoryHooks with value set to v.
func NewOptAppPermissionsRepositoryHooks(v AppPermissionsRepositoryHooks) OptAppPermissionsRepositoryHooks {
	return OptAppPermissionsRepositoryHooks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsRepositoryHooks is optional AppPermissionsRepositoryHooks.
type OptAppPermissionsRepositoryHooks struct {
	Value AppPermissionsRepositoryHooks
	Set   bool
}

// IsSet returns true if OptAppPermissionsRepositoryHooks was set.
func (o OptAppPermissionsRepositoryHooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsRepositoryHooks) Reset() {
	var v AppPermissionsRepositoryHooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsRepositoryHooks) SetTo(v AppPermissionsRepositoryHooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsRepositoryHooks) Get() (v AppPermissionsRepositoryHooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsRepositoryHooks) Or(d AppPermissionsRepositoryHooks) AppPermissionsRepositoryHooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsRepositoryProjects returns new OptAppPermissionsRepositoryProjects with value set to v.
func NewOptAppPermissionsRepositoryProjects(v AppPermissionsRepositoryProjects) OptAppPermissionsRepositoryProjects {
	return OptAppPermissionsRepositoryProjects{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsRepositoryProjects is optional AppPermissionsRepositoryProjects.
type OptAppPermissionsRepositoryProjects struct {
	Value AppPermissionsRepositoryProjects
	Set   bool
}

// IsSet returns true if OptAppPermissionsRepositoryProjects was set.
func (o OptAppPermissionsRepositoryProjects) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsRepositoryProjects) Reset() {
	var v AppPermissionsRepositoryProjects
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsRepositoryProjects) SetTo(v AppPermissionsRepositoryProjects) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsRepositoryProjects) Get() (v AppPermissionsRepositoryProjects, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsRepositoryProjects) Or(d AppPermissionsRepositoryProjects) AppPermissionsRepositoryProjects {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecretScanningAlerts returns new OptAppPermissionsSecretScanningAlerts with value set to v.
func NewOptAppPermissionsSecretScanningAlerts(v AppPermissionsSecretScanningAlerts) OptAppPermissionsSecretScanningAlerts {
	return OptAppPermissionsSecretScanningAlerts{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecretScanningAlerts is optional AppPermissionsSecretScanningAlerts.
type OptAppPermissionsSecretScanningAlerts struct {
	Value AppPermissionsSecretScanningAlerts
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecretScanningAlerts was set.
func (o OptAppPermissionsSecretScanningAlerts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecretScanningAlerts) Reset() {
	var v AppPermissionsSecretScanningAlerts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecretScanningAlerts) SetTo(v AppPermissionsSecretScanningAlerts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecretScanningAlerts) Get() (v AppPermissionsSecretScanningAlerts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecretScanningAlerts) Or(d AppPermissionsSecretScanningAlerts) AppPermissionsSecretScanningAlerts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecrets returns new OptAppPermissionsSecrets with value set to v.
func NewOptAppPermissionsSecrets(v AppPermissionsSecrets) OptAppPermissionsSecrets {
	return OptAppPermissionsSecrets{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecrets is optional AppPermissionsSecrets.
type OptAppPermissionsSecrets struct {
	Value AppPermissionsSecrets
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecrets was set.
func (o OptAppPermissionsSecrets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecrets) Reset() {
	var v AppPermissionsSecrets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecrets) SetTo(v AppPermissionsSecrets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecrets) Get() (v AppPermissionsSecrets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecrets) Or(d AppPermissionsSecrets) AppPermissionsSecrets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecurityEvents returns new OptAppPermissionsSecurityEvents with value set to v.
func NewOptAppPermissionsSecurityEvents(v AppPermissionsSecurityEvents) OptAppPermissionsSecurityEvents {
	return OptAppPermissionsSecurityEvents{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecurityEvents is optional AppPermissionsSecurityEvents.
type OptAppPermissionsSecurityEvents struct {
	Value AppPermissionsSecurityEvents
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecurityEvents was set.
func (o OptAppPermissionsSecurityEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecurityEvents) Reset() {
	var v AppPermissionsSecurityEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecurityEvents) SetTo(v AppPermissionsSecurityEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecurityEvents) Get() (v AppPermissionsSecurityEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecurityEvents) Or(d AppPermissionsSecurityEvents) AppPermissionsSecurityEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSingleFile returns new OptAppPermissionsSingleFile with value set to v.
func NewOptAppPermissionsSingleFile(v AppPermissionsSingleFile) OptAppPermissionsSingleFile {
	return OptAppPermissionsSingleFile{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSingleFile is optional AppPermissionsSingleFile.
type OptAppPermissionsSingleFile struct {
	Value AppPermissionsSingleFile
	Set   bool
}

// IsSet returns true if OptAppPermissionsSingleFile was set.
func (o OptAppPermissionsSingleFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSingleFile) Reset() {
	var v AppPermissionsSingleFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSingleFile) SetTo(v AppPermissionsSingleFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSingleFile) Get() (v AppPermissionsSingleFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSingleFile) Or(d AppPermissionsSingleFile) AppPermissionsSingleFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsStatuses returns new OptAppPermissionsStatuses with value set to v.
func NewOptAppPermissionsStatuses(v AppPermissionsStatuses) OptAppPermissionsStatuses {
	return OptAppPermissionsStatuses{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsStatuses is optional AppPermissionsStatuses.
type OptAppPermissionsStatuses struct {
	Value AppPermissionsStatuses
	Set   bool
}

// IsSet returns true if OptAppPermissionsStatuses was set.
func (o OptAppPermissionsStatuses) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsStatuses) Reset() {
	var v AppPermissionsStatuses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsStatuses) SetTo(v AppPermissionsStatuses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsStatuses) Get() (v AppPermissionsStatuses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsStatuses) Or(d AppPermissionsStatuses) AppPermissionsStatuses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsTeamDiscussions returns new OptAppPermissionsTeamDiscussions with value set to v.
func NewOptAppPermissionsTeamDiscussions(v AppPermissionsTeamDiscussions) OptAppPermissionsTeamDiscussions {
	return OptAppPermissionsTeamDiscussions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsTeamDiscussions is optional AppPermissionsTeamDiscussions.
type OptAppPermissionsTeamDiscussions struct {
	Value AppPermissionsTeamDiscussions
	Set   bool
}

// IsSet returns true if OptAppPermissionsTeamDiscussions was set.
func (o OptAppPermissionsTeamDiscussions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsTeamDiscussions) Reset() {
	var v AppPermissionsTeamDiscussions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsTeamDiscussions) SetTo(v AppPermissionsTeamDiscussions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsTeamDiscussions) Get() (v AppPermissionsTeamDiscussions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsTeamDiscussions) Or(d AppPermissionsTeamDiscussions) AppPermissionsTeamDiscussions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsVulnerabilityAlerts returns new OptAppPermissionsVulnerabilityAlerts with value set to v.
func NewOptAppPermissionsVulnerabilityAlerts(v AppPermissionsVulnerabilityAlerts) OptAppPermissionsVulnerabilityAlerts {
	return OptAppPermissionsVulnerabilityAlerts{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsVulnerabilityAlerts is optional AppPermissionsVulnerabilityAlerts.
type OptAppPermissionsVulnerabilityAlerts struct {
	Value AppPermissionsVulnerabilityAlerts
	Set   bool
}

// IsSet returns true if OptAppPermissionsVulnerabilityAlerts was set.
func (o OptAppPermissionsVulnerabilityAlerts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsVulnerabilityAlerts) Reset() {
	var v AppPermissionsVulnerabilityAlerts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsVulnerabilityAlerts) SetTo(v AppPermissionsVulnerabilityAlerts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsVulnerabilityAlerts) Get() (v AppPermissionsVulnerabilityAlerts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsVulnerabilityAlerts) Or(d AppPermissionsVulnerabilityAlerts) AppPermissionsVulnerabilityAlerts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsWorkflows returns new OptAppPermissionsWorkflows with value set to v.
func NewOptAppPermissionsWorkflows(v AppPermissionsWorkflows) OptAppPermissionsWorkflows {
	return OptAppPermissionsWorkflows{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsWorkflows is optional AppPermissionsWorkflows.
type OptAppPermissionsWorkflows struct {
	Value AppPermissionsWorkflows
	Set   bool
}

// IsSet returns true if OptAppPermissionsWorkflows was set.
func (o OptAppPermissionsWorkflows) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsWorkflows) Reset() {
	var v AppPermissionsWorkflows
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsWorkflows) SetTo(v AppPermissionsWorkflows) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsWorkflows) Get() (v AppPermissionsWorkflows, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsWorkflows) Or(d AppPermissionsWorkflows) AppPermissionsWorkflows {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsCreateInstallationAccessTokenReq returns new OptAppsCreateInstallationAccessTokenReq with value set to v.
func NewOptAppsCreateInstallationAccessTokenReq(v AppsCreateInstallationAccessTokenReq) OptAppsCreateInstallationAccessTokenReq {
	return OptAppsCreateInstallationAccessTokenReq{
		Value: v,
		Set:   true,
	}
}

// OptAppsCreateInstallationAccessTokenReq is optional AppsCreateInstallationAccessTokenReq.
type OptAppsCreateInstallationAccessTokenReq struct {
	Value AppsCreateInstallationAccessTokenReq
	Set   bool
}

// IsSet returns true if OptAppsCreateInstallationAccessTokenReq was set.
func (o OptAppsCreateInstallationAccessTokenReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsCreateInstallationAccessTokenReq) Reset() {
	var v AppsCreateInstallationAccessTokenReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsCreateInstallationAccessTokenReq) SetTo(v AppsCreateInstallationAccessTokenReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsCreateInstallationAccessTokenReq) Get() (v AppsCreateInstallationAccessTokenReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsCreateInstallationAccessTokenReq) Or(d AppsCreateInstallationAccessTokenReq) AppsCreateInstallationAccessTokenReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanDirection returns new OptAppsListAccountsForPlanDirection with value set to v.
func NewOptAppsListAccountsForPlanDirection(v AppsListAccountsForPlanDirection) OptAppsListAccountsForPlanDirection {
	return OptAppsListAccountsForPlanDirection{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanDirection is optional AppsListAccountsForPlanDirection.
type OptAppsListAccountsForPlanDirection struct {
	Value AppsListAccountsForPlanDirection
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanDirection was set.
func (o OptAppsListAccountsForPlanDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanDirection) Reset() {
	var v AppsListAccountsForPlanDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanDirection) SetTo(v AppsListAccountsForPlanDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanDirection) Get() (v AppsListAccountsForPlanDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanDirection) Or(d AppsListAccountsForPlanDirection) AppsListAccountsForPlanDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanSort returns new OptAppsListAccountsForPlanSort with value set to v.
func NewOptAppsListAccountsForPlanSort(v AppsListAccountsForPlanSort) OptAppsListAccountsForPlanSort {
	return OptAppsListAccountsForPlanSort{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanSort is optional AppsListAccountsForPlanSort.
type OptAppsListAccountsForPlanSort struct {
	Value AppsListAccountsForPlanSort
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanSort was set.
func (o OptAppsListAccountsForPlanSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanSort) Reset() {
	var v AppsListAccountsForPlanSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanSort) SetTo(v AppsListAccountsForPlanSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanSort) Get() (v AppsListAccountsForPlanSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanSort) Or(d AppsListAccountsForPlanSort) AppsListAccountsForPlanSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanStubbedDirection returns new OptAppsListAccountsForPlanStubbedDirection with value set to v.
func NewOptAppsListAccountsForPlanStubbedDirection(v AppsListAccountsForPlanStubbedDirection) OptAppsListAccountsForPlanStubbedDirection {
	return OptAppsListAccountsForPlanStubbedDirection{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanStubbedDirection is optional AppsListAccountsForPlanStubbedDirection.
type OptAppsListAccountsForPlanStubbedDirection struct {
	Value AppsListAccountsForPlanStubbedDirection
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanStubbedDirection was set.
func (o OptAppsListAccountsForPlanStubbedDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanStubbedDirection) Reset() {
	var v AppsListAccountsForPlanStubbedDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanStubbedDirection) SetTo(v AppsListAccountsForPlanStubbedDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanStubbedDirection) Get() (v AppsListAccountsForPlanStubbedDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanStubbedDirection) Or(d AppsListAccountsForPlanStubbedDirection) AppsListAccountsForPlanStubbedDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanStubbedSort returns new OptAppsListAccountsForPlanStubbedSort with value set to v.
func NewOptAppsListAccountsForPlanStubbedSort(v AppsListAccountsForPlanStubbedSort) OptAppsListAccountsForPlanStubbedSort {
	return OptAppsListAccountsForPlanStubbedSort{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanStubbedSort is optional AppsListAccountsForPlanStubbedSort.
type OptAppsListAccountsForPlanStubbedSort struct {
	Value AppsListAccountsForPlanStubbedSort
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanStubbedSort was set.
func (o OptAppsListAccountsForPlanStubbedSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanStubbedSort) Reset() {
	var v AppsListAccountsForPlanStubbedSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanStubbedSort) SetTo(v AppsListAccountsForPlanStubbedSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanStubbedSort) Get() (v AppsListAccountsForPlanStubbedSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanStubbedSort) Or(d AppsListAccountsForPlanStubbedSort) AppsListAccountsForPlanStubbedSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsUpdateWebhookConfigForAppReq returns new OptAppsUpdateWebhookConfigForAppReq with value set to v.
func NewOptAppsUpdateWebhookConfigForAppReq(v AppsUpdateWebhookConfigForAppReq) OptAppsUpdateWebhookConfigForAppReq {
	return OptAppsUpdateWebhookConfigForAppReq{
		Value: v,
		Set:   true,
	}
}

// OptAppsUpdateWebhookConfigForAppReq is optional AppsUpdateWebhookConfigForAppReq.
type OptAppsUpdateWebhookConfigForAppReq struct {
	Value AppsUpdateWebhookConfigForAppReq
	Set   bool
}

// IsSet returns true if OptAppsUpdateWebhookConfigForAppReq was set.
func (o OptAppsUpdateWebhookConfigForAppReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsUpdateWebhookConfigForAppReq) Reset() {
	var v AppsUpdateWebhookConfigForAppReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsUpdateWebhookConfigForAppReq) SetTo(v AppsUpdateWebhookConfigForAppReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsUpdateWebhookConfigForAppReq) Get() (v AppsUpdateWebhookConfigForAppReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsUpdateWebhookConfigForAppReq) Or(d AppsUpdateWebhookConfigForAppReq) AppsUpdateWebhookConfigForAppReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuditLogEventActorLocation returns new OptAuditLogEventActorLocation with value set to v.
func NewOptAuditLogEventActorLocation(v AuditLogEventActorLocation) OptAuditLogEventActorLocation {
	return OptAuditLogEventActorLocation{
		Value: v,
		Set:   true,
	}
}

// OptAuditLogEventActorLocation is optional AuditLogEventActorLocation.
type OptAuditLogEventActorLocation struct {
	Value AuditLogEventActorLocation
	Set   bool
}

// IsSet returns true if OptAuditLogEventActorLocation was set.
func (o OptAuditLogEventActorLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditLogEventActorLocation) Reset() {
	var v AuditLogEventActorLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditLogEventActorLocation) SetTo(v AuditLogEventActorLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditLogEventActorLocation) Get() (v AuditLogEventActorLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditLogEventActorLocation) Or(d AuditLogEventActorLocation) AuditLogEventActorLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuditLogEventData returns new OptAuditLogEventData with value set to v.
func NewOptAuditLogEventData(v AuditLogEventData) OptAuditLogEventData {
	return OptAuditLogEventData{
		Value: v,
		Set:   true,
	}
}

// OptAuditLogEventData is optional AuditLogEventData.
type OptAuditLogEventData struct {
	Value AuditLogEventData
	Set   bool
}

// IsSet returns true if OptAuditLogEventData was set.
func (o OptAuditLogEventData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditLogEventData) Reset() {
	var v AuditLogEventData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditLogEventData) SetTo(v AuditLogEventData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditLogEventData) Get() (v AuditLogEventData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditLogEventData) Or(d AuditLogEventData) AuditLogEventData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticationTokenRepositorySelection returns new OptAuthenticationTokenRepositorySelection with value set to v.
func NewOptAuthenticationTokenRepositorySelection(v AuthenticationTokenRepositorySelection) OptAuthenticationTokenRepositorySelection {
	return OptAuthenticationTokenRepositorySelection{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticationTokenRepositorySelection is optional AuthenticationTokenRepositorySelection.
type OptAuthenticationTokenRepositorySelection struct {
	Value AuthenticationTokenRepositorySelection
	Set   bool
}

// IsSet returns true if OptAuthenticationTokenRepositorySelection was set.
func (o OptAuthenticationTokenRepositorySelection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticationTokenRepositorySelection) Reset() {
	var v AuthenticationTokenRepositorySelection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticationTokenRepositorySelection) SetTo(v AuthenticationTokenRepositorySelection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticationTokenRepositorySelection) Get() (v AuthenticationTokenRepositorySelection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticationTokenRepositorySelection) Or(d AuthenticationTokenRepositorySelection) AuthenticationTokenRepositorySelection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorAssociation returns new OptAuthorAssociation with value set to v.
func NewOptAuthorAssociation(v AuthorAssociation) OptAuthorAssociation {
	return OptAuthorAssociation{
		Value: v,
		Set:   true,
	}
}

// OptAuthorAssociation is optional AuthorAssociation.
type OptAuthorAssociation struct {
	Value AuthorAssociation
	Set   bool
}

// IsSet returns true if OptAuthorAssociation was set.
func (o OptAuthorAssociation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorAssociation) Reset() {
	var v AuthorAssociation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorAssociation) SetTo(v AuthorAssociation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorAssociation) Get() (v AuthorAssociation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorAssociation) Or(d AuthorAssociation) AuthorAssociation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtection returns new OptBranchProtection with value set to v.
func NewOptBranchProtection(v BranchProtection) OptBranchProtection {
	return OptBranchProtection{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtection is optional BranchProtection.
type OptBranchProtection struct {
	Value BranchProtection
	Set   bool
}

// IsSet returns true if OptBranchProtection was set.
func (o OptBranchProtection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtection) Reset() {
	var v BranchProtection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtection) SetTo(v BranchProtection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtection) Get() (v BranchProtection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtection) Or(d BranchProtection) BranchProtection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionAllowDeletions returns new OptBranchProtectionAllowDeletions with value set to v.
func NewOptBranchProtectionAllowDeletions(v BranchProtectionAllowDeletions) OptBranchProtectionAllowDeletions {
	return OptBranchProtectionAllowDeletions{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionAllowDeletions is optional BranchProtectionAllowDeletions.
type OptBranchProtectionAllowDeletions struct {
	Value BranchProtectionAllowDeletions
	Set   bool
}

// IsSet returns true if OptBranchProtectionAllowDeletions was set.
func (o OptBranchProtectionAllowDeletions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionAllowDeletions) Reset() {
	var v BranchProtectionAllowDeletions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionAllowDeletions) SetTo(v BranchProtectionAllowDeletions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionAllowDeletions) Get() (v BranchProtectionAllowDeletions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionAllowDeletions) Or(d BranchProtectionAllowDeletions) BranchProtectionAllowDeletions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionAllowForcePushes returns new OptBranchProtectionAllowForcePushes with value set to v.
func NewOptBranchProtectionAllowForcePushes(v BranchProtectionAllowForcePushes) OptBranchProtectionAllowForcePushes {
	return OptBranchProtectionAllowForcePushes{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionAllowForcePushes is optional BranchProtectionAllowForcePushes.
type OptBranchProtectionAllowForcePushes struct {
	Value BranchProtectionAllowForcePushes
	Set   bool
}

// IsSet returns true if OptBranchProtectionAllowForcePushes was set.
func (o OptBranchProtectionAllowForcePushes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionAllowForcePushes) Reset() {
	var v BranchProtectionAllowForcePushes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionAllowForcePushes) SetTo(v BranchProtectionAllowForcePushes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionAllowForcePushes) Get() (v BranchProtectionAllowForcePushes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionAllowForcePushes) Or(d BranchProtectionAllowForcePushes) BranchProtectionAllowForcePushes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredConversationResolution returns new OptBranchProtectionRequiredConversationResolution with value set to v.
func NewOptBranchProtectionRequiredConversationResolution(v BranchProtectionRequiredConversationResolution) OptBranchProtectionRequiredConversationResolution {
	return OptBranchProtectionRequiredConversationResolution{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredConversationResolution is optional BranchProtectionRequiredConversationResolution.
type OptBranchProtectionRequiredConversationResolution struct {
	Value BranchProtectionRequiredConversationResolution
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredConversationResolution was set.
func (o OptBranchProtectionRequiredConversationResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredConversationResolution) Reset() {
	var v BranchProtectionRequiredConversationResolution
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredConversationResolution) SetTo(v BranchProtectionRequiredConversationResolution) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredConversationResolution) Get() (v BranchProtectionRequiredConversationResolution, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredConversationResolution) Or(d BranchProtectionRequiredConversationResolution) BranchProtectionRequiredConversationResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredLinearHistory returns new OptBranchProtectionRequiredLinearHistory with value set to v.
func NewOptBranchProtectionRequiredLinearHistory(v BranchProtectionRequiredLinearHistory) OptBranchProtectionRequiredLinearHistory {
	return OptBranchProtectionRequiredLinearHistory{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredLinearHistory is optional BranchProtectionRequiredLinearHistory.
type OptBranchProtectionRequiredLinearHistory struct {
	Value BranchProtectionRequiredLinearHistory
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredLinearHistory was set.
func (o OptBranchProtectionRequiredLinearHistory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredLinearHistory) Reset() {
	var v BranchProtectionRequiredLinearHistory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredLinearHistory) SetTo(v BranchProtectionRequiredLinearHistory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredLinearHistory) Get() (v BranchProtectionRequiredLinearHistory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredLinearHistory) Or(d BranchProtectionRequiredLinearHistory) BranchProtectionRequiredLinearHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredSignatures returns new OptBranchProtectionRequiredSignatures with value set to v.
func NewOptBranchProtectionRequiredSignatures(v BranchProtectionRequiredSignatures) OptBranchProtectionRequiredSignatures {
	return OptBranchProtectionRequiredSignatures{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredSignatures is optional BranchProtectionRequiredSignatures.
type OptBranchProtectionRequiredSignatures struct {
	Value BranchProtectionRequiredSignatures
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredSignatures was set.
func (o OptBranchProtectionRequiredSignatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredSignatures) Reset() {
	var v BranchProtectionRequiredSignatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredSignatures) SetTo(v BranchProtectionRequiredSignatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredSignatures) Get() (v BranchProtectionRequiredSignatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredSignatures) Or(d BranchProtectionRequiredSignatures) BranchProtectionRequiredSignatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredStatusChecks returns new OptBranchProtectionRequiredStatusChecks with value set to v.
func NewOptBranchProtectionRequiredStatusChecks(v BranchProtectionRequiredStatusChecks) OptBranchProtectionRequiredStatusChecks {
	return OptBranchProtectionRequiredStatusChecks{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredStatusChecks is optional BranchProtectionRequiredStatusChecks.
type OptBranchProtectionRequiredStatusChecks struct {
	Value BranchProtectionRequiredStatusChecks
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredStatusChecks was set.
func (o OptBranchProtectionRequiredStatusChecks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredStatusChecks) Reset() {
	var v BranchProtectionRequiredStatusChecks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredStatusChecks) SetTo(v BranchProtectionRequiredStatusChecks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredStatusChecks) Get() (v BranchProtectionRequiredStatusChecks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredStatusChecks) Or(d BranchProtectionRequiredStatusChecks) BranchProtectionRequiredStatusChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicy returns new OptBranchRestrictionPolicy with value set to v.
func NewOptBranchRestrictionPolicy(v BranchRestrictionPolicy) OptBranchRestrictionPolicy {
	return OptBranchRestrictionPolicy{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicy is optional BranchRestrictionPolicy.
type OptBranchRestrictionPolicy struct {
	Value BranchRestrictionPolicy
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicy was set.
func (o OptBranchRestrictionPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicy) Reset() {
	var v BranchRestrictionPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicy) SetTo(v BranchRestrictionPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicy) Get() (v BranchRestrictionPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicy) Or(d BranchRestrictionPolicy) BranchRestrictionPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicyAppsItemOwner returns new OptBranchRestrictionPolicyAppsItemOwner with value set to v.
func NewOptBranchRestrictionPolicyAppsItemOwner(v BranchRestrictionPolicyAppsItemOwner) OptBranchRestrictionPolicyAppsItemOwner {
	return OptBranchRestrictionPolicyAppsItemOwner{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicyAppsItemOwner is optional BranchRestrictionPolicyAppsItemOwner.
type OptBranchRestrictionPolicyAppsItemOwner struct {
	Value BranchRestrictionPolicyAppsItemOwner
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicyAppsItemOwner was set.
func (o OptBranchRestrictionPolicyAppsItemOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicyAppsItemOwner) Reset() {
	var v BranchRestrictionPolicyAppsItemOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicyAppsItemOwner) SetTo(v BranchRestrictionPolicyAppsItemOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicyAppsItemOwner) Get() (v BranchRestrictionPolicyAppsItemOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicyAppsItemOwner) Or(d BranchRestrictionPolicyAppsItemOwner) BranchRestrictionPolicyAppsItemOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicyAppsItemPermissions returns new OptBranchRestrictionPolicyAppsItemPermissions with value set to v.
func NewOptBranchRestrictionPolicyAppsItemPermissions(v BranchRestrictionPolicyAppsItemPermissions) OptBranchRestrictionPolicyAppsItemPermissions {
	return OptBranchRestrictionPolicyAppsItemPermissions{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicyAppsItemPermissions is optional BranchRestrictionPolicyAppsItemPermissions.
type OptBranchRestrictionPolicyAppsItemPermissions struct {
	Value BranchRestrictionPolicyAppsItemPermissions
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicyAppsItemPermissions was set.
func (o OptBranchRestrictionPolicyAppsItemPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) Reset() {
	var v BranchRestrictionPolicyAppsItemPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) SetTo(v BranchRestrictionPolicyAppsItemPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicyAppsItemPermissions) Get() (v BranchRestrictionPolicyAppsItemPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicyAppsItemPermissions) Or(d BranchRestrictionPolicyAppsItemPermissions) BranchRestrictionPolicyAppsItemPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForRefFilter returns new OptChecksListForRefFilter with value set to v.
func NewOptChecksListForRefFilter(v ChecksListForRefFilter) OptChecksListForRefFilter {
	return OptChecksListForRefFilter{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForRefFilter is optional ChecksListForRefFilter.
type OptChecksListForRefFilter struct {
	Value ChecksListForRefFilter
	Set   bool
}

// IsSet returns true if OptChecksListForRefFilter was set.
func (o OptChecksListForRefFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForRefFilter) Reset() {
	var v ChecksListForRefFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForRefFilter) SetTo(v ChecksListForRefFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForRefFilter) Get() (v ChecksListForRefFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForRefFilter) Or(d ChecksListForRefFilter) ChecksListForRefFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForRefStatus returns new OptChecksListForRefStatus with value set to v.
func NewOptChecksListForRefStatus(v ChecksListForRefStatus) OptChecksListForRefStatus {
	return OptChecksListForRefStatus{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForRefStatus is optional ChecksListForRefStatus.
type OptChecksListForRefStatus struct {
	Value ChecksListForRefStatus
	Set   bool
}

// IsSet returns true if OptChecksListForRefStatus was set.
func (o OptChecksListForRefStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForRefStatus) Reset() {
	var v ChecksListForRefStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForRefStatus) SetTo(v ChecksListForRefStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForRefStatus) Get() (v ChecksListForRefStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForRefStatus) Or(d ChecksListForRefStatus) ChecksListForRefStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForSuiteFilter returns new OptChecksListForSuiteFilter with value set to v.
func NewOptChecksListForSuiteFilter(v ChecksListForSuiteFilter) OptChecksListForSuiteFilter {
	return OptChecksListForSuiteFilter{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForSuiteFilter is optional ChecksListForSuiteFilter.
type OptChecksListForSuiteFilter struct {
	Value ChecksListForSuiteFilter
	Set   bool
}

// IsSet returns true if OptChecksListForSuiteFilter was set.
func (o OptChecksListForSuiteFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForSuiteFilter) Reset() {
	var v ChecksListForSuiteFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForSuiteFilter) SetTo(v ChecksListForSuiteFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForSuiteFilter) Get() (v ChecksListForSuiteFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForSuiteFilter) Or(d ChecksListForSuiteFilter) ChecksListForSuiteFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForSuiteStatus returns new OptChecksListForSuiteStatus with value set to v.
func NewOptChecksListForSuiteStatus(v ChecksListForSuiteStatus) OptChecksListForSuiteStatus {
	return OptChecksListForSuiteStatus{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForSuiteStatus is optional ChecksListForSuiteStatus.
type OptChecksListForSuiteStatus struct {
	Value ChecksListForSuiteStatus
	Set   bool
}

// IsSet returns true if OptChecksListForSuiteStatus was set.
func (o OptChecksListForSuiteStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForSuiteStatus) Reset() {
	var v ChecksListForSuiteStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForSuiteStatus) SetTo(v ChecksListForSuiteStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForSuiteStatus) Get() (v ChecksListForSuiteStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForSuiteStatus) Or(d ChecksListForSuiteStatus) ChecksListForSuiteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeOfConduct returns new OptCodeOfConduct with value set to v.
func NewOptCodeOfConduct(v CodeOfConduct) OptCodeOfConduct {
	return OptCodeOfConduct{
		Value: v,
		Set:   true,
	}
}

// OptCodeOfConduct is optional CodeOfConduct.
type OptCodeOfConduct struct {
	Value CodeOfConduct
	Set   bool
}

// IsSet returns true if OptCodeOfConduct was set.
func (o OptCodeOfConduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeOfConduct) Reset() {
	var v CodeOfConduct
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeOfConduct) SetTo(v CodeOfConduct) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeOfConduct) Get() (v CodeOfConduct, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeOfConduct) Or(d CodeOfConduct) CodeOfConduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeOfConductSimple returns new OptCodeOfConductSimple with value set to v.
func NewOptCodeOfConductSimple(v CodeOfConductSimple) OptCodeOfConductSimple {
	return OptCodeOfConductSimple{
		Value: v,
		Set:   true,
	}
}

// OptCodeOfConductSimple is optional CodeOfConductSimple.
type OptCodeOfConductSimple struct {
	Value CodeOfConductSimple
	Set   bool
}

// IsSet returns true if OptCodeOfConductSimple was set.
func (o OptCodeOfConductSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeOfConductSimple) Reset() {
	var v CodeOfConductSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeOfConductSimple) SetTo(v CodeOfConductSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeOfConductSimple) Get() (v CodeOfConductSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeOfConductSimple) Or(d CodeOfConductSimple) CodeOfConductSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertEnvironment returns new OptCodeScanningAlertEnvironment with value set to v.
func NewOptCodeScanningAlertEnvironment(v CodeScanningAlertEnvironment) OptCodeScanningAlertEnvironment {
	return OptCodeScanningAlertEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertEnvironment is optional CodeScanningAlertEnvironment.
type OptCodeScanningAlertEnvironment struct {
	Value CodeScanningAlertEnvironment
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertEnvironment was set.
func (o OptCodeScanningAlertEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertEnvironment) Reset() {
	var v CodeScanningAlertEnvironment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertEnvironment) SetTo(v CodeScanningAlertEnvironment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertEnvironment) Get() (v CodeScanningAlertEnvironment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertEnvironment) Or(d CodeScanningAlertEnvironment) CodeScanningAlertEnvironment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertInstanceMessage returns new OptCodeScanningAlertInstanceMessage with value set to v.
func NewOptCodeScanningAlertInstanceMessage(v CodeScanningAlertInstanceMessage) OptCodeScanningAlertInstanceMessage {
	return OptCodeScanningAlertInstanceMessage{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertInstanceMessage is optional CodeScanningAlertInstanceMessage.
type OptCodeScanningAlertInstanceMessage struct {
	Value CodeScanningAlertInstanceMessage
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertInstanceMessage was set.
func (o OptCodeScanningAlertInstanceMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertInstanceMessage) Reset() {
	var v CodeScanningAlertInstanceMessage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertInstanceMessage) SetTo(v CodeScanningAlertInstanceMessage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertInstanceMessage) Get() (v CodeScanningAlertInstanceMessage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertInstanceMessage) Or(d CodeScanningAlertInstanceMessage) CodeScanningAlertInstanceMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertLocation returns new OptCodeScanningAlertLocation with value set to v.
func NewOptCodeScanningAlertLocation(v CodeScanningAlertLocation) OptCodeScanningAlertLocation {
	return OptCodeScanningAlertLocation{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertLocation is optional CodeScanningAlertLocation.
type OptCodeScanningAlertLocation struct {
	Value CodeScanningAlertLocation
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertLocation was set.
func (o OptCodeScanningAlertLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertLocation) Reset() {
	var v CodeScanningAlertLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertLocation) SetTo(v CodeScanningAlertLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertLocation) Get() (v CodeScanningAlertLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertLocation) Or(d CodeScanningAlertLocation) CodeScanningAlertLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertState returns new OptCodeScanningAlertState with value set to v.
func NewOptCodeScanningAlertState(v CodeScanningAlertState) OptCodeScanningAlertState {
	return OptCodeScanningAlertState{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertState is optional CodeScanningAlertState.
type OptCodeScanningAlertState struct {
	Value CodeScanningAlertState
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertState was set.
func (o OptCodeScanningAlertState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertState) Reset() {
	var v CodeScanningAlertState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertState) SetTo(v CodeScanningAlertState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertState) Get() (v CodeScanningAlertState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertState) Or(d CodeScanningAlertState) CodeScanningAlertState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisAnalysisKey returns new OptCodeScanningAnalysisAnalysisKey with value set to v.
func NewOptCodeScanningAnalysisAnalysisKey(v CodeScanningAnalysisAnalysisKey) OptCodeScanningAnalysisAnalysisKey {
	return OptCodeScanningAnalysisAnalysisKey{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisAnalysisKey is optional CodeScanningAnalysisAnalysisKey.
type OptCodeScanningAnalysisAnalysisKey struct {
	Value CodeScanningAnalysisAnalysisKey
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisAnalysisKey was set.
func (o OptCodeScanningAnalysisAnalysisKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisAnalysisKey) Reset() {
	var v CodeScanningAnalysisAnalysisKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisAnalysisKey) SetTo(v CodeScanningAnalysisAnalysisKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisAnalysisKey) Get() (v CodeScanningAnalysisAnalysisKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisAnalysisKey) Or(d CodeScanningAnalysisAnalysisKey) CodeScanningAnalysisAnalysisKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisCategory returns new OptCodeScanningAnalysisCategory with value set to v.
func NewOptCodeScanningAnalysisCategory(v CodeScanningAnalysisCategory) OptCodeScanningAnalysisCategory {
	return OptCodeScanningAnalysisCategory{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisCategory is optional CodeScanningAnalysisCategory.
type OptCodeScanningAnalysisCategory struct {
	Value CodeScanningAnalysisCategory
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisCategory was set.
func (o OptCodeScanningAnalysisCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisCategory) Reset() {
	var v CodeScanningAnalysisCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisCategory) SetTo(v CodeScanningAnalysisCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisCategory) Get() (v CodeScanningAnalysisCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisCategory) Or(d CodeScanningAnalysisCategory) CodeScanningAnalysisCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisSarifID returns new OptCodeScanningAnalysisSarifID with value set to v.
func NewOptCodeScanningAnalysisSarifID(v CodeScanningAnalysisSarifID) OptCodeScanningAnalysisSarifID {
	return OptCodeScanningAnalysisSarifID{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisSarifID is optional CodeScanningAnalysisSarifID.
type OptCodeScanningAnalysisSarifID struct {
	Value CodeScanningAnalysisSarifID
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisSarifID was set.
func (o OptCodeScanningAnalysisSarifID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisSarifID) Reset() {
	var v CodeScanningAnalysisSarifID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisSarifID) SetTo(v CodeScanningAnalysisSarifID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisSarifID) Get() (v CodeScanningAnalysisSarifID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisSarifID) Or(d CodeScanningAnalysisSarifID) CodeScanningAnalysisSarifID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisToolName returns new OptCodeScanningAnalysisToolName with value set to v.
func NewOptCodeScanningAnalysisToolName(v CodeScanningAnalysisToolName) OptCodeScanningAnalysisToolName {
	return OptCodeScanningAnalysisToolName{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisToolName is optional CodeScanningAnalysisToolName.
type OptCodeScanningAnalysisToolName struct {
	Value CodeScanningAnalysisToolName
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisToolName was set.
func (o OptCodeScanningAnalysisToolName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisToolName) Reset() {
	var v CodeScanningAnalysisToolName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisToolName) SetTo(v CodeScanningAnalysisToolName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisToolName) Get() (v CodeScanningAnalysisToolName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisToolName) Or(d CodeScanningAnalysisToolName) CodeScanningAnalysisToolName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningRef returns new OptCodeScanningRef with value set to v.
func NewOptCodeScanningRef(v CodeScanningRef) OptCodeScanningRef {
	return OptCodeScanningRef{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningRef is optional CodeScanningRef.
type OptCodeScanningRef struct {
	Value CodeScanningRef
	Set   bool
}

// IsSet returns true if OptCodeScanningRef was set.
func (o OptCodeScanningRef) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningRef) Reset() {
	var v CodeScanningRef
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningRef) SetTo(v CodeScanningRef) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningRef) Get() (v CodeScanningRef, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningRef) Or(d CodeScanningRef) CodeScanningRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningSarifsStatusProcessingStatus returns new OptCodeScanningSarifsStatusProcessingStatus with value set to v.
func NewOptCodeScanningSarifsStatusProcessingStatus(v CodeScanningSarifsStatusProcessingStatus) OptCodeScanningSarifsStatusProcessingStatus {
	return OptCodeScanningSarifsStatusProcessingStatus{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningSarifsStatusProcessingStatus is optional CodeScanningSarifsStatusProcessingStatus.
type OptCodeScanningSarifsStatusProcessingStatus struct {
	Value CodeScanningSarifsStatusProcessingStatus
	Set   bool
}

// IsSet returns true if OptCodeScanningSarifsStatusProcessingStatus was set.
func (o OptCodeScanningSarifsStatusProcessingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningSarifsStatusProcessingStatus) Reset() {
	var v CodeScanningSarifsStatusProcessingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningSarifsStatusProcessingStatus) SetTo(v CodeScanningSarifsStatusProcessingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningSarifsStatusProcessingStatus) Get() (v CodeScanningSarifsStatusProcessingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningSarifsStatusProcessingStatus) Or(d CodeScanningSarifsStatusProcessingStatus) CodeScanningSarifsStatusProcessingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorPermissions returns new OptCollaboratorPermissions with value set to v.
func NewOptCollaboratorPermissions(v CollaboratorPermissions) OptCollaboratorPermissions {
	return OptCollaboratorPermissions{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorPermissions is optional CollaboratorPermissions.
type OptCollaboratorPermissions struct {
	Value CollaboratorPermissions
	Set   bool
}

// IsSet returns true if OptCollaboratorPermissions was set.
func (o OptCollaboratorPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorPermissions) Reset() {
	var v CollaboratorPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorPermissions) SetTo(v CollaboratorPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorPermissions) Get() (v CollaboratorPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorPermissions) Or(d CollaboratorPermissions) CollaboratorPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommitStats returns new OptCommitStats with value set to v.
func NewOptCommitStats(v CommitStats) OptCommitStats {
	return OptCommitStats{
		Value: v,
		Set:   true,
	}
}

// OptCommitStats is optional CommitStats.
type OptCommitStats struct {
	Value CommitStats
	Set   bool
}

// IsSet returns true if OptCommitStats was set.
func (o OptCommitStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommitStats) Reset() {
	var v CommitStats
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommitStats) SetTo(v CommitStats) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommitStats) Get() (v CommitStats, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommitStats) Or(d CommitStats) CommitStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentSimple returns new OptDeploymentSimple with value set to v.
func NewOptDeploymentSimple(v DeploymentSimple) OptDeploymentSimple {
	return OptDeploymentSimple{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentSimple is optional DeploymentSimple.
type OptDeploymentSimple struct {
	Value DeploymentSimple
	Set   bool
}

// IsSet returns true if OptDeploymentSimple was set.
func (o OptDeploymentSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentSimple) Reset() {
	var v DeploymentSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentSimple) SetTo(v DeploymentSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentSimple) Get() (v DeploymentSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentSimple) Or(d DeploymentSimple) DeploymentSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility returns new OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility with value set to v.
func NewOptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility(v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility is optional EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility.
type OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility struct {
	Value EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility was set.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Reset() {
	var v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetTo(v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Get() (v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Or(d EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminGetAuditLogInclude returns new OptEnterpriseAdminGetAuditLogInclude with value set to v.
func NewOptEnterpriseAdminGetAuditLogInclude(v EnterpriseAdminGetAuditLogInclude) OptEnterpriseAdminGetAuditLogInclude {
	return OptEnterpriseAdminGetAuditLogInclude{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminGetAuditLogInclude is optional EnterpriseAdminGetAuditLogInclude.
type OptEnterpriseAdminGetAuditLogInclude struct {
	Value EnterpriseAdminGetAuditLogInclude
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminGetAuditLogInclude was set.
func (o OptEnterpriseAdminGetAuditLogInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminGetAuditLogInclude) Reset() {
	var v EnterpriseAdminGetAuditLogInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminGetAuditLogInclude) SetTo(v EnterpriseAdminGetAuditLogInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminGetAuditLogInclude) Get() (v EnterpriseAdminGetAuditLogInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminGetAuditLogInclude) Or(d EnterpriseAdminGetAuditLogInclude) EnterpriseAdminGetAuditLogInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminGetAuditLogOrder returns new OptEnterpriseAdminGetAuditLogOrder with value set to v.
func NewOptEnterpriseAdminGetAuditLogOrder(v EnterpriseAdminGetAuditLogOrder) OptEnterpriseAdminGetAuditLogOrder {
	return OptEnterpriseAdminGetAuditLogOrder{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminGetAuditLogOrder is optional EnterpriseAdminGetAuditLogOrder.
type OptEnterpriseAdminGetAuditLogOrder struct {
	Value EnterpriseAdminGetAuditLogOrder
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminGetAuditLogOrder was set.
func (o OptEnterpriseAdminGetAuditLogOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminGetAuditLogOrder) Reset() {
	var v EnterpriseAdminGetAuditLogOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminGetAuditLogOrder) SetTo(v EnterpriseAdminGetAuditLogOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminGetAuditLogOrder) Get() (v EnterpriseAdminGetAuditLogOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminGetAuditLogOrder) Or(d EnterpriseAdminGetAuditLogOrder) EnterpriseAdminGetAuditLogOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue with value set to v.
func NewOptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	return OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is optional EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue.
type OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue struct {
	Value EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue was set.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Reset() {
	var v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetTo(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Get() (v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Or(d EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq returns new OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq with value set to v.
func NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq {
	return OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq is optional EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq.
type OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq struct {
	Value EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Reset() {
	var v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetTo(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Get() (v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Or(d EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility returns new OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility with value set to v.
func NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility is optional EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility.
type OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility struct {
	Value EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Reset() {
	var v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetTo(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Get() (v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Or(d EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitAuthor returns new OptFileCommitCommitAuthor with value set to v.
func NewOptFileCommitCommitAuthor(v FileCommitCommitAuthor) OptFileCommitCommitAuthor {
	return OptFileCommitCommitAuthor{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitAuthor is optional FileCommitCommitAuthor.
type OptFileCommitCommitAuthor struct {
	Value FileCommitCommitAuthor
	Set   bool
}

// IsSet returns true if OptFileCommitCommitAuthor was set.
func (o OptFileCommitCommitAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitAuthor) Reset() {
	var v FileCommitCommitAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitAuthor) SetTo(v FileCommitCommitAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitAuthor) Get() (v FileCommitCommitAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitAuthor) Or(d FileCommitCommitAuthor) FileCommitCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitCommitter returns new OptFileCommitCommitCommitter with value set to v.
func NewOptFileCommitCommitCommitter(v FileCommitCommitCommitter) OptFileCommitCommitCommitter {
	return OptFileCommitCommitCommitter{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitCommitter is optional FileCommitCommitCommitter.
type OptFileCommitCommitCommitter struct {
	Value FileCommitCommitCommitter
	Set   bool
}

// IsSet returns true if OptFileCommitCommitCommitter was set.
func (o OptFileCommitCommitCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitCommitter) Reset() {
	var v FileCommitCommitCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitCommitter) SetTo(v FileCommitCommitCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitCommitter) Get() (v FileCommitCommitCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitCommitter) Or(d FileCommitCommitCommitter) FileCommitCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitTree returns new OptFileCommitCommitTree with value set to v.
func NewOptFileCommitCommitTree(v FileCommitCommitTree) OptFileCommitCommitTree {
	return OptFileCommitCommitTree{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitTree is optional FileCommitCommitTree.
type OptFileCommitCommitTree struct {
	Value FileCommitCommitTree
	Set   bool
}

// IsSet returns true if OptFileCommitCommitTree was set.
func (o OptFileCommitCommitTree) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitTree) Reset() {
	var v FileCommitCommitTree
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitTree) SetTo(v FileCommitCommitTree) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitTree) Get() (v FileCommitCommitTree, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitTree) Or(d FileCommitCommitTree) FileCommitCommitTree {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitVerification returns new OptFileCommitCommitVerification with value set to v.
func NewOptFileCommitCommitVerification(v FileCommitCommitVerification) OptFileCommitCommitVerification {
	return OptFileCommitCommitVerification{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitVerification is optional FileCommitCommitVerification.
type OptFileCommitCommitVerification struct {
	Value FileCommitCommitVerification
	Set   bool
}

// IsSet returns true if OptFileCommitCommitVerification was set.
func (o OptFileCommitCommitVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitVerification) Reset() {
	var v FileCommitCommitVerification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitVerification) SetTo(v FileCommitCommitVerification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitVerification) Get() (v FileCommitCommitVerification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitVerification) Or(d FileCommitCommitVerification) FileCommitCommitVerification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitContentLinks returns new OptFileCommitContentLinks with value set to v.
func NewOptFileCommitContentLinks(v FileCommitContentLinks) OptFileCommitContentLinks {
	return OptFileCommitContentLinks{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitContentLinks is optional FileCommitContentLinks.
type OptFileCommitContentLinks struct {
	Value FileCommitContentLinks
	Set   bool
}

// IsSet returns true if OptFileCommitContentLinks was set.
func (o OptFileCommitContentLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitContentLinks) Reset() {
	var v FileCommitContentLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitContentLinks) SetTo(v FileCommitContentLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitContentLinks) Get() (v FileCommitContentLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitContentLinks) Or(d FileCommitContentLinks) FileCommitContentLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForbiddenGistBlock returns new OptForbiddenGistBlock with value set to v.
func NewOptForbiddenGistBlock(v ForbiddenGistBlock) OptForbiddenGistBlock {
	return OptForbiddenGistBlock{
		Value: v,
		Set:   true,
	}
}

// OptForbiddenGistBlock is optional ForbiddenGistBlock.
type OptForbiddenGistBlock struct {
	Value ForbiddenGistBlock
	Set   bool
}

// IsSet returns true if OptForbiddenGistBlock was set.
func (o OptForbiddenGistBlock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForbiddenGistBlock) Reset() {
	var v ForbiddenGistBlock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForbiddenGistBlock) SetTo(v ForbiddenGistBlock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForbiddenGistBlock) Get() (v ForbiddenGistBlock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForbiddenGistBlock) Or(d ForbiddenGistBlock) ForbiddenGistBlock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositoryPermissions returns new OptFullRepositoryPermissions with value set to v.
func NewOptFullRepositoryPermissions(v FullRepositoryPermissions) OptFullRepositoryPermissions {
	return OptFullRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositoryPermissions is optional FullRepositoryPermissions.
type OptFullRepositoryPermissions struct {
	Value FullRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptFullRepositoryPermissions was set.
func (o OptFullRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositoryPermissions) Reset() {
	var v FullRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositoryPermissions) SetTo(v FullRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositoryPermissions) Get() (v FullRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositoryPermissions) Or(d FullRepositoryPermissions) FullRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisAdvancedSecurity returns new OptFullRepositorySecurityAndAnalysisAdvancedSecurity with value set to v.
func NewOptFullRepositorySecurityAndAnalysisAdvancedSecurity(v FullRepositorySecurityAndAnalysisAdvancedSecurity) OptFullRepositorySecurityAndAnalysisAdvancedSecurity {
	return OptFullRepositorySecurityAndAnalysisAdvancedSecurity{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisAdvancedSecurity is optional FullRepositorySecurityAndAnalysisAdvancedSecurity.
type OptFullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Value FullRepositorySecurityAndAnalysisAdvancedSecurity
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisAdvancedSecurity was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Reset() {
	var v FullRepositorySecurityAndAnalysisAdvancedSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) SetTo(v FullRepositorySecurityAndAnalysisAdvancedSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Get() (v FullRepositorySecurityAndAnalysisAdvancedSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Or(d FullRepositorySecurityAndAnalysisAdvancedSecurity) FullRepositorySecurityAndAnalysisAdvancedSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus returns new OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus with value set to v.
func NewOptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus(v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus {
	return OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus is optional FullRepositorySecurityAndAnalysisAdvancedSecurityStatus.
type OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus struct {
	Value FullRepositorySecurityAndAnalysisAdvancedSecurityStatus
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Reset() {
	var v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) SetTo(v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Get() (v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Or(d FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) FullRepositorySecurityAndAnalysisAdvancedSecurityStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisSecretScanning returns new OptFullRepositorySecurityAndAnalysisSecretScanning with value set to v.
func NewOptFullRepositorySecurityAndAnalysisSecretScanning(v FullRepositorySecurityAndAnalysisSecretScanning) OptFullRepositorySecurityAndAnalysisSecretScanning {
	return OptFullRepositorySecurityAndAnalysisSecretScanning{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisSecretScanning is optional FullRepositorySecurityAndAnalysisSecretScanning.
type OptFullRepositorySecurityAndAnalysisSecretScanning struct {
	Value FullRepositorySecurityAndAnalysisSecretScanning
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisSecretScanning was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) Reset() {
	var v FullRepositorySecurityAndAnalysisSecretScanning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) SetTo(v FullRepositorySecurityAndAnalysisSecretScanning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) Get() (v FullRepositorySecurityAndAnalysisSecretScanning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) Or(d FullRepositorySecurityAndAnalysisSecretScanning) FullRepositorySecurityAndAnalysisSecretScanning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisSecretScanningStatus returns new OptFullRepositorySecurityAndAnalysisSecretScanningStatus with value set to v.
func NewOptFullRepositorySecurityAndAnalysisSecretScanningStatus(v FullRepositorySecurityAndAnalysisSecretScanningStatus) OptFullRepositorySecurityAndAnalysisSecretScanningStatus {
	return OptFullRepositorySecurityAndAnalysisSecretScanningStatus{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisSecretScanningStatus is optional FullRepositorySecurityAndAnalysisSecretScanningStatus.
type OptFullRepositorySecurityAndAnalysisSecretScanningStatus struct {
	Value FullRepositorySecurityAndAnalysisSecretScanningStatus
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisSecretScanningStatus was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Reset() {
	var v FullRepositorySecurityAndAnalysisSecretScanningStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) SetTo(v FullRepositorySecurityAndAnalysisSecretScanningStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Get() (v FullRepositorySecurityAndAnalysisSecretScanningStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Or(d FullRepositorySecurityAndAnalysisSecretScanningStatus) FullRepositorySecurityAndAnalysisSecretScanningStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistHistoryChangeStatus returns new OptGistHistoryChangeStatus with value set to v.
func NewOptGistHistoryChangeStatus(v GistHistoryChangeStatus) OptGistHistoryChangeStatus {
	return OptGistHistoryChangeStatus{
		Value: v,
		Set:   true,
	}
}

// OptGistHistoryChangeStatus is optional GistHistoryChangeStatus.
type OptGistHistoryChangeStatus struct {
	Value GistHistoryChangeStatus
	Set   bool
}

// IsSet returns true if OptGistHistoryChangeStatus was set.
func (o OptGistHistoryChangeStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistHistoryChangeStatus) Reset() {
	var v GistHistoryChangeStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistHistoryChangeStatus) SetTo(v GistHistoryChangeStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistHistoryChangeStatus) Get() (v GistHistoryChangeStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistHistoryChangeStatus) Or(d GistHistoryChangeStatus) GistHistoryChangeStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistSimpleFiles returns new OptGistSimpleFiles with value set to v.
func NewOptGistSimpleFiles(v GistSimpleFiles) OptGistSimpleFiles {
	return OptGistSimpleFiles{
		Value: v,
		Set:   true,
	}
}

// OptGistSimpleFiles is optional GistSimpleFiles.
type OptGistSimpleFiles struct {
	Value GistSimpleFiles
	Set   bool
}

// IsSet returns true if OptGistSimpleFiles was set.
func (o OptGistSimpleFiles) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistSimpleFiles) Reset() {
	var v GistSimpleFiles
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistSimpleFiles) SetTo(v GistSimpleFiles) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistSimpleFiles) Get() (v GistSimpleFiles, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistSimpleFiles) Or(d GistSimpleFiles) GistSimpleFiles {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistsCreateReqPublic returns new OptGistsCreateReqPublic with value set to v.
func NewOptGistsCreateReqPublic(v GistsCreateReqPublic) OptGistsCreateReqPublic {
	return OptGistsCreateReqPublic{
		Value: v,
		Set:   true,
	}
}

// OptGistsCreateReqPublic is optional GistsCreateReqPublic.
type OptGistsCreateReqPublic struct {
	Value GistsCreateReqPublic
	Set   bool
}

// IsSet returns true if OptGistsCreateReqPublic was set.
func (o OptGistsCreateReqPublic) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistsCreateReqPublic) Reset() {
	var v GistsCreateReqPublic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistsCreateReqPublic) SetTo(v GistsCreateReqPublic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistsCreateReqPublic) Get() (v GistsCreateReqPublic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistsCreateReqPublic) Or(d GistsCreateReqPublic) GistsCreateReqPublic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateCommitReqAuthor returns new OptGitCreateCommitReqAuthor with value set to v.
func NewOptGitCreateCommitReqAuthor(v GitCreateCommitReqAuthor) OptGitCreateCommitReqAuthor {
	return OptGitCreateCommitReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateCommitReqAuthor is optional GitCreateCommitReqAuthor.
type OptGitCreateCommitReqAuthor struct {
	Value GitCreateCommitReqAuthor
	Set   bool
}

// IsSet returns true if OptGitCreateCommitReqAuthor was set.
func (o OptGitCreateCommitReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateCommitReqAuthor) Reset() {
	var v GitCreateCommitReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateCommitReqAuthor) SetTo(v GitCreateCommitReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateCommitReqAuthor) Get() (v GitCreateCommitReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateCommitReqAuthor) Or(d GitCreateCommitReqAuthor) GitCreateCommitReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateCommitReqCommitter returns new OptGitCreateCommitReqCommitter with value set to v.
func NewOptGitCreateCommitReqCommitter(v GitCreateCommitReqCommitter) OptGitCreateCommitReqCommitter {
	return OptGitCreateCommitReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateCommitReqCommitter is optional GitCreateCommitReqCommitter.
type OptGitCreateCommitReqCommitter struct {
	Value GitCreateCommitReqCommitter
	Set   bool
}

// IsSet returns true if OptGitCreateCommitReqCommitter was set.
func (o OptGitCreateCommitReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateCommitReqCommitter) Reset() {
	var v GitCreateCommitReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateCommitReqCommitter) SetTo(v GitCreateCommitReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateCommitReqCommitter) Get() (v GitCreateCommitReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateCommitReqCommitter) Or(d GitCreateCommitReqCommitter) GitCreateCommitReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTagReqTagger returns new OptGitCreateTagReqTagger with value set to v.
func NewOptGitCreateTagReqTagger(v GitCreateTagReqTagger) OptGitCreateTagReqTagger {
	return OptGitCreateTagReqTagger{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTagReqTagger is optional GitCreateTagReqTagger.
type OptGitCreateTagReqTagger struct {
	Value GitCreateTagReqTagger
	Set   bool
}

// IsSet returns true if OptGitCreateTagReqTagger was set.
func (o OptGitCreateTagReqTagger) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTagReqTagger) Reset() {
	var v GitCreateTagReqTagger
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTagReqTagger) SetTo(v GitCreateTagReqTagger) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTagReqTagger) Get() (v GitCreateTagReqTagger, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTagReqTagger) Or(d GitCreateTagReqTagger) GitCreateTagReqTagger {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTreeReqTreeItemMode returns new OptGitCreateTreeReqTreeItemMode with value set to v.
func NewOptGitCreateTreeReqTreeItemMode(v GitCreateTreeReqTreeItemMode) OptGitCreateTreeReqTreeItemMode {
	return OptGitCreateTreeReqTreeItemMode{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTreeReqTreeItemMode is optional GitCreateTreeReqTreeItemMode.
type OptGitCreateTreeReqTreeItemMode struct {
	Value GitCreateTreeReqTreeItemMode
	Set   bool
}

// IsSet returns true if OptGitCreateTreeReqTreeItemMode was set.
func (o OptGitCreateTreeReqTreeItemMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTreeReqTreeItemMode) Reset() {
	var v GitCreateTreeReqTreeItemMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTreeReqTreeItemMode) SetTo(v GitCreateTreeReqTreeItemMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTreeReqTreeItemMode) Get() (v GitCreateTreeReqTreeItemMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTreeReqTreeItemMode) Or(d GitCreateTreeReqTreeItemMode) GitCreateTreeReqTreeItemMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTreeReqTreeItemType returns new OptGitCreateTreeReqTreeItemType with value set to v.
func NewOptGitCreateTreeReqTreeItemType(v GitCreateTreeReqTreeItemType) OptGitCreateTreeReqTreeItemType {
	return OptGitCreateTreeReqTreeItemType{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTreeReqTreeItemType is optional GitCreateTreeReqTreeItemType.
type OptGitCreateTreeReqTreeItemType struct {
	Value GitCreateTreeReqTreeItemType
	Set   bool
}

// IsSet returns true if OptGitCreateTreeReqTreeItemType was set.
func (o OptGitCreateTreeReqTreeItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTreeReqTreeItemType) Reset() {
	var v GitCreateTreeReqTreeItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTreeReqTreeItemType) SetTo(v GitCreateTreeReqTreeItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTreeReqTreeItemType) Get() (v GitCreateTreeReqTreeItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTreeReqTreeItemType) Or(d GitCreateTreeReqTreeItemType) GitCreateTreeReqTreeItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstallationTokenRepositorySelection returns new OptInstallationTokenRepositorySelection with value set to v.
func NewOptInstallationTokenRepositorySelection(v InstallationTokenRepositorySelection) OptInstallationTokenRepositorySelection {
	return OptInstallationTokenRepositorySelection{
		Value: v,
		Set:   true,
	}
}

// OptInstallationTokenRepositorySelection is optional InstallationTokenRepositorySelection.
type OptInstallationTokenRepositorySelection struct {
	Value InstallationTokenRepositorySelection
	Set   bool
}

// IsSet returns true if OptInstallationTokenRepositorySelection was set.
func (o OptInstallationTokenRepositorySelection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstallationTokenRepositorySelection) Reset() {
	var v InstallationTokenRepositorySelection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstallationTokenRepositorySelection) SetTo(v InstallationTokenRepositorySelection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstallationTokenRepositorySelection) Get() (v InstallationTokenRepositorySelection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstallationTokenRepositorySelection) Or(d InstallationTokenRepositorySelection) InstallationTokenRepositorySelection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInteractionExpiry returns new OptInteractionExpiry with value set to v.
func NewOptInteractionExpiry(v InteractionExpiry) OptInteractionExpiry {
	return OptInteractionExpiry{
		Value: v,
		Set:   true,
	}
}

// OptInteractionExpiry is optional InteractionExpiry.
type OptInteractionExpiry struct {
	Value InteractionExpiry
	Set   bool
}

// IsSet returns true if OptInteractionExpiry was set.
func (o OptInteractionExpiry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInteractionExpiry) Reset() {
	var v InteractionExpiry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInteractionExpiry) SetTo(v InteractionExpiry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInteractionExpiry) Get() (v InteractionExpiry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInteractionExpiry) Or(d InteractionExpiry) InteractionExpiry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueComment returns new OptIssueComment with value set to v.
func NewOptIssueComment(v IssueComment) OptIssueComment {
	return OptIssueComment{
		Value: v,
		Set:   true,
	}
}

// OptIssueComment is optional IssueComment.
type OptIssueComment struct {
	Value IssueComment
	Set   bool
}

// IsSet returns true if OptIssueComment was set.
func (o OptIssueComment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueComment) Reset() {
	var v IssueComment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueComment) SetTo(v IssueComment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueComment) Get() (v IssueComment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueComment) Or(d IssueComment) IssueComment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventDismissedReview returns new OptIssueEventDismissedReview with value set to v.
func NewOptIssueEventDismissedReview(v IssueEventDismissedReview) OptIssueEventDismissedReview {
	return OptIssueEventDismissedReview{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventDismissedReview is optional IssueEventDismissedReview.
type OptIssueEventDismissedReview struct {
	Value IssueEventDismissedReview
	Set   bool
}

// IsSet returns true if OptIssueEventDismissedReview was set.
func (o OptIssueEventDismissedReview) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventDismissedReview) Reset() {
	var v IssueEventDismissedReview
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventDismissedReview) SetTo(v IssueEventDismissedReview) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventDismissedReview) Get() (v IssueEventDismissedReview, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventDismissedReview) Or(d IssueEventDismissedReview) IssueEventDismissedReview {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventLabel returns new OptIssueEventLabel with value set to v.
func NewOptIssueEventLabel(v IssueEventLabel) OptIssueEventLabel {
	return OptIssueEventLabel{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventLabel is optional IssueEventLabel.
type OptIssueEventLabel struct {
	Value IssueEventLabel
	Set   bool
}

// IsSet returns true if OptIssueEventLabel was set.
func (o OptIssueEventLabel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventLabel) Reset() {
	var v IssueEventLabel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventLabel) SetTo(v IssueEventLabel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventLabel) Get() (v IssueEventLabel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventLabel) Or(d IssueEventLabel) IssueEventLabel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventMilestone returns new OptIssueEventMilestone with value set to v.
func NewOptIssueEventMilestone(v IssueEventMilestone) OptIssueEventMilestone {
	return OptIssueEventMilestone{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventMilestone is optional IssueEventMilestone.
type OptIssueEventMilestone struct {
	Value IssueEventMilestone
	Set   bool
}

// IsSet returns true if OptIssueEventMilestone was set.
func (o OptIssueEventMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventMilestone) Reset() {
	var v IssueEventMilestone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventMilestone) SetTo(v IssueEventMilestone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventMilestone) Get() (v IssueEventMilestone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventMilestone) Or(d IssueEventMilestone) IssueEventMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventProjectCard returns new OptIssueEventProjectCard with value set to v.
func NewOptIssueEventProjectCard(v IssueEventProjectCard) OptIssueEventProjectCard {
	return OptIssueEventProjectCard{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventProjectCard is optional IssueEventProjectCard.
type OptIssueEventProjectCard struct {
	Value IssueEventProjectCard
	Set   bool
}

// IsSet returns true if OptIssueEventProjectCard was set.
func (o OptIssueEventProjectCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventProjectCard) Reset() {
	var v IssueEventProjectCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventProjectCard) SetTo(v IssueEventProjectCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventProjectCard) Get() (v IssueEventProjectCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventProjectCard) Or(d IssueEventProjectCard) IssueEventProjectCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventRename returns new OptIssueEventRename with value set to v.
func NewOptIssueEventRename(v IssueEventRename) OptIssueEventRename {
	return OptIssueEventRename{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventRename is optional IssueEventRename.
type OptIssueEventRename struct {
	Value IssueEventRename
	Set   bool
}

// IsSet returns true if OptIssueEventRename was set.
func (o OptIssueEventRename) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventRename) Reset() {
	var v IssueEventRename
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventRename) SetTo(v IssueEventRename) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventRename) Get() (v IssueEventRename, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventRename) Or(d IssueEventRename) IssueEventRename {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuePullRequest returns new OptIssuePullRequest with value set to v.
func NewOptIssuePullRequest(v IssuePullRequest) OptIssuePullRequest {
	return OptIssuePullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssuePullRequest is optional IssuePullRequest.
type OptIssuePullRequest struct {
	Value IssuePullRequest
	Set   bool
}

// IsSet returns true if OptIssuePullRequest was set.
func (o OptIssuePullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuePullRequest) Reset() {
	var v IssuePullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuePullRequest) SetTo(v IssuePullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuePullRequest) Get() (v IssuePullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuePullRequest) Or(d IssuePullRequest) IssuePullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSearchResultItemPullRequest returns new OptIssueSearchResultItemPullRequest with value set to v.
func NewOptIssueSearchResultItemPullRequest(v IssueSearchResultItemPullRequest) OptIssueSearchResultItemPullRequest {
	return OptIssueSearchResultItemPullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssueSearchResultItemPullRequest is optional IssueSearchResultItemPullRequest.
type OptIssueSearchResultItemPullRequest struct {
	Value IssueSearchResultItemPullRequest
	Set   bool
}

// IsSet returns true if OptIssueSearchResultItemPullRequest was set.
func (o OptIssueSearchResultItemPullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSearchResultItemPullRequest) Reset() {
	var v IssueSearchResultItemPullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSearchResultItemPullRequest) SetTo(v IssueSearchResultItemPullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSearchResultItemPullRequest) Get() (v IssueSearchResultItemPullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSearchResultItemPullRequest) Or(d IssueSearchResultItemPullRequest) IssueSearchResultItemPullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSimple returns new OptIssueSimple with value set to v.
func NewOptIssueSimple(v IssueSimple) OptIssueSimple {
	return OptIssueSimple{
		Value: v,
		Set:   true,
	}
}

// OptIssueSimple is optional IssueSimple.
type OptIssueSimple struct {
	Value IssueSimple
	Set   bool
}

// IsSet returns true if OptIssueSimple was set.
func (o OptIssueSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSimple) Reset() {
	var v IssueSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSimple) SetTo(v IssueSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSimple) Get() (v IssueSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSimple) Or(d IssueSimple) IssueSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSimplePullRequest returns new OptIssueSimplePullRequest with value set to v.
func NewOptIssueSimplePullRequest(v IssueSimplePullRequest) OptIssueSimplePullRequest {
	return OptIssueSimplePullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssueSimplePullRequest is optional IssueSimplePullRequest.
type OptIssueSimplePullRequest struct {
	Value IssueSimplePullRequest
	Set   bool
}

// IsSet returns true if OptIssueSimplePullRequest was set.
func (o OptIssueSimplePullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSimplePullRequest) Reset() {
	var v IssueSimplePullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSimplePullRequest) SetTo(v IssueSimplePullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSimplePullRequest) Get() (v IssueSimplePullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSimplePullRequest) Or(d IssueSimplePullRequest) IssueSimplePullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesAddAssigneesReq returns new OptIssuesAddAssigneesReq with value set to v.
func NewOptIssuesAddAssigneesReq(v IssuesAddAssigneesReq) OptIssuesAddAssigneesReq {
	return OptIssuesAddAssigneesReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesAddAssigneesReq is optional IssuesAddAssigneesReq.
type OptIssuesAddAssigneesReq struct {
	Value IssuesAddAssigneesReq
	Set   bool
}

// IsSet returns true if OptIssuesAddAssigneesReq was set.
func (o OptIssuesAddAssigneesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesAddAssigneesReq) Reset() {
	var v IssuesAddAssigneesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesAddAssigneesReq) SetTo(v IssuesAddAssigneesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesAddAssigneesReq) Get() (v IssuesAddAssigneesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesAddAssigneesReq) Or(d IssuesAddAssigneesReq) IssuesAddAssigneesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesCreateMilestoneReqState returns new OptIssuesCreateMilestoneReqState with value set to v.
func NewOptIssuesCreateMilestoneReqState(v IssuesCreateMilestoneReqState) OptIssuesCreateMilestoneReqState {
	return OptIssuesCreateMilestoneReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesCreateMilestoneReqState is optional IssuesCreateMilestoneReqState.
type OptIssuesCreateMilestoneReqState struct {
	Value IssuesCreateMilestoneReqState
	Set   bool
}

// IsSet returns true if OptIssuesCreateMilestoneReqState was set.
func (o OptIssuesCreateMilestoneReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesCreateMilestoneReqState) Reset() {
	var v IssuesCreateMilestoneReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesCreateMilestoneReqState) SetTo(v IssuesCreateMilestoneReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesCreateMilestoneReqState) Get() (v IssuesCreateMilestoneReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesCreateMilestoneReqState) Or(d IssuesCreateMilestoneReqState) IssuesCreateMilestoneReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListCommentsForRepoDirection returns new OptIssuesListCommentsForRepoDirection with value set to v.
func NewOptIssuesListCommentsForRepoDirection(v IssuesListCommentsForRepoDirection) OptIssuesListCommentsForRepoDirection {
	return OptIssuesListCommentsForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListCommentsForRepoDirection is optional IssuesListCommentsForRepoDirection.
type OptIssuesListCommentsForRepoDirection struct {
	Value IssuesListCommentsForRepoDirection
	Set   bool
}

// IsSet returns true if OptIssuesListCommentsForRepoDirection was set.
func (o OptIssuesListCommentsForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListCommentsForRepoDirection) Reset() {
	var v IssuesListCommentsForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListCommentsForRepoDirection) SetTo(v IssuesListCommentsForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListCommentsForRepoDirection) Get() (v IssuesListCommentsForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListCommentsForRepoDirection) Or(d IssuesListCommentsForRepoDirection) IssuesListCommentsForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListCommentsForRepoSort returns new OptIssuesListCommentsForRepoSort with value set to v.
func NewOptIssuesListCommentsForRepoSort(v IssuesListCommentsForRepoSort) OptIssuesListCommentsForRepoSort {
	return OptIssuesListCommentsForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListCommentsForRepoSort is optional IssuesListCommentsForRepoSort.
type OptIssuesListCommentsForRepoSort struct {
	Value IssuesListCommentsForRepoSort
	Set   bool
}

// IsSet returns true if OptIssuesListCommentsForRepoSort was set.
func (o OptIssuesListCommentsForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListCommentsForRepoSort) Reset() {
	var v IssuesListCommentsForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListCommentsForRepoSort) SetTo(v IssuesListCommentsForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListCommentsForRepoSort) Get() (v IssuesListCommentsForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListCommentsForRepoSort) Or(d IssuesListCommentsForRepoSort) IssuesListCommentsForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListDirection returns new OptIssuesListDirection with value set to v.
func NewOptIssuesListDirection(v IssuesListDirection) OptIssuesListDirection {
	return OptIssuesListDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListDirection is optional IssuesListDirection.
type OptIssuesListDirection struct {
	Value IssuesListDirection
	Set   bool
}

// IsSet returns true if OptIssuesListDirection was set.
func (o OptIssuesListDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListDirection) Reset() {
	var v IssuesListDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListDirection) SetTo(v IssuesListDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListDirection) Get() (v IssuesListDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListDirection) Or(d IssuesListDirection) IssuesListDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListFilter returns new OptIssuesListFilter with value set to v.
func NewOptIssuesListFilter(v IssuesListFilter) OptIssuesListFilter {
	return OptIssuesListFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListFilter is optional IssuesListFilter.
type OptIssuesListFilter struct {
	Value IssuesListFilter
	Set   bool
}

// IsSet returns true if OptIssuesListFilter was set.
func (o OptIssuesListFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListFilter) Reset() {
	var v IssuesListFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListFilter) SetTo(v IssuesListFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListFilter) Get() (v IssuesListFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListFilter) Or(d IssuesListFilter) IssuesListFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserDirection returns new OptIssuesListForAuthenticatedUserDirection with value set to v.
func NewOptIssuesListForAuthenticatedUserDirection(v IssuesListForAuthenticatedUserDirection) OptIssuesListForAuthenticatedUserDirection {
	return OptIssuesListForAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserDirection is optional IssuesListForAuthenticatedUserDirection.
type OptIssuesListForAuthenticatedUserDirection struct {
	Value IssuesListForAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserDirection was set.
func (o OptIssuesListForAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserDirection) Reset() {
	var v IssuesListForAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserDirection) SetTo(v IssuesListForAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserDirection) Get() (v IssuesListForAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserDirection) Or(d IssuesListForAuthenticatedUserDirection) IssuesListForAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserFilter returns new OptIssuesListForAuthenticatedUserFilter with value set to v.
func NewOptIssuesListForAuthenticatedUserFilter(v IssuesListForAuthenticatedUserFilter) OptIssuesListForAuthenticatedUserFilter {
	return OptIssuesListForAuthenticatedUserFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserFilter is optional IssuesListForAuthenticatedUserFilter.
type OptIssuesListForAuthenticatedUserFilter struct {
	Value IssuesListForAuthenticatedUserFilter
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserFilter was set.
func (o OptIssuesListForAuthenticatedUserFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserFilter) Reset() {
	var v IssuesListForAuthenticatedUserFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserFilter) SetTo(v IssuesListForAuthenticatedUserFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserFilter) Get() (v IssuesListForAuthenticatedUserFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserFilter) Or(d IssuesListForAuthenticatedUserFilter) IssuesListForAuthenticatedUserFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserSort returns new OptIssuesListForAuthenticatedUserSort with value set to v.
func NewOptIssuesListForAuthenticatedUserSort(v IssuesListForAuthenticatedUserSort) OptIssuesListForAuthenticatedUserSort {
	return OptIssuesListForAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserSort is optional IssuesListForAuthenticatedUserSort.
type OptIssuesListForAuthenticatedUserSort struct {
	Value IssuesListForAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserSort was set.
func (o OptIssuesListForAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserSort) Reset() {
	var v IssuesListForAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserSort) SetTo(v IssuesListForAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserSort) Get() (v IssuesListForAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserSort) Or(d IssuesListForAuthenticatedUserSort) IssuesListForAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserState returns new OptIssuesListForAuthenticatedUserState with value set to v.
func NewOptIssuesListForAuthenticatedUserState(v IssuesListForAuthenticatedUserState) OptIssuesListForAuthenticatedUserState {
	return OptIssuesListForAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserState is optional IssuesListForAuthenticatedUserState.
type OptIssuesListForAuthenticatedUserState struct {
	Value IssuesListForAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserState was set.
func (o OptIssuesListForAuthenticatedUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserState) Reset() {
	var v IssuesListForAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserState) SetTo(v IssuesListForAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserState) Get() (v IssuesListForAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserState) Or(d IssuesListForAuthenticatedUserState) IssuesListForAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgDirection returns new OptIssuesListForOrgDirection with value set to v.
func NewOptIssuesListForOrgDirection(v IssuesListForOrgDirection) OptIssuesListForOrgDirection {
	return OptIssuesListForOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgDirection is optional IssuesListForOrgDirection.
type OptIssuesListForOrgDirection struct {
	Value IssuesListForOrgDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgDirection was set.
func (o OptIssuesListForOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgDirection) Reset() {
	var v IssuesListForOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgDirection) SetTo(v IssuesListForOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgDirection) Get() (v IssuesListForOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgDirection) Or(d IssuesListForOrgDirection) IssuesListForOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgFilter returns new OptIssuesListForOrgFilter with value set to v.
func NewOptIssuesListForOrgFilter(v IssuesListForOrgFilter) OptIssuesListForOrgFilter {
	return OptIssuesListForOrgFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgFilter is optional IssuesListForOrgFilter.
type OptIssuesListForOrgFilter struct {
	Value IssuesListForOrgFilter
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgFilter was set.
func (o OptIssuesListForOrgFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgFilter) Reset() {
	var v IssuesListForOrgFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgFilter) SetTo(v IssuesListForOrgFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgFilter) Get() (v IssuesListForOrgFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgFilter) Or(d IssuesListForOrgFilter) IssuesListForOrgFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgSort returns new OptIssuesListForOrgSort with value set to v.
func NewOptIssuesListForOrgSort(v IssuesListForOrgSort) OptIssuesListForOrgSort {
	return OptIssuesListForOrgSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgSort is optional IssuesListForOrgSort.
type OptIssuesListForOrgSort struct {
	Value IssuesListForOrgSort
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgSort was set.
func (o OptIssuesListForOrgSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgSort) Reset() {
	var v IssuesListForOrgSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgSort) SetTo(v IssuesListForOrgSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgSort) Get() (v IssuesListForOrgSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgSort) Or(d IssuesListForOrgSort) IssuesListForOrgSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgState returns new OptIssuesListForOrgState with value set to v.
func NewOptIssuesListForOrgState(v IssuesListForOrgState) OptIssuesListForOrgState {
	return OptIssuesListForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgState is optional IssuesListForOrgState.
type OptIssuesListForOrgState struct {
	Value IssuesListForOrgState
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgState was set.
func (o OptIssuesListForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgState) Reset() {
	var v IssuesListForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgState) SetTo(v IssuesListForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgState) Get() (v IssuesListForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgState) Or(d IssuesListForOrgState) IssuesListForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoDirection returns new OptIssuesListForRepoDirection with value set to v.
func NewOptIssuesListForRepoDirection(v IssuesListForRepoDirection) OptIssuesListForRepoDirection {
	return OptIssuesListForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoDirection is optional IssuesListForRepoDirection.
type OptIssuesListForRepoDirection struct {
	Value IssuesListForRepoDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoDirection was set.
func (o OptIssuesListForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoDirection) Reset() {
	var v IssuesListForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoDirection) SetTo(v IssuesListForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoDirection) Get() (v IssuesListForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoDirection) Or(d IssuesListForRepoDirection) IssuesListForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoSort returns new OptIssuesListForRepoSort with value set to v.
func NewOptIssuesListForRepoSort(v IssuesListForRepoSort) OptIssuesListForRepoSort {
	return OptIssuesListForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoSort is optional IssuesListForRepoSort.
type OptIssuesListForRepoSort struct {
	Value IssuesListForRepoSort
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoSort was set.
func (o OptIssuesListForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoSort) Reset() {
	var v IssuesListForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoSort) SetTo(v IssuesListForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoSort) Get() (v IssuesListForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoSort) Or(d IssuesListForRepoSort) IssuesListForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoState returns new OptIssuesListForRepoState with value set to v.
func NewOptIssuesListForRepoState(v IssuesListForRepoState) OptIssuesListForRepoState {
	return OptIssuesListForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoState is optional IssuesListForRepoState.
type OptIssuesListForRepoState struct {
	Value IssuesListForRepoState
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoState was set.
func (o OptIssuesListForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoState) Reset() {
	var v IssuesListForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoState) SetTo(v IssuesListForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoState) Get() (v IssuesListForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoState) Or(d IssuesListForRepoState) IssuesListForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesDirection returns new OptIssuesListMilestonesDirection with value set to v.
func NewOptIssuesListMilestonesDirection(v IssuesListMilestonesDirection) OptIssuesListMilestonesDirection {
	return OptIssuesListMilestonesDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesDirection is optional IssuesListMilestonesDirection.
type OptIssuesListMilestonesDirection struct {
	Value IssuesListMilestonesDirection
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesDirection was set.
func (o OptIssuesListMilestonesDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesDirection) Reset() {
	var v IssuesListMilestonesDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesDirection) SetTo(v IssuesListMilestonesDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesDirection) Get() (v IssuesListMilestonesDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesDirection) Or(d IssuesListMilestonesDirection) IssuesListMilestonesDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesSort returns new OptIssuesListMilestonesSort with value set to v.
func NewOptIssuesListMilestonesSort(v IssuesListMilestonesSort) OptIssuesListMilestonesSort {
	return OptIssuesListMilestonesSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesSort is optional IssuesListMilestonesSort.
type OptIssuesListMilestonesSort struct {
	Value IssuesListMilestonesSort
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesSort was set.
func (o OptIssuesListMilestonesSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesSort) Reset() {
	var v IssuesListMilestonesSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesSort) SetTo(v IssuesListMilestonesSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesSort) Get() (v IssuesListMilestonesSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesSort) Or(d IssuesListMilestonesSort) IssuesListMilestonesSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesState returns new OptIssuesListMilestonesState with value set to v.
func NewOptIssuesListMilestonesState(v IssuesListMilestonesState) OptIssuesListMilestonesState {
	return OptIssuesListMilestonesState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesState is optional IssuesListMilestonesState.
type OptIssuesListMilestonesState struct {
	Value IssuesListMilestonesState
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesState was set.
func (o OptIssuesListMilestonesState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesState) Reset() {
	var v IssuesListMilestonesState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesState) SetTo(v IssuesListMilestonesState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesState) Get() (v IssuesListMilestonesState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesState) Or(d IssuesListMilestonesState) IssuesListMilestonesState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListSort returns new OptIssuesListSort with value set to v.
func NewOptIssuesListSort(v IssuesListSort) OptIssuesListSort {
	return OptIssuesListSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListSort is optional IssuesListSort.
type OptIssuesListSort struct {
	Value IssuesListSort
	Set   bool
}

// IsSet returns true if OptIssuesListSort was set.
func (o OptIssuesListSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListSort) Reset() {
	var v IssuesListSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListSort) SetTo(v IssuesListSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListSort) Get() (v IssuesListSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListSort) Or(d IssuesListSort) IssuesListSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListState returns new OptIssuesListState with value set to v.
func NewOptIssuesListState(v IssuesListState) OptIssuesListState {
	return OptIssuesListState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListState is optional IssuesListState.
type OptIssuesListState struct {
	Value IssuesListState
	Set   bool
}

// IsSet returns true if OptIssuesListState was set.
func (o OptIssuesListState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListState) Reset() {
	var v IssuesListState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListState) SetTo(v IssuesListState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListState) Get() (v IssuesListState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListState) Or(d IssuesListState) IssuesListState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesLockReqLockReason returns new OptIssuesLockReqLockReason with value set to v.
func NewOptIssuesLockReqLockReason(v IssuesLockReqLockReason) OptIssuesLockReqLockReason {
	return OptIssuesLockReqLockReason{
		Value: v,
		Set:   true,
	}
}

// OptIssuesLockReqLockReason is optional IssuesLockReqLockReason.
type OptIssuesLockReqLockReason struct {
	Value IssuesLockReqLockReason
	Set   bool
}

// IsSet returns true if OptIssuesLockReqLockReason was set.
func (o OptIssuesLockReqLockReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesLockReqLockReason) Reset() {
	var v IssuesLockReqLockReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesLockReqLockReason) SetTo(v IssuesLockReqLockReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesLockReqLockReason) Get() (v IssuesLockReqLockReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesLockReqLockReason) Or(d IssuesLockReqLockReason) IssuesLockReqLockReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesRemoveAssigneesReq returns new OptIssuesRemoveAssigneesReq with value set to v.
func NewOptIssuesRemoveAssigneesReq(v IssuesRemoveAssigneesReq) OptIssuesRemoveAssigneesReq {
	return OptIssuesRemoveAssigneesReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesRemoveAssigneesReq is optional IssuesRemoveAssigneesReq.
type OptIssuesRemoveAssigneesReq struct {
	Value IssuesRemoveAssigneesReq
	Set   bool
}

// IsSet returns true if OptIssuesRemoveAssigneesReq was set.
func (o OptIssuesRemoveAssigneesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesRemoveAssigneesReq) Reset() {
	var v IssuesRemoveAssigneesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesRemoveAssigneesReq) SetTo(v IssuesRemoveAssigneesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesRemoveAssigneesReq) Get() (v IssuesRemoveAssigneesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesRemoveAssigneesReq) Or(d IssuesRemoveAssigneesReq) IssuesRemoveAssigneesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateLabelReq returns new OptIssuesUpdateLabelReq with value set to v.
func NewOptIssuesUpdateLabelReq(v IssuesUpdateLabelReq) OptIssuesUpdateLabelReq {
	return OptIssuesUpdateLabelReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateLabelReq is optional IssuesUpdateLabelReq.
type OptIssuesUpdateLabelReq struct {
	Value IssuesUpdateLabelReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateLabelReq was set.
func (o OptIssuesUpdateLabelReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateLabelReq) Reset() {
	var v IssuesUpdateLabelReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateLabelReq) SetTo(v IssuesUpdateLabelReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateLabelReq) Get() (v IssuesUpdateLabelReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateLabelReq) Or(d IssuesUpdateLabelReq) IssuesUpdateLabelReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateMilestoneReq returns new OptIssuesUpdateMilestoneReq with value set to v.
func NewOptIssuesUpdateMilestoneReq(v IssuesUpdateMilestoneReq) OptIssuesUpdateMilestoneReq {
	return OptIssuesUpdateMilestoneReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateMilestoneReq is optional IssuesUpdateMilestoneReq.
type OptIssuesUpdateMilestoneReq struct {
	Value IssuesUpdateMilestoneReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateMilestoneReq was set.
func (o OptIssuesUpdateMilestoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateMilestoneReq) Reset() {
	var v IssuesUpdateMilestoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateMilestoneReq) SetTo(v IssuesUpdateMilestoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateMilestoneReq) Get() (v IssuesUpdateMilestoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateMilestoneReq) Or(d IssuesUpdateMilestoneReq) IssuesUpdateMilestoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateMilestoneReqState returns new OptIssuesUpdateMilestoneReqState with value set to v.
func NewOptIssuesUpdateMilestoneReqState(v IssuesUpdateMilestoneReqState) OptIssuesUpdateMilestoneReqState {
	return OptIssuesUpdateMilestoneReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateMilestoneReqState is optional IssuesUpdateMilestoneReqState.
type OptIssuesUpdateMilestoneReqState struct {
	Value IssuesUpdateMilestoneReqState
	Set   bool
}

// IsSet returns true if OptIssuesUpdateMilestoneReqState was set.
func (o OptIssuesUpdateMilestoneReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateMilestoneReqState) Reset() {
	var v IssuesUpdateMilestoneReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateMilestoneReqState) SetTo(v IssuesUpdateMilestoneReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateMilestoneReqState) Get() (v IssuesUpdateMilestoneReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateMilestoneReqState) Or(d IssuesUpdateMilestoneReqState) IssuesUpdateMilestoneReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateReq returns new OptIssuesUpdateReq with value set to v.
func NewOptIssuesUpdateReq(v IssuesUpdateReq) OptIssuesUpdateReq {
	return OptIssuesUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateReq is optional IssuesUpdateReq.
type OptIssuesUpdateReq struct {
	Value IssuesUpdateReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateReq was set.
func (o OptIssuesUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateReq) Reset() {
	var v IssuesUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateReq) SetTo(v IssuesUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateReq) Get() (v IssuesUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateReq) Or(d IssuesUpdateReq) IssuesUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateReqState returns new OptIssuesUpdateReqState with value set to v.
func NewOptIssuesUpdateReqState(v IssuesUpdateReqState) OptIssuesUpdateReqState {
	return OptIssuesUpdateReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateReqState is optional IssuesUpdateReqState.
type OptIssuesUpdateReqState struct {
	Value IssuesUpdateReqState
	Set   bool
}

// IsSet returns true if OptIssuesUpdateReqState was set.
func (o OptIssuesUpdateReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateReqState) Reset() {
	var v IssuesUpdateReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateReqState) SetTo(v IssuesUpdateReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateReqState) Get() (v IssuesUpdateReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateReqState) Or(d IssuesUpdateReqState) IssuesUpdateReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkWithType returns new OptLinkWithType with value set to v.
func NewOptLinkWithType(v LinkWithType) OptLinkWithType {
	return OptLinkWithType{
		Value: v,
		Set:   true,
	}
}

// OptLinkWithType is optional LinkWithType.
type OptLinkWithType struct {
	Value LinkWithType
	Set   bool
}

// IsSet returns true if OptLinkWithType was set.
func (o OptLinkWithType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkWithType) Reset() {
	var v LinkWithType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkWithType) SetTo(v LinkWithType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkWithType) Get() (v LinkWithType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkWithType) Or(d LinkWithType) LinkWithType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMarketplaceListingPlan returns new OptMarketplaceListingPlan with value set to v.
func NewOptMarketplaceListingPlan(v MarketplaceListingPlan) OptMarketplaceListingPlan {
	return OptMarketplaceListingPlan{
		Value: v,
		Set:   true,
	}
}

// OptMarketplaceListingPlan is optional MarketplaceListingPlan.
type OptMarketplaceListingPlan struct {
	Value MarketplaceListingPlan
	Set   bool
}

// IsSet returns true if OptMarketplaceListingPlan was set.
func (o OptMarketplaceListingPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMarketplaceListingPlan) Reset() {
	var v MarketplaceListingPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMarketplaceListingPlan) SetTo(v MarketplaceListingPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMarketplaceListingPlan) Get() (v MarketplaceListingPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMarketplaceListingPlan) Or(d MarketplaceListingPlan) MarketplaceListingPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMergedUpstreamMergeType returns new OptMergedUpstreamMergeType with value set to v.
func NewOptMergedUpstreamMergeType(v MergedUpstreamMergeType) OptMergedUpstreamMergeType {
	return OptMergedUpstreamMergeType{
		Value: v,
		Set:   true,
	}
}

// OptMergedUpstreamMergeType is optional MergedUpstreamMergeType.
type OptMergedUpstreamMergeType struct {
	Value MergedUpstreamMergeType
	Set   bool
}

// IsSet returns true if OptMergedUpstreamMergeType was set.
func (o OptMergedUpstreamMergeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMergedUpstreamMergeType) Reset() {
	var v MergedUpstreamMergeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMergedUpstreamMergeType) SetTo(v MergedUpstreamMergeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMergedUpstreamMergeType) Get() (v MergedUpstreamMergeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMergedUpstreamMergeType) Or(d MergedUpstreamMergeType) MergedUpstreamMergeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrationsMapCommitAuthorReq returns new OptMigrationsMapCommitAuthorReq with value set to v.
func NewOptMigrationsMapCommitAuthorReq(v MigrationsMapCommitAuthorReq) OptMigrationsMapCommitAuthorReq {
	return OptMigrationsMapCommitAuthorReq{
		Value: v,
		Set:   true,
	}
}

// OptMigrationsMapCommitAuthorReq is optional MigrationsMapCommitAuthorReq.
type OptMigrationsMapCommitAuthorReq struct {
	Value MigrationsMapCommitAuthorReq
	Set   bool
}

// IsSet returns true if OptMigrationsMapCommitAuthorReq was set.
func (o OptMigrationsMapCommitAuthorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrationsMapCommitAuthorReq) Reset() {
	var v MigrationsMapCommitAuthorReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrationsMapCommitAuthorReq) SetTo(v MigrationsMapCommitAuthorReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrationsMapCommitAuthorReq) Get() (v MigrationsMapCommitAuthorReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrationsMapCommitAuthorReq) Or(d MigrationsMapCommitAuthorReq) MigrationsMapCommitAuthorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrationsStartImportReqVcs returns new OptMigrationsStartImportReqVcs with value set to v.
func NewOptMigrationsStartImportReqVcs(v MigrationsStartImportReqVcs) OptMigrationsStartImportReqVcs {
	return OptMigrationsStartImportReqVcs{
		Value: v,
		Set:   true,
	}
}

// OptMigrationsStartImportReqVcs is optional MigrationsStartImportReqVcs.
type OptMigrationsStartImportReqVcs struct {
	Value MigrationsStartImportReqVcs
	Set   bool
}

// IsSet returns true if OptMigrationsStartImportReqVcs was set.
func (o OptMigrationsStartImportReqVcs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrationsStartImportReqVcs) Reset() {
	var v MigrationsStartImportReqVcs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrationsStartImportReqVcs) SetTo(v MigrationsStartImportReqVcs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrationsStartImportReqVcs) Get() (v MigrationsStartImportReqVcs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrationsStartImportReqVcs) Or(d MigrationsStartImportReqVcs) MigrationsStartImportReqVcs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMinimalRepository returns new OptMinimalRepository with value set to v.
func NewOptMinimalRepository(v MinimalRepository) OptMinimalRepository {
	return OptMinimalRepository{
		Value: v,
		Set:   true,
	}
}

// OptMinimalRepository is optional MinimalRepository.
type OptMinimalRepository struct {
	Value MinimalRepository
	Set   bool
}

// IsSet returns true if OptMinimalRepository was set.
func (o OptMinimalRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMinimalRepository) Reset() {
	var v MinimalRepository
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMinimalRepository) SetTo(v MinimalRepository) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMinimalRepository) Get() (v MinimalRepository, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMinimalRepository) Or(d MinimalRepository) MinimalRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMinimalRepositoryPermissions returns new OptMinimalRepositoryPermissions with value set to v.
func NewOptMinimalRepositoryPermissions(v MinimalRepositoryPermissions) OptMinimalRepositoryPermissions {
	return OptMinimalRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptMinimalRepositoryPermissions is optional MinimalRepositoryPermissions.
type OptMinimalRepositoryPermissions struct {
	Value MinimalRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptMinimalRepositoryPermissions was set.
func (o OptMinimalRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMinimalRepositoryPermissions) Reset() {
	var v MinimalRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMinimalRepositoryPermissions) SetTo(v MinimalRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMinimalRepositoryPermissions) Get() (v MinimalRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMinimalRepositoryPermissions) Or(d MinimalRepositoryPermissions) MinimalRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertDismissedReason returns new OptNilCodeScanningAlertDismissedReason with value set to v.
func NewOptNilCodeScanningAlertDismissedReason(v CodeScanningAlertDismissedReason) OptNilCodeScanningAlertDismissedReason {
	return OptNilCodeScanningAlertDismissedReason{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertDismissedReason is optional nullable CodeScanningAlertDismissedReason.
type OptNilCodeScanningAlertDismissedReason struct {
	Value CodeScanningAlertDismissedReason
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertDismissedReason was set.
func (o OptNilCodeScanningAlertDismissedReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertDismissedReason) Reset() {
	var v CodeScanningAlertDismissedReason
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertDismissedReason) SetTo(v CodeScanningAlertDismissedReason) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertDismissedReason) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertDismissedReason) Get() (v CodeScanningAlertDismissedReason, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertDismissedReason) Or(d CodeScanningAlertDismissedReason) CodeScanningAlertDismissedReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSecuritySeverityLevel returns new OptNilCodeScanningAlertRuleSecuritySeverityLevel with value set to v.
func NewOptNilCodeScanningAlertRuleSecuritySeverityLevel(v CodeScanningAlertRuleSecuritySeverityLevel) OptNilCodeScanningAlertRuleSecuritySeverityLevel {
	return OptNilCodeScanningAlertRuleSecuritySeverityLevel{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSecuritySeverityLevel is optional nullable CodeScanningAlertRuleSecuritySeverityLevel.
type OptNilCodeScanningAlertRuleSecuritySeverityLevel struct {
	Value CodeScanningAlertRuleSecuritySeverityLevel
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSecuritySeverityLevel was set.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) Reset() {
	var v CodeScanningAlertRuleSecuritySeverityLevel
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) SetTo(v CodeScanningAlertRuleSecuritySeverityLevel) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) Get() (v CodeScanningAlertRuleSecuritySeverityLevel, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) Or(d CodeScanningAlertRuleSecuritySeverityLevel) CodeScanningAlertRuleSecuritySeverityLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSeverity returns new OptNilCodeScanningAlertRuleSeverity with value set to v.
func NewOptNilCodeScanningAlertRuleSeverity(v CodeScanningAlertRuleSeverity) OptNilCodeScanningAlertRuleSeverity {
	return OptNilCodeScanningAlertRuleSeverity{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSeverity is optional nullable CodeScanningAlertRuleSeverity.
type OptNilCodeScanningAlertRuleSeverity struct {
	Value CodeScanningAlertRuleSeverity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSeverity was set.
func (o OptNilCodeScanningAlertRuleSeverity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSeverity) Reset() {
	var v CodeScanningAlertRuleSeverity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSeverity) SetTo(v CodeScanningAlertRuleSeverity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSeverity) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSeverity) Get() (v CodeScanningAlertRuleSeverity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSeverity) Or(d CodeScanningAlertRuleSeverity) CodeScanningAlertRuleSeverity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSummarySeverity returns new OptNilCodeScanningAlertRuleSummarySeverity with value set to v.
func NewOptNilCodeScanningAlertRuleSummarySeverity(v CodeScanningAlertRuleSummarySeverity) OptNilCodeScanningAlertRuleSummarySeverity {
	return OptNilCodeScanningAlertRuleSummarySeverity{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSummarySeverity is optional nullable CodeScanningAlertRuleSummarySeverity.
type OptNilCodeScanningAlertRuleSummarySeverity struct {
	Value CodeScanningAlertRuleSummarySeverity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSummarySeverity was set.
func (o OptNilCodeScanningAlertRuleSummarySeverity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) Reset() {
	var v CodeScanningAlertRuleSummarySeverity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) SetTo(v CodeScanningAlertRuleSummarySeverity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSummarySeverity) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSummarySeverity) Get() (v CodeScanningAlertRuleSummarySeverity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSummarySeverity) Or(d CodeScanningAlertRuleSummarySeverity) CodeScanningAlertRuleSummarySeverity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAnalysisToolGUID returns new OptNilCodeScanningAnalysisToolGUID with value set to v.
func NewOptNilCodeScanningAnalysisToolGUID(v CodeScanningAnalysisToolGUID) OptNilCodeScanningAnalysisToolGUID {
	return OptNilCodeScanningAnalysisToolGUID{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAnalysisToolGUID is optional nullable CodeScanningAnalysisToolGUID.
type OptNilCodeScanningAnalysisToolGUID struct {
	Value CodeScanningAnalysisToolGUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAnalysisToolGUID was set.
func (o OptNilCodeScanningAnalysisToolGUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAnalysisToolGUID) Reset() {
	var v CodeScanningAnalysisToolGUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAnalysisToolGUID) SetTo(v CodeScanningAnalysisToolGUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAnalysisToolGUID) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAnalysisToolGUID) Get() (v CodeScanningAnalysisToolGUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAnalysisToolGUID) Or(d CodeScanningAnalysisToolGUID) CodeScanningAnalysisToolGUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAnalysisToolVersion returns new OptNilCodeScanningAnalysisToolVersion with value set to v.
func NewOptNilCodeScanningAnalysisToolVersion(v CodeScanningAnalysisToolVersion) OptNilCodeScanningAnalysisToolVersion {
	return OptNilCodeScanningAnalysisToolVersion{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAnalysisToolVersion is optional nullable CodeScanningAnalysisToolVersion.
type OptNilCodeScanningAnalysisToolVersion struct {
	Value CodeScanningAnalysisToolVersion
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAnalysisToolVersion was set.
func (o OptNilCodeScanningAnalysisToolVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAnalysisToolVersion) Reset() {
	var v CodeScanningAnalysisToolVersion
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAnalysisToolVersion) SetTo(v CodeScanningAnalysisToolVersion) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAnalysisToolVersion) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAnalysisToolVersion) Get() (v CodeScanningAnalysisToolVersion, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAnalysisToolVersion) Or(d CodeScanningAnalysisToolVersion) CodeScanningAnalysisToolVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFullRepositorySecurityAndAnalysis returns new OptNilFullRepositorySecurityAndAnalysis with value set to v.
func NewOptNilFullRepositorySecurityAndAnalysis(v FullRepositorySecurityAndAnalysis) OptNilFullRepositorySecurityAndAnalysis {
	return OptNilFullRepositorySecurityAndAnalysis{
		Value: v,
		Set:   true,
	}
}

// OptNilFullRepositorySecurityAndAnalysis is optional nullable FullRepositorySecurityAndAnalysis.
type OptNilFullRepositorySecurityAndAnalysis struct {
	Value FullRepositorySecurityAndAnalysis
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFullRepositorySecurityAndAnalysis was set.
func (o OptNilFullRepositorySecurityAndAnalysis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFullRepositorySecurityAndAnalysis) Reset() {
	var v FullRepositorySecurityAndAnalysis
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFullRepositorySecurityAndAnalysis) SetTo(v FullRepositorySecurityAndAnalysis) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFullRepositorySecurityAndAnalysis) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFullRepositorySecurityAndAnalysis) Get() (v FullRepositorySecurityAndAnalysis, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFullRepositorySecurityAndAnalysis) Or(d FullRepositorySecurityAndAnalysis) FullRepositorySecurityAndAnalysis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistHistoryArray returns new OptNilGistHistoryArray with value set to v.
func NewOptNilGistHistoryArray(v []GistHistory) OptNilGistHistoryArray {
	return OptNilGistHistoryArray{
		Value: v,
		Set:   true,
	}
}

// OptNilGistHistoryArray is optional nullable []GistHistory.
type OptNilGistHistoryArray struct {
	Value []GistHistory
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistHistoryArray was set.
func (o OptNilGistHistoryArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistHistoryArray) Reset() {
	var v []GistHistory
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistHistoryArray) SetTo(v []GistHistory) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistHistoryArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistHistoryArray) Get() (v []GistHistory, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistHistoryArray) Or(d []GistHistory) []GistHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistSimpleForkOf returns new OptNilGistSimpleForkOf with value set to v.
func NewOptNilGistSimpleForkOf(v GistSimpleForkOf) OptNilGistSimpleForkOf {
	return OptNilGistSimpleForkOf{
		Value: v,
		Set:   true,
	}
}

// OptNilGistSimpleForkOf is optional nullable GistSimpleForkOf.
type OptNilGistSimpleForkOf struct {
	Value GistSimpleForkOf
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistSimpleForkOf was set.
func (o OptNilGistSimpleForkOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistSimpleForkOf) Reset() {
	var v GistSimpleForkOf
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistSimpleForkOf) SetTo(v GistSimpleForkOf) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistSimpleForkOf) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistSimpleForkOf) Get() (v GistSimpleForkOf, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistSimpleForkOf) Or(d GistSimpleForkOf) GistSimpleForkOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistSimpleForksItemArray returns new OptNilGistSimpleForksItemArray with value set to v.
func NewOptNilGistSimpleForksItemArray(v []GistSimpleForksItem) OptNilGistSimpleForksItemArray {
	return OptNilGistSimpleForksItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilGistSimpleForksItemArray is optional nullable []GistSimpleForksItem.
type OptNilGistSimpleForksItemArray struct {
	Value []GistSimpleForksItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistSimpleForksItemArray was set.
func (o OptNilGistSimpleForksItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistSimpleForksItemArray) Reset() {
	var v []GistSimpleForksItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistSimpleForksItemArray) SetTo(v []GistSimpleForksItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistSimpleForksItemArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistSimpleForksItemArray) Get() (v []GistSimpleForksItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistSimpleForksItemArray) Or(d []GistSimpleForksItem) []GistSimpleForksItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesCreateReqMilestone returns new OptNilIssuesCreateReqMilestone with value set to v.
func NewOptNilIssuesCreateReqMilestone(v IssuesCreateReqMilestone) OptNilIssuesCreateReqMilestone {
	return OptNilIssuesCreateReqMilestone{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesCreateReqMilestone is optional nullable IssuesCreateReqMilestone.
type OptNilIssuesCreateReqMilestone struct {
	Value IssuesCreateReqMilestone
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesCreateReqMilestone was set.
func (o OptNilIssuesCreateReqMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesCreateReqMilestone) Reset() {
	var v IssuesCreateReqMilestone
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesCreateReqMilestone) SetTo(v IssuesCreateReqMilestone) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesCreateReqMilestone) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesCreateReqMilestone) Get() (v IssuesCreateReqMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesCreateReqMilestone) Or(d IssuesCreateReqMilestone) IssuesCreateReqMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesLockReq returns new OptNilIssuesLockReq with value set to v.
func NewOptNilIssuesLockReq(v IssuesLockReq) OptNilIssuesLockReq {
	return OptNilIssuesLockReq{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesLockReq is optional nullable IssuesLockReq.
type OptNilIssuesLockReq struct {
	Value IssuesLockReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesLockReq was set.
func (o OptNilIssuesLockReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesLockReq) Reset() {
	var v IssuesLockReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesLockReq) SetTo(v IssuesLockReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesLockReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesLockReq) Get() (v IssuesLockReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesLockReq) Or(d IssuesLockReq) IssuesLockReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesUpdateReqMilestone returns new OptNilIssuesUpdateReqMilestone with value set to v.
func NewOptNilIssuesUpdateReqMilestone(v IssuesUpdateReqMilestone) OptNilIssuesUpdateReqMilestone {
	return OptNilIssuesUpdateReqMilestone{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesUpdateReqMilestone is optional nullable IssuesUpdateReqMilestone.
type OptNilIssuesUpdateReqMilestone struct {
	Value IssuesUpdateReqMilestone
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesUpdateReqMilestone was set.
func (o OptNilIssuesUpdateReqMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesUpdateReqMilestone) Reset() {
	var v IssuesUpdateReqMilestone
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesUpdateReqMilestone) SetTo(v IssuesUpdateReqMilestone) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesUpdateReqMilestone) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesUpdateReqMilestone) Get() (v IssuesUpdateReqMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesUpdateReqMilestone) Or(d IssuesUpdateReqMilestone) IssuesUpdateReqMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesUpdateReqTitle returns new OptNilIssuesUpdateReqTitle with value set to v.
func NewOptNilIssuesUpdateReqTitle(v IssuesUpdateReqTitle) OptNilIssuesUpdateReqTitle {
	return OptNilIssuesUpdateReqTitle{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesUpdateReqTitle is optional nullable IssuesUpdateReqTitle.
type OptNilIssuesUpdateReqTitle struct {
	Value IssuesUpdateReqTitle
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesUpdateReqTitle was set.
func (o OptNilIssuesUpdateReqTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesUpdateReqTitle) Reset() {
	var v IssuesUpdateReqTitle
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesUpdateReqTitle) SetTo(v IssuesUpdateReqTitle) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesUpdateReqTitle) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesUpdateReqTitle) Get() (v IssuesUpdateReqTitle, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesUpdateReqTitle) Or(d IssuesUpdateReqTitle) IssuesUpdateReqTitle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMarketplacePurchaseMarketplacePendingChange returns new OptNilMarketplacePurchaseMarketplacePendingChange with value set to v.
func NewOptNilMarketplacePurchaseMarketplacePendingChange(v MarketplacePurchaseMarketplacePendingChange) OptNilMarketplacePurchaseMarketplacePendingChange {
	return OptNilMarketplacePurchaseMarketplacePendingChange{
		Value: v,
		Set:   true,
	}
}

// OptNilMarketplacePurchaseMarketplacePendingChange is optional nullable MarketplacePurchaseMarketplacePendingChange.
type OptNilMarketplacePurchaseMarketplacePendingChange struct {
	Value MarketplacePurchaseMarketplacePendingChange
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMarketplacePurchaseMarketplacePendingChange was set.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) Reset() {
	var v MarketplacePurchaseMarketplacePendingChange
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) SetTo(v MarketplacePurchaseMarketplacePendingChange) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) Get() (v MarketplacePurchaseMarketplacePendingChange, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) Or(d MarketplacePurchaseMarketplacePendingChange) MarketplacePurchaseMarketplacePendingChange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMigrationsUpdateImportReq returns new OptNilMigrationsUpdateImportReq with value set to v.
func NewOptNilMigrationsUpdateImportReq(v MigrationsUpdateImportReq) OptNilMigrationsUpdateImportReq {
	return OptNilMigrationsUpdateImportReq{
		Value: v,
		Set:   true,
	}
}

// OptNilMigrationsUpdateImportReq is optional nullable MigrationsUpdateImportReq.
type OptNilMigrationsUpdateImportReq struct {
	Value MigrationsUpdateImportReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMigrationsUpdateImportReq was set.
func (o OptNilMigrationsUpdateImportReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMigrationsUpdateImportReq) Reset() {
	var v MigrationsUpdateImportReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMigrationsUpdateImportReq) SetTo(v MigrationsUpdateImportReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMigrationsUpdateImportReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMigrationsUpdateImportReq) Get() (v MigrationsUpdateImportReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMigrationsUpdateImportReq) Or(d MigrationsUpdateImportReq) MigrationsUpdateImportReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMinimalRepositoryLicense returns new OptNilMinimalRepositoryLicense with value set to v.
func NewOptNilMinimalRepositoryLicense(v MinimalRepositoryLicense) OptNilMinimalRepositoryLicense {
	return OptNilMinimalRepositoryLicense{
		Value: v,
		Set:   true,
	}
}

// OptNilMinimalRepositoryLicense is optional nullable MinimalRepositoryLicense.
type OptNilMinimalRepositoryLicense struct {
	Value MinimalRepositoryLicense
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMinimalRepositoryLicense was set.
func (o OptNilMinimalRepositoryLicense) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMinimalRepositoryLicense) Reset() {
	var v MinimalRepositoryLicense
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMinimalRepositoryLicense) SetTo(v MinimalRepositoryLicense) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMinimalRepositoryLicense) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMinimalRepositoryLicense) Get() (v MinimalRepositoryLicense, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMinimalRepositoryLicense) Or(d MinimalRepositoryLicense) MinimalRepositoryLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableIntegration returns new OptNilNullableIntegration with value set to v.
func NewOptNilNullableIntegration(v NullableIntegration) OptNilNullableIntegration {
	return OptNilNullableIntegration{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableIntegration is optional nullable NullableIntegration.
type OptNilNullableIntegration struct {
	Value NullableIntegration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableIntegration was set.
func (o OptNilNullableIntegration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableIntegration) Reset() {
	var v NullableIntegration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableIntegration) SetTo(v NullableIntegration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableIntegration) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableIntegration) Get() (v NullableIntegration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableIntegration) Or(d NullableIntegration) NullableIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableMinimalRepository returns new OptNilNullableMinimalRepository with value set to v.
func NewOptNilNullableMinimalRepository(v NullableMinimalRepository) OptNilNullableMinimalRepository {
	return OptNilNullableMinimalRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableMinimalRepository is optional nullable NullableMinimalRepository.
type OptNilNullableMinimalRepository struct {
	Value NullableMinimalRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableMinimalRepository was set.
func (o OptNilNullableMinimalRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableMinimalRepository) Reset() {
	var v NullableMinimalRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableMinimalRepository) SetTo(v NullableMinimalRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableMinimalRepository) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableMinimalRepository) Get() (v NullableMinimalRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableMinimalRepository) Or(d NullableMinimalRepository) NullableMinimalRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableMinimalRepositoryLicense returns new OptNilNullableMinimalRepositoryLicense with value set to v.
func NewOptNilNullableMinimalRepositoryLicense(v NullableMinimalRepositoryLicense) OptNilNullableMinimalRepositoryLicense {
	return OptNilNullableMinimalRepositoryLicense{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableMinimalRepositoryLicense is optional nullable NullableMinimalRepositoryLicense.
type OptNilNullableMinimalRepositoryLicense struct {
	Value NullableMinimalRepositoryLicense
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableMinimalRepositoryLicense was set.
func (o OptNilNullableMinimalRepositoryLicense) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableMinimalRepositoryLicense) Reset() {
	var v NullableMinimalRepositoryLicense
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableMinimalRepositoryLicense) SetTo(v NullableMinimalRepositoryLicense) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableMinimalRepositoryLicense) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableMinimalRepositoryLicense) Get() (v NullableMinimalRepositoryLicense, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableMinimalRepositoryLicense) Or(d NullableMinimalRepositoryLicense) NullableMinimalRepositoryLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableRepository returns new OptNilNullableRepository with value set to v.
func NewOptNilNullableRepository(v NullableRepository) OptNilNullableRepository {
	return OptNilNullableRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableRepository is optional nullable NullableRepository.
type OptNilNullableRepository struct {
	Value NullableRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableRepository was set.
func (o OptNilNullableRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableRepository) Reset() {
	var v NullableRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableRepository) SetTo(v NullableRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableRepository) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableRepository) Get() (v NullableRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableRepository) Or(d NullableRepository) NullableRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableRepositoryTemplateRepository returns new OptNilNullableRepositoryTemplateRepository with value set to v.
func NewOptNilNullableRepositoryTemplateRepository(v NullableRepositoryTemplateRepository) OptNilNullableRepositoryTemplateRepository {
	return OptNilNullableRepositoryTemplateRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableRepositoryTemplateRepository is optional nullable NullableRepositoryTemplateRepository.
type OptNilNullableRepositoryTemplateRepository struct {
	Value NullableRepositoryTemplateRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableRepositoryTemplateRepository was set.
func (o OptNilNullableRepositoryTemplateRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableRepositoryTemplateRepository) Reset() {
	var v NullableRepositoryTemplateRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableRepositoryTemplateRepository) SetTo(v NullableRepositoryTemplateRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableRepositoryTemplateRepository) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableRepositoryTemplateRepository) Get() (v NullableRepositoryTemplateRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableRepositoryTemplateRepository) Or(d NullableRepositoryTemplateRepository) NullableRepositoryTemplateRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableScopedInstallation returns new OptNilNullableScopedInstallation with value set to v.
func NewOptNilNullableScopedInstallation(v NullableScopedInstallation) OptNilNullableScopedInstallation {
	return OptNilNullableScopedInstallation{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableScopedInstallation is optional nullable NullableScopedInstallation.
type OptNilNullableScopedInstallation struct {
	Value NullableScopedInstallation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableScopedInstallation was set.
func (o OptNilNullableScopedInstallation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableScopedInstallation) Reset() {
	var v NullableScopedInstallation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableScopedInstallation) SetTo(v NullableScopedInstallation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableScopedInstallation) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableScopedInstallation) Get() (v NullableScopedInstallation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableScopedInstallation) Or(d NullableScopedInstallation) NullableScopedInstallation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableSimpleUser returns new OptNilNullableSimpleUser with value set to v.
func NewOptNilNullableSimpleUser(v NullableSimpleUser) OptNilNullableSimpleUser {
	return OptNilNullableSimpleUser{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableSimpleUser is optional nullable NullableSimpleUser.
type OptNilNullableSimpleUser struct {
	Value NullableSimpleUser
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableSimpleUser was set.
func (o OptNilNullableSimpleUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableSimpleUser) Reset() {
	var v NullableSimpleUser
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableSimpleUser) SetTo(v NullableSimpleUser) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableSimpleUser) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableSimpleUser) Get() (v NullableSimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableSimpleUser) Or(d NullableSimpleUser) NullableSimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableTeamSimple returns new OptNilNullableTeamSimple with value set to v.
func NewOptNilNullableTeamSimple(v NullableTeamSimple) OptNilNullableTeamSimple {
	return OptNilNullableTeamSimple{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableTeamSimple is optional nullable NullableTeamSimple.
type OptNilNullableTeamSimple struct {
	Value NullableTeamSimple
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableTeamSimple was set.
func (o OptNilNullableTeamSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableTeamSimple) Reset() {
	var v NullableTeamSimple
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableTeamSimple) SetTo(v NullableTeamSimple) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableTeamSimple) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableTeamSimple) Get() (v NullableTeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableTeamSimple) Or(d NullableTeamSimple) NullableTeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPageProtectedDomainState returns new OptNilPageProtectedDomainState with value set to v.
func NewOptNilPageProtectedDomainState(v PageProtectedDomainState) OptNilPageProtectedDomainState {
	return OptNilPageProtectedDomainState{
		Value: v,
		Set:   true,
	}
}

// OptNilPageProtectedDomainState is optional nullable PageProtectedDomainState.
type OptNilPageProtectedDomainState struct {
	Value PageProtectedDomainState
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPageProtectedDomainState was set.
func (o OptNilPageProtectedDomainState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPageProtectedDomainState) Reset() {
	var v PageProtectedDomainState
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPageProtectedDomainState) SetTo(v PageProtectedDomainState) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPageProtectedDomainState) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPageProtectedDomainState) Get() (v PageProtectedDomainState, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPageProtectedDomainState) Or(d PageProtectedDomainState) PageProtectedDomainState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPagesHealthCheckAltDomain returns new OptNilPagesHealthCheckAltDomain with value set to v.
func NewOptNilPagesHealthCheckAltDomain(v PagesHealthCheckAltDomain) OptNilPagesHealthCheckAltDomain {
	return OptNilPagesHealthCheckAltDomain{
		Value: v,
		Set:   true,
	}
}

// OptNilPagesHealthCheckAltDomain is optional nullable PagesHealthCheckAltDomain.
type OptNilPagesHealthCheckAltDomain struct {
	Value PagesHealthCheckAltDomain
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPagesHealthCheckAltDomain was set.
func (o OptNilPagesHealthCheckAltDomain) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPagesHealthCheckAltDomain) Reset() {
	var v PagesHealthCheckAltDomain
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPagesHealthCheckAltDomain) SetTo(v PagesHealthCheckAltDomain) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPagesHealthCheckAltDomain) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPagesHealthCheckAltDomain) Get() (v PagesHealthCheckAltDomain, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPagesHealthCheckAltDomain) Or(d PagesHealthCheckAltDomain) PagesHealthCheckAltDomain {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilProjectsAddCollaboratorReq returns new OptNilProjectsAddCollaboratorReq with value set to v.
func NewOptNilProjectsAddCollaboratorReq(v ProjectsAddCollaboratorReq) OptNilProjectsAddCollaboratorReq {
	return OptNilProjectsAddCollaboratorReq{
		Value: v,
		Set:   true,
	}
}

// OptNilProjectsAddCollaboratorReq is optional nullable ProjectsAddCollaboratorReq.
type OptNilProjectsAddCollaboratorReq struct {
	Value ProjectsAddCollaboratorReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilProjectsAddCollaboratorReq was set.
func (o OptNilProjectsAddCollaboratorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilProjectsAddCollaboratorReq) Reset() {
	var v ProjectsAddCollaboratorReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilProjectsAddCollaboratorReq) SetTo(v ProjectsAddCollaboratorReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilProjectsAddCollaboratorReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilProjectsAddCollaboratorReq) Get() (v ProjectsAddCollaboratorReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilProjectsAddCollaboratorReq) Or(d ProjectsAddCollaboratorReq) ProjectsAddCollaboratorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullRequestReviewCommentStartSide returns new OptNilPullRequestReviewCommentStartSide with value set to v.
func NewOptNilPullRequestReviewCommentStartSide(v PullRequestReviewCommentStartSide) OptNilPullRequestReviewCommentStartSide {
	return OptNilPullRequestReviewCommentStartSide{
		Value: v,
		Set:   true,
	}
}

// OptNilPullRequestReviewCommentStartSide is optional nullable PullRequestReviewCommentStartSide.
type OptNilPullRequestReviewCommentStartSide struct {
	Value PullRequestReviewCommentStartSide
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullRequestReviewCommentStartSide was set.
func (o OptNilPullRequestReviewCommentStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullRequestReviewCommentStartSide) Reset() {
	var v PullRequestReviewCommentStartSide
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullRequestReviewCommentStartSide) SetTo(v PullRequestReviewCommentStartSide) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullRequestReviewCommentStartSide) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullRequestReviewCommentStartSide) Get() (v PullRequestReviewCommentStartSide, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullRequestReviewCommentStartSide) Or(d PullRequestReviewCommentStartSide) PullRequestReviewCommentStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullsMergeReq returns new OptNilPullsMergeReq with value set to v.
func NewOptNilPullsMergeReq(v PullsMergeReq) OptNilPullsMergeReq {
	return OptNilPullsMergeReq{
		Value: v,
		Set:   true,
	}
}

// OptNilPullsMergeReq is optional nullable PullsMergeReq.
type OptNilPullsMergeReq struct {
	Value PullsMergeReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullsMergeReq was set.
func (o OptNilPullsMergeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullsMergeReq) Reset() {
	var v PullsMergeReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullsMergeReq) SetTo(v PullsMergeReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullsMergeReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullsMergeReq) Get() (v PullsMergeReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullsMergeReq) Or(d PullsMergeReq) PullsMergeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullsUpdateBranchReq returns new OptNilPullsUpdateBranchReq with value set to v.
func NewOptNilPullsUpdateBranchReq(v PullsUpdateBranchReq) OptNilPullsUpdateBranchReq {
	return OptNilPullsUpdateBranchReq{
		Value: v,
		Set:   true,
	}
}

// OptNilPullsUpdateBranchReq is optional nullable PullsUpdateBranchReq.
type OptNilPullsUpdateBranchReq struct {
	Value PullsUpdateBranchReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullsUpdateBranchReq was set.
func (o OptNilPullsUpdateBranchReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullsUpdateBranchReq) Reset() {
	var v PullsUpdateBranchReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullsUpdateBranchReq) SetTo(v PullsUpdateBranchReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullsUpdateBranchReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullsUpdateBranchReq) Get() (v PullsUpdateBranchReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullsUpdateBranchReq) Or(d PullsUpdateBranchReq) PullsUpdateBranchReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposCreateForkReq returns new OptNilReposCreateForkReq with value set to v.
func NewOptNilReposCreateForkReq(v ReposCreateForkReq) OptNilReposCreateForkReq {
	return OptNilReposCreateForkReq{
		Value: v,
		Set:   true,
	}
}

// OptNilReposCreateForkReq is optional nullable ReposCreateForkReq.
type OptNilReposCreateForkReq struct {
	Value ReposCreateForkReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposCreateForkReq was set.
func (o OptNilReposCreateForkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposCreateForkReq) Reset() {
	var v ReposCreateForkReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposCreateForkReq) SetTo(v ReposCreateForkReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposCreateForkReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposCreateForkReq) Get() (v ReposCreateForkReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposCreateForkReq) Or(d ReposCreateForkReq) ReposCreateForkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposCreateWebhookReq returns new OptNilReposCreateWebhookReq with value set to v.
func NewOptNilReposCreateWebhookReq(v ReposCreateWebhookReq) OptNilReposCreateWebhookReq {
	return OptNilReposCreateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptNilReposCreateWebhookReq is optional nullable ReposCreateWebhookReq.
type OptNilReposCreateWebhookReq struct {
	Value ReposCreateWebhookReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposCreateWebhookReq was set.
func (o OptNilReposCreateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposCreateWebhookReq) Reset() {
	var v ReposCreateWebhookReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposCreateWebhookReq) SetTo(v ReposCreateWebhookReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposCreateWebhookReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposCreateWebhookReq) Get() (v ReposCreateWebhookReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposCreateWebhookReq) Or(d ReposCreateWebhookReq) ReposCreateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposUpdateReqSecurityAndAnalysis returns new OptNilReposUpdateReqSecurityAndAnalysis with value set to v.
func NewOptNilReposUpdateReqSecurityAndAnalysis(v ReposUpdateReqSecurityAndAnalysis) OptNilReposUpdateReqSecurityAndAnalysis {
	return OptNilReposUpdateReqSecurityAndAnalysis{
		Value: v,
		Set:   true,
	}
}

// OptNilReposUpdateReqSecurityAndAnalysis is optional nullable ReposUpdateReqSecurityAndAnalysis.
type OptNilReposUpdateReqSecurityAndAnalysis struct {
	Value ReposUpdateReqSecurityAndAnalysis
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposUpdateReqSecurityAndAnalysis was set.
func (o OptNilReposUpdateReqSecurityAndAnalysis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) Reset() {
	var v ReposUpdateReqSecurityAndAnalysis
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) SetTo(v ReposUpdateReqSecurityAndAnalysis) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposUpdateReqSecurityAndAnalysis) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposUpdateReqSecurityAndAnalysis) Get() (v ReposUpdateReqSecurityAndAnalysis, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposUpdateReqSecurityAndAnalysis) Or(d ReposUpdateReqSecurityAndAnalysis) ReposUpdateReqSecurityAndAnalysis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRepositoryTemplateRepository returns new OptNilRepositoryTemplateRepository with value set to v.
func NewOptNilRepositoryTemplateRepository(v RepositoryTemplateRepository) OptNilRepositoryTemplateRepository {
	return OptNilRepositoryTemplateRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilRepositoryTemplateRepository is optional nullable RepositoryTemplateRepository.
type OptNilRepositoryTemplateRepository struct {
	Value RepositoryTemplateRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRepositoryTemplateRepository was set.
func (o OptNilRepositoryTemplateRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRepositoryTemplateRepository) Reset() {
	var v RepositoryTemplateRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRepositoryTemplateRepository) SetTo(v RepositoryTemplateRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRepositoryTemplateRepository) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRepositoryTemplateRepository) Get() (v RepositoryTemplateRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRepositoryTemplateRepository) Or(d RepositoryTemplateRepository) RepositoryTemplateRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReviewCommentStartSide returns new OptNilReviewCommentStartSide with value set to v.
func NewOptNilReviewCommentStartSide(v ReviewCommentStartSide) OptNilReviewCommentStartSide {
	return OptNilReviewCommentStartSide{
		Value: v,
		Set:   true,
	}
}

// OptNilReviewCommentStartSide is optional nullable ReviewCommentStartSide.
type OptNilReviewCommentStartSide struct {
	Value ReviewCommentStartSide
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReviewCommentStartSide was set.
func (o OptNilReviewCommentStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReviewCommentStartSide) Reset() {
	var v ReviewCommentStartSide
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReviewCommentStartSide) SetTo(v ReviewCommentStartSide) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReviewCommentStartSide) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReviewCommentStartSide) Get() (v ReviewCommentStartSide, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReviewCommentStartSide) Or(d ReviewCommentStartSide) ReviewCommentStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSecretScanningAlertResolution returns new OptNilSecretScanningAlertResolution with value set to v.
func NewOptNilSecretScanningAlertResolution(v SecretScanningAlertResolution) OptNilSecretScanningAlertResolution {
	return OptNilSecretScanningAlertResolution{
		Value: v,
		Set:   true,
	}
}

// OptNilSecretScanningAlertResolution is optional nullable SecretScanningAlertResolution.
type OptNilSecretScanningAlertResolution struct {
	Value SecretScanningAlertResolution
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSecretScanningAlertResolution was set.
func (o OptNilSecretScanningAlertResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSecretScanningAlertResolution) Reset() {
	var v SecretScanningAlertResolution
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSecretScanningAlertResolution) SetTo(v SecretScanningAlertResolution) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSecretScanningAlertResolution) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSecretScanningAlertResolution) Get() (v SecretScanningAlertResolution, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSecretScanningAlertResolution) Or(d SecretScanningAlertResolution) SecretScanningAlertResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSimpleUserArray returns new OptNilSimpleUserArray with value set to v.
func NewOptNilSimpleUserArray(v []SimpleUser) OptNilSimpleUserArray {
	return OptNilSimpleUserArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSimpleUserArray is optional nullable []SimpleUser.
type OptNilSimpleUserArray struct {
	Value []SimpleUser
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSimpleUserArray was set.
func (o OptNilSimpleUserArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSimpleUserArray) Reset() {
	var v []SimpleUser
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSimpleUserArray) SetTo(v []SimpleUser) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSimpleUserArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSimpleUserArray) Get() (v []SimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSimpleUserArray) Or(d []SimpleUser) []SimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamArray returns new OptNilTeamArray with value set to v.
func NewOptNilTeamArray(v []Team) OptNilTeamArray {
	return OptNilTeamArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamArray is optional nullable []Team.
type OptNilTeamArray struct {
	Value []Team
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamArray was set.
func (o OptNilTeamArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamArray) Reset() {
	var v []Team
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamArray) SetTo(v []Team) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamArray) Get() (v []Team, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamArray) Or(d []Team) []Team {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamSimpleArray returns new OptNilTeamSimpleArray with value set to v.
func NewOptNilTeamSimpleArray(v []TeamSimple) OptNilTeamSimpleArray {
	return OptNilTeamSimpleArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamSimpleArray is optional nullable []TeamSimple.
type OptNilTeamSimpleArray struct {
	Value []TeamSimple
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamSimpleArray was set.
func (o OptNilTeamSimpleArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamSimpleArray) Reset() {
	var v []TeamSimple
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamSimpleArray) SetTo(v []TeamSimple) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamSimpleArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamSimpleArray) Get() (v []TeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamSimpleArray) Or(d []TeamSimple) []TeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamsAddOrUpdateProjectPermissionsInOrgReq returns new OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq with value set to v.
func NewOptNilTeamsAddOrUpdateProjectPermissionsInOrgReq(v TeamsAddOrUpdateProjectPermissionsInOrgReq) OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq {
	return OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq is optional nullable TeamsAddOrUpdateProjectPermissionsInOrgReq.
type OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq struct {
	Value TeamsAddOrUpdateProjectPermissionsInOrgReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq was set.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsInOrgReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) SetTo(v TeamsAddOrUpdateProjectPermissionsInOrgReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Get() (v TeamsAddOrUpdateProjectPermissionsInOrgReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Or(d TeamsAddOrUpdateProjectPermissionsInOrgReq) TeamsAddOrUpdateProjectPermissionsInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTopicSearchResultItemAliasesItemArray returns new OptNilTopicSearchResultItemAliasesItemArray with value set to v.
func NewOptNilTopicSearchResultItemAliasesItemArray(v []TopicSearchResultItemAliasesItem) OptNilTopicSearchResultItemAliasesItemArray {
	return OptNilTopicSearchResultItemAliasesItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTopicSearchResultItemAliasesItemArray is optional nullable []TopicSearchResultItemAliasesItem.
type OptNilTopicSearchResultItemAliasesItemArray struct {
	Value []TopicSearchResultItemAliasesItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTopicSearchResultItemAliasesItemArray was set.
func (o OptNilTopicSearchResultItemAliasesItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTopicSearchResultItemAliasesItemArray) Reset() {
	var v []TopicSearchResultItemAliasesItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTopicSearchResultItemAliasesItemArray) SetTo(v []TopicSearchResultItemAliasesItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTopicSearchResultItemAliasesItemArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTopicSearchResultItemAliasesItemArray) Get() (v []TopicSearchResultItemAliasesItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTopicSearchResultItemAliasesItemArray) Or(d []TopicSearchResultItemAliasesItem) []TopicSearchResultItemAliasesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTopicSearchResultItemRelatedItemArray returns new OptNilTopicSearchResultItemRelatedItemArray with value set to v.
func NewOptNilTopicSearchResultItemRelatedItemArray(v []TopicSearchResultItemRelatedItem) OptNilTopicSearchResultItemRelatedItemArray {
	return OptNilTopicSearchResultItemRelatedItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTopicSearchResultItemRelatedItemArray is optional nullable []TopicSearchResultItemRelatedItem.
type OptNilTopicSearchResultItemRelatedItemArray struct {
	Value []TopicSearchResultItemRelatedItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTopicSearchResultItemRelatedItemArray was set.
func (o OptNilTopicSearchResultItemRelatedItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTopicSearchResultItemRelatedItemArray) Reset() {
	var v []TopicSearchResultItemRelatedItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTopicSearchResultItemRelatedItemArray) SetTo(v []TopicSearchResultItemRelatedItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTopicSearchResultItemRelatedItemArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTopicSearchResultItemRelatedItemArray) Get() (v []TopicSearchResultItemRelatedItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTopicSearchResultItemRelatedItemArray) Or(d []TopicSearchResultItemRelatedItem) []TopicSearchResultItemRelatedItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilURI returns new OptNilURI with value set to v.
func NewOptNilURI(v url.URL) OptNilURI {
	return OptNilURI{
		Value: v,
		Set:   true,
	}
}

// OptNilURI is optional nullable url.URL.
type OptNilURI struct {
	Value url.URL
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilURI was set.
func (o OptNilURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilURI) SetTo(v url.URL) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilURI) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableMinimalRepositoryPermissions returns new OptNullableMinimalRepositoryPermissions with value set to v.
func NewOptNullableMinimalRepositoryPermissions(v NullableMinimalRepositoryPermissions) OptNullableMinimalRepositoryPermissions {
	return OptNullableMinimalRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableMinimalRepositoryPermissions is optional NullableMinimalRepositoryPermissions.
type OptNullableMinimalRepositoryPermissions struct {
	Value NullableMinimalRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableMinimalRepositoryPermissions was set.
func (o OptNullableMinimalRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableMinimalRepositoryPermissions) Reset() {
	var v NullableMinimalRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableMinimalRepositoryPermissions) SetTo(v NullableMinimalRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableMinimalRepositoryPermissions) Get() (v NullableMinimalRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableMinimalRepositoryPermissions) Or(d NullableMinimalRepositoryPermissions) NullableMinimalRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryPermissions returns new OptNullableRepositoryPermissions with value set to v.
func NewOptNullableRepositoryPermissions(v NullableRepositoryPermissions) OptNullableRepositoryPermissions {
	return OptNullableRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryPermissions is optional NullableRepositoryPermissions.
type OptNullableRepositoryPermissions struct {
	Value NullableRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableRepositoryPermissions was set.
func (o OptNullableRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryPermissions) Reset() {
	var v NullableRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryPermissions) SetTo(v NullableRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryPermissions) Get() (v NullableRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryPermissions) Or(d NullableRepositoryPermissions) NullableRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryTemplateRepositoryOwner returns new OptNullableRepositoryTemplateRepositoryOwner with value set to v.
func NewOptNullableRepositoryTemplateRepositoryOwner(v NullableRepositoryTemplateRepositoryOwner) OptNullableRepositoryTemplateRepositoryOwner {
	return OptNullableRepositoryTemplateRepositoryOwner{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryTemplateRepositoryOwner is optional NullableRepositoryTemplateRepositoryOwner.
type OptNullableRepositoryTemplateRepositoryOwner struct {
	Value NullableRepositoryTemplateRepositoryOwner
	Set   bool
}

// IsSet returns true if OptNullableRepositoryTemplateRepositoryOwner was set.
func (o OptNullableRepositoryTemplateRepositoryOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryTemplateRepositoryOwner) Reset() {
	var v NullableRepositoryTemplateRepositoryOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryTemplateRepositoryOwner) SetTo(v NullableRepositoryTemplateRepositoryOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryTemplateRepositoryOwner) Get() (v NullableRepositoryTemplateRepositoryOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryTemplateRepositoryOwner) Or(d NullableRepositoryTemplateRepositoryOwner) NullableRepositoryTemplateRepositoryOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryTemplateRepositoryPermissions returns new OptNullableRepositoryTemplateRepositoryPermissions with value set to v.
func NewOptNullableRepositoryTemplateRepositoryPermissions(v NullableRepositoryTemplateRepositoryPermissions) OptNullableRepositoryTemplateRepositoryPermissions {
	return OptNullableRepositoryTemplateRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryTemplateRepositoryPermissions is optional NullableRepositoryTemplateRepositoryPermissions.
type OptNullableRepositoryTemplateRepositoryPermissions struct {
	Value NullableRepositoryTemplateRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableRepositoryTemplateRepositoryPermissions was set.
func (o OptNullableRepositoryTemplateRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) Reset() {
	var v NullableRepositoryTemplateRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) SetTo(v NullableRepositoryTemplateRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryTemplateRepositoryPermissions) Get() (v NullableRepositoryTemplateRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryTemplateRepositoryPermissions) Or(d NullableRepositoryTemplateRepositoryPermissions) NullableRepositoryTemplateRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthAuthorizationsCreateAuthorizationReq returns new OptOAuthAuthorizationsCreateAuthorizationReq with value set to v.
func NewOptOAuthAuthorizationsCreateAuthorizationReq(v OAuthAuthorizationsCreateAuthorizationReq) OptOAuthAuthorizationsCreateAuthorizationReq {
	return OptOAuthAuthorizationsCreateAuthorizationReq{
		Value: v,
		Set:   true,
	}
}

// OptOAuthAuthorizationsCreateAuthorizationReq is optional OAuthAuthorizationsCreateAuthorizationReq.
type OptOAuthAuthorizationsCreateAuthorizationReq struct {
	Value OAuthAuthorizationsCreateAuthorizationReq
	Set   bool
}

// IsSet returns true if OptOAuthAuthorizationsCreateAuthorizationReq was set.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthAuthorizationsCreateAuthorizationReq) Reset() {
	var v OAuthAuthorizationsCreateAuthorizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthAuthorizationsCreateAuthorizationReq) SetTo(v OAuthAuthorizationsCreateAuthorizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) Get() (v OAuthAuthorizationsCreateAuthorizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) Or(d OAuthAuthorizationsCreateAuthorizationReq) OAuthAuthorizationsCreateAuthorizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthAuthorizationsUpdateAuthorizationReq returns new OptOAuthAuthorizationsUpdateAuthorizationReq with value set to v.
func NewOptOAuthAuthorizationsUpdateAuthorizationReq(v OAuthAuthorizationsUpdateAuthorizationReq) OptOAuthAuthorizationsUpdateAuthorizationReq {
	return OptOAuthAuthorizationsUpdateAuthorizationReq{
		Value: v,
		Set:   true,
	}
}

// OptOAuthAuthorizationsUpdateAuthorizationReq is optional OAuthAuthorizationsUpdateAuthorizationReq.
type OptOAuthAuthorizationsUpdateAuthorizationReq struct {
	Value OAuthAuthorizationsUpdateAuthorizationReq
	Set   bool
}

// IsSet returns true if OptOAuthAuthorizationsUpdateAuthorizationReq was set.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthAuthorizationsUpdateAuthorizationReq) Reset() {
	var v OAuthAuthorizationsUpdateAuthorizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthAuthorizationsUpdateAuthorizationReq) SetTo(v OAuthAuthorizationsUpdateAuthorizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) Get() (v OAuthAuthorizationsUpdateAuthorizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) Or(d OAuthAuthorizationsUpdateAuthorizationReq) OAuthAuthorizationsUpdateAuthorizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgMembershipPermissions returns new OptOrgMembershipPermissions with value set to v.
func NewOptOrgMembershipPermissions(v OrgMembershipPermissions) OptOrgMembershipPermissions {
	return OptOrgMembershipPermissions{
		Value: v,
		Set:   true,
	}
}

// OptOrgMembershipPermissions is optional OrgMembershipPermissions.
type OptOrgMembershipPermissions struct {
	Value OrgMembershipPermissions
	Set   bool
}

// IsSet returns true if OptOrgMembershipPermissions was set.
func (o OptOrgMembershipPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgMembershipPermissions) Reset() {
	var v OrgMembershipPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgMembershipPermissions) SetTo(v OrgMembershipPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgMembershipPermissions) Get() (v OrgMembershipPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgMembershipPermissions) Or(d OrgMembershipPermissions) OrgMembershipPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrganizationFullPlan returns new OptOrganizationFullPlan with value set to v.
func NewOptOrganizationFullPlan(v OrganizationFullPlan) OptOrganizationFullPlan {
	return OptOrganizationFullPlan{
		Value: v,
		Set:   true,
	}
}

// OptOrganizationFullPlan is optional OrganizationFullPlan.
type OptOrganizationFullPlan struct {
	Value OrganizationFullPlan
	Set   bool
}

// IsSet returns true if OptOrganizationFullPlan was set.
func (o OptOrganizationFullPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrganizationFullPlan) Reset() {
	var v OrganizationFullPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrganizationFullPlan) SetTo(v OrganizationFullPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrganizationFullPlan) Get() (v OrganizationFullPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrganizationFullPlan) Or(d OrganizationFullPlan) OrganizationFullPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsCreateInvitationReq returns new OptOrgsCreateInvitationReq with value set to v.
func NewOptOrgsCreateInvitationReq(v OrgsCreateInvitationReq) OptOrgsCreateInvitationReq {
	return OptOrgsCreateInvitationReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsCreateInvitationReq is optional OrgsCreateInvitationReq.
type OptOrgsCreateInvitationReq struct {
	Value OrgsCreateInvitationReq
	Set   bool
}

// IsSet returns true if OptOrgsCreateInvitationReq was set.
func (o OptOrgsCreateInvitationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsCreateInvitationReq) Reset() {
	var v OrgsCreateInvitationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsCreateInvitationReq) SetTo(v OrgsCreateInvitationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsCreateInvitationReq) Get() (v OrgsCreateInvitationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsCreateInvitationReq) Or(d OrgsCreateInvitationReq) OrgsCreateInvitationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsCreateInvitationReqRole returns new OptOrgsCreateInvitationReqRole with value set to v.
func NewOptOrgsCreateInvitationReqRole(v OrgsCreateInvitationReqRole) OptOrgsCreateInvitationReqRole {
	return OptOrgsCreateInvitationReqRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsCreateInvitationReqRole is optional OrgsCreateInvitationReqRole.
type OptOrgsCreateInvitationReqRole struct {
	Value OrgsCreateInvitationReqRole
	Set   bool
}

// IsSet returns true if OptOrgsCreateInvitationReqRole was set.
func (o OptOrgsCreateInvitationReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsCreateInvitationReqRole) Reset() {
	var v OrgsCreateInvitationReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsCreateInvitationReqRole) SetTo(v OrgsCreateInvitationReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsCreateInvitationReqRole) Get() (v OrgsCreateInvitationReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsCreateInvitationReqRole) Or(d OrgsCreateInvitationReqRole) OrgsCreateInvitationReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsGetAuditLogInclude returns new OptOrgsGetAuditLogInclude with value set to v.
func NewOptOrgsGetAuditLogInclude(v OrgsGetAuditLogInclude) OptOrgsGetAuditLogInclude {
	return OptOrgsGetAuditLogInclude{
		Value: v,
		Set:   true,
	}
}

// OptOrgsGetAuditLogInclude is optional OrgsGetAuditLogInclude.
type OptOrgsGetAuditLogInclude struct {
	Value OrgsGetAuditLogInclude
	Set   bool
}

// IsSet returns true if OptOrgsGetAuditLogInclude was set.
func (o OptOrgsGetAuditLogInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsGetAuditLogInclude) Reset() {
	var v OrgsGetAuditLogInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsGetAuditLogInclude) SetTo(v OrgsGetAuditLogInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsGetAuditLogInclude) Get() (v OrgsGetAuditLogInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsGetAuditLogInclude) Or(d OrgsGetAuditLogInclude) OrgsGetAuditLogInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsGetAuditLogOrder returns new OptOrgsGetAuditLogOrder with value set to v.
func NewOptOrgsGetAuditLogOrder(v OrgsGetAuditLogOrder) OptOrgsGetAuditLogOrder {
	return OptOrgsGetAuditLogOrder{
		Value: v,
		Set:   true,
	}
}

// OptOrgsGetAuditLogOrder is optional OrgsGetAuditLogOrder.
type OptOrgsGetAuditLogOrder struct {
	Value OrgsGetAuditLogOrder
	Set   bool
}

// IsSet returns true if OptOrgsGetAuditLogOrder was set.
func (o OptOrgsGetAuditLogOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsGetAuditLogOrder) Reset() {
	var v OrgsGetAuditLogOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsGetAuditLogOrder) SetTo(v OrgsGetAuditLogOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsGetAuditLogOrder) Get() (v OrgsGetAuditLogOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsGetAuditLogOrder) Or(d OrgsGetAuditLogOrder) OrgsGetAuditLogOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembersFilter returns new OptOrgsListMembersFilter with value set to v.
func NewOptOrgsListMembersFilter(v OrgsListMembersFilter) OptOrgsListMembersFilter {
	return OptOrgsListMembersFilter{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembersFilter is optional OrgsListMembersFilter.
type OptOrgsListMembersFilter struct {
	Value OrgsListMembersFilter
	Set   bool
}

// IsSet returns true if OptOrgsListMembersFilter was set.
func (o OptOrgsListMembersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembersFilter) Reset() {
	var v OrgsListMembersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembersFilter) SetTo(v OrgsListMembersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembersFilter) Get() (v OrgsListMembersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembersFilter) Or(d OrgsListMembersFilter) OrgsListMembersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembersRole returns new OptOrgsListMembersRole with value set to v.
func NewOptOrgsListMembersRole(v OrgsListMembersRole) OptOrgsListMembersRole {
	return OptOrgsListMembersRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembersRole is optional OrgsListMembersRole.
type OptOrgsListMembersRole struct {
	Value OrgsListMembersRole
	Set   bool
}

// IsSet returns true if OptOrgsListMembersRole was set.
func (o OptOrgsListMembersRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembersRole) Reset() {
	var v OrgsListMembersRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembersRole) SetTo(v OrgsListMembersRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembersRole) Get() (v OrgsListMembersRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembersRole) Or(d OrgsListMembersRole) OrgsListMembersRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembershipsForAuthenticatedUserState returns new OptOrgsListMembershipsForAuthenticatedUserState with value set to v.
func NewOptOrgsListMembershipsForAuthenticatedUserState(v OrgsListMembershipsForAuthenticatedUserState) OptOrgsListMembershipsForAuthenticatedUserState {
	return OptOrgsListMembershipsForAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembershipsForAuthenticatedUserState is optional OrgsListMembershipsForAuthenticatedUserState.
type OptOrgsListMembershipsForAuthenticatedUserState struct {
	Value OrgsListMembershipsForAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptOrgsListMembershipsForAuthenticatedUserState was set.
func (o OptOrgsListMembershipsForAuthenticatedUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembershipsForAuthenticatedUserState) Reset() {
	var v OrgsListMembershipsForAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembershipsForAuthenticatedUserState) SetTo(v OrgsListMembershipsForAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembershipsForAuthenticatedUserState) Get() (v OrgsListMembershipsForAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembershipsForAuthenticatedUserState) Or(d OrgsListMembershipsForAuthenticatedUserState) OrgsListMembershipsForAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListOutsideCollaboratorsFilter returns new OptOrgsListOutsideCollaboratorsFilter with value set to v.
func NewOptOrgsListOutsideCollaboratorsFilter(v OrgsListOutsideCollaboratorsFilter) OptOrgsListOutsideCollaboratorsFilter {
	return OptOrgsListOutsideCollaboratorsFilter{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListOutsideCollaboratorsFilter is optional OrgsListOutsideCollaboratorsFilter.
type OptOrgsListOutsideCollaboratorsFilter struct {
	Value OrgsListOutsideCollaboratorsFilter
	Set   bool
}

// IsSet returns true if OptOrgsListOutsideCollaboratorsFilter was set.
func (o OptOrgsListOutsideCollaboratorsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListOutsideCollaboratorsFilter) Reset() {
	var v OrgsListOutsideCollaboratorsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListOutsideCollaboratorsFilter) SetTo(v OrgsListOutsideCollaboratorsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListOutsideCollaboratorsFilter) Get() (v OrgsListOutsideCollaboratorsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListOutsideCollaboratorsFilter) Or(d OrgsListOutsideCollaboratorsFilter) OrgsListOutsideCollaboratorsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsSetMembershipForUserReq returns new OptOrgsSetMembershipForUserReq with value set to v.
func NewOptOrgsSetMembershipForUserReq(v OrgsSetMembershipForUserReq) OptOrgsSetMembershipForUserReq {
	return OptOrgsSetMembershipForUserReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsSetMembershipForUserReq is optional OrgsSetMembershipForUserReq.
type OptOrgsSetMembershipForUserReq struct {
	Value OrgsSetMembershipForUserReq
	Set   bool
}

// IsSet returns true if OptOrgsSetMembershipForUserReq was set.
func (o OptOrgsSetMembershipForUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsSetMembershipForUserReq) Reset() {
	var v OrgsSetMembershipForUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsSetMembershipForUserReq) SetTo(v OrgsSetMembershipForUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsSetMembershipForUserReq) Get() (v OrgsSetMembershipForUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsSetMembershipForUserReq) Or(d OrgsSetMembershipForUserReq) OrgsSetMembershipForUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsSetMembershipForUserReqRole returns new OptOrgsSetMembershipForUserReqRole with value set to v.
func NewOptOrgsSetMembershipForUserReqRole(v OrgsSetMembershipForUserReqRole) OptOrgsSetMembershipForUserReqRole {
	return OptOrgsSetMembershipForUserReqRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsSetMembershipForUserReqRole is optional OrgsSetMembershipForUserReqRole.
type OptOrgsSetMembershipForUserReqRole struct {
	Value OrgsSetMembershipForUserReqRole
	Set   bool
}

// IsSet returns true if OptOrgsSetMembershipForUserReqRole was set.
func (o OptOrgsSetMembershipForUserReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsSetMembershipForUserReqRole) Reset() {
	var v OrgsSetMembershipForUserReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsSetMembershipForUserReqRole) SetTo(v OrgsSetMembershipForUserReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsSetMembershipForUserReqRole) Get() (v OrgsSetMembershipForUserReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsSetMembershipForUserReqRole) Or(d OrgsSetMembershipForUserReqRole) OrgsSetMembershipForUserReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookConfigForOrgReq returns new OptOrgsUpdateWebhookConfigForOrgReq with value set to v.
func NewOptOrgsUpdateWebhookConfigForOrgReq(v OrgsUpdateWebhookConfigForOrgReq) OptOrgsUpdateWebhookConfigForOrgReq {
	return OptOrgsUpdateWebhookConfigForOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookConfigForOrgReq is optional OrgsUpdateWebhookConfigForOrgReq.
type OptOrgsUpdateWebhookConfigForOrgReq struct {
	Value OrgsUpdateWebhookConfigForOrgReq
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookConfigForOrgReq was set.
func (o OptOrgsUpdateWebhookConfigForOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookConfigForOrgReq) Reset() {
	var v OrgsUpdateWebhookConfigForOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookConfigForOrgReq) SetTo(v OrgsUpdateWebhookConfigForOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookConfigForOrgReq) Get() (v OrgsUpdateWebhookConfigForOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookConfigForOrgReq) Or(d OrgsUpdateWebhookConfigForOrgReq) OrgsUpdateWebhookConfigForOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookReq returns new OptOrgsUpdateWebhookReq with value set to v.
func NewOptOrgsUpdateWebhookReq(v OrgsUpdateWebhookReq) OptOrgsUpdateWebhookReq {
	return OptOrgsUpdateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookReq is optional OrgsUpdateWebhookReq.
type OptOrgsUpdateWebhookReq struct {
	Value OrgsUpdateWebhookReq
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookReq was set.
func (o OptOrgsUpdateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookReq) Reset() {
	var v OrgsUpdateWebhookReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookReq) SetTo(v OrgsUpdateWebhookReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookReq) Get() (v OrgsUpdateWebhookReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookReq) Or(d OrgsUpdateWebhookReq) OrgsUpdateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookReqConfig returns new OptOrgsUpdateWebhookReqConfig with value set to v.
func NewOptOrgsUpdateWebhookReqConfig(v OrgsUpdateWebhookReqConfig) OptOrgsUpdateWebhookReqConfig {
	return OptOrgsUpdateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookReqConfig is optional OrgsUpdateWebhookReqConfig.
type OptOrgsUpdateWebhookReqConfig struct {
	Value OrgsUpdateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookReqConfig was set.
func (o OptOrgsUpdateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookReqConfig) Reset() {
	var v OrgsUpdateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookReqConfig) SetTo(v OrgsUpdateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookReqConfig) Get() (v OrgsUpdateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookReqConfig) Or(d OrgsUpdateWebhookReqConfig) OrgsUpdateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadata returns new OptPackageVersionMetadata with value set to v.
func NewOptPackageVersionMetadata(v PackageVersionMetadata) OptPackageVersionMetadata {
	return OptPackageVersionMetadata{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadata is optional PackageVersionMetadata.
type OptPackageVersionMetadata struct {
	Value PackageVersionMetadata
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadata was set.
func (o OptPackageVersionMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadata) Reset() {
	var v PackageVersionMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadata) SetTo(v PackageVersionMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadata) Get() (v PackageVersionMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadata) Or(d PackageVersionMetadata) PackageVersionMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadataContainer returns new OptPackageVersionMetadataContainer with value set to v.
func NewOptPackageVersionMetadataContainer(v PackageVersionMetadataContainer) OptPackageVersionMetadataContainer {
	return OptPackageVersionMetadataContainer{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadataContainer is optional PackageVersionMetadataContainer.
type OptPackageVersionMetadataContainer struct {
	Value PackageVersionMetadataContainer
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadataContainer was set.
func (o OptPackageVersionMetadataContainer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadataContainer) Reset() {
	var v PackageVersionMetadataContainer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadataContainer) SetTo(v PackageVersionMetadataContainer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadataContainer) Get() (v PackageVersionMetadataContainer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadataContainer) Or(d PackageVersionMetadataContainer) PackageVersionMetadataContainer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadataDocker returns new OptPackageVersionMetadataDocker with value set to v.
func NewOptPackageVersionMetadataDocker(v PackageVersionMetadataDocker) OptPackageVersionMetadataDocker {
	return OptPackageVersionMetadataDocker{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadataDocker is optional PackageVersionMetadataDocker.
type OptPackageVersionMetadataDocker struct {
	Value PackageVersionMetadataDocker
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadataDocker was set.
func (o OptPackageVersionMetadataDocker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadataDocker) Reset() {
	var v PackageVersionMetadataDocker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadataDocker) SetTo(v PackageVersionMetadataDocker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadataDocker) Get() (v PackageVersionMetadataDocker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadataDocker) Or(d PackageVersionMetadataDocker) PackageVersionMetadataDocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState returns new OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState with value set to v.
func NewOptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState(v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState {
	return OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState is optional PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState.
type OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState struct {
	Value PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Reset() {
	var v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) SetTo(v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Get() (v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Or(d PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesGetAllPackageVersionsForPackageOwnedByOrgState returns new OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState with value set to v.
func NewOptPackagesGetAllPackageVersionsForPackageOwnedByOrgState(v PackagesGetAllPackageVersionsForPackageOwnedByOrgState) OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState {
	return OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState{
		Value: v,
		Set:   true,
	}
}

// OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState is optional PackagesGetAllPackageVersionsForPackageOwnedByOrgState.
type OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState struct {
	Value PackagesGetAllPackageVersionsForPackageOwnedByOrgState
	Set   bool
}

// IsSet returns true if OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Reset() {
	var v PackagesGetAllPackageVersionsForPackageOwnedByOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) SetTo(v PackagesGetAllPackageVersionsForPackageOwnedByOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Get() (v PackagesGetAllPackageVersionsForPackageOwnedByOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Or(d PackagesGetAllPackageVersionsForPackageOwnedByOrgState) PackagesGetAllPackageVersionsForPackageOwnedByOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForAuthenticatedUserVisibility returns new OptPackagesListPackagesForAuthenticatedUserVisibility with value set to v.
func NewOptPackagesListPackagesForAuthenticatedUserVisibility(v PackagesListPackagesForAuthenticatedUserVisibility) OptPackagesListPackagesForAuthenticatedUserVisibility {
	return OptPackagesListPackagesForAuthenticatedUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForAuthenticatedUserVisibility is optional PackagesListPackagesForAuthenticatedUserVisibility.
type OptPackagesListPackagesForAuthenticatedUserVisibility struct {
	Value PackagesListPackagesForAuthenticatedUserVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForAuthenticatedUserVisibility was set.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForAuthenticatedUserVisibility) Reset() {
	var v PackagesListPackagesForAuthenticatedUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForAuthenticatedUserVisibility) SetTo(v PackagesListPackagesForAuthenticatedUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) Get() (v PackagesListPackagesForAuthenticatedUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) Or(d PackagesListPackagesForAuthenticatedUserVisibility) PackagesListPackagesForAuthenticatedUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForOrganizationVisibility returns new OptPackagesListPackagesForOrganizationVisibility with value set to v.
func NewOptPackagesListPackagesForOrganizationVisibility(v PackagesListPackagesForOrganizationVisibility) OptPackagesListPackagesForOrganizationVisibility {
	return OptPackagesListPackagesForOrganizationVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForOrganizationVisibility is optional PackagesListPackagesForOrganizationVisibility.
type OptPackagesListPackagesForOrganizationVisibility struct {
	Value PackagesListPackagesForOrganizationVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForOrganizationVisibility was set.
func (o OptPackagesListPackagesForOrganizationVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForOrganizationVisibility) Reset() {
	var v PackagesListPackagesForOrganizationVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForOrganizationVisibility) SetTo(v PackagesListPackagesForOrganizationVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForOrganizationVisibility) Get() (v PackagesListPackagesForOrganizationVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForOrganizationVisibility) Or(d PackagesListPackagesForOrganizationVisibility) PackagesListPackagesForOrganizationVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForUserVisibility returns new OptPackagesListPackagesForUserVisibility with value set to v.
func NewOptPackagesListPackagesForUserVisibility(v PackagesListPackagesForUserVisibility) OptPackagesListPackagesForUserVisibility {
	return OptPackagesListPackagesForUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForUserVisibility is optional PackagesListPackagesForUserVisibility.
type OptPackagesListPackagesForUserVisibility struct {
	Value PackagesListPackagesForUserVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForUserVisibility was set.
func (o OptPackagesListPackagesForUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForUserVisibility) Reset() {
	var v PackagesListPackagesForUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForUserVisibility) SetTo(v PackagesListPackagesForUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForUserVisibility) Get() (v PackagesListPackagesForUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForUserVisibility) Or(d PackagesListPackagesForUserVisibility) PackagesListPackagesForUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesHTTPSCertificate returns new OptPagesHTTPSCertificate with value set to v.
func NewOptPagesHTTPSCertificate(v PagesHTTPSCertificate) OptPagesHTTPSCertificate {
	return OptPagesHTTPSCertificate{
		Value: v,
		Set:   true,
	}
}

// OptPagesHTTPSCertificate is optional PagesHTTPSCertificate.
type OptPagesHTTPSCertificate struct {
	Value PagesHTTPSCertificate
	Set   bool
}

// IsSet returns true if OptPagesHTTPSCertificate was set.
func (o OptPagesHTTPSCertificate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesHTTPSCertificate) Reset() {
	var v PagesHTTPSCertificate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesHTTPSCertificate) SetTo(v PagesHTTPSCertificate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesHTTPSCertificate) Get() (v PagesHTTPSCertificate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesHTTPSCertificate) Or(d PagesHTTPSCertificate) PagesHTTPSCertificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesHealthCheckDomain returns new OptPagesHealthCheckDomain with value set to v.
func NewOptPagesHealthCheckDomain(v PagesHealthCheckDomain) OptPagesHealthCheckDomain {
	return OptPagesHealthCheckDomain{
		Value: v,
		Set:   true,
	}
}

// OptPagesHealthCheckDomain is optional PagesHealthCheckDomain.
type OptPagesHealthCheckDomain struct {
	Value PagesHealthCheckDomain
	Set   bool
}

// IsSet returns true if OptPagesHealthCheckDomain was set.
func (o OptPagesHealthCheckDomain) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesHealthCheckDomain) Reset() {
	var v PagesHealthCheckDomain
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesHealthCheckDomain) SetTo(v PagesHealthCheckDomain) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesHealthCheckDomain) Get() (v PagesHealthCheckDomain, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesHealthCheckDomain) Or(d PagesHealthCheckDomain) PagesHealthCheckDomain {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesSourceHash returns new OptPagesSourceHash with value set to v.
func NewOptPagesSourceHash(v PagesSourceHash) OptPagesSourceHash {
	return OptPagesSourceHash{
		Value: v,
		Set:   true,
	}
}

// OptPagesSourceHash is optional PagesSourceHash.
type OptPagesSourceHash struct {
	Value PagesSourceHash
	Set   bool
}

// IsSet returns true if OptPagesSourceHash was set.
func (o OptPagesSourceHash) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesSourceHash) Reset() {
	var v PagesSourceHash
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesSourceHash) SetTo(v PagesSourceHash) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesSourceHash) Get() (v PagesSourceHash, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesSourceHash) Or(d PagesSourceHash) PagesSourceHash {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrivateUserPlan returns new OptPrivateUserPlan with value set to v.
func NewOptPrivateUserPlan(v PrivateUserPlan) OptPrivateUserPlan {
	return OptPrivateUserPlan{
		Value: v,
		Set:   true,
	}
}

// OptPrivateUserPlan is optional PrivateUserPlan.
type OptPrivateUserPlan struct {
	Value PrivateUserPlan
	Set   bool
}

// IsSet returns true if OptPrivateUserPlan was set.
func (o OptPrivateUserPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrivateUserPlan) Reset() {
	var v PrivateUserPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrivateUserPlan) SetTo(v PrivateUserPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrivateUserPlan) Get() (v PrivateUserPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrivateUserPlan) Or(d PrivateUserPlan) PrivateUserPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectOrganizationPermission returns new OptProjectOrganizationPermission with value set to v.
func NewOptProjectOrganizationPermission(v ProjectOrganizationPermission) OptProjectOrganizationPermission {
	return OptProjectOrganizationPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectOrganizationPermission is optional ProjectOrganizationPermission.
type OptProjectOrganizationPermission struct {
	Value ProjectOrganizationPermission
	Set   bool
}

// IsSet returns true if OptProjectOrganizationPermission was set.
func (o OptProjectOrganizationPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectOrganizationPermission) Reset() {
	var v ProjectOrganizationPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectOrganizationPermission) SetTo(v ProjectOrganizationPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectOrganizationPermission) Get() (v ProjectOrganizationPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectOrganizationPermission) Or(d ProjectOrganizationPermission) ProjectOrganizationPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsAddCollaboratorReqPermission returns new OptProjectsAddCollaboratorReqPermission with value set to v.
func NewOptProjectsAddCollaboratorReqPermission(v ProjectsAddCollaboratorReqPermission) OptProjectsAddCollaboratorReqPermission {
	return OptProjectsAddCollaboratorReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectsAddCollaboratorReqPermission is optional ProjectsAddCollaboratorReqPermission.
type OptProjectsAddCollaboratorReqPermission struct {
	Value ProjectsAddCollaboratorReqPermission
	Set   bool
}

// IsSet returns true if OptProjectsAddCollaboratorReqPermission was set.
func (o OptProjectsAddCollaboratorReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsAddCollaboratorReqPermission) Reset() {
	var v ProjectsAddCollaboratorReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsAddCollaboratorReqPermission) SetTo(v ProjectsAddCollaboratorReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsAddCollaboratorReqPermission) Get() (v ProjectsAddCollaboratorReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsAddCollaboratorReqPermission) Or(d ProjectsAddCollaboratorReqPermission) ProjectsAddCollaboratorReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListCardsArchivedState returns new OptProjectsListCardsArchivedState with value set to v.
func NewOptProjectsListCardsArchivedState(v ProjectsListCardsArchivedState) OptProjectsListCardsArchivedState {
	return OptProjectsListCardsArchivedState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListCardsArchivedState is optional ProjectsListCardsArchivedState.
type OptProjectsListCardsArchivedState struct {
	Value ProjectsListCardsArchivedState
	Set   bool
}

// IsSet returns true if OptProjectsListCardsArchivedState was set.
func (o OptProjectsListCardsArchivedState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListCardsArchivedState) Reset() {
	var v ProjectsListCardsArchivedState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListCardsArchivedState) SetTo(v ProjectsListCardsArchivedState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListCardsArchivedState) Get() (v ProjectsListCardsArchivedState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListCardsArchivedState) Or(d ProjectsListCardsArchivedState) ProjectsListCardsArchivedState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListCollaboratorsAffiliation returns new OptProjectsListCollaboratorsAffiliation with value set to v.
func NewOptProjectsListCollaboratorsAffiliation(v ProjectsListCollaboratorsAffiliation) OptProjectsListCollaboratorsAffiliation {
	return OptProjectsListCollaboratorsAffiliation{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListCollaboratorsAffiliation is optional ProjectsListCollaboratorsAffiliation.
type OptProjectsListCollaboratorsAffiliation struct {
	Value ProjectsListCollaboratorsAffiliation
	Set   bool
}

// IsSet returns true if OptProjectsListCollaboratorsAffiliation was set.
func (o OptProjectsListCollaboratorsAffiliation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListCollaboratorsAffiliation) Reset() {
	var v ProjectsListCollaboratorsAffiliation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListCollaboratorsAffiliation) SetTo(v ProjectsListCollaboratorsAffiliation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListCollaboratorsAffiliation) Get() (v ProjectsListCollaboratorsAffiliation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListCollaboratorsAffiliation) Or(d ProjectsListCollaboratorsAffiliation) ProjectsListCollaboratorsAffiliation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForOrgState returns new OptProjectsListForOrgState with value set to v.
func NewOptProjectsListForOrgState(v ProjectsListForOrgState) OptProjectsListForOrgState {
	return OptProjectsListForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForOrgState is optional ProjectsListForOrgState.
type OptProjectsListForOrgState struct {
	Value ProjectsListForOrgState
	Set   bool
}

// IsSet returns true if OptProjectsListForOrgState was set.
func (o OptProjectsListForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForOrgState) Reset() {
	var v ProjectsListForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForOrgState) SetTo(v ProjectsListForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForOrgState) Get() (v ProjectsListForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForOrgState) Or(d ProjectsListForOrgState) ProjectsListForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForRepoState returns new OptProjectsListForRepoState with value set to v.
func NewOptProjectsListForRepoState(v ProjectsListForRepoState) OptProjectsListForRepoState {
	return OptProjectsListForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForRepoState is optional ProjectsListForRepoState.
type OptProjectsListForRepoState struct {
	Value ProjectsListForRepoState
	Set   bool
}

// IsSet returns true if OptProjectsListForRepoState was set.
func (o OptProjectsListForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForRepoState) Reset() {
	var v ProjectsListForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForRepoState) SetTo(v ProjectsListForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForRepoState) Get() (v ProjectsListForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForRepoState) Or(d ProjectsListForRepoState) ProjectsListForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForUserState returns new OptProjectsListForUserState with value set to v.
func NewOptProjectsListForUserState(v ProjectsListForUserState) OptProjectsListForUserState {
	return OptProjectsListForUserState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForUserState is optional ProjectsListForUserState.
type OptProjectsListForUserState struct {
	Value ProjectsListForUserState
	Set   bool
}

// IsSet returns true if OptProjectsListForUserState was set.
func (o OptProjectsListForUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForUserState) Reset() {
	var v ProjectsListForUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForUserState) SetTo(v ProjectsListForUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForUserState) Get() (v ProjectsListForUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForUserState) Or(d ProjectsListForUserState) ProjectsListForUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateCardReq returns new OptProjectsUpdateCardReq with value set to v.
func NewOptProjectsUpdateCardReq(v ProjectsUpdateCardReq) OptProjectsUpdateCardReq {
	return OptProjectsUpdateCardReq{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateCardReq is optional ProjectsUpdateCardReq.
type OptProjectsUpdateCardReq struct {
	Value ProjectsUpdateCardReq
	Set   bool
}

// IsSet returns true if OptProjectsUpdateCardReq was set.
func (o OptProjectsUpdateCardReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateCardReq) Reset() {
	var v ProjectsUpdateCardReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateCardReq) SetTo(v ProjectsUpdateCardReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateCardReq) Get() (v ProjectsUpdateCardReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateCardReq) Or(d ProjectsUpdateCardReq) ProjectsUpdateCardReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateReq returns new OptProjectsUpdateReq with value set to v.
func NewOptProjectsUpdateReq(v ProjectsUpdateReq) OptProjectsUpdateReq {
	return OptProjectsUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateReq is optional ProjectsUpdateReq.
type OptProjectsUpdateReq struct {
	Value ProjectsUpdateReq
	Set   bool
}

// IsSet returns true if OptProjectsUpdateReq was set.
func (o OptProjectsUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateReq) Reset() {
	var v ProjectsUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateReq) SetTo(v ProjectsUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateReq) Get() (v ProjectsUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateReq) Or(d ProjectsUpdateReq) ProjectsUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateReqOrganizationPermission returns new OptProjectsUpdateReqOrganizationPermission with value set to v.
func NewOptProjectsUpdateReqOrganizationPermission(v ProjectsUpdateReqOrganizationPermission) OptProjectsUpdateReqOrganizationPermission {
	return OptProjectsUpdateReqOrganizationPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateReqOrganizationPermission is optional ProjectsUpdateReqOrganizationPermission.
type OptProjectsUpdateReqOrganizationPermission struct {
	Value ProjectsUpdateReqOrganizationPermission
	Set   bool
}

// IsSet returns true if OptProjectsUpdateReqOrganizationPermission was set.
func (o OptProjectsUpdateReqOrganizationPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateReqOrganizationPermission) Reset() {
	var v ProjectsUpdateReqOrganizationPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateReqOrganizationPermission) SetTo(v ProjectsUpdateReqOrganizationPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateReqOrganizationPermission) Get() (v ProjectsUpdateReqOrganizationPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateReqOrganizationPermission) Or(d ProjectsUpdateReqOrganizationPermission) ProjectsUpdateReqOrganizationPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAdminEnforced returns new OptProtectedBranchAdminEnforced with value set to v.
func NewOptProtectedBranchAdminEnforced(v ProtectedBranchAdminEnforced) OptProtectedBranchAdminEnforced {
	return OptProtectedBranchAdminEnforced{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAdminEnforced is optional ProtectedBranchAdminEnforced.
type OptProtectedBranchAdminEnforced struct {
	Value ProtectedBranchAdminEnforced
	Set   bool
}

// IsSet returns true if OptProtectedBranchAdminEnforced was set.
func (o OptProtectedBranchAdminEnforced) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAdminEnforced) Reset() {
	var v ProtectedBranchAdminEnforced
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAdminEnforced) SetTo(v ProtectedBranchAdminEnforced) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAdminEnforced) Get() (v ProtectedBranchAdminEnforced, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAdminEnforced) Or(d ProtectedBranchAdminEnforced) ProtectedBranchAdminEnforced {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAllowDeletions returns new OptProtectedBranchAllowDeletions with value set to v.
func NewOptProtectedBranchAllowDeletions(v ProtectedBranchAllowDeletions) OptProtectedBranchAllowDeletions {
	return OptProtectedBranchAllowDeletions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAllowDeletions is optional ProtectedBranchAllowDeletions.
type OptProtectedBranchAllowDeletions struct {
	Value ProtectedBranchAllowDeletions
	Set   bool
}

// IsSet returns true if OptProtectedBranchAllowDeletions was set.
func (o OptProtectedBranchAllowDeletions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAllowDeletions) Reset() {
	var v ProtectedBranchAllowDeletions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAllowDeletions) SetTo(v ProtectedBranchAllowDeletions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAllowDeletions) Get() (v ProtectedBranchAllowDeletions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAllowDeletions) Or(d ProtectedBranchAllowDeletions) ProtectedBranchAllowDeletions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAllowForcePushes returns new OptProtectedBranchAllowForcePushes with value set to v.
func NewOptProtectedBranchAllowForcePushes(v ProtectedBranchAllowForcePushes) OptProtectedBranchAllowForcePushes {
	return OptProtectedBranchAllowForcePushes{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAllowForcePushes is optional ProtectedBranchAllowForcePushes.
type OptProtectedBranchAllowForcePushes struct {
	Value ProtectedBranchAllowForcePushes
	Set   bool
}

// IsSet returns true if OptProtectedBranchAllowForcePushes was set.
func (o OptProtectedBranchAllowForcePushes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAllowForcePushes) Reset() {
	var v ProtectedBranchAllowForcePushes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAllowForcePushes) SetTo(v ProtectedBranchAllowForcePushes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAllowForcePushes) Get() (v ProtectedBranchAllowForcePushes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAllowForcePushes) Or(d ProtectedBranchAllowForcePushes) ProtectedBranchAllowForcePushes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchEnforceAdmins returns new OptProtectedBranchEnforceAdmins with value set to v.
func NewOptProtectedBranchEnforceAdmins(v ProtectedBranchEnforceAdmins) OptProtectedBranchEnforceAdmins {
	return OptProtectedBranchEnforceAdmins{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchEnforceAdmins is optional ProtectedBranchEnforceAdmins.
type OptProtectedBranchEnforceAdmins struct {
	Value ProtectedBranchEnforceAdmins
	Set   bool
}

// IsSet returns true if OptProtectedBranchEnforceAdmins was set.
func (o OptProtectedBranchEnforceAdmins) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchEnforceAdmins) Reset() {
	var v ProtectedBranchEnforceAdmins
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchEnforceAdmins) SetTo(v ProtectedBranchEnforceAdmins) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchEnforceAdmins) Get() (v ProtectedBranchEnforceAdmins, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchEnforceAdmins) Or(d ProtectedBranchEnforceAdmins) ProtectedBranchEnforceAdmins {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchPullRequestReview returns new OptProtectedBranchPullRequestReview with value set to v.
func NewOptProtectedBranchPullRequestReview(v ProtectedBranchPullRequestReview) OptProtectedBranchPullRequestReview {
	return OptProtectedBranchPullRequestReview{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchPullRequestReview is optional ProtectedBranchPullRequestReview.
type OptProtectedBranchPullRequestReview struct {
	Value ProtectedBranchPullRequestReview
	Set   bool
}

// IsSet returns true if OptProtectedBranchPullRequestReview was set.
func (o OptProtectedBranchPullRequestReview) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchPullRequestReview) Reset() {
	var v ProtectedBranchPullRequestReview
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchPullRequestReview) SetTo(v ProtectedBranchPullRequestReview) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchPullRequestReview) Get() (v ProtectedBranchPullRequestReview, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchPullRequestReview) Or(d ProtectedBranchPullRequestReview) ProtectedBranchPullRequestReview {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchPullRequestReviewDismissalRestrictions returns new OptProtectedBranchPullRequestReviewDismissalRestrictions with value set to v.
func NewOptProtectedBranchPullRequestReviewDismissalRestrictions(v ProtectedBranchPullRequestReviewDismissalRestrictions) OptProtectedBranchPullRequestReviewDismissalRestrictions {
	return OptProtectedBranchPullRequestReviewDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchPullRequestReviewDismissalRestrictions is optional ProtectedBranchPullRequestReviewDismissalRestrictions.
type OptProtectedBranchPullRequestReviewDismissalRestrictions struct {
	Value ProtectedBranchPullRequestReviewDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptProtectedBranchPullRequestReviewDismissalRestrictions was set.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) Reset() {
	var v ProtectedBranchPullRequestReviewDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) SetTo(v ProtectedBranchPullRequestReviewDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) Get() (v ProtectedBranchPullRequestReviewDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) Or(d ProtectedBranchPullRequestReviewDismissalRestrictions) ProtectedBranchPullRequestReviewDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredConversationResolution returns new OptProtectedBranchRequiredConversationResolution with value set to v.
func NewOptProtectedBranchRequiredConversationResolution(v ProtectedBranchRequiredConversationResolution) OptProtectedBranchRequiredConversationResolution {
	return OptProtectedBranchRequiredConversationResolution{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredConversationResolution is optional ProtectedBranchRequiredConversationResolution.
type OptProtectedBranchRequiredConversationResolution struct {
	Value ProtectedBranchRequiredConversationResolution
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredConversationResolution was set.
func (o OptProtectedBranchRequiredConversationResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredConversationResolution) Reset() {
	var v ProtectedBranchRequiredConversationResolution
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredConversationResolution) SetTo(v ProtectedBranchRequiredConversationResolution) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredConversationResolution) Get() (v ProtectedBranchRequiredConversationResolution, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredConversationResolution) Or(d ProtectedBranchRequiredConversationResolution) ProtectedBranchRequiredConversationResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredLinearHistory returns new OptProtectedBranchRequiredLinearHistory with value set to v.
func NewOptProtectedBranchRequiredLinearHistory(v ProtectedBranchRequiredLinearHistory) OptProtectedBranchRequiredLinearHistory {
	return OptProtectedBranchRequiredLinearHistory{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredLinearHistory is optional ProtectedBranchRequiredLinearHistory.
type OptProtectedBranchRequiredLinearHistory struct {
	Value ProtectedBranchRequiredLinearHistory
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredLinearHistory was set.
func (o OptProtectedBranchRequiredLinearHistory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredLinearHistory) Reset() {
	var v ProtectedBranchRequiredLinearHistory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredLinearHistory) SetTo(v ProtectedBranchRequiredLinearHistory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredLinearHistory) Get() (v ProtectedBranchRequiredLinearHistory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredLinearHistory) Or(d ProtectedBranchRequiredLinearHistory) ProtectedBranchRequiredLinearHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredPullRequestReviews returns new OptProtectedBranchRequiredPullRequestReviews with value set to v.
func NewOptProtectedBranchRequiredPullRequestReviews(v ProtectedBranchRequiredPullRequestReviews) OptProtectedBranchRequiredPullRequestReviews {
	return OptProtectedBranchRequiredPullRequestReviews{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredPullRequestReviews is optional ProtectedBranchRequiredPullRequestReviews.
type OptProtectedBranchRequiredPullRequestReviews struct {
	Value ProtectedBranchRequiredPullRequestReviews
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredPullRequestReviews was set.
func (o OptProtectedBranchRequiredPullRequestReviews) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredPullRequestReviews) Reset() {
	var v ProtectedBranchRequiredPullRequestReviews
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredPullRequestReviews) SetTo(v ProtectedBranchRequiredPullRequestReviews) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredPullRequestReviews) Get() (v ProtectedBranchRequiredPullRequestReviews, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredPullRequestReviews) Or(d ProtectedBranchRequiredPullRequestReviews) ProtectedBranchRequiredPullRequestReviews {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions returns new OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions with value set to v.
func NewOptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions(v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
	return OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions is optional ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
type OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	Value ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions was set.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Reset() {
	var v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetTo(v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Get() (v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Or(d ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredSignatures returns new OptProtectedBranchRequiredSignatures with value set to v.
func NewOptProtectedBranchRequiredSignatures(v ProtectedBranchRequiredSignatures) OptProtectedBranchRequiredSignatures {
	return OptProtectedBranchRequiredSignatures{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredSignatures is optional ProtectedBranchRequiredSignatures.
type OptProtectedBranchRequiredSignatures struct {
	Value ProtectedBranchRequiredSignatures
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredSignatures was set.
func (o OptProtectedBranchRequiredSignatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredSignatures) Reset() {
	var v ProtectedBranchRequiredSignatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredSignatures) SetTo(v ProtectedBranchRequiredSignatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredSignatures) Get() (v ProtectedBranchRequiredSignatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredSignatures) Or(d ProtectedBranchRequiredSignatures) ProtectedBranchRequiredSignatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicUser returns new OptPublicUser with value set to v.
func NewOptPublicUser(v PublicUser) OptPublicUser {
	return OptPublicUser{
		Value: v,
		Set:   true,
	}
}

// OptPublicUser is optional PublicUser.
type OptPublicUser struct {
	Value PublicUser
	Set   bool
}

// IsSet returns true if OptPublicUser was set.
func (o OptPublicUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicUser) Reset() {
	var v PublicUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicUser) SetTo(v PublicUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicUser) Get() (v PublicUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicUser) Or(d PublicUser) PublicUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicUserPlan returns new OptPublicUserPlan with value set to v.
func NewOptPublicUserPlan(v PublicUserPlan) OptPublicUserPlan {
	return OptPublicUserPlan{
		Value: v,
		Set:   true,
	}
}

// OptPublicUserPlan is optional PublicUserPlan.
type OptPublicUserPlan struct {
	Value PublicUserPlan
	Set   bool
}

// IsSet returns true if OptPublicUserPlan was set.
func (o OptPublicUserPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicUserPlan) Reset() {
	var v PublicUserPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicUserPlan) SetTo(v PublicUserPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicUserPlan) Get() (v PublicUserPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicUserPlan) Or(d PublicUserPlan) PublicUserPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestBaseRepoPermissions returns new OptPullRequestBaseRepoPermissions with value set to v.
func NewOptPullRequestBaseRepoPermissions(v PullRequestBaseRepoPermissions) OptPullRequestBaseRepoPermissions {
	return OptPullRequestBaseRepoPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestBaseRepoPermissions is optional PullRequestBaseRepoPermissions.
type OptPullRequestBaseRepoPermissions struct {
	Value PullRequestBaseRepoPermissions
	Set   bool
}

// IsSet returns true if OptPullRequestBaseRepoPermissions was set.
func (o OptPullRequestBaseRepoPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestBaseRepoPermissions) Reset() {
	var v PullRequestBaseRepoPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestBaseRepoPermissions) SetTo(v PullRequestBaseRepoPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestBaseRepoPermissions) Get() (v PullRequestBaseRepoPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestBaseRepoPermissions) Or(d PullRequestBaseRepoPermissions) PullRequestBaseRepoPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestHeadRepoPermissions returns new OptPullRequestHeadRepoPermissions with value set to v.
func NewOptPullRequestHeadRepoPermissions(v PullRequestHeadRepoPermissions) OptPullRequestHeadRepoPermissions {
	return OptPullRequestHeadRepoPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestHeadRepoPermissions is optional PullRequestHeadRepoPermissions.
type OptPullRequestHeadRepoPermissions struct {
	Value PullRequestHeadRepoPermissions
	Set   bool
}

// IsSet returns true if OptPullRequestHeadRepoPermissions was set.
func (o OptPullRequestHeadRepoPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestHeadRepoPermissions) Reset() {
	var v PullRequestHeadRepoPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestHeadRepoPermissions) SetTo(v PullRequestHeadRepoPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestHeadRepoPermissions) Get() (v PullRequestHeadRepoPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestHeadRepoPermissions) Or(d PullRequestHeadRepoPermissions) PullRequestHeadRepoPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestReviewCommentSide returns new OptPullRequestReviewCommentSide with value set to v.
func NewOptPullRequestReviewCommentSide(v PullRequestReviewCommentSide) OptPullRequestReviewCommentSide {
	return OptPullRequestReviewCommentSide{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestReviewCommentSide is optional PullRequestReviewCommentSide.
type OptPullRequestReviewCommentSide struct {
	Value PullRequestReviewCommentSide
	Set   bool
}

// IsSet returns true if OptPullRequestReviewCommentSide was set.
func (o OptPullRequestReviewCommentSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestReviewCommentSide) Reset() {
	var v PullRequestReviewCommentSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestReviewCommentSide) SetTo(v PullRequestReviewCommentSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestReviewCommentSide) Get() (v PullRequestReviewCommentSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestReviewCommentSide) Or(d PullRequestReviewCommentSide) PullRequestReviewCommentSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewCommentReqSide returns new OptPullsCreateReviewCommentReqSide with value set to v.
func NewOptPullsCreateReviewCommentReqSide(v PullsCreateReviewCommentReqSide) OptPullsCreateReviewCommentReqSide {
	return OptPullsCreateReviewCommentReqSide{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewCommentReqSide is optional PullsCreateReviewCommentReqSide.
type OptPullsCreateReviewCommentReqSide struct {
	Value PullsCreateReviewCommentReqSide
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewCommentReqSide was set.
func (o OptPullsCreateReviewCommentReqSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewCommentReqSide) Reset() {
	var v PullsCreateReviewCommentReqSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewCommentReqSide) SetTo(v PullsCreateReviewCommentReqSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewCommentReqSide) Get() (v PullsCreateReviewCommentReqSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewCommentReqSide) Or(d PullsCreateReviewCommentReqSide) PullsCreateReviewCommentReqSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewCommentReqStartSide returns new OptPullsCreateReviewCommentReqStartSide with value set to v.
func NewOptPullsCreateReviewCommentReqStartSide(v PullsCreateReviewCommentReqStartSide) OptPullsCreateReviewCommentReqStartSide {
	return OptPullsCreateReviewCommentReqStartSide{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewCommentReqStartSide is optional PullsCreateReviewCommentReqStartSide.
type OptPullsCreateReviewCommentReqStartSide struct {
	Value PullsCreateReviewCommentReqStartSide
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewCommentReqStartSide was set.
func (o OptPullsCreateReviewCommentReqStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewCommentReqStartSide) Reset() {
	var v PullsCreateReviewCommentReqStartSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewCommentReqStartSide) SetTo(v PullsCreateReviewCommentReqStartSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewCommentReqStartSide) Get() (v PullsCreateReviewCommentReqStartSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewCommentReqStartSide) Or(d PullsCreateReviewCommentReqStartSide) PullsCreateReviewCommentReqStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewReq returns new OptPullsCreateReviewReq with value set to v.
func NewOptPullsCreateReviewReq(v PullsCreateReviewReq) OptPullsCreateReviewReq {
	return OptPullsCreateReviewReq{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewReq is optional PullsCreateReviewReq.
type OptPullsCreateReviewReq struct {
	Value PullsCreateReviewReq
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewReq was set.
func (o OptPullsCreateReviewReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewReq) Reset() {
	var v PullsCreateReviewReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewReq) SetTo(v PullsCreateReviewReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewReq) Get() (v PullsCreateReviewReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewReq) Or(d PullsCreateReviewReq) PullsCreateReviewReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewReqEvent returns new OptPullsCreateReviewReqEvent with value set to v.
func NewOptPullsCreateReviewReqEvent(v PullsCreateReviewReqEvent) OptPullsCreateReviewReqEvent {
	return OptPullsCreateReviewReqEvent{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewReqEvent is optional PullsCreateReviewReqEvent.
type OptPullsCreateReviewReqEvent struct {
	Value PullsCreateReviewReqEvent
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewReqEvent was set.
func (o OptPullsCreateReviewReqEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewReqEvent) Reset() {
	var v PullsCreateReviewReqEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewReqEvent) SetTo(v PullsCreateReviewReqEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewReqEvent) Get() (v PullsCreateReviewReqEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewReqEvent) Or(d PullsCreateReviewReqEvent) PullsCreateReviewReqEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListDirection returns new OptPullsListDirection with value set to v.
func NewOptPullsListDirection(v PullsListDirection) OptPullsListDirection {
	return OptPullsListDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListDirection is optional PullsListDirection.
type OptPullsListDirection struct {
	Value PullsListDirection
	Set   bool
}

// IsSet returns true if OptPullsListDirection was set.
func (o OptPullsListDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListDirection) Reset() {
	var v PullsListDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListDirection) SetTo(v PullsListDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListDirection) Get() (v PullsListDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListDirection) Or(d PullsListDirection) PullsListDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsDirection returns new OptPullsListReviewCommentsDirection with value set to v.
func NewOptPullsListReviewCommentsDirection(v PullsListReviewCommentsDirection) OptPullsListReviewCommentsDirection {
	return OptPullsListReviewCommentsDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsDirection is optional PullsListReviewCommentsDirection.
type OptPullsListReviewCommentsDirection struct {
	Value PullsListReviewCommentsDirection
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsDirection was set.
func (o OptPullsListReviewCommentsDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsDirection) Reset() {
	var v PullsListReviewCommentsDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsDirection) SetTo(v PullsListReviewCommentsDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsDirection) Get() (v PullsListReviewCommentsDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsDirection) Or(d PullsListReviewCommentsDirection) PullsListReviewCommentsDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsForRepoDirection returns new OptPullsListReviewCommentsForRepoDirection with value set to v.
func NewOptPullsListReviewCommentsForRepoDirection(v PullsListReviewCommentsForRepoDirection) OptPullsListReviewCommentsForRepoDirection {
	return OptPullsListReviewCommentsForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsForRepoDirection is optional PullsListReviewCommentsForRepoDirection.
type OptPullsListReviewCommentsForRepoDirection struct {
	Value PullsListReviewCommentsForRepoDirection
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsForRepoDirection was set.
func (o OptPullsListReviewCommentsForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsForRepoDirection) Reset() {
	var v PullsListReviewCommentsForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsForRepoDirection) SetTo(v PullsListReviewCommentsForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsForRepoDirection) Get() (v PullsListReviewCommentsForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsForRepoDirection) Or(d PullsListReviewCommentsForRepoDirection) PullsListReviewCommentsForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsForRepoSort returns new OptPullsListReviewCommentsForRepoSort with value set to v.
func NewOptPullsListReviewCommentsForRepoSort(v PullsListReviewCommentsForRepoSort) OptPullsListReviewCommentsForRepoSort {
	return OptPullsListReviewCommentsForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsForRepoSort is optional PullsListReviewCommentsForRepoSort.
type OptPullsListReviewCommentsForRepoSort struct {
	Value PullsListReviewCommentsForRepoSort
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsForRepoSort was set.
func (o OptPullsListReviewCommentsForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsForRepoSort) Reset() {
	var v PullsListReviewCommentsForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsForRepoSort) SetTo(v PullsListReviewCommentsForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsForRepoSort) Get() (v PullsListReviewCommentsForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsForRepoSort) Or(d PullsListReviewCommentsForRepoSort) PullsListReviewCommentsForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsSort returns new OptPullsListReviewCommentsSort with value set to v.
func NewOptPullsListReviewCommentsSort(v PullsListReviewCommentsSort) OptPullsListReviewCommentsSort {
	return OptPullsListReviewCommentsSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsSort is optional PullsListReviewCommentsSort.
type OptPullsListReviewCommentsSort struct {
	Value PullsListReviewCommentsSort
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsSort was set.
func (o OptPullsListReviewCommentsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsSort) Reset() {
	var v PullsListReviewCommentsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsSort) SetTo(v PullsListReviewCommentsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsSort) Get() (v PullsListReviewCommentsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsSort) Or(d PullsListReviewCommentsSort) PullsListReviewCommentsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListSort returns new OptPullsListSort with value set to v.
func NewOptPullsListSort(v PullsListSort) OptPullsListSort {
	return OptPullsListSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListSort is optional PullsListSort.
type OptPullsListSort struct {
	Value PullsListSort
	Set   bool
}

// IsSet returns true if OptPullsListSort was set.
func (o OptPullsListSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListSort) Reset() {
	var v PullsListSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListSort) SetTo(v PullsListSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListSort) Get() (v PullsListSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListSort) Or(d PullsListSort) PullsListSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListState returns new OptPullsListState with value set to v.
func NewOptPullsListState(v PullsListState) OptPullsListState {
	return OptPullsListState{
		Value: v,
		Set:   true,
	}
}

// OptPullsListState is optional PullsListState.
type OptPullsListState struct {
	Value PullsListState
	Set   bool
}

// IsSet returns true if OptPullsListState was set.
func (o OptPullsListState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListState) Reset() {
	var v PullsListState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListState) SetTo(v PullsListState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListState) Get() (v PullsListState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListState) Or(d PullsListState) PullsListState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsMergeReqMergeMethod returns new OptPullsMergeReqMergeMethod with value set to v.
func NewOptPullsMergeReqMergeMethod(v PullsMergeReqMergeMethod) OptPullsMergeReqMergeMethod {
	return OptPullsMergeReqMergeMethod{
		Value: v,
		Set:   true,
	}
}

// OptPullsMergeReqMergeMethod is optional PullsMergeReqMergeMethod.
type OptPullsMergeReqMergeMethod struct {
	Value PullsMergeReqMergeMethod
	Set   bool
}

// IsSet returns true if OptPullsMergeReqMergeMethod was set.
func (o OptPullsMergeReqMergeMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsMergeReqMergeMethod) Reset() {
	var v PullsMergeReqMergeMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsMergeReqMergeMethod) SetTo(v PullsMergeReqMergeMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsMergeReqMergeMethod) Get() (v PullsMergeReqMergeMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsMergeReqMergeMethod) Or(d PullsMergeReqMergeMethod) PullsMergeReqMergeMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsUpdateReq returns new OptPullsUpdateReq with value set to v.
func NewOptPullsUpdateReq(v PullsUpdateReq) OptPullsUpdateReq {
	return OptPullsUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptPullsUpdateReq is optional PullsUpdateReq.
type OptPullsUpdateReq struct {
	Value PullsUpdateReq
	Set   bool
}

// IsSet returns true if OptPullsUpdateReq was set.
func (o OptPullsUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsUpdateReq) Reset() {
	var v PullsUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsUpdateReq) SetTo(v PullsUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsUpdateReq) Get() (v PullsUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsUpdateReq) Or(d PullsUpdateReq) PullsUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsUpdateReqState returns new OptPullsUpdateReqState with value set to v.
func NewOptPullsUpdateReqState(v PullsUpdateReqState) OptPullsUpdateReqState {
	return OptPullsUpdateReqState{
		Value: v,
		Set:   true,
	}
}

// OptPullsUpdateReqState is optional PullsUpdateReqState.
type OptPullsUpdateReqState struct {
	Value PullsUpdateReqState
	Set   bool
}

// IsSet returns true if OptPullsUpdateReqState was set.
func (o OptPullsUpdateReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsUpdateReqState) Reset() {
	var v PullsUpdateReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsUpdateReqState) SetTo(v PullsUpdateReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsUpdateReqState) Get() (v PullsUpdateReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsUpdateReqState) Or(d PullsUpdateReqState) PullsUpdateReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRateLimit returns new OptRateLimit with value set to v.
func NewOptRateLimit(v RateLimit) OptRateLimit {
	return OptRateLimit{
		Value: v,
		Set:   true,
	}
}

// OptRateLimit is optional RateLimit.
type OptRateLimit struct {
	Value RateLimit
	Set   bool
}

// IsSet returns true if OptRateLimit was set.
func (o OptRateLimit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRateLimit) Reset() {
	var v RateLimit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRateLimit) SetTo(v RateLimit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRateLimit) Get() (v RateLimit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRateLimit) Or(d RateLimit) RateLimit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionRollup returns new OptReactionRollup with value set to v.
func NewOptReactionRollup(v ReactionRollup) OptReactionRollup {
	return OptReactionRollup{
		Value: v,
		Set:   true,
	}
}

// OptReactionRollup is optional ReactionRollup.
type OptReactionRollup struct {
	Value ReactionRollup
	Set   bool
}

// IsSet returns true if OptReactionRollup was set.
func (o OptReactionRollup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionRollup) Reset() {
	var v ReactionRollup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionRollup) SetTo(v ReactionRollup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionRollup) Get() (v ReactionRollup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionRollup) Or(d ReactionRollup) ReactionRollup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForCommitCommentContent returns new OptReactionsListForCommitCommentContent with value set to v.
func NewOptReactionsListForCommitCommentContent(v ReactionsListForCommitCommentContent) OptReactionsListForCommitCommentContent {
	return OptReactionsListForCommitCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForCommitCommentContent is optional ReactionsListForCommitCommentContent.
type OptReactionsListForCommitCommentContent struct {
	Value ReactionsListForCommitCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForCommitCommentContent was set.
func (o OptReactionsListForCommitCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForCommitCommentContent) Reset() {
	var v ReactionsListForCommitCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForCommitCommentContent) SetTo(v ReactionsListForCommitCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForCommitCommentContent) Get() (v ReactionsListForCommitCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForCommitCommentContent) Or(d ReactionsListForCommitCommentContent) ReactionsListForCommitCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForIssueCommentContent returns new OptReactionsListForIssueCommentContent with value set to v.
func NewOptReactionsListForIssueCommentContent(v ReactionsListForIssueCommentContent) OptReactionsListForIssueCommentContent {
	return OptReactionsListForIssueCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForIssueCommentContent is optional ReactionsListForIssueCommentContent.
type OptReactionsListForIssueCommentContent struct {
	Value ReactionsListForIssueCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForIssueCommentContent was set.
func (o OptReactionsListForIssueCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForIssueCommentContent) Reset() {
	var v ReactionsListForIssueCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForIssueCommentContent) SetTo(v ReactionsListForIssueCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForIssueCommentContent) Get() (v ReactionsListForIssueCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForIssueCommentContent) Or(d ReactionsListForIssueCommentContent) ReactionsListForIssueCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForIssueContent returns new OptReactionsListForIssueContent with value set to v.
func NewOptReactionsListForIssueContent(v ReactionsListForIssueContent) OptReactionsListForIssueContent {
	return OptReactionsListForIssueContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForIssueContent is optional ReactionsListForIssueContent.
type OptReactionsListForIssueContent struct {
	Value ReactionsListForIssueContent
	Set   bool
}

// IsSet returns true if OptReactionsListForIssueContent was set.
func (o OptReactionsListForIssueContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForIssueContent) Reset() {
	var v ReactionsListForIssueContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForIssueContent) SetTo(v ReactionsListForIssueContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForIssueContent) Get() (v ReactionsListForIssueContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForIssueContent) Or(d ReactionsListForIssueContent) ReactionsListForIssueContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForPullRequestReviewCommentContent returns new OptReactionsListForPullRequestReviewCommentContent with value set to v.
func NewOptReactionsListForPullRequestReviewCommentContent(v ReactionsListForPullRequestReviewCommentContent) OptReactionsListForPullRequestReviewCommentContent {
	return OptReactionsListForPullRequestReviewCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForPullRequestReviewCommentContent is optional ReactionsListForPullRequestReviewCommentContent.
type OptReactionsListForPullRequestReviewCommentContent struct {
	Value ReactionsListForPullRequestReviewCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForPullRequestReviewCommentContent was set.
func (o OptReactionsListForPullRequestReviewCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForPullRequestReviewCommentContent) Reset() {
	var v ReactionsListForPullRequestReviewCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForPullRequestReviewCommentContent) SetTo(v ReactionsListForPullRequestReviewCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForPullRequestReviewCommentContent) Get() (v ReactionsListForPullRequestReviewCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForPullRequestReviewCommentContent) Or(d ReactionsListForPullRequestReviewCommentContent) ReactionsListForPullRequestReviewCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionCommentInOrgContent returns new OptReactionsListForTeamDiscussionCommentInOrgContent with value set to v.
func NewOptReactionsListForTeamDiscussionCommentInOrgContent(v ReactionsListForTeamDiscussionCommentInOrgContent) OptReactionsListForTeamDiscussionCommentInOrgContent {
	return OptReactionsListForTeamDiscussionCommentInOrgContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionCommentInOrgContent is optional ReactionsListForTeamDiscussionCommentInOrgContent.
type OptReactionsListForTeamDiscussionCommentInOrgContent struct {
	Value ReactionsListForTeamDiscussionCommentInOrgContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionCommentInOrgContent was set.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionCommentInOrgContent) Reset() {
	var v ReactionsListForTeamDiscussionCommentInOrgContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionCommentInOrgContent) SetTo(v ReactionsListForTeamDiscussionCommentInOrgContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) Get() (v ReactionsListForTeamDiscussionCommentInOrgContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) Or(d ReactionsListForTeamDiscussionCommentInOrgContent) ReactionsListForTeamDiscussionCommentInOrgContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionCommentLegacyContent returns new OptReactionsListForTeamDiscussionCommentLegacyContent with value set to v.
func NewOptReactionsListForTeamDiscussionCommentLegacyContent(v ReactionsListForTeamDiscussionCommentLegacyContent) OptReactionsListForTeamDiscussionCommentLegacyContent {
	return OptReactionsListForTeamDiscussionCommentLegacyContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionCommentLegacyContent is optional ReactionsListForTeamDiscussionCommentLegacyContent.
type OptReactionsListForTeamDiscussionCommentLegacyContent struct {
	Value ReactionsListForTeamDiscussionCommentLegacyContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionCommentLegacyContent was set.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionCommentLegacyContent) Reset() {
	var v ReactionsListForTeamDiscussionCommentLegacyContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionCommentLegacyContent) SetTo(v ReactionsListForTeamDiscussionCommentLegacyContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) Get() (v ReactionsListForTeamDiscussionCommentLegacyContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) Or(d ReactionsListForTeamDiscussionCommentLegacyContent) ReactionsListForTeamDiscussionCommentLegacyContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionInOrgContent returns new OptReactionsListForTeamDiscussionInOrgContent with value set to v.
func NewOptReactionsListForTeamDiscussionInOrgContent(v ReactionsListForTeamDiscussionInOrgContent) OptReactionsListForTeamDiscussionInOrgContent {
	return OptReactionsListForTeamDiscussionInOrgContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionInOrgContent is optional ReactionsListForTeamDiscussionInOrgContent.
type OptReactionsListForTeamDiscussionInOrgContent struct {
	Value ReactionsListForTeamDiscussionInOrgContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionInOrgContent was set.
func (o OptReactionsListForTeamDiscussionInOrgContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionInOrgContent) Reset() {
	var v ReactionsListForTeamDiscussionInOrgContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionInOrgContent) SetTo(v ReactionsListForTeamDiscussionInOrgContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionInOrgContent) Get() (v ReactionsListForTeamDiscussionInOrgContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionInOrgContent) Or(d ReactionsListForTeamDiscussionInOrgContent) ReactionsListForTeamDiscussionInOrgContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionLegacyContent returns new OptReactionsListForTeamDiscussionLegacyContent with value set to v.
func NewOptReactionsListForTeamDiscussionLegacyContent(v ReactionsListForTeamDiscussionLegacyContent) OptReactionsListForTeamDiscussionLegacyContent {
	return OptReactionsListForTeamDiscussionLegacyContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionLegacyContent is optional ReactionsListForTeamDiscussionLegacyContent.
type OptReactionsListForTeamDiscussionLegacyContent struct {
	Value ReactionsListForTeamDiscussionLegacyContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionLegacyContent was set.
func (o OptReactionsListForTeamDiscussionLegacyContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionLegacyContent) Reset() {
	var v ReactionsListForTeamDiscussionLegacyContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionLegacyContent) SetTo(v ReactionsListForTeamDiscussionLegacyContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionLegacyContent) Get() (v ReactionsListForTeamDiscussionLegacyContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionLegacyContent) Or(d ReactionsListForTeamDiscussionLegacyContent) ReactionsListForTeamDiscussionLegacyContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepoSearchResultItemPermissions returns new OptRepoSearchResultItemPermissions with value set to v.
func NewOptRepoSearchResultItemPermissions(v RepoSearchResultItemPermissions) OptRepoSearchResultItemPermissions {
	return OptRepoSearchResultItemPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepoSearchResultItemPermissions is optional RepoSearchResultItemPermissions.
type OptRepoSearchResultItemPermissions struct {
	Value RepoSearchResultItemPermissions
	Set   bool
}

// IsSet returns true if OptRepoSearchResultItemPermissions was set.
func (o OptRepoSearchResultItemPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepoSearchResultItemPermissions) Reset() {
	var v RepoSearchResultItemPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepoSearchResultItemPermissions) SetTo(v RepoSearchResultItemPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepoSearchResultItemPermissions) Get() (v RepoSearchResultItemPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepoSearchResultItemPermissions) Or(d RepoSearchResultItemPermissions) RepoSearchResultItemPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddAppAccessRestrictionsReq returns new OptReposAddAppAccessRestrictionsReq with value set to v.
func NewOptReposAddAppAccessRestrictionsReq(v ReposAddAppAccessRestrictionsReq) OptReposAddAppAccessRestrictionsReq {
	return OptReposAddAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddAppAccessRestrictionsReq is optional ReposAddAppAccessRestrictionsReq.
type OptReposAddAppAccessRestrictionsReq struct {
	Value ReposAddAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddAppAccessRestrictionsReq was set.
func (o OptReposAddAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddAppAccessRestrictionsReq) Reset() {
	var v ReposAddAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddAppAccessRestrictionsReq) SetTo(v ReposAddAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddAppAccessRestrictionsReq) Get() (v ReposAddAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddAppAccessRestrictionsReq) Or(d ReposAddAppAccessRestrictionsReq) ReposAddAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddCollaboratorReq returns new OptReposAddCollaboratorReq with value set to v.
func NewOptReposAddCollaboratorReq(v ReposAddCollaboratorReq) OptReposAddCollaboratorReq {
	return OptReposAddCollaboratorReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddCollaboratorReq is optional ReposAddCollaboratorReq.
type OptReposAddCollaboratorReq struct {
	Value ReposAddCollaboratorReq
	Set   bool
}

// IsSet returns true if OptReposAddCollaboratorReq was set.
func (o OptReposAddCollaboratorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddCollaboratorReq) Reset() {
	var v ReposAddCollaboratorReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddCollaboratorReq) SetTo(v ReposAddCollaboratorReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddCollaboratorReq) Get() (v ReposAddCollaboratorReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddCollaboratorReq) Or(d ReposAddCollaboratorReq) ReposAddCollaboratorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddCollaboratorReqPermission returns new OptReposAddCollaboratorReqPermission with value set to v.
func NewOptReposAddCollaboratorReqPermission(v ReposAddCollaboratorReqPermission) OptReposAddCollaboratorReqPermission {
	return OptReposAddCollaboratorReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptReposAddCollaboratorReqPermission is optional ReposAddCollaboratorReqPermission.
type OptReposAddCollaboratorReqPermission struct {
	Value ReposAddCollaboratorReqPermission
	Set   bool
}

// IsSet returns true if OptReposAddCollaboratorReqPermission was set.
func (o OptReposAddCollaboratorReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddCollaboratorReqPermission) Reset() {
	var v ReposAddCollaboratorReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddCollaboratorReqPermission) SetTo(v ReposAddCollaboratorReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddCollaboratorReqPermission) Get() (v ReposAddCollaboratorReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddCollaboratorReqPermission) Or(d ReposAddCollaboratorReqPermission) ReposAddCollaboratorReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddStatusCheckContextsReq returns new OptReposAddStatusCheckContextsReq with value set to v.
func NewOptReposAddStatusCheckContextsReq(v ReposAddStatusCheckContextsReq) OptReposAddStatusCheckContextsReq {
	return OptReposAddStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddStatusCheckContextsReq is optional ReposAddStatusCheckContextsReq.
type OptReposAddStatusCheckContextsReq struct {
	Value ReposAddStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposAddStatusCheckContextsReq was set.
func (o OptReposAddStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddStatusCheckContextsReq) Reset() {
	var v ReposAddStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddStatusCheckContextsReq) SetTo(v ReposAddStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddStatusCheckContextsReq) Get() (v ReposAddStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddStatusCheckContextsReq) Or(d ReposAddStatusCheckContextsReq) ReposAddStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddTeamAccessRestrictionsReq returns new OptReposAddTeamAccessRestrictionsReq with value set to v.
func NewOptReposAddTeamAccessRestrictionsReq(v ReposAddTeamAccessRestrictionsReq) OptReposAddTeamAccessRestrictionsReq {
	return OptReposAddTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddTeamAccessRestrictionsReq is optional ReposAddTeamAccessRestrictionsReq.
type OptReposAddTeamAccessRestrictionsReq struct {
	Value ReposAddTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddTeamAccessRestrictionsReq was set.
func (o OptReposAddTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddTeamAccessRestrictionsReq) Reset() {
	var v ReposAddTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddTeamAccessRestrictionsReq) SetTo(v ReposAddTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddTeamAccessRestrictionsReq) Get() (v ReposAddTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddTeamAccessRestrictionsReq) Or(d ReposAddTeamAccessRestrictionsReq) ReposAddTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddUserAccessRestrictionsReq returns new OptReposAddUserAccessRestrictionsReq with value set to v.
func NewOptReposAddUserAccessRestrictionsReq(v ReposAddUserAccessRestrictionsReq) OptReposAddUserAccessRestrictionsReq {
	return OptReposAddUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddUserAccessRestrictionsReq is optional ReposAddUserAccessRestrictionsReq.
type OptReposAddUserAccessRestrictionsReq struct {
	Value ReposAddUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddUserAccessRestrictionsReq was set.
func (o OptReposAddUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddUserAccessRestrictionsReq) Reset() {
	var v ReposAddUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddUserAccessRestrictionsReq) SetTo(v ReposAddUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddUserAccessRestrictionsReq) Get() (v ReposAddUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddUserAccessRestrictionsReq) Or(d ReposAddUserAccessRestrictionsReq) ReposAddUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDeploymentReqPayload returns new OptReposCreateDeploymentReqPayload with value set to v.
func NewOptReposCreateDeploymentReqPayload(v ReposCreateDeploymentReqPayload) OptReposCreateDeploymentReqPayload {
	return OptReposCreateDeploymentReqPayload{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDeploymentReqPayload is optional ReposCreateDeploymentReqPayload.
type OptReposCreateDeploymentReqPayload struct {
	Value ReposCreateDeploymentReqPayload
	Set   bool
}

// IsSet returns true if OptReposCreateDeploymentReqPayload was set.
func (o OptReposCreateDeploymentReqPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDeploymentReqPayload) Reset() {
	var v ReposCreateDeploymentReqPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDeploymentReqPayload) SetTo(v ReposCreateDeploymentReqPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDeploymentReqPayload) Get() (v ReposCreateDeploymentReqPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDeploymentReqPayload) Or(d ReposCreateDeploymentReqPayload) ReposCreateDeploymentReqPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDeploymentStatusReqEnvironment returns new OptReposCreateDeploymentStatusReqEnvironment with value set to v.
func NewOptReposCreateDeploymentStatusReqEnvironment(v ReposCreateDeploymentStatusReqEnvironment) OptReposCreateDeploymentStatusReqEnvironment {
	return OptReposCreateDeploymentStatusReqEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDeploymentStatusReqEnvironment is optional ReposCreateDeploymentStatusReqEnvironment.
type OptReposCreateDeploymentStatusReqEnvironment struct {
	Value ReposCreateDeploymentStatusReqEnvironment
	Set   bool
}

// IsSet returns true if OptReposCreateDeploymentStatusReqEnvironment was set.
func (o OptReposCreateDeploymentStatusReqEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDeploymentStatusReqEnvironment) Reset() {
	var v ReposCreateDeploymentStatusReqEnvironment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDeploymentStatusReqEnvironment) SetTo(v ReposCreateDeploymentStatusReqEnvironment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDeploymentStatusReqEnvironment) Get() (v ReposCreateDeploymentStatusReqEnvironment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDeploymentStatusReqEnvironment) Or(d ReposCreateDeploymentStatusReqEnvironment) ReposCreateDeploymentStatusReqEnvironment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDispatchEventReqClientPayload returns new OptReposCreateDispatchEventReqClientPayload with value set to v.
func NewOptReposCreateDispatchEventReqClientPayload(v ReposCreateDispatchEventReqClientPayload) OptReposCreateDispatchEventReqClientPayload {
	return OptReposCreateDispatchEventReqClientPayload{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDispatchEventReqClientPayload is optional ReposCreateDispatchEventReqClientPayload.
type OptReposCreateDispatchEventReqClientPayload struct {
	Value ReposCreateDispatchEventReqClientPayload
	Set   bool
}

// IsSet returns true if OptReposCreateDispatchEventReqClientPayload was set.
func (o OptReposCreateDispatchEventReqClientPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDispatchEventReqClientPayload) Reset() {
	var v ReposCreateDispatchEventReqClientPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDispatchEventReqClientPayload) SetTo(v ReposCreateDispatchEventReqClientPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDispatchEventReqClientPayload) Get() (v ReposCreateDispatchEventReqClientPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDispatchEventReqClientPayload) Or(d ReposCreateDispatchEventReqClientPayload) ReposCreateDispatchEventReqClientPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateInOrgReqVisibility returns new OptReposCreateInOrgReqVisibility with value set to v.
func NewOptReposCreateInOrgReqVisibility(v ReposCreateInOrgReqVisibility) OptReposCreateInOrgReqVisibility {
	return OptReposCreateInOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateInOrgReqVisibility is optional ReposCreateInOrgReqVisibility.
type OptReposCreateInOrgReqVisibility struct {
	Value ReposCreateInOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptReposCreateInOrgReqVisibility was set.
func (o OptReposCreateInOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateInOrgReqVisibility) Reset() {
	var v ReposCreateInOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateInOrgReqVisibility) SetTo(v ReposCreateInOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateInOrgReqVisibility) Get() (v ReposCreateInOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateInOrgReqVisibility) Or(d ReposCreateInOrgReqVisibility) ReposCreateInOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateOrUpdateFileContentsReqAuthor returns new OptReposCreateOrUpdateFileContentsReqAuthor with value set to v.
func NewOptReposCreateOrUpdateFileContentsReqAuthor(v ReposCreateOrUpdateFileContentsReqAuthor) OptReposCreateOrUpdateFileContentsReqAuthor {
	return OptReposCreateOrUpdateFileContentsReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateOrUpdateFileContentsReqAuthor is optional ReposCreateOrUpdateFileContentsReqAuthor.
type OptReposCreateOrUpdateFileContentsReqAuthor struct {
	Value ReposCreateOrUpdateFileContentsReqAuthor
	Set   bool
}

// IsSet returns true if OptReposCreateOrUpdateFileContentsReqAuthor was set.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateOrUpdateFileContentsReqAuthor) Reset() {
	var v ReposCreateOrUpdateFileContentsReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateOrUpdateFileContentsReqAuthor) SetTo(v ReposCreateOrUpdateFileContentsReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) Get() (v ReposCreateOrUpdateFileContentsReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) Or(d ReposCreateOrUpdateFileContentsReqAuthor) ReposCreateOrUpdateFileContentsReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateOrUpdateFileContentsReqCommitter returns new OptReposCreateOrUpdateFileContentsReqCommitter with value set to v.
func NewOptReposCreateOrUpdateFileContentsReqCommitter(v ReposCreateOrUpdateFileContentsReqCommitter) OptReposCreateOrUpdateFileContentsReqCommitter {
	return OptReposCreateOrUpdateFileContentsReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateOrUpdateFileContentsReqCommitter is optional ReposCreateOrUpdateFileContentsReqCommitter.
type OptReposCreateOrUpdateFileContentsReqCommitter struct {
	Value ReposCreateOrUpdateFileContentsReqCommitter
	Set   bool
}

// IsSet returns true if OptReposCreateOrUpdateFileContentsReqCommitter was set.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateOrUpdateFileContentsReqCommitter) Reset() {
	var v ReposCreateOrUpdateFileContentsReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateOrUpdateFileContentsReqCommitter) SetTo(v ReposCreateOrUpdateFileContentsReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) Get() (v ReposCreateOrUpdateFileContentsReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) Or(d ReposCreateOrUpdateFileContentsReqCommitter) ReposCreateOrUpdateFileContentsReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreatePagesSiteReqSourcePath returns new OptReposCreatePagesSiteReqSourcePath with value set to v.
func NewOptReposCreatePagesSiteReqSourcePath(v ReposCreatePagesSiteReqSourcePath) OptReposCreatePagesSiteReqSourcePath {
	return OptReposCreatePagesSiteReqSourcePath{
		Value: v,
		Set:   true,
	}
}

// OptReposCreatePagesSiteReqSourcePath is optional ReposCreatePagesSiteReqSourcePath.
type OptReposCreatePagesSiteReqSourcePath struct {
	Value ReposCreatePagesSiteReqSourcePath
	Set   bool
}

// IsSet returns true if OptReposCreatePagesSiteReqSourcePath was set.
func (o OptReposCreatePagesSiteReqSourcePath) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreatePagesSiteReqSourcePath) Reset() {
	var v ReposCreatePagesSiteReqSourcePath
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreatePagesSiteReqSourcePath) SetTo(v ReposCreatePagesSiteReqSourcePath) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreatePagesSiteReqSourcePath) Get() (v ReposCreatePagesSiteReqSourcePath, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreatePagesSiteReqSourcePath) Or(d ReposCreatePagesSiteReqSourcePath) ReposCreatePagesSiteReqSourcePath {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateWebhookReqConfig returns new OptReposCreateWebhookReqConfig with value set to v.
func NewOptReposCreateWebhookReqConfig(v ReposCreateWebhookReqConfig) OptReposCreateWebhookReqConfig {
	return OptReposCreateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateWebhookReqConfig is optional ReposCreateWebhookReqConfig.
type OptReposCreateWebhookReqConfig struct {
	Value ReposCreateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptReposCreateWebhookReqConfig was set.
func (o OptReposCreateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateWebhookReqConfig) Reset() {
	var v ReposCreateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateWebhookReqConfig) SetTo(v ReposCreateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateWebhookReqConfig) Get() (v ReposCreateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateWebhookReqConfig) Or(d ReposCreateWebhookReqConfig) ReposCreateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposDeleteFileReqAuthor returns new OptReposDeleteFileReqAuthor with value set to v.
func NewOptReposDeleteFileReqAuthor(v ReposDeleteFileReqAuthor) OptReposDeleteFileReqAuthor {
	return OptReposDeleteFileReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptReposDeleteFileReqAuthor is optional ReposDeleteFileReqAuthor.
type OptReposDeleteFileReqAuthor struct {
	Value ReposDeleteFileReqAuthor
	Set   bool
}

// IsSet returns true if OptReposDeleteFileReqAuthor was set.
func (o OptReposDeleteFileReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposDeleteFileReqAuthor) Reset() {
	var v ReposDeleteFileReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposDeleteFileReqAuthor) SetTo(v ReposDeleteFileReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposDeleteFileReqAuthor) Get() (v ReposDeleteFileReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposDeleteFileReqAuthor) Or(d ReposDeleteFileReqAuthor) ReposDeleteFileReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposDeleteFileReqCommitter returns new OptReposDeleteFileReqCommitter with value set to v.
func NewOptReposDeleteFileReqCommitter(v ReposDeleteFileReqCommitter) OptReposDeleteFileReqCommitter {
	return OptReposDeleteFileReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptReposDeleteFileReqCommitter is optional ReposDeleteFileReqCommitter.
type OptReposDeleteFileReqCommitter struct {
	Value ReposDeleteFileReqCommitter
	Set   bool
}

// IsSet returns true if OptReposDeleteFileReqCommitter was set.
func (o OptReposDeleteFileReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposDeleteFileReqCommitter) Reset() {
	var v ReposDeleteFileReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposDeleteFileReqCommitter) SetTo(v ReposDeleteFileReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposDeleteFileReqCommitter) Get() (v ReposDeleteFileReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposDeleteFileReqCommitter) Or(d ReposDeleteFileReqCommitter) ReposDeleteFileReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposGetClonesPer returns new OptReposGetClonesPer with value set to v.
func NewOptReposGetClonesPer(v ReposGetClonesPer) OptReposGetClonesPer {
	return OptReposGetClonesPer{
		Value: v,
		Set:   true,
	}
}

// OptReposGetClonesPer is optional ReposGetClonesPer.
type OptReposGetClonesPer struct {
	Value ReposGetClonesPer
	Set   bool
}

// IsSet returns true if OptReposGetClonesPer was set.
func (o OptReposGetClonesPer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposGetClonesPer) Reset() {
	var v ReposGetClonesPer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposGetClonesPer) SetTo(v ReposGetClonesPer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposGetClonesPer) Get() (v ReposGetClonesPer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposGetClonesPer) Or(d ReposGetClonesPer) ReposGetClonesPer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposGetViewsPer returns new OptReposGetViewsPer with value set to v.
func NewOptReposGetViewsPer(v ReposGetViewsPer) OptReposGetViewsPer {
	return OptReposGetViewsPer{
		Value: v,
		Set:   true,
	}
}

// OptReposGetViewsPer is optional ReposGetViewsPer.
type OptReposGetViewsPer struct {
	Value ReposGetViewsPer
	Set   bool
}

// IsSet returns true if OptReposGetViewsPer was set.
func (o OptReposGetViewsPer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposGetViewsPer) Reset() {
	var v ReposGetViewsPer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposGetViewsPer) SetTo(v ReposGetViewsPer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposGetViewsPer) Get() (v ReposGetViewsPer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposGetViewsPer) Or(d ReposGetViewsPer) ReposGetViewsPer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListCollaboratorsAffiliation returns new OptReposListCollaboratorsAffiliation with value set to v.
func NewOptReposListCollaboratorsAffiliation(v ReposListCollaboratorsAffiliation) OptReposListCollaboratorsAffiliation {
	return OptReposListCollaboratorsAffiliation{
		Value: v,
		Set:   true,
	}
}

// OptReposListCollaboratorsAffiliation is optional ReposListCollaboratorsAffiliation.
type OptReposListCollaboratorsAffiliation struct {
	Value ReposListCollaboratorsAffiliation
	Set   bool
}

// IsSet returns true if OptReposListCollaboratorsAffiliation was set.
func (o OptReposListCollaboratorsAffiliation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListCollaboratorsAffiliation) Reset() {
	var v ReposListCollaboratorsAffiliation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListCollaboratorsAffiliation) SetTo(v ReposListCollaboratorsAffiliation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListCollaboratorsAffiliation) Get() (v ReposListCollaboratorsAffiliation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListCollaboratorsAffiliation) Or(d ReposListCollaboratorsAffiliation) ReposListCollaboratorsAffiliation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserDirection returns new OptReposListForAuthenticatedUserDirection with value set to v.
func NewOptReposListForAuthenticatedUserDirection(v ReposListForAuthenticatedUserDirection) OptReposListForAuthenticatedUserDirection {
	return OptReposListForAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserDirection is optional ReposListForAuthenticatedUserDirection.
type OptReposListForAuthenticatedUserDirection struct {
	Value ReposListForAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserDirection was set.
func (o OptReposListForAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserDirection) Reset() {
	var v ReposListForAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserDirection) SetTo(v ReposListForAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserDirection) Get() (v ReposListForAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserDirection) Or(d ReposListForAuthenticatedUserDirection) ReposListForAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserSort returns new OptReposListForAuthenticatedUserSort with value set to v.
func NewOptReposListForAuthenticatedUserSort(v ReposListForAuthenticatedUserSort) OptReposListForAuthenticatedUserSort {
	return OptReposListForAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserSort is optional ReposListForAuthenticatedUserSort.
type OptReposListForAuthenticatedUserSort struct {
	Value ReposListForAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserSort was set.
func (o OptReposListForAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserSort) Reset() {
	var v ReposListForAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserSort) SetTo(v ReposListForAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserSort) Get() (v ReposListForAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserSort) Or(d ReposListForAuthenticatedUserSort) ReposListForAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserType returns new OptReposListForAuthenticatedUserType with value set to v.
func NewOptReposListForAuthenticatedUserType(v ReposListForAuthenticatedUserType) OptReposListForAuthenticatedUserType {
	return OptReposListForAuthenticatedUserType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserType is optional ReposListForAuthenticatedUserType.
type OptReposListForAuthenticatedUserType struct {
	Value ReposListForAuthenticatedUserType
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserType was set.
func (o OptReposListForAuthenticatedUserType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserType) Reset() {
	var v ReposListForAuthenticatedUserType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserType) SetTo(v ReposListForAuthenticatedUserType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserType) Get() (v ReposListForAuthenticatedUserType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserType) Or(d ReposListForAuthenticatedUserType) ReposListForAuthenticatedUserType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserVisibility returns new OptReposListForAuthenticatedUserVisibility with value set to v.
func NewOptReposListForAuthenticatedUserVisibility(v ReposListForAuthenticatedUserVisibility) OptReposListForAuthenticatedUserVisibility {
	return OptReposListForAuthenticatedUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserVisibility is optional ReposListForAuthenticatedUserVisibility.
type OptReposListForAuthenticatedUserVisibility struct {
	Value ReposListForAuthenticatedUserVisibility
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserVisibility was set.
func (o OptReposListForAuthenticatedUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserVisibility) Reset() {
	var v ReposListForAuthenticatedUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserVisibility) SetTo(v ReposListForAuthenticatedUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserVisibility) Get() (v ReposListForAuthenticatedUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserVisibility) Or(d ReposListForAuthenticatedUserVisibility) ReposListForAuthenticatedUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgDirection returns new OptReposListForOrgDirection with value set to v.
func NewOptReposListForOrgDirection(v ReposListForOrgDirection) OptReposListForOrgDirection {
	return OptReposListForOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgDirection is optional ReposListForOrgDirection.
type OptReposListForOrgDirection struct {
	Value ReposListForOrgDirection
	Set   bool
}

// IsSet returns true if OptReposListForOrgDirection was set.
func (o OptReposListForOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgDirection) Reset() {
	var v ReposListForOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgDirection) SetTo(v ReposListForOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgDirection) Get() (v ReposListForOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgDirection) Or(d ReposListForOrgDirection) ReposListForOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgSort returns new OptReposListForOrgSort with value set to v.
func NewOptReposListForOrgSort(v ReposListForOrgSort) OptReposListForOrgSort {
	return OptReposListForOrgSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgSort is optional ReposListForOrgSort.
type OptReposListForOrgSort struct {
	Value ReposListForOrgSort
	Set   bool
}

// IsSet returns true if OptReposListForOrgSort was set.
func (o OptReposListForOrgSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgSort) Reset() {
	var v ReposListForOrgSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgSort) SetTo(v ReposListForOrgSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgSort) Get() (v ReposListForOrgSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgSort) Or(d ReposListForOrgSort) ReposListForOrgSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgType returns new OptReposListForOrgType with value set to v.
func NewOptReposListForOrgType(v ReposListForOrgType) OptReposListForOrgType {
	return OptReposListForOrgType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgType is optional ReposListForOrgType.
type OptReposListForOrgType struct {
	Value ReposListForOrgType
	Set   bool
}

// IsSet returns true if OptReposListForOrgType was set.
func (o OptReposListForOrgType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgType) Reset() {
	var v ReposListForOrgType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgType) SetTo(v ReposListForOrgType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgType) Get() (v ReposListForOrgType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgType) Or(d ReposListForOrgType) ReposListForOrgType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserDirection returns new OptReposListForUserDirection with value set to v.
func NewOptReposListForUserDirection(v ReposListForUserDirection) OptReposListForUserDirection {
	return OptReposListForUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserDirection is optional ReposListForUserDirection.
type OptReposListForUserDirection struct {
	Value ReposListForUserDirection
	Set   bool
}

// IsSet returns true if OptReposListForUserDirection was set.
func (o OptReposListForUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserDirection) Reset() {
	var v ReposListForUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserDirection) SetTo(v ReposListForUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserDirection) Get() (v ReposListForUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserDirection) Or(d ReposListForUserDirection) ReposListForUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserSort returns new OptReposListForUserSort with value set to v.
func NewOptReposListForUserSort(v ReposListForUserSort) OptReposListForUserSort {
	return OptReposListForUserSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserSort is optional ReposListForUserSort.
type OptReposListForUserSort struct {
	Value ReposListForUserSort
	Set   bool
}

// IsSet returns true if OptReposListForUserSort was set.
func (o OptReposListForUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserSort) Reset() {
	var v ReposListForUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserSort) SetTo(v ReposListForUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserSort) Get() (v ReposListForUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserSort) Or(d ReposListForUserSort) ReposListForUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserType returns new OptReposListForUserType with value set to v.
func NewOptReposListForUserType(v ReposListForUserType) OptReposListForUserType {
	return OptReposListForUserType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserType is optional ReposListForUserType.
type OptReposListForUserType struct {
	Value ReposListForUserType
	Set   bool
}

// IsSet returns true if OptReposListForUserType was set.
func (o OptReposListForUserType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserType) Reset() {
	var v ReposListForUserType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserType) SetTo(v ReposListForUserType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserType) Get() (v ReposListForUserType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserType) Or(d ReposListForUserType) ReposListForUserType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForksSort returns new OptReposListForksSort with value set to v.
func NewOptReposListForksSort(v ReposListForksSort) OptReposListForksSort {
	return OptReposListForksSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForksSort is optional ReposListForksSort.
type OptReposListForksSort struct {
	Value ReposListForksSort
	Set   bool
}

// IsSet returns true if OptReposListForksSort was set.
func (o OptReposListForksSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForksSort) Reset() {
	var v ReposListForksSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForksSort) SetTo(v ReposListForksSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForksSort) Get() (v ReposListForksSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForksSort) Or(d ReposListForksSort) ReposListForksSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveAppAccessRestrictionsReq returns new OptReposRemoveAppAccessRestrictionsReq with value set to v.
func NewOptReposRemoveAppAccessRestrictionsReq(v ReposRemoveAppAccessRestrictionsReq) OptReposRemoveAppAccessRestrictionsReq {
	return OptReposRemoveAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveAppAccessRestrictionsReq is optional ReposRemoveAppAccessRestrictionsReq.
type OptReposRemoveAppAccessRestrictionsReq struct {
	Value ReposRemoveAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveAppAccessRestrictionsReq was set.
func (o OptReposRemoveAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveAppAccessRestrictionsReq) Reset() {
	var v ReposRemoveAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveAppAccessRestrictionsReq) SetTo(v ReposRemoveAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveAppAccessRestrictionsReq) Get() (v ReposRemoveAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveAppAccessRestrictionsReq) Or(d ReposRemoveAppAccessRestrictionsReq) ReposRemoveAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveStatusCheckContextsReq returns new OptReposRemoveStatusCheckContextsReq with value set to v.
func NewOptReposRemoveStatusCheckContextsReq(v ReposRemoveStatusCheckContextsReq) OptReposRemoveStatusCheckContextsReq {
	return OptReposRemoveStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveStatusCheckContextsReq is optional ReposRemoveStatusCheckContextsReq.
type OptReposRemoveStatusCheckContextsReq struct {
	Value ReposRemoveStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveStatusCheckContextsReq was set.
func (o OptReposRemoveStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveStatusCheckContextsReq) Reset() {
	var v ReposRemoveStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveStatusCheckContextsReq) SetTo(v ReposRemoveStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveStatusCheckContextsReq) Get() (v ReposRemoveStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveStatusCheckContextsReq) Or(d ReposRemoveStatusCheckContextsReq) ReposRemoveStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveTeamAccessRestrictionsReq returns new OptReposRemoveTeamAccessRestrictionsReq with value set to v.
func NewOptReposRemoveTeamAccessRestrictionsReq(v ReposRemoveTeamAccessRestrictionsReq) OptReposRemoveTeamAccessRestrictionsReq {
	return OptReposRemoveTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveTeamAccessRestrictionsReq is optional ReposRemoveTeamAccessRestrictionsReq.
type OptReposRemoveTeamAccessRestrictionsReq struct {
	Value ReposRemoveTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveTeamAccessRestrictionsReq was set.
func (o OptReposRemoveTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveTeamAccessRestrictionsReq) Reset() {
	var v ReposRemoveTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveTeamAccessRestrictionsReq) SetTo(v ReposRemoveTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveTeamAccessRestrictionsReq) Get() (v ReposRemoveTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveTeamAccessRestrictionsReq) Or(d ReposRemoveTeamAccessRestrictionsReq) ReposRemoveTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveUserAccessRestrictionsReq returns new OptReposRemoveUserAccessRestrictionsReq with value set to v.
func NewOptReposRemoveUserAccessRestrictionsReq(v ReposRemoveUserAccessRestrictionsReq) OptReposRemoveUserAccessRestrictionsReq {
	return OptReposRemoveUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveUserAccessRestrictionsReq is optional ReposRemoveUserAccessRestrictionsReq.
type OptReposRemoveUserAccessRestrictionsReq struct {
	Value ReposRemoveUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveUserAccessRestrictionsReq was set.
func (o OptReposRemoveUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveUserAccessRestrictionsReq) Reset() {
	var v ReposRemoveUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveUserAccessRestrictionsReq) SetTo(v ReposRemoveUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveUserAccessRestrictionsReq) Get() (v ReposRemoveUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveUserAccessRestrictionsReq) Or(d ReposRemoveUserAccessRestrictionsReq) ReposRemoveUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRenameBranchReq returns new OptReposRenameBranchReq with value set to v.
func NewOptReposRenameBranchReq(v ReposRenameBranchReq) OptReposRenameBranchReq {
	return OptReposRenameBranchReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRenameBranchReq is optional ReposRenameBranchReq.
type OptReposRenameBranchReq struct {
	Value ReposRenameBranchReq
	Set   bool
}

// IsSet returns true if OptReposRenameBranchReq was set.
func (o OptReposRenameBranchReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRenameBranchReq) Reset() {
	var v ReposRenameBranchReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRenameBranchReq) SetTo(v ReposRenameBranchReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRenameBranchReq) Get() (v ReposRenameBranchReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRenameBranchReq) Or(d ReposRenameBranchReq) ReposRenameBranchReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetAppAccessRestrictionsReq returns new OptReposSetAppAccessRestrictionsReq with value set to v.
func NewOptReposSetAppAccessRestrictionsReq(v ReposSetAppAccessRestrictionsReq) OptReposSetAppAccessRestrictionsReq {
	return OptReposSetAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetAppAccessRestrictionsReq is optional ReposSetAppAccessRestrictionsReq.
type OptReposSetAppAccessRestrictionsReq struct {
	Value ReposSetAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetAppAccessRestrictionsReq was set.
func (o OptReposSetAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetAppAccessRestrictionsReq) Reset() {
	var v ReposSetAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetAppAccessRestrictionsReq) SetTo(v ReposSetAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetAppAccessRestrictionsReq) Get() (v ReposSetAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetAppAccessRestrictionsReq) Or(d ReposSetAppAccessRestrictionsReq) ReposSetAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetStatusCheckContextsReq returns new OptReposSetStatusCheckContextsReq with value set to v.
func NewOptReposSetStatusCheckContextsReq(v ReposSetStatusCheckContextsReq) OptReposSetStatusCheckContextsReq {
	return OptReposSetStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetStatusCheckContextsReq is optional ReposSetStatusCheckContextsReq.
type OptReposSetStatusCheckContextsReq struct {
	Value ReposSetStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposSetStatusCheckContextsReq was set.
func (o OptReposSetStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetStatusCheckContextsReq) Reset() {
	var v ReposSetStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetStatusCheckContextsReq) SetTo(v ReposSetStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetStatusCheckContextsReq) Get() (v ReposSetStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetStatusCheckContextsReq) Or(d ReposSetStatusCheckContextsReq) ReposSetStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetTeamAccessRestrictionsReq returns new OptReposSetTeamAccessRestrictionsReq with value set to v.
func NewOptReposSetTeamAccessRestrictionsReq(v ReposSetTeamAccessRestrictionsReq) OptReposSetTeamAccessRestrictionsReq {
	return OptReposSetTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetTeamAccessRestrictionsReq is optional ReposSetTeamAccessRestrictionsReq.
type OptReposSetTeamAccessRestrictionsReq struct {
	Value ReposSetTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetTeamAccessRestrictionsReq was set.
func (o OptReposSetTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetTeamAccessRestrictionsReq) Reset() {
	var v ReposSetTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetTeamAccessRestrictionsReq) SetTo(v ReposSetTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetTeamAccessRestrictionsReq) Get() (v ReposSetTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetTeamAccessRestrictionsReq) Or(d ReposSetTeamAccessRestrictionsReq) ReposSetTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetUserAccessRestrictionsReq returns new OptReposSetUserAccessRestrictionsReq with value set to v.
func NewOptReposSetUserAccessRestrictionsReq(v ReposSetUserAccessRestrictionsReq) OptReposSetUserAccessRestrictionsReq {
	return OptReposSetUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetUserAccessRestrictionsReq is optional ReposSetUserAccessRestrictionsReq.
type OptReposSetUserAccessRestrictionsReq struct {
	Value ReposSetUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetUserAccessRestrictionsReq was set.
func (o OptReposSetUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetUserAccessRestrictionsReq) Reset() {
	var v ReposSetUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetUserAccessRestrictionsReq) SetTo(v ReposSetUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetUserAccessRestrictionsReq) Get() (v ReposSetUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetUserAccessRestrictionsReq) Or(d ReposSetUserAccessRestrictionsReq) ReposSetUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions returns new OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions with value set to v.
func NewOptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions(v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions {
	return OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions is optional ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions.
type OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions struct {
	Value ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions was set.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Reset() {
	var v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetTo(v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Get() (v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Or(d ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateInvitationReq returns new OptReposUpdateInvitationReq with value set to v.
func NewOptReposUpdateInvitationReq(v ReposUpdateInvitationReq) OptReposUpdateInvitationReq {
	return OptReposUpdateInvitationReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateInvitationReq is optional ReposUpdateInvitationReq.
type OptReposUpdateInvitationReq struct {
	Value ReposUpdateInvitationReq
	Set   bool
}

// IsSet returns true if OptReposUpdateInvitationReq was set.
func (o OptReposUpdateInvitationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateInvitationReq) Reset() {
	var v ReposUpdateInvitationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateInvitationReq) SetTo(v ReposUpdateInvitationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateInvitationReq) Get() (v ReposUpdateInvitationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateInvitationReq) Or(d ReposUpdateInvitationReq) ReposUpdateInvitationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateInvitationReqPermissions returns new OptReposUpdateInvitationReqPermissions with value set to v.
func NewOptReposUpdateInvitationReqPermissions(v ReposUpdateInvitationReqPermissions) OptReposUpdateInvitationReqPermissions {
	return OptReposUpdateInvitationReqPermissions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateInvitationReqPermissions is optional ReposUpdateInvitationReqPermissions.
type OptReposUpdateInvitationReqPermissions struct {
	Value ReposUpdateInvitationReqPermissions
	Set   bool
}

// IsSet returns true if OptReposUpdateInvitationReqPermissions was set.
func (o OptReposUpdateInvitationReqPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateInvitationReqPermissions) Reset() {
	var v ReposUpdateInvitationReqPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateInvitationReqPermissions) SetTo(v ReposUpdateInvitationReqPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateInvitationReqPermissions) Get() (v ReposUpdateInvitationReqPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateInvitationReqPermissions) Or(d ReposUpdateInvitationReqPermissions) ReposUpdateInvitationReqPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdatePullRequestReviewProtectionReq returns new OptReposUpdatePullRequestReviewProtectionReq with value set to v.
func NewOptReposUpdatePullRequestReviewProtectionReq(v ReposUpdatePullRequestReviewProtectionReq) OptReposUpdatePullRequestReviewProtectionReq {
	return OptReposUpdatePullRequestReviewProtectionReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdatePullRequestReviewProtectionReq is optional ReposUpdatePullRequestReviewProtectionReq.
type OptReposUpdatePullRequestReviewProtectionReq struct {
	Value ReposUpdatePullRequestReviewProtectionReq
	Set   bool
}

// IsSet returns true if OptReposUpdatePullRequestReviewProtectionReq was set.
func (o OptReposUpdatePullRequestReviewProtectionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdatePullRequestReviewProtectionReq) Reset() {
	var v ReposUpdatePullRequestReviewProtectionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdatePullRequestReviewProtectionReq) SetTo(v ReposUpdatePullRequestReviewProtectionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdatePullRequestReviewProtectionReq) Get() (v ReposUpdatePullRequestReviewProtectionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdatePullRequestReviewProtectionReq) Or(d ReposUpdatePullRequestReviewProtectionReq) ReposUpdatePullRequestReviewProtectionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions returns new OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions with value set to v.
func NewOptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions(v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions {
	return OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions is optional ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions.
type OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions struct {
	Value ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions was set.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Reset() {
	var v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetTo(v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Get() (v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Or(d ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReleaseAssetReq returns new OptReposUpdateReleaseAssetReq with value set to v.
func NewOptReposUpdateReleaseAssetReq(v ReposUpdateReleaseAssetReq) OptReposUpdateReleaseAssetReq {
	return OptReposUpdateReleaseAssetReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReleaseAssetReq is optional ReposUpdateReleaseAssetReq.
type OptReposUpdateReleaseAssetReq struct {
	Value ReposUpdateReleaseAssetReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReleaseAssetReq was set.
func (o OptReposUpdateReleaseAssetReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReleaseAssetReq) Reset() {
	var v ReposUpdateReleaseAssetReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReleaseAssetReq) SetTo(v ReposUpdateReleaseAssetReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReleaseAssetReq) Get() (v ReposUpdateReleaseAssetReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReleaseAssetReq) Or(d ReposUpdateReleaseAssetReq) ReposUpdateReleaseAssetReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReleaseReq returns new OptReposUpdateReleaseReq with value set to v.
func NewOptReposUpdateReleaseReq(v ReposUpdateReleaseReq) OptReposUpdateReleaseReq {
	return OptReposUpdateReleaseReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReleaseReq is optional ReposUpdateReleaseReq.
type OptReposUpdateReleaseReq struct {
	Value ReposUpdateReleaseReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReleaseReq was set.
func (o OptReposUpdateReleaseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReleaseReq) Reset() {
	var v ReposUpdateReleaseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReleaseReq) SetTo(v ReposUpdateReleaseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReleaseReq) Get() (v ReposUpdateReleaseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReleaseReq) Or(d ReposUpdateReleaseReq) ReposUpdateReleaseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReq returns new OptReposUpdateReq with value set to v.
func NewOptReposUpdateReq(v ReposUpdateReq) OptReposUpdateReq {
	return OptReposUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReq is optional ReposUpdateReq.
type OptReposUpdateReq struct {
	Value ReposUpdateReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReq was set.
func (o OptReposUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReq) Reset() {
	var v ReposUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReq) SetTo(v ReposUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReq) Get() (v ReposUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReq) Or(d ReposUpdateReq) ReposUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqSecurityAndAnalysisAdvancedSecurity returns new OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity with value set to v.
func NewOptReposUpdateReqSecurityAndAnalysisAdvancedSecurity(v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity {
	return OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity is optional ReposUpdateReqSecurityAndAnalysisAdvancedSecurity.
type OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity struct {
	Value ReposUpdateReqSecurityAndAnalysisAdvancedSecurity
	Set   bool
}

// IsSet returns true if OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity was set.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Reset() {
	var v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) SetTo(v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Get() (v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Or(d ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) ReposUpdateReqSecurityAndAnalysisAdvancedSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqSecurityAndAnalysisSecretScanning returns new OptReposUpdateReqSecurityAndAnalysisSecretScanning with value set to v.
func NewOptReposUpdateReqSecurityAndAnalysisSecretScanning(v ReposUpdateReqSecurityAndAnalysisSecretScanning) OptReposUpdateReqSecurityAndAnalysisSecretScanning {
	return OptReposUpdateReqSecurityAndAnalysisSecretScanning{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqSecurityAndAnalysisSecretScanning is optional ReposUpdateReqSecurityAndAnalysisSecretScanning.
type OptReposUpdateReqSecurityAndAnalysisSecretScanning struct {
	Value ReposUpdateReqSecurityAndAnalysisSecretScanning
	Set   bool
}

// IsSet returns true if OptReposUpdateReqSecurityAndAnalysisSecretScanning was set.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqSecurityAndAnalysisSecretScanning) Reset() {
	var v ReposUpdateReqSecurityAndAnalysisSecretScanning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqSecurityAndAnalysisSecretScanning) SetTo(v ReposUpdateReqSecurityAndAnalysisSecretScanning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) Get() (v ReposUpdateReqSecurityAndAnalysisSecretScanning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) Or(d ReposUpdateReqSecurityAndAnalysisSecretScanning) ReposUpdateReqSecurityAndAnalysisSecretScanning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqVisibility returns new OptReposUpdateReqVisibility with value set to v.
func NewOptReposUpdateReqVisibility(v ReposUpdateReqVisibility) OptReposUpdateReqVisibility {
	return OptReposUpdateReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqVisibility is optional ReposUpdateReqVisibility.
type OptReposUpdateReqVisibility struct {
	Value ReposUpdateReqVisibility
	Set   bool
}

// IsSet returns true if OptReposUpdateReqVisibility was set.
func (o OptReposUpdateReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqVisibility) Reset() {
	var v ReposUpdateReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqVisibility) SetTo(v ReposUpdateReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqVisibility) Get() (v ReposUpdateReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqVisibility) Or(d ReposUpdateReqVisibility) ReposUpdateReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateStatusCheckProtectionReq returns new OptReposUpdateStatusCheckProtectionReq with value set to v.
func NewOptReposUpdateStatusCheckProtectionReq(v ReposUpdateStatusCheckProtectionReq) OptReposUpdateStatusCheckProtectionReq {
	return OptReposUpdateStatusCheckProtectionReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateStatusCheckProtectionReq is optional ReposUpdateStatusCheckProtectionReq.
type OptReposUpdateStatusCheckProtectionReq struct {
	Value ReposUpdateStatusCheckProtectionReq
	Set   bool
}

// IsSet returns true if OptReposUpdateStatusCheckProtectionReq was set.
func (o OptReposUpdateStatusCheckProtectionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateStatusCheckProtectionReq) Reset() {
	var v ReposUpdateStatusCheckProtectionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateStatusCheckProtectionReq) SetTo(v ReposUpdateStatusCheckProtectionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateStatusCheckProtectionReq) Get() (v ReposUpdateStatusCheckProtectionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateStatusCheckProtectionReq) Or(d ReposUpdateStatusCheckProtectionReq) ReposUpdateStatusCheckProtectionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookConfigForRepoReq returns new OptReposUpdateWebhookConfigForRepoReq with value set to v.
func NewOptReposUpdateWebhookConfigForRepoReq(v ReposUpdateWebhookConfigForRepoReq) OptReposUpdateWebhookConfigForRepoReq {
	return OptReposUpdateWebhookConfigForRepoReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookConfigForRepoReq is optional ReposUpdateWebhookConfigForRepoReq.
type OptReposUpdateWebhookConfigForRepoReq struct {
	Value ReposUpdateWebhookConfigForRepoReq
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookConfigForRepoReq was set.
func (o OptReposUpdateWebhookConfigForRepoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookConfigForRepoReq) Reset() {
	var v ReposUpdateWebhookConfigForRepoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookConfigForRepoReq) SetTo(v ReposUpdateWebhookConfigForRepoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookConfigForRepoReq) Get() (v ReposUpdateWebhookConfigForRepoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookConfigForRepoReq) Or(d ReposUpdateWebhookConfigForRepoReq) ReposUpdateWebhookConfigForRepoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookReq returns new OptReposUpdateWebhookReq with value set to v.
func NewOptReposUpdateWebhookReq(v ReposUpdateWebhookReq) OptReposUpdateWebhookReq {
	return OptReposUpdateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookReq is optional ReposUpdateWebhookReq.
type OptReposUpdateWebhookReq struct {
	Value ReposUpdateWebhookReq
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookReq was set.
func (o OptReposUpdateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookReq) Reset() {
	var v ReposUpdateWebhookReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookReq) SetTo(v ReposUpdateWebhookReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookReq) Get() (v ReposUpdateWebhookReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookReq) Or(d ReposUpdateWebhookReq) ReposUpdateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookReqConfig returns new OptReposUpdateWebhookReqConfig with value set to v.
func NewOptReposUpdateWebhookReqConfig(v ReposUpdateWebhookReqConfig) OptReposUpdateWebhookReqConfig {
	return OptReposUpdateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookReqConfig is optional ReposUpdateWebhookReqConfig.
type OptReposUpdateWebhookReqConfig struct {
	Value ReposUpdateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookReqConfig was set.
func (o OptReposUpdateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookReqConfig) Reset() {
	var v ReposUpdateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookReqConfig) SetTo(v ReposUpdateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookReqConfig) Get() (v ReposUpdateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookReqConfig) Or(d ReposUpdateWebhookReqConfig) ReposUpdateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepository returns new OptRepository with value set to v.
func NewOptRepository(v Repository) OptRepository {
	return OptRepository{
		Value: v,
		Set:   true,
	}
}

// OptRepository is optional Repository.
type OptRepository struct {
	Value Repository
	Set   bool
}

// IsSet returns true if OptRepository was set.
func (o OptRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepository) Reset() {
	var v Repository
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepository) SetTo(v Repository) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepository) Get() (v Repository, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepository) Or(d Repository) Repository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryPermissions returns new OptRepositoryPermissions with value set to v.
func NewOptRepositoryPermissions(v RepositoryPermissions) OptRepositoryPermissions {
	return OptRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryPermissions is optional RepositoryPermissions.
type OptRepositoryPermissions struct {
	Value RepositoryPermissions
	Set   bool
}

// IsSet returns true if OptRepositoryPermissions was set.
func (o OptRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryPermissions) Reset() {
	var v RepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryPermissions) SetTo(v RepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryPermissions) Get() (v RepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryPermissions) Or(d RepositoryPermissions) RepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryTemplateRepositoryOwner returns new OptRepositoryTemplateRepositoryOwner with value set to v.
func NewOptRepositoryTemplateRepositoryOwner(v RepositoryTemplateRepositoryOwner) OptRepositoryTemplateRepositoryOwner {
	return OptRepositoryTemplateRepositoryOwner{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryTemplateRepositoryOwner is optional RepositoryTemplateRepositoryOwner.
type OptRepositoryTemplateRepositoryOwner struct {
	Value RepositoryTemplateRepositoryOwner
	Set   bool
}

// IsSet returns true if OptRepositoryTemplateRepositoryOwner was set.
func (o OptRepositoryTemplateRepositoryOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryTemplateRepositoryOwner) Reset() {
	var v RepositoryTemplateRepositoryOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryTemplateRepositoryOwner) SetTo(v RepositoryTemplateRepositoryOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryTemplateRepositoryOwner) Get() (v RepositoryTemplateRepositoryOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryTemplateRepositoryOwner) Or(d RepositoryTemplateRepositoryOwner) RepositoryTemplateRepositoryOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryTemplateRepositoryPermissions returns new OptRepositoryTemplateRepositoryPermissions with value set to v.
func NewOptRepositoryTemplateRepositoryPermissions(v RepositoryTemplateRepositoryPermissions) OptRepositoryTemplateRepositoryPermissions {
	return OptRepositoryTemplateRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryTemplateRepositoryPermissions is optional RepositoryTemplateRepositoryPermissions.
type OptRepositoryTemplateRepositoryPermissions struct {
	Value RepositoryTemplateRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptRepositoryTemplateRepositoryPermissions was set.
func (o OptRepositoryTemplateRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryTemplateRepositoryPermissions) Reset() {
	var v RepositoryTemplateRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryTemplateRepositoryPermissions) SetTo(v RepositoryTemplateRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryTemplateRepositoryPermissions) Get() (v RepositoryTemplateRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryTemplateRepositoryPermissions) Or(d RepositoryTemplateRepositoryPermissions) RepositoryTemplateRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReviewCommentSide returns new OptReviewCommentSide with value set to v.
func NewOptReviewCommentSide(v ReviewCommentSide) OptReviewCommentSide {
	return OptReviewCommentSide{
		Value: v,
		Set:   true,
	}
}

// OptReviewCommentSide is optional ReviewCommentSide.
type OptReviewCommentSide struct {
	Value ReviewCommentSide
	Set   bool
}

// IsSet returns true if OptReviewCommentSide was set.
func (o OptReviewCommentSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReviewCommentSide) Reset() {
	var v ReviewCommentSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReviewCommentSide) SetTo(v ReviewCommentSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReviewCommentSide) Get() (v ReviewCommentSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReviewCommentSide) Or(d ReviewCommentSide) ReviewCommentSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRunnerLabelsItemType returns new OptRunnerLabelsItemType with value set to v.
func NewOptRunnerLabelsItemType(v RunnerLabelsItemType) OptRunnerLabelsItemType {
	return OptRunnerLabelsItemType{
		Value: v,
		Set:   true,
	}
}

// OptRunnerLabelsItemType is optional RunnerLabelsItemType.
type OptRunnerLabelsItemType struct {
	Value RunnerLabelsItemType
	Set   bool
}

// IsSet returns true if OptRunnerLabelsItemType was set.
func (o OptRunnerLabelsItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRunnerLabelsItemType) Reset() {
	var v RunnerLabelsItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRunnerLabelsItemType) SetTo(v RunnerLabelsItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRunnerLabelsItemType) Get() (v RunnerLabelsItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRunnerLabelsItemType) Or(d RunnerLabelsItemType) RunnerLabelsItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseGroupMeta returns new OptScimEnterpriseGroupMeta with value set to v.
func NewOptScimEnterpriseGroupMeta(v ScimEnterpriseGroupMeta) OptScimEnterpriseGroupMeta {
	return OptScimEnterpriseGroupMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseGroupMeta is optional ScimEnterpriseGroupMeta.
type OptScimEnterpriseGroupMeta struct {
	Value ScimEnterpriseGroupMeta
	Set   bool
}

// IsSet returns true if OptScimEnterpriseGroupMeta was set.
func (o OptScimEnterpriseGroupMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseGroupMeta) Reset() {
	var v ScimEnterpriseGroupMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseGroupMeta) SetTo(v ScimEnterpriseGroupMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseGroupMeta) Get() (v ScimEnterpriseGroupMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseGroupMeta) Or(d ScimEnterpriseGroupMeta) ScimEnterpriseGroupMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseUserMeta returns new OptScimEnterpriseUserMeta with value set to v.
func NewOptScimEnterpriseUserMeta(v ScimEnterpriseUserMeta) OptScimEnterpriseUserMeta {
	return OptScimEnterpriseUserMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseUserMeta is optional ScimEnterpriseUserMeta.
type OptScimEnterpriseUserMeta struct {
	Value ScimEnterpriseUserMeta
	Set   bool
}

// IsSet returns true if OptScimEnterpriseUserMeta was set.
func (o OptScimEnterpriseUserMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseUserMeta) Reset() {
	var v ScimEnterpriseUserMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseUserMeta) SetTo(v ScimEnterpriseUserMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseUserMeta) Get() (v ScimEnterpriseUserMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseUserMeta) Or(d ScimEnterpriseUserMeta) ScimEnterpriseUserMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseUserName returns new OptScimEnterpriseUserName with value set to v.
func NewOptScimEnterpriseUserName(v ScimEnterpriseUserName) OptScimEnterpriseUserName {
	return OptScimEnterpriseUserName{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseUserName is optional ScimEnterpriseUserName.
type OptScimEnterpriseUserName struct {
	Value ScimEnterpriseUserName
	Set   bool
}

// IsSet returns true if OptScimEnterpriseUserName was set.
func (o OptScimEnterpriseUserName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseUserName) Reset() {
	var v ScimEnterpriseUserName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseUserName) SetTo(v ScimEnterpriseUserName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseUserName) Get() (v ScimEnterpriseUserName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseUserName) Or(d ScimEnterpriseUserName) ScimEnterpriseUserName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimGroupListEnterpriseResourcesItemMeta returns new OptScimGroupListEnterpriseResourcesItemMeta with value set to v.
func NewOptScimGroupListEnterpriseResourcesItemMeta(v ScimGroupListEnterpriseResourcesItemMeta) OptScimGroupListEnterpriseResourcesItemMeta {
	return OptScimGroupListEnterpriseResourcesItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimGroupListEnterpriseResourcesItemMeta is optional ScimGroupListEnterpriseResourcesItemMeta.
type OptScimGroupListEnterpriseResourcesItemMeta struct {
	Value ScimGroupListEnterpriseResourcesItemMeta
	Set   bool
}

// IsSet returns true if OptScimGroupListEnterpriseResourcesItemMeta was set.
func (o OptScimGroupListEnterpriseResourcesItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) Reset() {
	var v ScimGroupListEnterpriseResourcesItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) SetTo(v ScimGroupListEnterpriseResourcesItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimGroupListEnterpriseResourcesItemMeta) Get() (v ScimGroupListEnterpriseResourcesItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimGroupListEnterpriseResourcesItemMeta) Or(d ScimGroupListEnterpriseResourcesItemMeta) ScimGroupListEnterpriseResourcesItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimUserListEnterpriseResourcesItemMeta returns new OptScimUserListEnterpriseResourcesItemMeta with value set to v.
func NewOptScimUserListEnterpriseResourcesItemMeta(v ScimUserListEnterpriseResourcesItemMeta) OptScimUserListEnterpriseResourcesItemMeta {
	return OptScimUserListEnterpriseResourcesItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimUserListEnterpriseResourcesItemMeta is optional ScimUserListEnterpriseResourcesItemMeta.
type OptScimUserListEnterpriseResourcesItemMeta struct {
	Value ScimUserListEnterpriseResourcesItemMeta
	Set   bool
}

// IsSet returns true if OptScimUserListEnterpriseResourcesItemMeta was set.
func (o OptScimUserListEnterpriseResourcesItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimUserListEnterpriseResourcesItemMeta) Reset() {
	var v ScimUserListEnterpriseResourcesItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimUserListEnterpriseResourcesItemMeta) SetTo(v ScimUserListEnterpriseResourcesItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimUserListEnterpriseResourcesItemMeta) Get() (v ScimUserListEnterpriseResourcesItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimUserListEnterpriseResourcesItemMeta) Or(d ScimUserListEnterpriseResourcesItemMeta) ScimUserListEnterpriseResourcesItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimUserListEnterpriseResourcesItemName returns new OptScimUserListEnterpriseResourcesItemName with value set to v.
func NewOptScimUserListEnterpriseResourcesItemName(v ScimUserListEnterpriseResourcesItemName) OptScimUserListEnterpriseResourcesItemName {
	return OptScimUserListEnterpriseResourcesItemName{
		Value: v,
		Set:   true,
	}
}

// OptScimUserListEnterpriseResourcesItemName is optional ScimUserListEnterpriseResourcesItemName.
type OptScimUserListEnterpriseResourcesItemName struct {
	Value ScimUserListEnterpriseResourcesItemName
	Set   bool
}

// IsSet returns true if OptScimUserListEnterpriseResourcesItemName was set.
func (o OptScimUserListEnterpriseResourcesItemName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimUserListEnterpriseResourcesItemName) Reset() {
	var v ScimUserListEnterpriseResourcesItemName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimUserListEnterpriseResourcesItemName) SetTo(v ScimUserListEnterpriseResourcesItemName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimUserListEnterpriseResourcesItemName) Get() (v ScimUserListEnterpriseResourcesItemName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimUserListEnterpriseResourcesItemName) Or(d ScimUserListEnterpriseResourcesItemName) ScimUserListEnterpriseResourcesItemName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCodeOrder returns new OptSearchCodeOrder with value set to v.
func NewOptSearchCodeOrder(v SearchCodeOrder) OptSearchCodeOrder {
	return OptSearchCodeOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchCodeOrder is optional SearchCodeOrder.
type OptSearchCodeOrder struct {
	Value SearchCodeOrder
	Set   bool
}

// IsSet returns true if OptSearchCodeOrder was set.
func (o OptSearchCodeOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCodeOrder) Reset() {
	var v SearchCodeOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCodeOrder) SetTo(v SearchCodeOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCodeOrder) Get() (v SearchCodeOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCodeOrder) Or(d SearchCodeOrder) SearchCodeOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCodeSort returns new OptSearchCodeSort with value set to v.
func NewOptSearchCodeSort(v SearchCodeSort) OptSearchCodeSort {
	return OptSearchCodeSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchCodeSort is optional SearchCodeSort.
type OptSearchCodeSort struct {
	Value SearchCodeSort
	Set   bool
}

// IsSet returns true if OptSearchCodeSort was set.
func (o OptSearchCodeSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCodeSort) Reset() {
	var v SearchCodeSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCodeSort) SetTo(v SearchCodeSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCodeSort) Get() (v SearchCodeSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCodeSort) Or(d SearchCodeSort) SearchCodeSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCommitsOrder returns new OptSearchCommitsOrder with value set to v.
func NewOptSearchCommitsOrder(v SearchCommitsOrder) OptSearchCommitsOrder {
	return OptSearchCommitsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchCommitsOrder is optional SearchCommitsOrder.
type OptSearchCommitsOrder struct {
	Value SearchCommitsOrder
	Set   bool
}

// IsSet returns true if OptSearchCommitsOrder was set.
func (o OptSearchCommitsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCommitsOrder) Reset() {
	var v SearchCommitsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCommitsOrder) SetTo(v SearchCommitsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCommitsOrder) Get() (v SearchCommitsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCommitsOrder) Or(d SearchCommitsOrder) SearchCommitsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCommitsSort returns new OptSearchCommitsSort with value set to v.
func NewOptSearchCommitsSort(v SearchCommitsSort) OptSearchCommitsSort {
	return OptSearchCommitsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchCommitsSort is optional SearchCommitsSort.
type OptSearchCommitsSort struct {
	Value SearchCommitsSort
	Set   bool
}

// IsSet returns true if OptSearchCommitsSort was set.
func (o OptSearchCommitsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCommitsSort) Reset() {
	var v SearchCommitsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCommitsSort) SetTo(v SearchCommitsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCommitsSort) Get() (v SearchCommitsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCommitsSort) Or(d SearchCommitsSort) SearchCommitsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchIssuesAndPullRequestsOrder returns new OptSearchIssuesAndPullRequestsOrder with value set to v.
func NewOptSearchIssuesAndPullRequestsOrder(v SearchIssuesAndPullRequestsOrder) OptSearchIssuesAndPullRequestsOrder {
	return OptSearchIssuesAndPullRequestsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchIssuesAndPullRequestsOrder is optional SearchIssuesAndPullRequestsOrder.
type OptSearchIssuesAndPullRequestsOrder struct {
	Value SearchIssuesAndPullRequestsOrder
	Set   bool
}

// IsSet returns true if OptSearchIssuesAndPullRequestsOrder was set.
func (o OptSearchIssuesAndPullRequestsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchIssuesAndPullRequestsOrder) Reset() {
	var v SearchIssuesAndPullRequestsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchIssuesAndPullRequestsOrder) SetTo(v SearchIssuesAndPullRequestsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchIssuesAndPullRequestsOrder) Get() (v SearchIssuesAndPullRequestsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchIssuesAndPullRequestsOrder) Or(d SearchIssuesAndPullRequestsOrder) SearchIssuesAndPullRequestsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchIssuesAndPullRequestsSort returns new OptSearchIssuesAndPullRequestsSort with value set to v.
func NewOptSearchIssuesAndPullRequestsSort(v SearchIssuesAndPullRequestsSort) OptSearchIssuesAndPullRequestsSort {
	return OptSearchIssuesAndPullRequestsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchIssuesAndPullRequestsSort is optional SearchIssuesAndPullRequestsSort.
type OptSearchIssuesAndPullRequestsSort struct {
	Value SearchIssuesAndPullRequestsSort
	Set   bool
}

// IsSet returns true if OptSearchIssuesAndPullRequestsSort was set.
func (o OptSearchIssuesAndPullRequestsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchIssuesAndPullRequestsSort) Reset() {
	var v SearchIssuesAndPullRequestsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchIssuesAndPullRequestsSort) SetTo(v SearchIssuesAndPullRequestsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchIssuesAndPullRequestsSort) Get() (v SearchIssuesAndPullRequestsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchIssuesAndPullRequestsSort) Or(d SearchIssuesAndPullRequestsSort) SearchIssuesAndPullRequestsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchLabelsOrder returns new OptSearchLabelsOrder with value set to v.
func NewOptSearchLabelsOrder(v SearchLabelsOrder) OptSearchLabelsOrder {
	return OptSearchLabelsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchLabelsOrder is optional SearchLabelsOrder.
type OptSearchLabelsOrder struct {
	Value SearchLabelsOrder
	Set   bool
}

// IsSet returns true if OptSearchLabelsOrder was set.
func (o OptSearchLabelsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchLabelsOrder) Reset() {
	var v SearchLabelsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchLabelsOrder) SetTo(v SearchLabelsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchLabelsOrder) Get() (v SearchLabelsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchLabelsOrder) Or(d SearchLabelsOrder) SearchLabelsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchLabelsSort returns new OptSearchLabelsSort with value set to v.
func NewOptSearchLabelsSort(v SearchLabelsSort) OptSearchLabelsSort {
	return OptSearchLabelsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchLabelsSort is optional SearchLabelsSort.
type OptSearchLabelsSort struct {
	Value SearchLabelsSort
	Set   bool
}

// IsSet returns true if OptSearchLabelsSort was set.
func (o OptSearchLabelsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchLabelsSort) Reset() {
	var v SearchLabelsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchLabelsSort) SetTo(v SearchLabelsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchLabelsSort) Get() (v SearchLabelsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchLabelsSort) Or(d SearchLabelsSort) SearchLabelsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchReposOrder returns new OptSearchReposOrder with value set to v.
func NewOptSearchReposOrder(v SearchReposOrder) OptSearchReposOrder {
	return OptSearchReposOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchReposOrder is optional SearchReposOrder.
type OptSearchReposOrder struct {
	Value SearchReposOrder
	Set   bool
}

// IsSet returns true if OptSearchReposOrder was set.
func (o OptSearchReposOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchReposOrder) Reset() {
	var v SearchReposOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchReposOrder) SetTo(v SearchReposOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchReposOrder) Get() (v SearchReposOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchReposOrder) Or(d SearchReposOrder) SearchReposOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchReposSort returns new OptSearchReposSort with value set to v.
func NewOptSearchReposSort(v SearchReposSort) OptSearchReposSort {
	return OptSearchReposSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchReposSort is optional SearchReposSort.
type OptSearchReposSort struct {
	Value SearchReposSort
	Set   bool
}

// IsSet returns true if OptSearchReposSort was set.
func (o OptSearchReposSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchReposSort) Reset() {
	var v SearchReposSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchReposSort) SetTo(v SearchReposSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchReposSort) Get() (v SearchReposSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchReposSort) Or(d SearchReposSort) SearchReposSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchUsersOrder returns new OptSearchUsersOrder with value set to v.
func NewOptSearchUsersOrder(v SearchUsersOrder) OptSearchUsersOrder {
	return OptSearchUsersOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchUsersOrder is optional SearchUsersOrder.
type OptSearchUsersOrder struct {
	Value SearchUsersOrder
	Set   bool
}

// IsSet returns true if OptSearchUsersOrder was set.
func (o OptSearchUsersOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchUsersOrder) Reset() {
	var v SearchUsersOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchUsersOrder) SetTo(v SearchUsersOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchUsersOrder) Get() (v SearchUsersOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchUsersOrder) Or(d SearchUsersOrder) SearchUsersOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchUsersSort returns new OptSearchUsersSort with value set to v.
func NewOptSearchUsersSort(v SearchUsersSort) OptSearchUsersSort {
	return OptSearchUsersSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchUsersSort is optional SearchUsersSort.
type OptSearchUsersSort struct {
	Value SearchUsersSort
	Set   bool
}

// IsSet returns true if OptSearchUsersSort was set.
func (o OptSearchUsersSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchUsersSort) Reset() {
	var v SearchUsersSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchUsersSort) SetTo(v SearchUsersSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchUsersSort) Get() (v SearchUsersSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchUsersSort) Or(d SearchUsersSort) SearchUsersSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningAlertState returns new OptSecretScanningAlertState with value set to v.
func NewOptSecretScanningAlertState(v SecretScanningAlertState) OptSecretScanningAlertState {
	return OptSecretScanningAlertState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningAlertState is optional SecretScanningAlertState.
type OptSecretScanningAlertState struct {
	Value SecretScanningAlertState
	Set   bool
}

// IsSet returns true if OptSecretScanningAlertState was set.
func (o OptSecretScanningAlertState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningAlertState) Reset() {
	var v SecretScanningAlertState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningAlertState) SetTo(v SecretScanningAlertState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningAlertState) Get() (v SecretScanningAlertState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningAlertState) Or(d SecretScanningAlertState) SecretScanningAlertState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningListAlertsForOrgState returns new OptSecretScanningListAlertsForOrgState with value set to v.
func NewOptSecretScanningListAlertsForOrgState(v SecretScanningListAlertsForOrgState) OptSecretScanningListAlertsForOrgState {
	return OptSecretScanningListAlertsForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningListAlertsForOrgState is optional SecretScanningListAlertsForOrgState.
type OptSecretScanningListAlertsForOrgState struct {
	Value SecretScanningListAlertsForOrgState
	Set   bool
}

// IsSet returns true if OptSecretScanningListAlertsForOrgState was set.
func (o OptSecretScanningListAlertsForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningListAlertsForOrgState) Reset() {
	var v SecretScanningListAlertsForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningListAlertsForOrgState) SetTo(v SecretScanningListAlertsForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningListAlertsForOrgState) Get() (v SecretScanningListAlertsForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningListAlertsForOrgState) Or(d SecretScanningListAlertsForOrgState) SecretScanningListAlertsForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningListAlertsForRepoState returns new OptSecretScanningListAlertsForRepoState with value set to v.
func NewOptSecretScanningListAlertsForRepoState(v SecretScanningListAlertsForRepoState) OptSecretScanningListAlertsForRepoState {
	return OptSecretScanningListAlertsForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningListAlertsForRepoState is optional SecretScanningListAlertsForRepoState.
type OptSecretScanningListAlertsForRepoState struct {
	Value SecretScanningListAlertsForRepoState
	Set   bool
}

// IsSet returns true if OptSecretScanningListAlertsForRepoState was set.
func (o OptSecretScanningListAlertsForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningListAlertsForRepoState) Reset() {
	var v SecretScanningListAlertsForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningListAlertsForRepoState) SetTo(v SecretScanningListAlertsForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningListAlertsForRepoState) Get() (v SecretScanningListAlertsForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningListAlertsForRepoState) Or(d SecretScanningListAlertsForRepoState) SecretScanningListAlertsForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSelectedActions returns new OptSelectedActions with value set to v.
func NewOptSelectedActions(v SelectedActions) OptSelectedActions {
	return OptSelectedActions{
		Value: v,
		Set:   true,
	}
}

// OptSelectedActions is optional SelectedActions.
type OptSelectedActions struct {
	Value SelectedActions
	Set   bool
}

// IsSet returns true if OptSelectedActions was set.
func (o OptSelectedActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSelectedActions) Reset() {
	var v SelectedActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSelectedActions) SetTo(v SelectedActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSelectedActions) Get() (v SelectedActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSelectedActions) Or(d SelectedActions) SelectedActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSelectedActionsURL returns new OptSelectedActionsURL with value set to v.
func NewOptSelectedActionsURL(v SelectedActionsURL) OptSelectedActionsURL {
	return OptSelectedActionsURL{
		Value: v,
		Set:   true,
	}
}

// OptSelectedActionsURL is optional SelectedActionsURL.
type OptSelectedActionsURL struct {
	Value SelectedActionsURL
	Set   bool
}

// IsSet returns true if OptSelectedActionsURL was set.
func (o OptSelectedActionsURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSelectedActionsURL) Reset() {
	var v SelectedActionsURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSelectedActionsURL) SetTo(v SelectedActionsURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSelectedActionsURL) Get() (v SelectedActionsURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSelectedActionsURL) Or(d SelectedActionsURL) SelectedActionsURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSimpleUser returns new OptSimpleUser with value set to v.
func NewOptSimpleUser(v SimpleUser) OptSimpleUser {
	return OptSimpleUser{
		Value: v,
		Set:   true,
	}
}

// OptSimpleUser is optional SimpleUser.
type OptSimpleUser struct {
	Value SimpleUser
	Set   bool
}

// IsSet returns true if OptSimpleUser was set.
func (o OptSimpleUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSimpleUser) Reset() {
	var v SimpleUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSimpleUser) SetTo(v SimpleUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSimpleUser) Get() (v SimpleUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSimpleUser) Or(d SimpleUser) SimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatusCheckPolicy returns new OptStatusCheckPolicy with value set to v.
func NewOptStatusCheckPolicy(v StatusCheckPolicy) OptStatusCheckPolicy {
	return OptStatusCheckPolicy{
		Value: v,
		Set:   true,
	}
}

// OptStatusCheckPolicy is optional StatusCheckPolicy.
type OptStatusCheckPolicy struct {
	Value StatusCheckPolicy
	Set   bool
}

// IsSet returns true if OptStatusCheckPolicy was set.
func (o OptStatusCheckPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatusCheckPolicy) Reset() {
	var v StatusCheckPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatusCheckPolicy) SetTo(v StatusCheckPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatusCheckPolicy) Get() (v StatusCheckPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatusCheckPolicy) Or(d StatusCheckPolicy) StatusCheckPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeam returns new OptTeam with value set to v.
func NewOptTeam(v Team) OptTeam {
	return OptTeam{
		Value: v,
		Set:   true,
	}
}

// OptTeam is optional Team.
type OptTeam struct {
	Value Team
	Set   bool
}

// IsSet returns true if OptTeam was set.
func (o OptTeam) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeam) Reset() {
	var v Team
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeam) SetTo(v Team) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeam) Get() (v Team, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeam) Or(d Team) Team {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamFullPrivacy returns new OptTeamFullPrivacy with value set to v.
func NewOptTeamFullPrivacy(v TeamFullPrivacy) OptTeamFullPrivacy {
	return OptTeamFullPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamFullPrivacy is optional TeamFullPrivacy.
type OptTeamFullPrivacy struct {
	Value TeamFullPrivacy
	Set   bool
}

// IsSet returns true if OptTeamFullPrivacy was set.
func (o OptTeamFullPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamFullPrivacy) Reset() {
	var v TeamFullPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamFullPrivacy) SetTo(v TeamFullPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamFullPrivacy) Get() (v TeamFullPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamFullPrivacy) Or(d TeamFullPrivacy) TeamFullPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamPermissions returns new OptTeamPermissions with value set to v.
func NewOptTeamPermissions(v TeamPermissions) OptTeamPermissions {
	return OptTeamPermissions{
		Value: v,
		Set:   true,
	}
}

// OptTeamPermissions is optional TeamPermissions.
type OptTeamPermissions struct {
	Value TeamPermissions
	Set   bool
}

// IsSet returns true if OptTeamPermissions was set.
func (o OptTeamPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamPermissions) Reset() {
	var v TeamPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamPermissions) SetTo(v TeamPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamPermissions) Get() (v TeamPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamPermissions) Or(d TeamPermissions) TeamPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamRepositoryPermissions returns new OptTeamRepositoryPermissions with value set to v.
func NewOptTeamRepositoryPermissions(v TeamRepositoryPermissions) OptTeamRepositoryPermissions {
	return OptTeamRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptTeamRepositoryPermissions is optional TeamRepositoryPermissions.
type OptTeamRepositoryPermissions struct {
	Value TeamRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptTeamRepositoryPermissions was set.
func (o OptTeamRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamRepositoryPermissions) Reset() {
	var v TeamRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamRepositoryPermissions) SetTo(v TeamRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamRepositoryPermissions) Get() (v TeamRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamRepositoryPermissions) Or(d TeamRepositoryPermissions) TeamRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserInOrgReq returns new OptTeamsAddOrUpdateMembershipForUserInOrgReq with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserInOrgReq(v TeamsAddOrUpdateMembershipForUserInOrgReq) OptTeamsAddOrUpdateMembershipForUserInOrgReq {
	return OptTeamsAddOrUpdateMembershipForUserInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserInOrgReq is optional TeamsAddOrUpdateMembershipForUserInOrgReq.
type OptTeamsAddOrUpdateMembershipForUserInOrgReq struct {
	Value TeamsAddOrUpdateMembershipForUserInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserInOrgReq was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReq) Reset() {
	var v TeamsAddOrUpdateMembershipForUserInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReq) SetTo(v TeamsAddOrUpdateMembershipForUserInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) Get() (v TeamsAddOrUpdateMembershipForUserInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) Or(d TeamsAddOrUpdateMembershipForUserInOrgReq) TeamsAddOrUpdateMembershipForUserInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserInOrgReqRole returns new OptTeamsAddOrUpdateMembershipForUserInOrgReqRole with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserInOrgReqRole(v TeamsAddOrUpdateMembershipForUserInOrgReqRole) OptTeamsAddOrUpdateMembershipForUserInOrgReqRole {
	return OptTeamsAddOrUpdateMembershipForUserInOrgReqRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserInOrgReqRole is optional TeamsAddOrUpdateMembershipForUserInOrgReqRole.
type OptTeamsAddOrUpdateMembershipForUserInOrgReqRole struct {
	Value TeamsAddOrUpdateMembershipForUserInOrgReqRole
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserInOrgReqRole was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Reset() {
	var v TeamsAddOrUpdateMembershipForUserInOrgReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) SetTo(v TeamsAddOrUpdateMembershipForUserInOrgReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Get() (v TeamsAddOrUpdateMembershipForUserInOrgReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Or(d TeamsAddOrUpdateMembershipForUserInOrgReqRole) TeamsAddOrUpdateMembershipForUserInOrgReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserLegacyReq returns new OptTeamsAddOrUpdateMembershipForUserLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserLegacyReq(v TeamsAddOrUpdateMembershipForUserLegacyReq) OptTeamsAddOrUpdateMembershipForUserLegacyReq {
	return OptTeamsAddOrUpdateMembershipForUserLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserLegacyReq is optional TeamsAddOrUpdateMembershipForUserLegacyReq.
type OptTeamsAddOrUpdateMembershipForUserLegacyReq struct {
	Value TeamsAddOrUpdateMembershipForUserLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserLegacyReq was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReq) Reset() {
	var v TeamsAddOrUpdateMembershipForUserLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReq) SetTo(v TeamsAddOrUpdateMembershipForUserLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) Get() (v TeamsAddOrUpdateMembershipForUserLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) Or(d TeamsAddOrUpdateMembershipForUserLegacyReq) TeamsAddOrUpdateMembershipForUserLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserLegacyReqRole returns new OptTeamsAddOrUpdateMembershipForUserLegacyReqRole with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserLegacyReqRole(v TeamsAddOrUpdateMembershipForUserLegacyReqRole) OptTeamsAddOrUpdateMembershipForUserLegacyReqRole {
	return OptTeamsAddOrUpdateMembershipForUserLegacyReqRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserLegacyReqRole is optional TeamsAddOrUpdateMembershipForUserLegacyReqRole.
type OptTeamsAddOrUpdateMembershipForUserLegacyReqRole struct {
	Value TeamsAddOrUpdateMembershipForUserLegacyReqRole
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserLegacyReqRole was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Reset() {
	var v TeamsAddOrUpdateMembershipForUserLegacyReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) SetTo(v TeamsAddOrUpdateMembershipForUserLegacyReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Get() (v TeamsAddOrUpdateMembershipForUserLegacyReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Or(d TeamsAddOrUpdateMembershipForUserLegacyReqRole) TeamsAddOrUpdateMembershipForUserLegacyReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission returns new OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission(v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission {
	return OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission is optional TeamsAddOrUpdateProjectPermissionsInOrgReqPermission.
type OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission struct {
	Value TeamsAddOrUpdateProjectPermissionsInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission was set.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) SetTo(v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Get() (v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Or(d TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) TeamsAddOrUpdateProjectPermissionsInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsLegacyReq returns new OptTeamsAddOrUpdateProjectPermissionsLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsLegacyReq(v TeamsAddOrUpdateProjectPermissionsLegacyReq) OptTeamsAddOrUpdateProjectPermissionsLegacyReq {
	return OptTeamsAddOrUpdateProjectPermissionsLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsLegacyReq is optional TeamsAddOrUpdateProjectPermissionsLegacyReq.
type OptTeamsAddOrUpdateProjectPermissionsLegacyReq struct {
	Value TeamsAddOrUpdateProjectPermissionsLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsLegacyReq was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReq) SetTo(v TeamsAddOrUpdateProjectPermissionsLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Get() (v TeamsAddOrUpdateProjectPermissionsLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Or(d TeamsAddOrUpdateProjectPermissionsLegacyReq) TeamsAddOrUpdateProjectPermissionsLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission returns new OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission(v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission {
	return OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission is optional TeamsAddOrUpdateProjectPermissionsLegacyReqPermission.
type OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission struct {
	Value TeamsAddOrUpdateProjectPermissionsLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) SetTo(v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Get() (v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Or(d TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) TeamsAddOrUpdateProjectPermissionsLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsInOrgReq returns new OptTeamsAddOrUpdateRepoPermissionsInOrgReq with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsInOrgReq(v TeamsAddOrUpdateRepoPermissionsInOrgReq) OptTeamsAddOrUpdateRepoPermissionsInOrgReq {
	return OptTeamsAddOrUpdateRepoPermissionsInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsInOrgReq is optional TeamsAddOrUpdateRepoPermissionsInOrgReq.
type OptTeamsAddOrUpdateRepoPermissionsInOrgReq struct {
	Value TeamsAddOrUpdateRepoPermissionsInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsInOrgReq was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReq) SetTo(v TeamsAddOrUpdateRepoPermissionsInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Get() (v TeamsAddOrUpdateRepoPermissionsInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Or(d TeamsAddOrUpdateRepoPermissionsInOrgReq) TeamsAddOrUpdateRepoPermissionsInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission returns new OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission(v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission {
	return OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission is optional TeamsAddOrUpdateRepoPermissionsInOrgReqPermission.
type OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission struct {
	Value TeamsAddOrUpdateRepoPermissionsInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) SetTo(v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Get() (v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Or(d TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) TeamsAddOrUpdateRepoPermissionsInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsLegacyReq returns new OptTeamsAddOrUpdateRepoPermissionsLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsLegacyReq(v TeamsAddOrUpdateRepoPermissionsLegacyReq) OptTeamsAddOrUpdateRepoPermissionsLegacyReq {
	return OptTeamsAddOrUpdateRepoPermissionsLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsLegacyReq is optional TeamsAddOrUpdateRepoPermissionsLegacyReq.
type OptTeamsAddOrUpdateRepoPermissionsLegacyReq struct {
	Value TeamsAddOrUpdateRepoPermissionsLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsLegacyReq was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReq) SetTo(v TeamsAddOrUpdateRepoPermissionsLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Get() (v TeamsAddOrUpdateRepoPermissionsLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Or(d TeamsAddOrUpdateRepoPermissionsLegacyReq) TeamsAddOrUpdateRepoPermissionsLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission returns new OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission(v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission {
	return OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission is optional TeamsAddOrUpdateRepoPermissionsLegacyReqPermission.
type OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission struct {
	Value TeamsAddOrUpdateRepoPermissionsLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) SetTo(v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Get() (v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Or(d TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) TeamsAddOrUpdateRepoPermissionsLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsCreateReqPermission returns new OptTeamsCreateReqPermission with value set to v.
func NewOptTeamsCreateReqPermission(v TeamsCreateReqPermission) OptTeamsCreateReqPermission {
	return OptTeamsCreateReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsCreateReqPermission is optional TeamsCreateReqPermission.
type OptTeamsCreateReqPermission struct {
	Value TeamsCreateReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsCreateReqPermission was set.
func (o OptTeamsCreateReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsCreateReqPermission) Reset() {
	var v TeamsCreateReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsCreateReqPermission) SetTo(v TeamsCreateReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsCreateReqPermission) Get() (v TeamsCreateReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsCreateReqPermission) Or(d TeamsCreateReqPermission) TeamsCreateReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsCreateReqPrivacy returns new OptTeamsCreateReqPrivacy with value set to v.
func NewOptTeamsCreateReqPrivacy(v TeamsCreateReqPrivacy) OptTeamsCreateReqPrivacy {
	return OptTeamsCreateReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsCreateReqPrivacy is optional TeamsCreateReqPrivacy.
type OptTeamsCreateReqPrivacy struct {
	Value TeamsCreateReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsCreateReqPrivacy was set.
func (o OptTeamsCreateReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsCreateReqPrivacy) Reset() {
	var v TeamsCreateReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsCreateReqPrivacy) SetTo(v TeamsCreateReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsCreateReqPrivacy) Get() (v TeamsCreateReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsCreateReqPrivacy) Or(d TeamsCreateReqPrivacy) TeamsCreateReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionCommentsInOrgDirection returns new OptTeamsListDiscussionCommentsInOrgDirection with value set to v.
func NewOptTeamsListDiscussionCommentsInOrgDirection(v TeamsListDiscussionCommentsInOrgDirection) OptTeamsListDiscussionCommentsInOrgDirection {
	return OptTeamsListDiscussionCommentsInOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionCommentsInOrgDirection is optional TeamsListDiscussionCommentsInOrgDirection.
type OptTeamsListDiscussionCommentsInOrgDirection struct {
	Value TeamsListDiscussionCommentsInOrgDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionCommentsInOrgDirection was set.
func (o OptTeamsListDiscussionCommentsInOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionCommentsInOrgDirection) Reset() {
	var v TeamsListDiscussionCommentsInOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionCommentsInOrgDirection) SetTo(v TeamsListDiscussionCommentsInOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionCommentsInOrgDirection) Get() (v TeamsListDiscussionCommentsInOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionCommentsInOrgDirection) Or(d TeamsListDiscussionCommentsInOrgDirection) TeamsListDiscussionCommentsInOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionCommentsLegacyDirection returns new OptTeamsListDiscussionCommentsLegacyDirection with value set to v.
func NewOptTeamsListDiscussionCommentsLegacyDirection(v TeamsListDiscussionCommentsLegacyDirection) OptTeamsListDiscussionCommentsLegacyDirection {
	return OptTeamsListDiscussionCommentsLegacyDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionCommentsLegacyDirection is optional TeamsListDiscussionCommentsLegacyDirection.
type OptTeamsListDiscussionCommentsLegacyDirection struct {
	Value TeamsListDiscussionCommentsLegacyDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionCommentsLegacyDirection was set.
func (o OptTeamsListDiscussionCommentsLegacyDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionCommentsLegacyDirection) Reset() {
	var v TeamsListDiscussionCommentsLegacyDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionCommentsLegacyDirection) SetTo(v TeamsListDiscussionCommentsLegacyDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionCommentsLegacyDirection) Get() (v TeamsListDiscussionCommentsLegacyDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionCommentsLegacyDirection) Or(d TeamsListDiscussionCommentsLegacyDirection) TeamsListDiscussionCommentsLegacyDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionsInOrgDirection returns new OptTeamsListDiscussionsInOrgDirection with value set to v.
func NewOptTeamsListDiscussionsInOrgDirection(v TeamsListDiscussionsInOrgDirection) OptTeamsListDiscussionsInOrgDirection {
	return OptTeamsListDiscussionsInOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionsInOrgDirection is optional TeamsListDiscussionsInOrgDirection.
type OptTeamsListDiscussionsInOrgDirection struct {
	Value TeamsListDiscussionsInOrgDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionsInOrgDirection was set.
func (o OptTeamsListDiscussionsInOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionsInOrgDirection) Reset() {
	var v TeamsListDiscussionsInOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionsInOrgDirection) SetTo(v TeamsListDiscussionsInOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionsInOrgDirection) Get() (v TeamsListDiscussionsInOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionsInOrgDirection) Or(d TeamsListDiscussionsInOrgDirection) TeamsListDiscussionsInOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionsLegacyDirection returns new OptTeamsListDiscussionsLegacyDirection with value set to v.
func NewOptTeamsListDiscussionsLegacyDirection(v TeamsListDiscussionsLegacyDirection) OptTeamsListDiscussionsLegacyDirection {
	return OptTeamsListDiscussionsLegacyDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionsLegacyDirection is optional TeamsListDiscussionsLegacyDirection.
type OptTeamsListDiscussionsLegacyDirection struct {
	Value TeamsListDiscussionsLegacyDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionsLegacyDirection was set.
func (o OptTeamsListDiscussionsLegacyDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionsLegacyDirection) Reset() {
	var v TeamsListDiscussionsLegacyDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionsLegacyDirection) SetTo(v TeamsListDiscussionsLegacyDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionsLegacyDirection) Get() (v TeamsListDiscussionsLegacyDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionsLegacyDirection) Or(d TeamsListDiscussionsLegacyDirection) TeamsListDiscussionsLegacyDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListMembersInOrgRole returns new OptTeamsListMembersInOrgRole with value set to v.
func NewOptTeamsListMembersInOrgRole(v TeamsListMembersInOrgRole) OptTeamsListMembersInOrgRole {
	return OptTeamsListMembersInOrgRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListMembersInOrgRole is optional TeamsListMembersInOrgRole.
type OptTeamsListMembersInOrgRole struct {
	Value TeamsListMembersInOrgRole
	Set   bool
}

// IsSet returns true if OptTeamsListMembersInOrgRole was set.
func (o OptTeamsListMembersInOrgRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListMembersInOrgRole) Reset() {
	var v TeamsListMembersInOrgRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListMembersInOrgRole) SetTo(v TeamsListMembersInOrgRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListMembersInOrgRole) Get() (v TeamsListMembersInOrgRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListMembersInOrgRole) Or(d TeamsListMembersInOrgRole) TeamsListMembersInOrgRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListMembersLegacyRole returns new OptTeamsListMembersLegacyRole with value set to v.
func NewOptTeamsListMembersLegacyRole(v TeamsListMembersLegacyRole) OptTeamsListMembersLegacyRole {
	return OptTeamsListMembersLegacyRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListMembersLegacyRole is optional TeamsListMembersLegacyRole.
type OptTeamsListMembersLegacyRole struct {
	Value TeamsListMembersLegacyRole
	Set   bool
}

// IsSet returns true if OptTeamsListMembersLegacyRole was set.
func (o OptTeamsListMembersLegacyRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListMembersLegacyRole) Reset() {
	var v TeamsListMembersLegacyRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListMembersLegacyRole) SetTo(v TeamsListMembersLegacyRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListMembersLegacyRole) Get() (v TeamsListMembersLegacyRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListMembersLegacyRole) Or(d TeamsListMembersLegacyRole) TeamsListMembersLegacyRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateDiscussionInOrgReq returns new OptTeamsUpdateDiscussionInOrgReq with value set to v.
func NewOptTeamsUpdateDiscussionInOrgReq(v TeamsUpdateDiscussionInOrgReq) OptTeamsUpdateDiscussionInOrgReq {
	return OptTeamsUpdateDiscussionInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateDiscussionInOrgReq is optional TeamsUpdateDiscussionInOrgReq.
type OptTeamsUpdateDiscussionInOrgReq struct {
	Value TeamsUpdateDiscussionInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateDiscussionInOrgReq was set.
func (o OptTeamsUpdateDiscussionInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateDiscussionInOrgReq) Reset() {
	var v TeamsUpdateDiscussionInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateDiscussionInOrgReq) SetTo(v TeamsUpdateDiscussionInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateDiscussionInOrgReq) Get() (v TeamsUpdateDiscussionInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateDiscussionInOrgReq) Or(d TeamsUpdateDiscussionInOrgReq) TeamsUpdateDiscussionInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateDiscussionLegacyReq returns new OptTeamsUpdateDiscussionLegacyReq with value set to v.
func NewOptTeamsUpdateDiscussionLegacyReq(v TeamsUpdateDiscussionLegacyReq) OptTeamsUpdateDiscussionLegacyReq {
	return OptTeamsUpdateDiscussionLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateDiscussionLegacyReq is optional TeamsUpdateDiscussionLegacyReq.
type OptTeamsUpdateDiscussionLegacyReq struct {
	Value TeamsUpdateDiscussionLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateDiscussionLegacyReq was set.
func (o OptTeamsUpdateDiscussionLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateDiscussionLegacyReq) Reset() {
	var v TeamsUpdateDiscussionLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateDiscussionLegacyReq) SetTo(v TeamsUpdateDiscussionLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateDiscussionLegacyReq) Get() (v TeamsUpdateDiscussionLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateDiscussionLegacyReq) Or(d TeamsUpdateDiscussionLegacyReq) TeamsUpdateDiscussionLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReq returns new OptTeamsUpdateInOrgReq with value set to v.
func NewOptTeamsUpdateInOrgReq(v TeamsUpdateInOrgReq) OptTeamsUpdateInOrgReq {
	return OptTeamsUpdateInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReq is optional TeamsUpdateInOrgReq.
type OptTeamsUpdateInOrgReq struct {
	Value TeamsUpdateInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReq was set.
func (o OptTeamsUpdateInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReq) Reset() {
	var v TeamsUpdateInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReq) SetTo(v TeamsUpdateInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReq) Get() (v TeamsUpdateInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReq) Or(d TeamsUpdateInOrgReq) TeamsUpdateInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReqPermission returns new OptTeamsUpdateInOrgReqPermission with value set to v.
func NewOptTeamsUpdateInOrgReqPermission(v TeamsUpdateInOrgReqPermission) OptTeamsUpdateInOrgReqPermission {
	return OptTeamsUpdateInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReqPermission is optional TeamsUpdateInOrgReqPermission.
type OptTeamsUpdateInOrgReqPermission struct {
	Value TeamsUpdateInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReqPermission was set.
func (o OptTeamsUpdateInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReqPermission) Reset() {
	var v TeamsUpdateInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReqPermission) SetTo(v TeamsUpdateInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReqPermission) Get() (v TeamsUpdateInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReqPermission) Or(d TeamsUpdateInOrgReqPermission) TeamsUpdateInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReqPrivacy returns new OptTeamsUpdateInOrgReqPrivacy with value set to v.
func NewOptTeamsUpdateInOrgReqPrivacy(v TeamsUpdateInOrgReqPrivacy) OptTeamsUpdateInOrgReqPrivacy {
	return OptTeamsUpdateInOrgReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReqPrivacy is optional TeamsUpdateInOrgReqPrivacy.
type OptTeamsUpdateInOrgReqPrivacy struct {
	Value TeamsUpdateInOrgReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReqPrivacy was set.
func (o OptTeamsUpdateInOrgReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReqPrivacy) Reset() {
	var v TeamsUpdateInOrgReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReqPrivacy) SetTo(v TeamsUpdateInOrgReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReqPrivacy) Get() (v TeamsUpdateInOrgReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReqPrivacy) Or(d TeamsUpdateInOrgReqPrivacy) TeamsUpdateInOrgReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateLegacyReqPermission returns new OptTeamsUpdateLegacyReqPermission with value set to v.
func NewOptTeamsUpdateLegacyReqPermission(v TeamsUpdateLegacyReqPermission) OptTeamsUpdateLegacyReqPermission {
	return OptTeamsUpdateLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateLegacyReqPermission is optional TeamsUpdateLegacyReqPermission.
type OptTeamsUpdateLegacyReqPermission struct {
	Value TeamsUpdateLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsUpdateLegacyReqPermission was set.
func (o OptTeamsUpdateLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateLegacyReqPermission) Reset() {
	var v TeamsUpdateLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateLegacyReqPermission) SetTo(v TeamsUpdateLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateLegacyReqPermission) Get() (v TeamsUpdateLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateLegacyReqPermission) Or(d TeamsUpdateLegacyReqPermission) TeamsUpdateLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateLegacyReqPrivacy returns new OptTeamsUpdateLegacyReqPrivacy with value set to v.
func NewOptTeamsUpdateLegacyReqPrivacy(v TeamsUpdateLegacyReqPrivacy) OptTeamsUpdateLegacyReqPrivacy {
	return OptTeamsUpdateLegacyReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateLegacyReqPrivacy is optional TeamsUpdateLegacyReqPrivacy.
type OptTeamsUpdateLegacyReqPrivacy struct {
	Value TeamsUpdateLegacyReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsUpdateLegacyReqPrivacy was set.
func (o OptTeamsUpdateLegacyReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateLegacyReqPrivacy) Reset() {
	var v TeamsUpdateLegacyReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateLegacyReqPrivacy) SetTo(v TeamsUpdateLegacyReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateLegacyReqPrivacy) Get() (v TeamsUpdateLegacyReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateLegacyReqPrivacy) Or(d TeamsUpdateLegacyReqPrivacy) TeamsUpdateLegacyReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTopicSearchResultItemAliasesItemTopicRelation returns new OptTopicSearchResultItemAliasesItemTopicRelation with value set to v.
func NewOptTopicSearchResultItemAliasesItemTopicRelation(v TopicSearchResultItemAliasesItemTopicRelation) OptTopicSearchResultItemAliasesItemTopicRelation {
	return OptTopicSearchResultItemAliasesItemTopicRelation{
		Value: v,
		Set:   true,
	}
}

// OptTopicSearchResultItemAliasesItemTopicRelation is optional TopicSearchResultItemAliasesItemTopicRelation.
type OptTopicSearchResultItemAliasesItemTopicRelation struct {
	Value TopicSearchResultItemAliasesItemTopicRelation
	Set   bool
}

// IsSet returns true if OptTopicSearchResultItemAliasesItemTopicRelation was set.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTopicSearchResultItemAliasesItemTopicRelation) Reset() {
	var v TopicSearchResultItemAliasesItemTopicRelation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTopicSearchResultItemAliasesItemTopicRelation) SetTo(v TopicSearchResultItemAliasesItemTopicRelation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) Get() (v TopicSearchResultItemAliasesItemTopicRelation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) Or(d TopicSearchResultItemAliasesItemTopicRelation) TopicSearchResultItemAliasesItemTopicRelation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTopicSearchResultItemRelatedItemTopicRelation returns new OptTopicSearchResultItemRelatedItemTopicRelation with value set to v.
func NewOptTopicSearchResultItemRelatedItemTopicRelation(v TopicSearchResultItemRelatedItemTopicRelation) OptTopicSearchResultItemRelatedItemTopicRelation {
	return OptTopicSearchResultItemRelatedItemTopicRelation{
		Value: v,
		Set:   true,
	}
}

// OptTopicSearchResultItemRelatedItemTopicRelation is optional TopicSearchResultItemRelatedItemTopicRelation.
type OptTopicSearchResultItemRelatedItemTopicRelation struct {
	Value TopicSearchResultItemRelatedItemTopicRelation
	Set   bool
}

// IsSet returns true if OptTopicSearchResultItemRelatedItemTopicRelation was set.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTopicSearchResultItemRelatedItemTopicRelation) Reset() {
	var v TopicSearchResultItemRelatedItemTopicRelation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTopicSearchResultItemRelatedItemTopicRelation) SetTo(v TopicSearchResultItemRelatedItemTopicRelation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) Get() (v TopicSearchResultItemRelatedItemTopicRelation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) Or(d TopicSearchResultItemRelatedItemTopicRelation) TopicSearchResultItemRelatedItemTopicRelation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersAddEmailForAuthenticatedReq returns new OptUsersAddEmailForAuthenticatedReq with value set to v.
func NewOptUsersAddEmailForAuthenticatedReq(v UsersAddEmailForAuthenticatedReq) OptUsersAddEmailForAuthenticatedReq {
	return OptUsersAddEmailForAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersAddEmailForAuthenticatedReq is optional UsersAddEmailForAuthenticatedReq.
type OptUsersAddEmailForAuthenticatedReq struct {
	Value UsersAddEmailForAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersAddEmailForAuthenticatedReq was set.
func (o OptUsersAddEmailForAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersAddEmailForAuthenticatedReq) Reset() {
	var v UsersAddEmailForAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersAddEmailForAuthenticatedReq) SetTo(v UsersAddEmailForAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersAddEmailForAuthenticatedReq) Get() (v UsersAddEmailForAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersAddEmailForAuthenticatedReq) Or(d UsersAddEmailForAuthenticatedReq) UsersAddEmailForAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersDeleteEmailForAuthenticatedReq returns new OptUsersDeleteEmailForAuthenticatedReq with value set to v.
func NewOptUsersDeleteEmailForAuthenticatedReq(v UsersDeleteEmailForAuthenticatedReq) OptUsersDeleteEmailForAuthenticatedReq {
	return OptUsersDeleteEmailForAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersDeleteEmailForAuthenticatedReq is optional UsersDeleteEmailForAuthenticatedReq.
type OptUsersDeleteEmailForAuthenticatedReq struct {
	Value UsersDeleteEmailForAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersDeleteEmailForAuthenticatedReq was set.
func (o OptUsersDeleteEmailForAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersDeleteEmailForAuthenticatedReq) Reset() {
	var v UsersDeleteEmailForAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersDeleteEmailForAuthenticatedReq) SetTo(v UsersDeleteEmailForAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersDeleteEmailForAuthenticatedReq) Get() (v UsersDeleteEmailForAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersDeleteEmailForAuthenticatedReq) Or(d UsersDeleteEmailForAuthenticatedReq) UsersDeleteEmailForAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersGetContextForUserSubjectType returns new OptUsersGetContextForUserSubjectType with value set to v.
func NewOptUsersGetContextForUserSubjectType(v UsersGetContextForUserSubjectType) OptUsersGetContextForUserSubjectType {
	return OptUsersGetContextForUserSubjectType{
		Value: v,
		Set:   true,
	}
}

// OptUsersGetContextForUserSubjectType is optional UsersGetContextForUserSubjectType.
type OptUsersGetContextForUserSubjectType struct {
	Value UsersGetContextForUserSubjectType
	Set   bool
}

// IsSet returns true if OptUsersGetContextForUserSubjectType was set.
func (o OptUsersGetContextForUserSubjectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersGetContextForUserSubjectType) Reset() {
	var v UsersGetContextForUserSubjectType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersGetContextForUserSubjectType) SetTo(v UsersGetContextForUserSubjectType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersGetContextForUserSubjectType) Get() (v UsersGetContextForUserSubjectType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersGetContextForUserSubjectType) Or(d UsersGetContextForUserSubjectType) UsersGetContextForUserSubjectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersUpdateAuthenticatedReq returns new OptUsersUpdateAuthenticatedReq with value set to v.
func NewOptUsersUpdateAuthenticatedReq(v UsersUpdateAuthenticatedReq) OptUsersUpdateAuthenticatedReq {
	return OptUsersUpdateAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersUpdateAuthenticatedReq is optional UsersUpdateAuthenticatedReq.
type OptUsersUpdateAuthenticatedReq struct {
	Value UsersUpdateAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersUpdateAuthenticatedReq was set.
func (o OptUsersUpdateAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersUpdateAuthenticatedReq) Reset() {
	var v UsersUpdateAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersUpdateAuthenticatedReq) SetTo(v UsersUpdateAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersUpdateAuthenticatedReq) Get() (v UsersUpdateAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersUpdateAuthenticatedReq) Or(d UsersUpdateAuthenticatedReq) UsersUpdateAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrorErrorsItemValue returns new OptValidationErrorErrorsItemValue with value set to v.
func NewOptValidationErrorErrorsItemValue(v ValidationErrorErrorsItemValue) OptValidationErrorErrorsItemValue {
	return OptValidationErrorErrorsItemValue{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrorErrorsItemValue is optional ValidationErrorErrorsItemValue.
type OptValidationErrorErrorsItemValue struct {
	Value ValidationErrorErrorsItemValue
	Set   bool
}

// IsSet returns true if OptValidationErrorErrorsItemValue was set.
func (o OptValidationErrorErrorsItemValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrorErrorsItemValue) Reset() {
	var v ValidationErrorErrorsItemValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrorErrorsItemValue) SetTo(v ValidationErrorErrorsItemValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrorErrorsItemValue) Get() (v ValidationErrorErrorsItemValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrorErrorsItemValue) Or(d ValidationErrorErrorsItemValue) ValidationErrorErrorsItemValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerification returns new OptVerification with value set to v.
func NewOptVerification(v Verification) OptVerification {
	return OptVerification{
		Value: v,
		Set:   true,
	}
}

// OptVerification is optional Verification.
type OptVerification struct {
	Value Verification
	Set   bool
}

// IsSet returns true if OptVerification was set.
func (o OptVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerification) Reset() {
	var v Verification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerification) SetTo(v Verification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerification) Get() (v Verification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerification) Or(d Verification) Verification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigContentType returns new OptWebhookConfigContentType with value set to v.
func NewOptWebhookConfigContentType(v WebhookConfigContentType) OptWebhookConfigContentType {
	return OptWebhookConfigContentType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigContentType is optional WebhookConfigContentType.
type OptWebhookConfigContentType struct {
	Value WebhookConfigContentType
	Set   bool
}

// IsSet returns true if OptWebhookConfigContentType was set.
func (o OptWebhookConfigContentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigContentType) Reset() {
	var v WebhookConfigContentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigContentType) SetTo(v WebhookConfigContentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigContentType) Get() (v WebhookConfigContentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigContentType) Or(d WebhookConfigContentType) WebhookConfigContentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigInsecureSsl returns new OptWebhookConfigInsecureSsl with value set to v.
func NewOptWebhookConfigInsecureSsl(v WebhookConfigInsecureSsl) OptWebhookConfigInsecureSsl {
	return OptWebhookConfigInsecureSsl{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigInsecureSsl is optional WebhookConfigInsecureSsl.
type OptWebhookConfigInsecureSsl struct {
	Value WebhookConfigInsecureSsl
	Set   bool
}

// IsSet returns true if OptWebhookConfigInsecureSsl was set.
func (o OptWebhookConfigInsecureSsl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigInsecureSsl) Reset() {
	var v WebhookConfigInsecureSsl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigInsecureSsl) SetTo(v WebhookConfigInsecureSsl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigInsecureSsl) Get() (v WebhookConfigInsecureSsl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigInsecureSsl) Or(d WebhookConfigInsecureSsl) WebhookConfigInsecureSsl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigSecret returns new OptWebhookConfigSecret with value set to v.
func NewOptWebhookConfigSecret(v WebhookConfigSecret) OptWebhookConfigSecret {
	return OptWebhookConfigSecret{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigSecret is optional WebhookConfigSecret.
type OptWebhookConfigSecret struct {
	Value WebhookConfigSecret
	Set   bool
}

// IsSet returns true if OptWebhookConfigSecret was set.
func (o OptWebhookConfigSecret) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigSecret) Reset() {
	var v WebhookConfigSecret
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigSecret) SetTo(v WebhookConfigSecret) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigSecret) Get() (v WebhookConfigSecret, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigSecret) Or(d WebhookConfigSecret) WebhookConfigSecret {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigURL returns new OptWebhookConfigURL with value set to v.
func NewOptWebhookConfigURL(v WebhookConfigURL) OptWebhookConfigURL {
	return OptWebhookConfigURL{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigURL is optional WebhookConfigURL.
type OptWebhookConfigURL struct {
	Value WebhookConfigURL
	Set   bool
}

// IsSet returns true if OptWebhookConfigURL was set.
func (o OptWebhookConfigURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigURL) Reset() {
	var v WebhookConfigURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigURL) SetTo(v WebhookConfigURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigURL) Get() (v WebhookConfigURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigURL) Or(d WebhookConfigURL) WebhookConfigURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableMACOS returns new OptWorkflowRunUsageBillableMACOS with value set to v.
func NewOptWorkflowRunUsageBillableMACOS(v WorkflowRunUsageBillableMACOS) OptWorkflowRunUsageBillableMACOS {
	return OptWorkflowRunUsageBillableMACOS{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableMACOS is optional WorkflowRunUsageBillableMACOS.
type OptWorkflowRunUsageBillableMACOS struct {
	Value WorkflowRunUsageBillableMACOS
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableMACOS was set.
func (o OptWorkflowRunUsageBillableMACOS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableMACOS) Reset() {
	var v WorkflowRunUsageBillableMACOS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableMACOS) SetTo(v WorkflowRunUsageBillableMACOS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableMACOS) Get() (v WorkflowRunUsageBillableMACOS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableMACOS) Or(d WorkflowRunUsageBillableMACOS) WorkflowRunUsageBillableMACOS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableUBUNTU returns new OptWorkflowRunUsageBillableUBUNTU with value set to v.
func NewOptWorkflowRunUsageBillableUBUNTU(v WorkflowRunUsageBillableUBUNTU) OptWorkflowRunUsageBillableUBUNTU {
	return OptWorkflowRunUsageBillableUBUNTU{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableUBUNTU is optional WorkflowRunUsageBillableUBUNTU.
type OptWorkflowRunUsageBillableUBUNTU struct {
	Value WorkflowRunUsageBillableUBUNTU
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableUBUNTU was set.
func (o OptWorkflowRunUsageBillableUBUNTU) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableUBUNTU) Reset() {
	var v WorkflowRunUsageBillableUBUNTU
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableUBUNTU) SetTo(v WorkflowRunUsageBillableUBUNTU) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableUBUNTU) Get() (v WorkflowRunUsageBillableUBUNTU, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableUBUNTU) Or(d WorkflowRunUsageBillableUBUNTU) WorkflowRunUsageBillableUBUNTU {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableWINDOWS returns new OptWorkflowRunUsageBillableWINDOWS with value set to v.
func NewOptWorkflowRunUsageBillableWINDOWS(v WorkflowRunUsageBillableWINDOWS) OptWorkflowRunUsageBillableWINDOWS {
	return OptWorkflowRunUsageBillableWINDOWS{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableWINDOWS is optional WorkflowRunUsageBillableWINDOWS.
type OptWorkflowRunUsageBillableWINDOWS struct {
	Value WorkflowRunUsageBillableWINDOWS
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableWINDOWS was set.
func (o OptWorkflowRunUsageBillableWINDOWS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableWINDOWS) Reset() {
	var v WorkflowRunUsageBillableWINDOWS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableWINDOWS) SetTo(v WorkflowRunUsageBillableWINDOWS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableWINDOWS) Get() (v WorkflowRunUsageBillableWINDOWS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableWINDOWS) Or(d WorkflowRunUsageBillableWINDOWS) WorkflowRunUsageBillableWINDOWS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Org Hook.
// Ref: #/components/schemas/org-hook
type OrgHook struct {
	ID            int           "json:\"id\""
	URL           url.URL       "json:\"url\""
	PingURL       url.URL       "json:\"ping_url\""
	DeliveriesURL OptURI        "json:\"deliveries_url\""
	Name          string        "json:\"name\""
	Events        []string      "json:\"events\""
	Active        bool          "json:\"active\""
	Config        OrgHookConfig "json:\"config\""
	UpdatedAt     time.Time     "json:\"updated_at\""
	CreatedAt     time.Time     "json:\"created_at\""
	Type          string        "json:\"type\""
}

func (*OrgHook) orgsCreateWebhookRes() {}
func (*OrgHook) orgsGetWebhookRes()    {}
func (*OrgHook) orgsUpdateWebhookRes() {}

type OrgHookConfig struct {
	URL         OptString "json:\"url\""
	InsecureSsl OptString "json:\"insecure_ssl\""
	ContentType OptString "json:\"content_type\""
	Secret      OptString "json:\"secret\""
}

// Org Membership.
// Ref: #/components/schemas/org-membership
type OrgMembership struct {
	URL url.URL "json:\"url\""
	// The state of the member in the organization. The `pending` state indicates the user has not yet
	// accepted an invitation.
	State OrgMembershipState "json:\"state\""
	// The user's membership type in the organization.
	Role            OrgMembershipRole           "json:\"role\""
	OrganizationURL url.URL                     "json:\"organization_url\""
	Organization    OrganizationSimple          "json:\"organization\""
	User            NilNullableSimpleUser       "json:\"user\""
	Permissions     OptOrgMembershipPermissions "json:\"permissions\""
}

func (*OrgMembership) orgsGetMembershipForAuthenticatedUserRes()    {}
func (*OrgMembership) orgsGetMembershipForUserRes()                 {}
func (*OrgMembership) orgsSetMembershipForUserRes()                 {}
func (*OrgMembership) orgsUpdateMembershipForAuthenticatedUserRes() {}

type OrgMembershipPermissions struct {
	CanCreateRepository bool "json:\"can_create_repository\""
}

// The user's membership type in the organization.
type OrgMembershipRole string

const (
	OrgMembershipRoleAdmin          OrgMembershipRole = "admin"
	OrgMembershipRoleMember         OrgMembershipRole = "member"
	OrgMembershipRoleBillingManager OrgMembershipRole = "billing_manager"
)

// The state of the member in the organization. The `pending` state indicates the user has not yet
// accepted an invitation.
type OrgMembershipState string

const (
	OrgMembershipStateActive  OrgMembershipState = "active"
	OrgMembershipStatePending OrgMembershipState = "pending"
)

// Secrets for GitHub Actions for an organization.
// Ref: #/components/schemas/organization-actions-secret
type OrganizationActionsSecret struct {
	// The name of the secret.
	Name      string    "json:\"name\""
	CreatedAt time.Time "json:\"created_at\""
	UpdatedAt time.Time "json:\"updated_at\""
	// Visibility of a secret.
	Visibility              OrganizationActionsSecretVisibility "json:\"visibility\""
	SelectedRepositoriesURL OptURI                              "json:\"selected_repositories_url\""
}

// Visibility of a secret.
type OrganizationActionsSecretVisibility string

const (
	OrganizationActionsSecretVisibilityAll      OrganizationActionsSecretVisibility = "all"
	OrganizationActionsSecretVisibilityPrivate  OrganizationActionsSecretVisibility = "private"
	OrganizationActionsSecretVisibilitySelected OrganizationActionsSecretVisibility = "selected"
)

// Organization Full.
// Ref: #/components/schemas/organization-full
type OrganizationFull struct {
	Login                                string                  "json:\"login\""
	ID                                   int                     "json:\"id\""
	NodeID                               string                  "json:\"node_id\""
	URL                                  url.URL                 "json:\"url\""
	ReposURL                             url.URL                 "json:\"repos_url\""
	EventsURL                            url.URL                 "json:\"events_url\""
	HooksURL                             string                  "json:\"hooks_url\""
	IssuesURL                            string                  "json:\"issues_url\""
	MembersURL                           string                  "json:\"members_url\""
	PublicMembersURL                     string                  "json:\"public_members_url\""
	AvatarURL                            string                  "json:\"avatar_url\""
	Description                          NilString               "json:\"description\""
	Name                                 OptString               "json:\"name\""
	Company                              OptString               "json:\"company\""
	Blog                                 OptURI                  "json:\"blog\""
	Location                             OptString               "json:\"location\""
	Email                                OptString               "json:\"email\""
	TwitterUsername                      OptNilString            "json:\"twitter_username\""
	IsVerified                           OptBool                 "json:\"is_verified\""
	HasOrganizationProjects              bool                    "json:\"has_organization_projects\""
	HasRepositoryProjects                bool                    "json:\"has_repository_projects\""
	PublicRepos                          int                     "json:\"public_repos\""
	PublicGists                          int                     "json:\"public_gists\""
	Followers                            int                     "json:\"followers\""
	Following                            int                     "json:\"following\""
	HTMLURL                              url.URL                 "json:\"html_url\""
	CreatedAt                            time.Time               "json:\"created_at\""
	Type                                 string                  "json:\"type\""
	TotalPrivateRepos                    OptInt                  "json:\"total_private_repos\""
	OwnedPrivateRepos                    OptInt                  "json:\"owned_private_repos\""
	PrivateGists                         OptNilInt               "json:\"private_gists\""
	DiskUsage                            OptNilInt               "json:\"disk_usage\""
	Collaborators                        OptNilInt               "json:\"collaborators\""
	BillingEmail                         OptNilString            "json:\"billing_email\""
	Plan                                 OptOrganizationFullPlan "json:\"plan\""
	DefaultRepositoryPermission          OptNilString            "json:\"default_repository_permission\""
	MembersCanCreateRepositories         OptNilBool              "json:\"members_can_create_repositories\""
	TwoFactorRequirementEnabled          OptNilBool              "json:\"two_factor_requirement_enabled\""
	MembersAllowedRepositoryCreationType OptString               "json:\"members_allowed_repository_creation_type\""
	MembersCanCreatePublicRepositories   OptBool                 "json:\"members_can_create_public_repositories\""
	MembersCanCreatePrivateRepositories  OptBool                 "json:\"members_can_create_private_repositories\""
	MembersCanCreateInternalRepositories OptBool                 "json:\"members_can_create_internal_repositories\""
	MembersCanCreatePages                OptBool                 "json:\"members_can_create_pages\""
	MembersCanCreatePublicPages          OptBool                 "json:\"members_can_create_public_pages\""
	MembersCanCreatePrivatePages         OptBool                 "json:\"members_can_create_private_pages\""
	UpdatedAt                            time.Time               "json:\"updated_at\""
}

func (*OrganizationFull) orgsGetRes() {}

type OrganizationFullPlan struct {
	Name         string "json:\"name\""
	Space        int    "json:\"space\""
	PrivateRepos int    "json:\"private_repos\""
	FilledSeats  OptInt "json:\"filled_seats\""
	Seats        OptInt "json:\"seats\""
}

// Organization Invitation.
// Ref: #/components/schemas/organization-invitation
type OrganizationInvitation struct {
	ID                 int          "json:\"id\""
	Login              NilString    "json:\"login\""
	Email              NilString    "json:\"email\""
	Role               string       "json:\"role\""
	CreatedAt          string       "json:\"created_at\""
	FailedAt           OptNilString "json:\"failed_at\""
	FailedReason       OptNilString "json:\"failed_reason\""
	Inviter            SimpleUser   "json:\"inviter\""
	TeamCount          int          "json:\"team_count\""
	NodeID             string       "json:\"node_id\""
	InvitationTeamsURL string       "json:\"invitation_teams_url\""
}

func (*OrganizationInvitation) orgsCreateInvitationRes() {}

// Ref: #/components/schemas/organization-secret-scanning-alert
type OrganizationSecretScanningAlert struct {
	Number    OptAlertNumber    "json:\"number\""
	CreatedAt OptAlertCreatedAt "json:\"created_at\""
	URL       OptAlertURL       "json:\"url\""
	HTMLURL   OptAlertHTMLURL   "json:\"html_url\""
	// The REST API URL of the code locations for this alert.
	LocationsURL OptURI                              "json:\"locations_url\""
	State        OptSecretScanningAlertState         "json:\"state\""
	Resolution   OptNilSecretScanningAlertResolution "json:\"resolution\""
	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt OptNilDateTime           "json:\"resolved_at\""
	ResolvedBy OptNilNullableSimpleUser "json:\"resolved_by\""
	// The type of secret that secret scanning detected.
	SecretType OptString "json:\"secret_type\""
	// The secret that was detected.
	Secret     OptString            "json:\"secret\""
	Repository OptMinimalRepository "json:\"repository\""
}

// Organization Simple.
// Ref: #/components/schemas/organization-simple
type OrganizationSimple struct {
	Login            string    "json:\"login\""
	ID               int       "json:\"id\""
	NodeID           string    "json:\"node_id\""
	URL              url.URL   "json:\"url\""
	ReposURL         url.URL   "json:\"repos_url\""
	EventsURL        url.URL   "json:\"events_url\""
	HooksURL         string    "json:\"hooks_url\""
	IssuesURL        string    "json:\"issues_url\""
	MembersURL       string    "json:\"members_url\""
	PublicMembersURL string    "json:\"public_members_url\""
	AvatarURL        string    "json:\"avatar_url\""
	Description      NilString "json:\"description\""
}

// OrgsBlockUserNoContent is response for OrgsBlockUser operation.
type OrgsBlockUserNoContent struct{}

func (*OrgsBlockUserNoContent) orgsBlockUserRes() {}

// OrgsCancelInvitationNoContent is response for OrgsCancelInvitation operation.
type OrgsCancelInvitationNoContent struct{}

func (*OrgsCancelInvitationNoContent) orgsCancelInvitationRes() {}

// OrgsCheckBlockedUserNoContent is response for OrgsCheckBlockedUser operation.
type OrgsCheckBlockedUserNoContent struct{}

func (*OrgsCheckBlockedUserNoContent) orgsCheckBlockedUserRes() {}

// OrgsCheckMembershipForUserFound is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserFound struct{}

func (*OrgsCheckMembershipForUserFound) orgsCheckMembershipForUserRes() {}

// OrgsCheckMembershipForUserNoContent is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserNoContent struct{}

func (*OrgsCheckMembershipForUserNoContent) orgsCheckMembershipForUserRes() {}

// OrgsCheckMembershipForUserNotFound is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserNotFound struct{}

func (*OrgsCheckMembershipForUserNotFound) orgsCheckMembershipForUserRes() {}

// OrgsCheckPublicMembershipForUserNoContent is response for OrgsCheckPublicMembershipForUser operation.
type OrgsCheckPublicMembershipForUserNoContent struct{}

func (*OrgsCheckPublicMembershipForUserNoContent) orgsCheckPublicMembershipForUserRes() {}

// OrgsCheckPublicMembershipForUserNotFound is response for OrgsCheckPublicMembershipForUser operation.
type OrgsCheckPublicMembershipForUserNotFound struct{}

func (*OrgsCheckPublicMembershipForUserNotFound) orgsCheckPublicMembershipForUserRes() {}

type OrgsConvertMemberToOutsideCollaboratorAccepted map[string]jx.Raw

func (s *OrgsConvertMemberToOutsideCollaboratorAccepted) init() OrgsConvertMemberToOutsideCollaboratorAccepted {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (OrgsConvertMemberToOutsideCollaboratorAccepted) orgsConvertMemberToOutsideCollaboratorRes() {}

// OrgsConvertMemberToOutsideCollaboratorForbidden is response for OrgsConvertMemberToOutsideCollaborator operation.
type OrgsConvertMemberToOutsideCollaboratorForbidden struct{}

func (*OrgsConvertMemberToOutsideCollaboratorForbidden) orgsConvertMemberToOutsideCollaboratorRes() {}

// OrgsConvertMemberToOutsideCollaboratorNoContent is response for OrgsConvertMemberToOutsideCollaborator operation.
type OrgsConvertMemberToOutsideCollaboratorNoContent struct{}

func (*OrgsConvertMemberToOutsideCollaboratorNoContent) orgsConvertMemberToOutsideCollaboratorRes() {}

type OrgsCreateInvitationReq struct {
	// **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
	InviteeID OptInt "json:\"invitee_id\""
	// **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which
	// can be an existing GitHub user.
	Email OptString "json:\"email\""
	// Specify role for new member. Can be one of:
	// \* `admin` - Organization owners with full administrative rights to the organization and complete
	// access to all repositories and teams.
	// \* `direct_member` - Non-owner organization members with ability to see other members and join
	// teams by invitation.
	// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings
	// of your organization.
	Role OptOrgsCreateInvitationReqRole "json:\"role\""
	// Specify IDs for the teams you want to invite new members to.
	TeamIds []int "json:\"team_ids\""
}

// Specify role for new member. Can be one of:
// \* `admin` - Organization owners with full administrative rights to the organization and complete
// access to all repositories and teams.
// \* `direct_member` - Non-owner organization members with ability to see other members and join
// teams by invitation.
// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings
// of your organization.
type OrgsCreateInvitationReqRole string

const (
	OrgsCreateInvitationReqRoleAdmin          OrgsCreateInvitationReqRole = "admin"
	OrgsCreateInvitationReqRoleDirectMember   OrgsCreateInvitationReqRole = "direct_member"
	OrgsCreateInvitationReqRoleBillingManager OrgsCreateInvitationReqRole = "billing_manager"
)

type OrgsCreateWebhookReq struct {
	// Must be passed as "web".
	Name string "json:\"name\""
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/orgs#create-hook-config-params).
	Config OrgsCreateWebhookReqConfig "json:\"config\""
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string "json:\"events\""
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool "json:\"active\""
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/orgs#create-hook-config-params).
type OrgsCreateWebhookReqConfig struct {
	URL         WebhookConfigURL            "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	Username    OptString                   "json:\"username\""
	Password    OptString                   "json:\"password\""
}

// OrgsDeleteWebhookNoContent is response for OrgsDeleteWebhook operation.
type OrgsDeleteWebhookNoContent struct{}

func (*OrgsDeleteWebhookNoContent) orgsDeleteWebhookRes() {}

type OrgsGetAuditLogInclude string

const (
	OrgsGetAuditLogIncludeWeb OrgsGetAuditLogInclude = "web"
	OrgsGetAuditLogIncludeGit OrgsGetAuditLogInclude = "git"
	OrgsGetAuditLogIncludeAll OrgsGetAuditLogInclude = "all"
)

type OrgsGetAuditLogOrder string

const (
	OrgsGetAuditLogOrderDesc OrgsGetAuditLogOrder = "desc"
	OrgsGetAuditLogOrderAsc  OrgsGetAuditLogOrder = "asc"
)

type OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden) orgsGetMembershipForAuthenticatedUserRes() {
}

type OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound BasicError

func (*OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound) orgsGetMembershipForAuthenticatedUserRes() {
}

type OrgsGetMembershipForUserApplicationJSONForbidden BasicError

func (*OrgsGetMembershipForUserApplicationJSONForbidden) orgsGetMembershipForUserRes() {}

type OrgsGetMembershipForUserApplicationJSONNotFound BasicError

func (*OrgsGetMembershipForUserApplicationJSONNotFound) orgsGetMembershipForUserRes() {}

type OrgsListBlockedUsersOKApplicationJSON []SimpleUser

func (OrgsListBlockedUsersOKApplicationJSON) orgsListBlockedUsersRes() {}

type OrgsListFailedInvitationsOKApplicationJSON []OrganizationInvitation

func (OrgsListFailedInvitationsOKApplicationJSON) orgsListFailedInvitationsRes() {}

type OrgsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsListForAuthenticatedUserApplicationJSONForbidden) orgsListForAuthenticatedUserRes() {}

type OrgsListForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*OrgsListForAuthenticatedUserApplicationJSONUnauthorized) orgsListForAuthenticatedUserRes() {}

type OrgsListForAuthenticatedUserOKApplicationJSON []OrganizationSimple

func (OrgsListForAuthenticatedUserOKApplicationJSON) orgsListForAuthenticatedUserRes() {}

type OrgsListInvitationTeamsOKApplicationJSON []Team

func (OrgsListInvitationTeamsOKApplicationJSON) orgsListInvitationTeamsRes() {}

type OrgsListMembersFilter string

const (
	OrgsListMembersFilter2FADisabled OrgsListMembersFilter = "2fa_disabled"
	OrgsListMembersFilterAll         OrgsListMembersFilter = "all"
)

// OrgsListMembersFound is response for OrgsListMembers operation.
type OrgsListMembersFound struct{}

func (*OrgsListMembersFound) orgsListMembersRes() {}

type OrgsListMembersOKApplicationJSON []SimpleUser

func (OrgsListMembersOKApplicationJSON) orgsListMembersRes() {}

type OrgsListMembersRole string

const (
	OrgsListMembersRoleAll    OrgsListMembersRole = "all"
	OrgsListMembersRoleAdmin  OrgsListMembersRole = "admin"
	OrgsListMembersRoleMember OrgsListMembersRole = "member"
)

type OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden) orgsListMembershipsForAuthenticatedUserRes() {
}

type OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized) orgsListMembershipsForAuthenticatedUserRes() {
}

type OrgsListMembershipsForAuthenticatedUserOKApplicationJSON []OrgMembership

func (OrgsListMembershipsForAuthenticatedUserOKApplicationJSON) orgsListMembershipsForAuthenticatedUserRes() {
}

type OrgsListMembershipsForAuthenticatedUserState string

const (
	OrgsListMembershipsForAuthenticatedUserStateActive  OrgsListMembershipsForAuthenticatedUserState = "active"
	OrgsListMembershipsForAuthenticatedUserStatePending OrgsListMembershipsForAuthenticatedUserState = "pending"
)

type OrgsListOKApplicationJSON []OrganizationSimple

func (OrgsListOKApplicationJSON) orgsListRes() {}

type OrgsListOutsideCollaboratorsFilter string

const (
	OrgsListOutsideCollaboratorsFilter2FADisabled OrgsListOutsideCollaboratorsFilter = "2fa_disabled"
	OrgsListOutsideCollaboratorsFilterAll         OrgsListOutsideCollaboratorsFilter = "all"
)

type OrgsListPendingInvitationsOKApplicationJSON []OrganizationInvitation

func (OrgsListPendingInvitationsOKApplicationJSON) orgsListPendingInvitationsRes() {}

type OrgsListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (OrgsListWebhookDeliveriesOKApplicationJSON) orgsListWebhookDeliveriesRes() {}

type OrgsListWebhooksOKApplicationJSON []OrgHook

func (OrgsListWebhooksOKApplicationJSON) orgsListWebhooksRes() {}

// OrgsPingWebhookNoContent is response for OrgsPingWebhook operation.
type OrgsPingWebhookNoContent struct{}

func (*OrgsPingWebhookNoContent) orgsPingWebhookRes() {}

// OrgsRemoveMemberNoContent is response for OrgsRemoveMember operation.
type OrgsRemoveMemberNoContent struct{}

func (*OrgsRemoveMemberNoContent) orgsRemoveMemberRes() {}

type OrgsRemoveMembershipForUserApplicationJSONForbidden BasicError

func (*OrgsRemoveMembershipForUserApplicationJSONForbidden) orgsRemoveMembershipForUserRes() {}

type OrgsRemoveMembershipForUserApplicationJSONNotFound BasicError

func (*OrgsRemoveMembershipForUserApplicationJSONNotFound) orgsRemoveMembershipForUserRes() {}

// OrgsRemoveMembershipForUserNoContent is response for OrgsRemoveMembershipForUser operation.
type OrgsRemoveMembershipForUserNoContent struct{}

func (*OrgsRemoveMembershipForUserNoContent) orgsRemoveMembershipForUserRes() {}

// OrgsRemoveOutsideCollaboratorNoContent is response for OrgsRemoveOutsideCollaborator operation.
type OrgsRemoveOutsideCollaboratorNoContent struct{}

func (*OrgsRemoveOutsideCollaboratorNoContent) orgsRemoveOutsideCollaboratorRes() {}

type OrgsRemoveOutsideCollaboratorUnprocessableEntity struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*OrgsRemoveOutsideCollaboratorUnprocessableEntity) orgsRemoveOutsideCollaboratorRes() {}

// OrgsRemovePublicMembershipForAuthenticatedUserNoContent is response for OrgsRemovePublicMembershipForAuthenticatedUser operation.
type OrgsRemovePublicMembershipForAuthenticatedUserNoContent struct{}

// OrgsRemoveSamlSSOAuthorizationNoContent is response for OrgsRemoveSamlSSOAuthorization operation.
type OrgsRemoveSamlSSOAuthorizationNoContent struct{}

func (*OrgsRemoveSamlSSOAuthorizationNoContent) orgsRemoveSamlSSOAuthorizationRes() {}

type OrgsSetMembershipForUserReq struct {
	// The role to give the user in the organization. Can be one of:
	// \* `admin` - The user will become an owner of the organization.
	// \* `member` - The user will become a non-owner member of the organization.
	Role OptOrgsSetMembershipForUserReqRole "json:\"role\""
}

// The role to give the user in the organization. Can be one of:
// \* `admin` - The user will become an owner of the organization.
// \* `member` - The user will become a non-owner member of the organization.
type OrgsSetMembershipForUserReqRole string

const (
	OrgsSetMembershipForUserReqRoleAdmin  OrgsSetMembershipForUserReqRole = "admin"
	OrgsSetMembershipForUserReqRoleMember OrgsSetMembershipForUserReqRole = "member"
)

// OrgsSetPublicMembershipForAuthenticatedUserNoContent is response for OrgsSetPublicMembershipForAuthenticatedUser operation.
type OrgsSetPublicMembershipForAuthenticatedUserNoContent struct{}

func (*OrgsSetPublicMembershipForAuthenticatedUserNoContent) orgsSetPublicMembershipForAuthenticatedUserRes() {
}

// OrgsUnblockUserNoContent is response for OrgsUnblockUser operation.
type OrgsUnblockUserNoContent struct{}

type OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden) orgsUpdateMembershipForAuthenticatedUserRes() {
}

type OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound BasicError

func (*OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound) orgsUpdateMembershipForAuthenticatedUserRes() {
}

type OrgsUpdateMembershipForAuthenticatedUserReq struct {
	// The state that the membership should be in. Only `"active"` will be accepted.
	State OrgsUpdateMembershipForAuthenticatedUserReqState "json:\"state\""
}

// The state that the membership should be in. Only `"active"` will be accepted.
type OrgsUpdateMembershipForAuthenticatedUserReqState string

const (
	OrgsUpdateMembershipForAuthenticatedUserReqStateActive OrgsUpdateMembershipForAuthenticatedUserReqState = "active"
)

type OrgsUpdateWebhookConfigForOrgReq struct {
	URL             OptWebhookConfigURL         "json:\"url\""
	ContentType     OptWebhookConfigContentType "json:\"content_type\""
	Secret          OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl     OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	AdditionalProps OrgsUpdateWebhookConfigForOrgReqAdditional
}

type OrgsUpdateWebhookConfigForOrgReqAdditional map[string]jx.Raw

func (s *OrgsUpdateWebhookConfigForOrgReqAdditional) init() OrgsUpdateWebhookConfigForOrgReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type OrgsUpdateWebhookReq struct {
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/orgs#update-hook-config-params).
	Config OptOrgsUpdateWebhookReqConfig "json:\"config\""
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string "json:\"events\""
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool   "json:\"active\""
	Name   OptString "json:\"name\""
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/orgs#update-hook-config-params).
type OrgsUpdateWebhookReqConfig struct {
	URL         WebhookConfigURL            "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
}

// A software package.
// Ref: #/components/schemas/package
type Package struct {
	// Unique identifier of the package.
	ID int "json:\"id\""
	// The name of the package.
	Name        string             "json:\"name\""
	PackageType PackagePackageType "json:\"package_type\""
	URL         string             "json:\"url\""
	HTMLURL     string             "json:\"html_url\""
	// The number of versions of the package.
	VersionCount int                             "json:\"version_count\""
	Visibility   PackageVisibility               "json:\"visibility\""
	Owner        OptNilNullableSimpleUser        "json:\"owner\""
	Repository   OptNilNullableMinimalRepository "json:\"repository\""
	CreatedAt    time.Time                       "json:\"created_at\""
	UpdatedAt    time.Time                       "json:\"updated_at\""
}

type PackagePackageType string

const (
	PackagePackageTypeNpm       PackagePackageType = "npm"
	PackagePackageTypeMaven     PackagePackageType = "maven"
	PackagePackageTypeRubygems  PackagePackageType = "rubygems"
	PackagePackageTypeDocker    PackagePackageType = "docker"
	PackagePackageTypeNuget     PackagePackageType = "nuget"
	PackagePackageTypeContainer PackagePackageType = "container"
)

// A version of a software package.
// Ref: #/components/schemas/package-version
type PackageVersion struct {
	// Unique identifier of the package version.
	ID int "json:\"id\""
	// The name of the package version.
	Name           string                    "json:\"name\""
	URL            string                    "json:\"url\""
	PackageHTMLURL string                    "json:\"package_html_url\""
	HTMLURL        OptString                 "json:\"html_url\""
	License        OptString                 "json:\"license\""
	Description    OptString                 "json:\"description\""
	CreatedAt      time.Time                 "json:\"created_at\""
	UpdatedAt      time.Time                 "json:\"updated_at\""
	DeletedAt      OptDateTime               "json:\"deleted_at\""
	Metadata       OptPackageVersionMetadata "json:\"metadata\""
}

type PackageVersionMetadata struct {
	PackageType PackageVersionMetadataPackageType  "json:\"package_type\""
	Container   OptPackageVersionMetadataContainer "json:\"container\""
	Docker      OptPackageVersionMetadataDocker    "json:\"docker\""
}

type PackageVersionMetadataContainer struct {
	Tags []jx.Raw "json:\"tags\""
}

type PackageVersionMetadataDocker struct {
	Tag []jx.Raw "json:\"tag\""
}

type PackageVersionMetadataPackageType string

const (
	PackageVersionMetadataPackageTypeNpm       PackageVersionMetadataPackageType = "npm"
	PackageVersionMetadataPackageTypeMaven     PackageVersionMetadataPackageType = "maven"
	PackageVersionMetadataPackageTypeRubygems  PackageVersionMetadataPackageType = "rubygems"
	PackageVersionMetadataPackageTypeDocker    PackageVersionMetadataPackageType = "docker"
	PackageVersionMetadataPackageTypeNuget     PackageVersionMetadataPackageType = "nuget"
	PackageVersionMetadataPackageTypeContainer PackageVersionMetadataPackageType = "container"
)

type PackageVisibility string

const (
	PackageVisibilityPrivate PackageVisibility = "private"
	PackageVisibilityPublic  PackageVisibility = "public"
)

// Ref: #/components/schemas/packages-billing-usage
type PackagesBillingUsage struct {
	// Sum of the free and paid storage space (GB) for GitHuub Packages.
	TotalGigabytesBandwidthUsed int "json:\"total_gigabytes_bandwidth_used\""
	// Total paid storage space (GB) for GitHuub Packages.
	TotalPaidGigabytesBandwidthUsed int "json:\"total_paid_gigabytes_bandwidth_used\""
	// Free storage space (GB) for GitHub Packages.
	IncludedGigabytesBandwidth int "json:\"included_gigabytes_bandwidth\""
}

type PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden BasicError

func (*PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound BasicError

func (*PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized) packagesDeletePackageForAuthenticatedUserRes() {
}

// PackagesDeletePackageForAuthenticatedUserNoContent is response for PackagesDeletePackageForAuthenticatedUser operation.
type PackagesDeletePackageForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageForAuthenticatedUserNoContent) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForAuthenticatedUserPackageType string

const (
	PackagesDeletePackageForAuthenticatedUserPackageTypeNpm       PackagesDeletePackageForAuthenticatedUserPackageType = "npm"
	PackagesDeletePackageForAuthenticatedUserPackageTypeMaven     PackagesDeletePackageForAuthenticatedUserPackageType = "maven"
	PackagesDeletePackageForAuthenticatedUserPackageTypeRubygems  PackagesDeletePackageForAuthenticatedUserPackageType = "rubygems"
	PackagesDeletePackageForAuthenticatedUserPackageTypeDocker    PackagesDeletePackageForAuthenticatedUserPackageType = "docker"
	PackagesDeletePackageForAuthenticatedUserPackageTypeNuget     PackagesDeletePackageForAuthenticatedUserPackageType = "nuget"
	PackagesDeletePackageForAuthenticatedUserPackageTypeContainer PackagesDeletePackageForAuthenticatedUserPackageType = "container"
)

type PackagesDeletePackageForOrgApplicationJSONForbidden BasicError

func (*PackagesDeletePackageForOrgApplicationJSONForbidden) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForOrgApplicationJSONNotFound BasicError

func (*PackagesDeletePackageForOrgApplicationJSONNotFound) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForOrgApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageForOrgApplicationJSONUnauthorized) packagesDeletePackageForOrgRes() {}

// PackagesDeletePackageForOrgNoContent is response for PackagesDeletePackageForOrg operation.
type PackagesDeletePackageForOrgNoContent struct{}

func (*PackagesDeletePackageForOrgNoContent) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForOrgPackageType string

const (
	PackagesDeletePackageForOrgPackageTypeNpm       PackagesDeletePackageForOrgPackageType = "npm"
	PackagesDeletePackageForOrgPackageTypeMaven     PackagesDeletePackageForOrgPackageType = "maven"
	PackagesDeletePackageForOrgPackageTypeRubygems  PackagesDeletePackageForOrgPackageType = "rubygems"
	PackagesDeletePackageForOrgPackageTypeDocker    PackagesDeletePackageForOrgPackageType = "docker"
	PackagesDeletePackageForOrgPackageTypeNuget     PackagesDeletePackageForOrgPackageType = "nuget"
	PackagesDeletePackageForOrgPackageTypeContainer PackagesDeletePackageForOrgPackageType = "container"
)

type PackagesDeletePackageForUserApplicationJSONForbidden BasicError

func (*PackagesDeletePackageForUserApplicationJSONForbidden) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageForUserApplicationJSONNotFound BasicError

func (*PackagesDeletePackageForUserApplicationJSONNotFound) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageForUserApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageForUserApplicationJSONUnauthorized) packagesDeletePackageForUserRes() {}

// PackagesDeletePackageForUserNoContent is response for PackagesDeletePackageForUser operation.
type PackagesDeletePackageForUserNoContent struct{}

func (*PackagesDeletePackageForUserNoContent) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageForUserPackageType string

const (
	PackagesDeletePackageForUserPackageTypeNpm       PackagesDeletePackageForUserPackageType = "npm"
	PackagesDeletePackageForUserPackageTypeMaven     PackagesDeletePackageForUserPackageType = "maven"
	PackagesDeletePackageForUserPackageTypeRubygems  PackagesDeletePackageForUserPackageType = "rubygems"
	PackagesDeletePackageForUserPackageTypeDocker    PackagesDeletePackageForUserPackageType = "docker"
	PackagesDeletePackageForUserPackageTypeNuget     PackagesDeletePackageForUserPackageType = "nuget"
	PackagesDeletePackageForUserPackageTypeContainer PackagesDeletePackageForUserPackageType = "container"
)

type PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

// PackagesDeletePackageVersionForAuthenticatedUserNoContent is response for PackagesDeletePackageVersionForAuthenticatedUser operation.
type PackagesDeletePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageVersionForAuthenticatedUserNoContent) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForAuthenticatedUserPackageType string

const (
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNpm       PackagesDeletePackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeMaven     PackagesDeletePackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesDeletePackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeDocker    PackagesDeletePackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNuget     PackagesDeletePackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeContainer PackagesDeletePackageVersionForAuthenticatedUserPackageType = "container"
)

type PackagesDeletePackageVersionForOrgApplicationJSONForbidden BasicError

func (*PackagesDeletePackageVersionForOrgApplicationJSONForbidden) packagesDeletePackageVersionForOrgRes() {
}

type PackagesDeletePackageVersionForOrgApplicationJSONNotFound BasicError

func (*PackagesDeletePackageVersionForOrgApplicationJSONNotFound) packagesDeletePackageVersionForOrgRes() {
}

type PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized) packagesDeletePackageVersionForOrgRes() {
}

// PackagesDeletePackageVersionForOrgNoContent is response for PackagesDeletePackageVersionForOrg operation.
type PackagesDeletePackageVersionForOrgNoContent struct{}

func (*PackagesDeletePackageVersionForOrgNoContent) packagesDeletePackageVersionForOrgRes() {}

type PackagesDeletePackageVersionForOrgPackageType string

const (
	PackagesDeletePackageVersionForOrgPackageTypeNpm       PackagesDeletePackageVersionForOrgPackageType = "npm"
	PackagesDeletePackageVersionForOrgPackageTypeMaven     PackagesDeletePackageVersionForOrgPackageType = "maven"
	PackagesDeletePackageVersionForOrgPackageTypeRubygems  PackagesDeletePackageVersionForOrgPackageType = "rubygems"
	PackagesDeletePackageVersionForOrgPackageTypeDocker    PackagesDeletePackageVersionForOrgPackageType = "docker"
	PackagesDeletePackageVersionForOrgPackageTypeNuget     PackagesDeletePackageVersionForOrgPackageType = "nuget"
	PackagesDeletePackageVersionForOrgPackageTypeContainer PackagesDeletePackageVersionForOrgPackageType = "container"
)

type PackagesDeletePackageVersionForUserApplicationJSONForbidden BasicError

func (*PackagesDeletePackageVersionForUserApplicationJSONForbidden) packagesDeletePackageVersionForUserRes() {
}

type PackagesDeletePackageVersionForUserApplicationJSONNotFound BasicError

func (*PackagesDeletePackageVersionForUserApplicationJSONNotFound) packagesDeletePackageVersionForUserRes() {
}

type PackagesDeletePackageVersionForUserApplicationJSONUnauthorized BasicError

func (*PackagesDeletePackageVersionForUserApplicationJSONUnauthorized) packagesDeletePackageVersionForUserRes() {
}

// PackagesDeletePackageVersionForUserNoContent is response for PackagesDeletePackageVersionForUser operation.
type PackagesDeletePackageVersionForUserNoContent struct{}

func (*PackagesDeletePackageVersionForUserNoContent) packagesDeletePackageVersionForUserRes() {}

type PackagesDeletePackageVersionForUserPackageType string

const (
	PackagesDeletePackageVersionForUserPackageTypeNpm       PackagesDeletePackageVersionForUserPackageType = "npm"
	PackagesDeletePackageVersionForUserPackageTypeMaven     PackagesDeletePackageVersionForUserPackageType = "maven"
	PackagesDeletePackageVersionForUserPackageTypeRubygems  PackagesDeletePackageVersionForUserPackageType = "rubygems"
	PackagesDeletePackageVersionForUserPackageTypeDocker    PackagesDeletePackageVersionForUserPackageType = "docker"
	PackagesDeletePackageVersionForUserPackageTypeNuget     PackagesDeletePackageVersionForUserPackageType = "nuget"
	PackagesDeletePackageVersionForUserPackageTypeContainer PackagesDeletePackageVersionForUserPackageType = "container"
)

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON []PackageVersion

func (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "container"
)

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateActive  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState = "active"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateDeleted PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState = "deleted"
)

type PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON []PackageVersion

func (PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "container"
)

type PackagesGetAllPackageVersionsForPackageOwnedByOrgState string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByOrgStateActive  PackagesGetAllPackageVersionsForPackageOwnedByOrgState = "active"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgStateDeleted PackagesGetAllPackageVersionsForPackageOwnedByOrgState = "deleted"
)

type PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON []PackageVersion

func (PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "container"
)

type PackagesGetPackageForAuthenticatedUserPackageType string

const (
	PackagesGetPackageForAuthenticatedUserPackageTypeNpm       PackagesGetPackageForAuthenticatedUserPackageType = "npm"
	PackagesGetPackageForAuthenticatedUserPackageTypeMaven     PackagesGetPackageForAuthenticatedUserPackageType = "maven"
	PackagesGetPackageForAuthenticatedUserPackageTypeRubygems  PackagesGetPackageForAuthenticatedUserPackageType = "rubygems"
	PackagesGetPackageForAuthenticatedUserPackageTypeDocker    PackagesGetPackageForAuthenticatedUserPackageType = "docker"
	PackagesGetPackageForAuthenticatedUserPackageTypeNuget     PackagesGetPackageForAuthenticatedUserPackageType = "nuget"
	PackagesGetPackageForAuthenticatedUserPackageTypeContainer PackagesGetPackageForAuthenticatedUserPackageType = "container"
)

type PackagesGetPackageForOrganizationPackageType string

const (
	PackagesGetPackageForOrganizationPackageTypeNpm       PackagesGetPackageForOrganizationPackageType = "npm"
	PackagesGetPackageForOrganizationPackageTypeMaven     PackagesGetPackageForOrganizationPackageType = "maven"
	PackagesGetPackageForOrganizationPackageTypeRubygems  PackagesGetPackageForOrganizationPackageType = "rubygems"
	PackagesGetPackageForOrganizationPackageTypeDocker    PackagesGetPackageForOrganizationPackageType = "docker"
	PackagesGetPackageForOrganizationPackageTypeNuget     PackagesGetPackageForOrganizationPackageType = "nuget"
	PackagesGetPackageForOrganizationPackageTypeContainer PackagesGetPackageForOrganizationPackageType = "container"
)

type PackagesGetPackageForUserPackageType string

const (
	PackagesGetPackageForUserPackageTypeNpm       PackagesGetPackageForUserPackageType = "npm"
	PackagesGetPackageForUserPackageTypeMaven     PackagesGetPackageForUserPackageType = "maven"
	PackagesGetPackageForUserPackageTypeRubygems  PackagesGetPackageForUserPackageType = "rubygems"
	PackagesGetPackageForUserPackageTypeDocker    PackagesGetPackageForUserPackageType = "docker"
	PackagesGetPackageForUserPackageTypeNuget     PackagesGetPackageForUserPackageType = "nuget"
	PackagesGetPackageForUserPackageTypeContainer PackagesGetPackageForUserPackageType = "container"
)

type PackagesGetPackageVersionForAuthenticatedUserPackageType string

const (
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeNpm       PackagesGetPackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeMaven     PackagesGetPackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesGetPackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeDocker    PackagesGetPackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeNuget     PackagesGetPackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeContainer PackagesGetPackageVersionForAuthenticatedUserPackageType = "container"
)

type PackagesGetPackageVersionForOrganizationPackageType string

const (
	PackagesGetPackageVersionForOrganizationPackageTypeNpm       PackagesGetPackageVersionForOrganizationPackageType = "npm"
	PackagesGetPackageVersionForOrganizationPackageTypeMaven     PackagesGetPackageVersionForOrganizationPackageType = "maven"
	PackagesGetPackageVersionForOrganizationPackageTypeRubygems  PackagesGetPackageVersionForOrganizationPackageType = "rubygems"
	PackagesGetPackageVersionForOrganizationPackageTypeDocker    PackagesGetPackageVersionForOrganizationPackageType = "docker"
	PackagesGetPackageVersionForOrganizationPackageTypeNuget     PackagesGetPackageVersionForOrganizationPackageType = "nuget"
	PackagesGetPackageVersionForOrganizationPackageTypeContainer PackagesGetPackageVersionForOrganizationPackageType = "container"
)

type PackagesGetPackageVersionForUserPackageType string

const (
	PackagesGetPackageVersionForUserPackageTypeNpm       PackagesGetPackageVersionForUserPackageType = "npm"
	PackagesGetPackageVersionForUserPackageTypeMaven     PackagesGetPackageVersionForUserPackageType = "maven"
	PackagesGetPackageVersionForUserPackageTypeRubygems  PackagesGetPackageVersionForUserPackageType = "rubygems"
	PackagesGetPackageVersionForUserPackageTypeDocker    PackagesGetPackageVersionForUserPackageType = "docker"
	PackagesGetPackageVersionForUserPackageTypeNuget     PackagesGetPackageVersionForUserPackageType = "nuget"
	PackagesGetPackageVersionForUserPackageTypeContainer PackagesGetPackageVersionForUserPackageType = "container"
)

type PackagesListPackagesForAuthenticatedUserPackageType string

const (
	PackagesListPackagesForAuthenticatedUserPackageTypeNpm       PackagesListPackagesForAuthenticatedUserPackageType = "npm"
	PackagesListPackagesForAuthenticatedUserPackageTypeMaven     PackagesListPackagesForAuthenticatedUserPackageType = "maven"
	PackagesListPackagesForAuthenticatedUserPackageTypeRubygems  PackagesListPackagesForAuthenticatedUserPackageType = "rubygems"
	PackagesListPackagesForAuthenticatedUserPackageTypeDocker    PackagesListPackagesForAuthenticatedUserPackageType = "docker"
	PackagesListPackagesForAuthenticatedUserPackageTypeNuget     PackagesListPackagesForAuthenticatedUserPackageType = "nuget"
	PackagesListPackagesForAuthenticatedUserPackageTypeContainer PackagesListPackagesForAuthenticatedUserPackageType = "container"
)

type PackagesListPackagesForAuthenticatedUserVisibility string

const (
	PackagesListPackagesForAuthenticatedUserVisibilityPublic   PackagesListPackagesForAuthenticatedUserVisibility = "public"
	PackagesListPackagesForAuthenticatedUserVisibilityPrivate  PackagesListPackagesForAuthenticatedUserVisibility = "private"
	PackagesListPackagesForAuthenticatedUserVisibilityInternal PackagesListPackagesForAuthenticatedUserVisibility = "internal"
)

type PackagesListPackagesForOrganizationApplicationJSONForbidden BasicError

func (*PackagesListPackagesForOrganizationApplicationJSONForbidden) packagesListPackagesForOrganizationRes() {
}

type PackagesListPackagesForOrganizationApplicationJSONUnauthorized BasicError

func (*PackagesListPackagesForOrganizationApplicationJSONUnauthorized) packagesListPackagesForOrganizationRes() {
}

type PackagesListPackagesForOrganizationOKApplicationJSON []Package

func (PackagesListPackagesForOrganizationOKApplicationJSON) packagesListPackagesForOrganizationRes() {
}

type PackagesListPackagesForOrganizationPackageType string

const (
	PackagesListPackagesForOrganizationPackageTypeNpm       PackagesListPackagesForOrganizationPackageType = "npm"
	PackagesListPackagesForOrganizationPackageTypeMaven     PackagesListPackagesForOrganizationPackageType = "maven"
	PackagesListPackagesForOrganizationPackageTypeRubygems  PackagesListPackagesForOrganizationPackageType = "rubygems"
	PackagesListPackagesForOrganizationPackageTypeDocker    PackagesListPackagesForOrganizationPackageType = "docker"
	PackagesListPackagesForOrganizationPackageTypeNuget     PackagesListPackagesForOrganizationPackageType = "nuget"
	PackagesListPackagesForOrganizationPackageTypeContainer PackagesListPackagesForOrganizationPackageType = "container"
)

type PackagesListPackagesForOrganizationVisibility string

const (
	PackagesListPackagesForOrganizationVisibilityPublic   PackagesListPackagesForOrganizationVisibility = "public"
	PackagesListPackagesForOrganizationVisibilityPrivate  PackagesListPackagesForOrganizationVisibility = "private"
	PackagesListPackagesForOrganizationVisibilityInternal PackagesListPackagesForOrganizationVisibility = "internal"
)

type PackagesListPackagesForUserApplicationJSONForbidden BasicError

func (*PackagesListPackagesForUserApplicationJSONForbidden) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserApplicationJSONUnauthorized BasicError

func (*PackagesListPackagesForUserApplicationJSONUnauthorized) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserOKApplicationJSON []Package

func (PackagesListPackagesForUserOKApplicationJSON) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserPackageType string

const (
	PackagesListPackagesForUserPackageTypeNpm       PackagesListPackagesForUserPackageType = "npm"
	PackagesListPackagesForUserPackageTypeMaven     PackagesListPackagesForUserPackageType = "maven"
	PackagesListPackagesForUserPackageTypeRubygems  PackagesListPackagesForUserPackageType = "rubygems"
	PackagesListPackagesForUserPackageTypeDocker    PackagesListPackagesForUserPackageType = "docker"
	PackagesListPackagesForUserPackageTypeNuget     PackagesListPackagesForUserPackageType = "nuget"
	PackagesListPackagesForUserPackageTypeContainer PackagesListPackagesForUserPackageType = "container"
)

type PackagesListPackagesForUserVisibility string

const (
	PackagesListPackagesForUserVisibilityPublic   PackagesListPackagesForUserVisibility = "public"
	PackagesListPackagesForUserVisibilityPrivate  PackagesListPackagesForUserVisibility = "private"
	PackagesListPackagesForUserVisibilityInternal PackagesListPackagesForUserVisibility = "internal"
)

type PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden BasicError

func (*PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound BasicError

func (*PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized) packagesRestorePackageForAuthenticatedUserRes() {
}

// PackagesRestorePackageForAuthenticatedUserNoContent is response for PackagesRestorePackageForAuthenticatedUser operation.
type PackagesRestorePackageForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageForAuthenticatedUserNoContent) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForAuthenticatedUserPackageType string

const (
	PackagesRestorePackageForAuthenticatedUserPackageTypeNpm       PackagesRestorePackageForAuthenticatedUserPackageType = "npm"
	PackagesRestorePackageForAuthenticatedUserPackageTypeMaven     PackagesRestorePackageForAuthenticatedUserPackageType = "maven"
	PackagesRestorePackageForAuthenticatedUserPackageTypeRubygems  PackagesRestorePackageForAuthenticatedUserPackageType = "rubygems"
	PackagesRestorePackageForAuthenticatedUserPackageTypeDocker    PackagesRestorePackageForAuthenticatedUserPackageType = "docker"
	PackagesRestorePackageForAuthenticatedUserPackageTypeNuget     PackagesRestorePackageForAuthenticatedUserPackageType = "nuget"
	PackagesRestorePackageForAuthenticatedUserPackageTypeContainer PackagesRestorePackageForAuthenticatedUserPackageType = "container"
)

type PackagesRestorePackageForOrgApplicationJSONForbidden BasicError

func (*PackagesRestorePackageForOrgApplicationJSONForbidden) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForOrgApplicationJSONNotFound BasicError

func (*PackagesRestorePackageForOrgApplicationJSONNotFound) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForOrgApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageForOrgApplicationJSONUnauthorized) packagesRestorePackageForOrgRes() {}

// PackagesRestorePackageForOrgNoContent is response for PackagesRestorePackageForOrg operation.
type PackagesRestorePackageForOrgNoContent struct{}

func (*PackagesRestorePackageForOrgNoContent) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForOrgPackageType string

const (
	PackagesRestorePackageForOrgPackageTypeNpm       PackagesRestorePackageForOrgPackageType = "npm"
	PackagesRestorePackageForOrgPackageTypeMaven     PackagesRestorePackageForOrgPackageType = "maven"
	PackagesRestorePackageForOrgPackageTypeRubygems  PackagesRestorePackageForOrgPackageType = "rubygems"
	PackagesRestorePackageForOrgPackageTypeDocker    PackagesRestorePackageForOrgPackageType = "docker"
	PackagesRestorePackageForOrgPackageTypeNuget     PackagesRestorePackageForOrgPackageType = "nuget"
	PackagesRestorePackageForOrgPackageTypeContainer PackagesRestorePackageForOrgPackageType = "container"
)

type PackagesRestorePackageForUserApplicationJSONForbidden BasicError

func (*PackagesRestorePackageForUserApplicationJSONForbidden) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageForUserApplicationJSONNotFound BasicError

func (*PackagesRestorePackageForUserApplicationJSONNotFound) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageForUserApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageForUserApplicationJSONUnauthorized) packagesRestorePackageForUserRes() {}

// PackagesRestorePackageForUserNoContent is response for PackagesRestorePackageForUser operation.
type PackagesRestorePackageForUserNoContent struct{}

func (*PackagesRestorePackageForUserNoContent) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageForUserPackageType string

const (
	PackagesRestorePackageForUserPackageTypeNpm       PackagesRestorePackageForUserPackageType = "npm"
	PackagesRestorePackageForUserPackageTypeMaven     PackagesRestorePackageForUserPackageType = "maven"
	PackagesRestorePackageForUserPackageTypeRubygems  PackagesRestorePackageForUserPackageType = "rubygems"
	PackagesRestorePackageForUserPackageTypeDocker    PackagesRestorePackageForUserPackageType = "docker"
	PackagesRestorePackageForUserPackageTypeNuget     PackagesRestorePackageForUserPackageType = "nuget"
	PackagesRestorePackageForUserPackageTypeContainer PackagesRestorePackageForUserPackageType = "container"
)

type PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

// PackagesRestorePackageVersionForAuthenticatedUserNoContent is response for PackagesRestorePackageVersionForAuthenticatedUser operation.
type PackagesRestorePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageVersionForAuthenticatedUserNoContent) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForAuthenticatedUserPackageType string

const (
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNpm       PackagesRestorePackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeMaven     PackagesRestorePackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesRestorePackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeDocker    PackagesRestorePackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNuget     PackagesRestorePackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeContainer PackagesRestorePackageVersionForAuthenticatedUserPackageType = "container"
)

type PackagesRestorePackageVersionForOrgApplicationJSONForbidden BasicError

func (*PackagesRestorePackageVersionForOrgApplicationJSONForbidden) packagesRestorePackageVersionForOrgRes() {
}

type PackagesRestorePackageVersionForOrgApplicationJSONNotFound BasicError

func (*PackagesRestorePackageVersionForOrgApplicationJSONNotFound) packagesRestorePackageVersionForOrgRes() {
}

type PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized) packagesRestorePackageVersionForOrgRes() {
}

// PackagesRestorePackageVersionForOrgNoContent is response for PackagesRestorePackageVersionForOrg operation.
type PackagesRestorePackageVersionForOrgNoContent struct{}

func (*PackagesRestorePackageVersionForOrgNoContent) packagesRestorePackageVersionForOrgRes() {}

type PackagesRestorePackageVersionForOrgPackageType string

const (
	PackagesRestorePackageVersionForOrgPackageTypeNpm       PackagesRestorePackageVersionForOrgPackageType = "npm"
	PackagesRestorePackageVersionForOrgPackageTypeMaven     PackagesRestorePackageVersionForOrgPackageType = "maven"
	PackagesRestorePackageVersionForOrgPackageTypeRubygems  PackagesRestorePackageVersionForOrgPackageType = "rubygems"
	PackagesRestorePackageVersionForOrgPackageTypeDocker    PackagesRestorePackageVersionForOrgPackageType = "docker"
	PackagesRestorePackageVersionForOrgPackageTypeNuget     PackagesRestorePackageVersionForOrgPackageType = "nuget"
	PackagesRestorePackageVersionForOrgPackageTypeContainer PackagesRestorePackageVersionForOrgPackageType = "container"
)

type PackagesRestorePackageVersionForUserApplicationJSONForbidden BasicError

func (*PackagesRestorePackageVersionForUserApplicationJSONForbidden) packagesRestorePackageVersionForUserRes() {
}

type PackagesRestorePackageVersionForUserApplicationJSONNotFound BasicError

func (*PackagesRestorePackageVersionForUserApplicationJSONNotFound) packagesRestorePackageVersionForUserRes() {
}

type PackagesRestorePackageVersionForUserApplicationJSONUnauthorized BasicError

func (*PackagesRestorePackageVersionForUserApplicationJSONUnauthorized) packagesRestorePackageVersionForUserRes() {
}

// PackagesRestorePackageVersionForUserNoContent is response for PackagesRestorePackageVersionForUser operation.
type PackagesRestorePackageVersionForUserNoContent struct{}

func (*PackagesRestorePackageVersionForUserNoContent) packagesRestorePackageVersionForUserRes() {}

type PackagesRestorePackageVersionForUserPackageType string

const (
	PackagesRestorePackageVersionForUserPackageTypeNpm       PackagesRestorePackageVersionForUserPackageType = "npm"
	PackagesRestorePackageVersionForUserPackageTypeMaven     PackagesRestorePackageVersionForUserPackageType = "maven"
	PackagesRestorePackageVersionForUserPackageTypeRubygems  PackagesRestorePackageVersionForUserPackageType = "rubygems"
	PackagesRestorePackageVersionForUserPackageTypeDocker    PackagesRestorePackageVersionForUserPackageType = "docker"
	PackagesRestorePackageVersionForUserPackageTypeNuget     PackagesRestorePackageVersionForUserPackageType = "nuget"
	PackagesRestorePackageVersionForUserPackageTypeContainer PackagesRestorePackageVersionForUserPackageType = "container"
)

// The configuration for GitHub Pages for a repository.
// Ref: #/components/schemas/page
type Page struct {
	// The API address for accessing this Page resource.
	URL url.URL "json:\"url\""
	// The status of the most recent build of the Page.
	Status NilPageStatus "json:\"status\""
	// The Pages site's custom domain.
	Cname NilString "json:\"cname\""
	// The state if the domain is protected.
	ProtectedDomainState OptNilPageProtectedDomainState "json:\"protected_domain_state\""
	// The timestamp when a pending domain becomes unverified.
	PendingDomainUnverifiedAt OptNilDateTime "json:\"pending_domain_unverified_at\""
	// Whether the Page has a custom 404 page.
	Custom404 bool "json:\"custom_404\""
	// The web address the Page can be accessed from.
	HTMLURL OptURI             "json:\"html_url\""
	Source  OptPagesSourceHash "json:\"source\""
	// Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to
	// anyone on the internet. If set to `false`, the site will only be accessible to users who have at
	// least `read` access to the repository that published the site.
	Public           bool                     "json:\"public\""
	HTTPSCertificate OptPagesHTTPSCertificate "json:\"https_certificate\""
	// Whether https is enabled on the domain.
	HTTPSEnforced OptBool "json:\"https_enforced\""
}

func (*Page) reposCreatePagesSiteRes() {}
func (*Page) reposGetPagesRes()        {}

// Page Build.
// Ref: #/components/schemas/page-build
type PageBuild struct {
	URL       url.URL               "json:\"url\""
	Status    string                "json:\"status\""
	Error     PageBuildError        "json:\"error\""
	Pusher    NilNullableSimpleUser "json:\"pusher\""
	Commit    string                "json:\"commit\""
	Duration  int                   "json:\"duration\""
	CreatedAt time.Time             "json:\"created_at\""
	UpdatedAt time.Time             "json:\"updated_at\""
}

type PageBuildError struct {
	Message NilString "json:\"message\""
}

// Page Build Status.
// Ref: #/components/schemas/page-build-status
type PageBuildStatus struct {
	URL    url.URL "json:\"url\""
	Status string  "json:\"status\""
}

// The state if the domain is protected.
type PageProtectedDomainState string

const (
	PageProtectedDomainStatePending    PageProtectedDomainState = "pending"
	PageProtectedDomainStateVerified   PageProtectedDomainState = "verified"
	PageProtectedDomainStateUnverified PageProtectedDomainState = "unverified"
)

// The status of the most recent build of the Page.
type PageStatus string

const (
	PageStatusBuilt    PageStatus = "built"
	PageStatusBuilding PageStatus = "building"
	PageStatusErrored  PageStatus = "errored"
)

// Ref: #/components/schemas/pages-https-certificate
type PagesHTTPSCertificate struct {
	State       PagesHTTPSCertificateState "json:\"state\""
	Description string                     "json:\"description\""
	// Array of the domain set and its alternate name (if it is configured).
	Domains   []jx.Raw "json:\"domains\""
	ExpiresAt OptDate  "json:\"expires_at\""
}

type PagesHTTPSCertificateState string

const (
	PagesHTTPSCertificateStateNew                  PagesHTTPSCertificateState = "new"
	PagesHTTPSCertificateStateAuthorizationCreated PagesHTTPSCertificateState = "authorization_created"
	PagesHTTPSCertificateStateAuthorizationPending PagesHTTPSCertificateState = "authorization_pending"
	PagesHTTPSCertificateStateAuthorized           PagesHTTPSCertificateState = "authorized"
	PagesHTTPSCertificateStateAuthorizationRevoked PagesHTTPSCertificateState = "authorization_revoked"
	PagesHTTPSCertificateStateIssued               PagesHTTPSCertificateState = "issued"
	PagesHTTPSCertificateStateUploaded             PagesHTTPSCertificateState = "uploaded"
	PagesHTTPSCertificateStateApproved             PagesHTTPSCertificateState = "approved"
	PagesHTTPSCertificateStateErrored              PagesHTTPSCertificateState = "errored"
	PagesHTTPSCertificateStateBadAuthz             PagesHTTPSCertificateState = "bad_authz"
	PagesHTTPSCertificateStateDestroyPending       PagesHTTPSCertificateState = "destroy_pending"
	PagesHTTPSCertificateStateDNSChanged           PagesHTTPSCertificateState = "dns_changed"
)

// Pages Health Check Status.
// Ref: #/components/schemas/pages-health-check
type PagesHealthCheck struct {
	Domain    OptPagesHealthCheckDomain       "json:\"domain\""
	AltDomain OptNilPagesHealthCheckAltDomain "json:\"alt_domain\""
}

func (*PagesHealthCheck) reposGetPagesHealthCheckRes() {}

type PagesHealthCheckAltDomain struct {
	Host                          OptString    "json:\"host\""
	URI                           OptString    "json:\"uri\""
	Nameservers                   OptString    "json:\"nameservers\""
	DNSResolves                   OptBool      "json:\"dns_resolves\""
	IsProxied                     OptNilBool   "json:\"is_proxied\""
	IsCloudflareIP                OptNilBool   "json:\"is_cloudflare_ip\""
	IsFastlyIP                    OptNilBool   "json:\"is_fastly_ip\""
	IsOldIPAddress                OptNilBool   "json:\"is_old_ip_address\""
	IsARecord                     OptNilBool   "json:\"is_a_record\""
	HasCnameRecord                OptNilBool   "json:\"has_cname_record\""
	HasMxRecordsPresent           OptNilBool   "json:\"has_mx_records_present\""
	IsValidDomain                 OptBool      "json:\"is_valid_domain\""
	IsApexDomain                  OptBool      "json:\"is_apex_domain\""
	ShouldBeARecord               OptNilBool   "json:\"should_be_a_record\""
	IsCnameToGithubUserDomain     OptNilBool   "json:\"is_cname_to_github_user_domain\""
	IsCnameToPagesDotGithubDotCom OptNilBool   "json:\"is_cname_to_pages_dot_github_dot_com\""
	IsCnameToFastly               OptNilBool   "json:\"is_cname_to_fastly\""
	IsPointedToGithubPagesIP      OptNilBool   "json:\"is_pointed_to_github_pages_ip\""
	IsNonGithubPagesIPPresent     OptNilBool   "json:\"is_non_github_pages_ip_present\""
	IsPagesDomain                 OptBool      "json:\"is_pages_domain\""
	IsServedByPages               OptNilBool   "json:\"is_served_by_pages\""
	IsValid                       OptBool      "json:\"is_valid\""
	Reason                        OptNilString "json:\"reason\""
	RespondsToHTTPS               OptBool      "json:\"responds_to_https\""
	EnforcesHTTPS                 OptBool      "json:\"enforces_https\""
	HTTPSError                    OptNilString "json:\"https_error\""
	IsHTTPSEligible               OptNilBool   "json:\"is_https_eligible\""
	CaaError                      OptNilString "json:\"caa_error\""
}

type PagesHealthCheckDomain struct {
	Host                          OptString    "json:\"host\""
	URI                           OptString    "json:\"uri\""
	Nameservers                   OptString    "json:\"nameservers\""
	DNSResolves                   OptBool      "json:\"dns_resolves\""
	IsProxied                     OptNilBool   "json:\"is_proxied\""
	IsCloudflareIP                OptNilBool   "json:\"is_cloudflare_ip\""
	IsFastlyIP                    OptNilBool   "json:\"is_fastly_ip\""
	IsOldIPAddress                OptNilBool   "json:\"is_old_ip_address\""
	IsARecord                     OptNilBool   "json:\"is_a_record\""
	HasCnameRecord                OptNilBool   "json:\"has_cname_record\""
	HasMxRecordsPresent           OptNilBool   "json:\"has_mx_records_present\""
	IsValidDomain                 OptBool      "json:\"is_valid_domain\""
	IsApexDomain                  OptBool      "json:\"is_apex_domain\""
	ShouldBeARecord               OptNilBool   "json:\"should_be_a_record\""
	IsCnameToGithubUserDomain     OptNilBool   "json:\"is_cname_to_github_user_domain\""
	IsCnameToPagesDotGithubDotCom OptNilBool   "json:\"is_cname_to_pages_dot_github_dot_com\""
	IsCnameToFastly               OptNilBool   "json:\"is_cname_to_fastly\""
	IsPointedToGithubPagesIP      OptNilBool   "json:\"is_pointed_to_github_pages_ip\""
	IsNonGithubPagesIPPresent     OptNilBool   "json:\"is_non_github_pages_ip_present\""
	IsPagesDomain                 OptBool      "json:\"is_pages_domain\""
	IsServedByPages               OptNilBool   "json:\"is_served_by_pages\""
	IsValid                       OptBool      "json:\"is_valid\""
	Reason                        OptNilString "json:\"reason\""
	RespondsToHTTPS               OptBool      "json:\"responds_to_https\""
	EnforcesHTTPS                 OptBool      "json:\"enforces_https\""
	HTTPSError                    OptNilString "json:\"https_error\""
	IsHTTPSEligible               OptNilBool   "json:\"is_https_eligible\""
	CaaError                      OptNilString "json:\"caa_error\""
}

// Ref: #/components/schemas/pages-source-hash
type PagesSourceHash struct {
	Branch string "json:\"branch\""
	Path   string "json:\"path\""
}

// Ref: #/components/schemas/participation-stats
type ParticipationStats struct {
	All   []int "json:\"all\""
	Owner []int "json:\"owner\""
}

func (*ParticipationStats) reposGetParticipationStatsRes() {}

// Porter Author.
// Ref: #/components/schemas/porter-author
type PorterAuthor struct {
	ID         int     "json:\"id\""
	RemoteID   string  "json:\"remote_id\""
	RemoteName string  "json:\"remote_name\""
	Email      string  "json:\"email\""
	Name       string  "json:\"name\""
	URL        url.URL "json:\"url\""
	ImportURL  url.URL "json:\"import_url\""
}

func (*PorterAuthor) migrationsMapCommitAuthorRes() {}

// Porter Large File.
// Ref: #/components/schemas/porter-large-file
type PorterLargeFile struct {
	RefName string "json:\"ref_name\""
	Path    string "json:\"path\""
	Oid     string "json:\"oid\""
	Size    int    "json:\"size\""
}

type PreviewHeaderMissing struct {
	Message          string "json:\"message\""
	DocumentationURL string "json:\"documentation_url\""
}

func (*PreviewHeaderMissing) appsCreateContentAttachmentRes()                {}
func (*PreviewHeaderMissing) appsCreateInstallationAccessTokenRes()          {}
func (*PreviewHeaderMissing) appsGetBySlugRes()                              {}
func (*PreviewHeaderMissing) orgsListBlockedUsersRes()                       {}
func (*PreviewHeaderMissing) projectsCreateForAuthenticatedUserRes()         {}
func (*PreviewHeaderMissing) reactionsCreateForCommitCommentRes()            {}
func (*PreviewHeaderMissing) reactionsCreateForIssueCommentRes()             {}
func (*PreviewHeaderMissing) reactionsCreateForIssueRes()                    {}
func (*PreviewHeaderMissing) reactionsCreateForPullRequestReviewCommentRes() {}
func (*PreviewHeaderMissing) reactionsCreateForReleaseRes()                  {}
func (*PreviewHeaderMissing) reactionsDeleteLegacyRes()                      {}
func (*PreviewHeaderMissing) reactionsListForCommitCommentRes()              {}
func (*PreviewHeaderMissing) reactionsListForIssueCommentRes()               {}
func (*PreviewHeaderMissing) reactionsListForIssueRes()                      {}
func (*PreviewHeaderMissing) reactionsListForPullRequestReviewCommentRes()   {}
func (*PreviewHeaderMissing) reposCreatePagesSiteRes()                       {}
func (*PreviewHeaderMissing) reposDeletePagesSiteRes()                       {}
func (*PreviewHeaderMissing) reposGetAllTopicsRes()                          {}
func (*PreviewHeaderMissing) reposGetBranchRes()                             {}
func (*PreviewHeaderMissing) reposGetDeploymentStatusRes()                   {}
func (*PreviewHeaderMissing) reposGetReleaseAssetRes()                       {}
func (*PreviewHeaderMissing) reposReplaceAllTopicsRes()                      {}
func (*PreviewHeaderMissing) searchCommitsRes()                              {}
func (*PreviewHeaderMissing) searchTopicsRes()                               {}
func (*PreviewHeaderMissing) teamsRemoveProjectLegacyRes()                   {}
func (*PreviewHeaderMissing) usersListBlockedByAuthenticatedRes()            {}

// Private User.
// Ref: #/components/schemas/private-user
type PrivateUser struct {
	Login                   string             "json:\"login\""
	ID                      int                "json:\"id\""
	NodeID                  string             "json:\"node_id\""
	AvatarURL               url.URL            "json:\"avatar_url\""
	GravatarID              NilString          "json:\"gravatar_id\""
	URL                     url.URL            "json:\"url\""
	HTMLURL                 url.URL            "json:\"html_url\""
	FollowersURL            url.URL            "json:\"followers_url\""
	FollowingURL            string             "json:\"following_url\""
	GistsURL                string             "json:\"gists_url\""
	StarredURL              string             "json:\"starred_url\""
	SubscriptionsURL        url.URL            "json:\"subscriptions_url\""
	OrganizationsURL        url.URL            "json:\"organizations_url\""
	ReposURL                url.URL            "json:\"repos_url\""
	EventsURL               string             "json:\"events_url\""
	ReceivedEventsURL       url.URL            "json:\"received_events_url\""
	Type                    string             "json:\"type\""
	SiteAdmin               bool               "json:\"site_admin\""
	Name                    NilString          "json:\"name\""
	Company                 NilString          "json:\"company\""
	Blog                    NilString          "json:\"blog\""
	Location                NilString          "json:\"location\""
	Email                   NilString          "json:\"email\""
	Hireable                NilBool            "json:\"hireable\""
	Bio                     NilString          "json:\"bio\""
	TwitterUsername         OptNilString       "json:\"twitter_username\""
	PublicRepos             int                "json:\"public_repos\""
	PublicGists             int                "json:\"public_gists\""
	Followers               int                "json:\"followers\""
	Following               int                "json:\"following\""
	CreatedAt               time.Time          "json:\"created_at\""
	UpdatedAt               time.Time          "json:\"updated_at\""
	PrivateGists            int                "json:\"private_gists\""
	TotalPrivateRepos       int                "json:\"total_private_repos\""
	OwnedPrivateRepos       int                "json:\"owned_private_repos\""
	DiskUsage               int                "json:\"disk_usage\""
	Collaborators           int                "json:\"collaborators\""
	TwoFactorAuthentication bool               "json:\"two_factor_authentication\""
	Plan                    OptPrivateUserPlan "json:\"plan\""
	SuspendedAt             OptNilDateTime     "json:\"suspended_at\""
	BusinessPlus            OptBool            "json:\"business_plus\""
	LdapDn                  OptString          "json:\"ldap_dn\""
}

func (*PrivateUser) usersUpdateAuthenticatedRes() {}

type PrivateUserPlan struct {
	Collaborators int    "json:\"collaborators\""
	Name          string "json:\"name\""
	Space         int    "json:\"space\""
	PrivateRepos  int    "json:\"private_repos\""
}

// Projects are a way to organize columns and cards of work.
// Ref: #/components/schemas/project
type Project struct {
	OwnerURL   url.URL "json:\"owner_url\""
	URL        url.URL "json:\"url\""
	HTMLURL    url.URL "json:\"html_url\""
	ColumnsURL url.URL "json:\"columns_url\""
	ID         int     "json:\"id\""
	NodeID     string  "json:\"node_id\""
	// Name of the project.
	Name string "json:\"name\""
	// Body of the project.
	Body   NilString "json:\"body\""
	Number int       "json:\"number\""
	// State of the project; either 'open' or 'closed'.
	State     string                "json:\"state\""
	Creator   NilNullableSimpleUser "json:\"creator\""
	CreatedAt time.Time             "json:\"created_at\""
	UpdatedAt time.Time             "json:\"updated_at\""
	// The baseline permission that all organization members have on this project. Only present if owner
	// is an organization.
	OrganizationPermission OptProjectOrganizationPermission "json:\"organization_permission\""
	// Whether or not this project can be seen by everyone. Only present if owner is an organization.
	Private OptBool "json:\"private\""
}

func (*Project) projectsCreateForAuthenticatedUserRes() {}
func (*Project) projectsCreateForOrgRes()               {}
func (*Project) projectsCreateForRepoRes()              {}
func (*Project) projectsGetRes()                        {}
func (*Project) projectsUpdateRes()                     {}

// Project cards represent a scope of work.
// Ref: #/components/schemas/project-card
type ProjectCard struct {
	URL url.URL "json:\"url\""
	// The project card's ID.
	ID        int                   "json:\"id\""
	NodeID    string                "json:\"node_id\""
	Note      NilString             "json:\"note\""
	Creator   NilNullableSimpleUser "json:\"creator\""
	CreatedAt time.Time             "json:\"created_at\""
	UpdatedAt time.Time             "json:\"updated_at\""
	// Whether or not the card is archived.
	Archived   OptBool   "json:\"archived\""
	ColumnName OptString "json:\"column_name\""
	ProjectID  OptString "json:\"project_id\""
	ColumnURL  url.URL   "json:\"column_url\""
	ContentURL OptURI    "json:\"content_url\""
	ProjectURL url.URL   "json:\"project_url\""
}

func (*ProjectCard) projectsGetCardRes()    {}
func (*ProjectCard) projectsUpdateCardRes() {}

// Project columns contain cards of work.
// Ref: #/components/schemas/project-column
type ProjectColumn struct {
	URL        url.URL "json:\"url\""
	ProjectURL url.URL "json:\"project_url\""
	CardsURL   url.URL "json:\"cards_url\""
	// The unique identifier of the project column.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// Name of the project column.
	Name      string    "json:\"name\""
	CreatedAt time.Time "json:\"created_at\""
	UpdatedAt time.Time "json:\"updated_at\""
}

func (*ProjectColumn) projectsCreateColumnRes() {}
func (*ProjectColumn) projectsGetColumnRes()    {}
func (*ProjectColumn) projectsUpdateColumnRes() {}

// The baseline permission that all organization members have on this project. Only present if owner
// is an organization.
type ProjectOrganizationPermission string

const (
	ProjectOrganizationPermissionRead  ProjectOrganizationPermission = "read"
	ProjectOrganizationPermissionWrite ProjectOrganizationPermission = "write"
	ProjectOrganizationPermissionAdmin ProjectOrganizationPermission = "admin"
	ProjectOrganizationPermissionNone  ProjectOrganizationPermission = "none"
)

type ProjectsAddCollaboratorApplicationJSONForbidden BasicError

func (*ProjectsAddCollaboratorApplicationJSONForbidden) projectsAddCollaboratorRes() {}

type ProjectsAddCollaboratorApplicationJSONNotFound BasicError

func (*ProjectsAddCollaboratorApplicationJSONNotFound) projectsAddCollaboratorRes() {}

type ProjectsAddCollaboratorApplicationJSONUnauthorized BasicError

func (*ProjectsAddCollaboratorApplicationJSONUnauthorized) projectsAddCollaboratorRes() {}

// ProjectsAddCollaboratorNoContent is response for ProjectsAddCollaborator operation.
type ProjectsAddCollaboratorNoContent struct{}

func (*ProjectsAddCollaboratorNoContent) projectsAddCollaboratorRes() {}

type ProjectsAddCollaboratorReq struct {
	// The permission to grant the collaborator.
	Permission OptProjectsAddCollaboratorReqPermission "json:\"permission\""
}

// The permission to grant the collaborator.
type ProjectsAddCollaboratorReqPermission string

const (
	ProjectsAddCollaboratorReqPermissionRead  ProjectsAddCollaboratorReqPermission = "read"
	ProjectsAddCollaboratorReqPermissionWrite ProjectsAddCollaboratorReqPermission = "write"
	ProjectsAddCollaboratorReqPermissionAdmin ProjectsAddCollaboratorReqPermission = "admin"
)

type ProjectsCreateColumnApplicationJSONForbidden BasicError

func (*ProjectsCreateColumnApplicationJSONForbidden) projectsCreateColumnRes() {}

type ProjectsCreateColumnApplicationJSONUnauthorized BasicError

func (*ProjectsCreateColumnApplicationJSONUnauthorized) projectsCreateColumnRes() {}

type ProjectsCreateColumnReq struct {
	// Name of the project column.
	Name string "json:\"name\""
}

type ProjectsCreateForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ProjectsCreateForAuthenticatedUserApplicationJSONForbidden) projectsCreateForAuthenticatedUserRes() {
}

type ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized) projectsCreateForAuthenticatedUserRes() {
}

type ProjectsCreateForAuthenticatedUserReq struct {
	// Name of the project.
	Name string "json:\"name\""
	// Body of the project.
	Body OptNilString "json:\"body\""
}

type ProjectsCreateForOrgApplicationJSONForbidden BasicError

func (*ProjectsCreateForOrgApplicationJSONForbidden) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgApplicationJSONGone BasicError

func (*ProjectsCreateForOrgApplicationJSONGone) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgApplicationJSONNotFound BasicError

func (*ProjectsCreateForOrgApplicationJSONNotFound) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForOrgApplicationJSONUnauthorized) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgReq struct {
	// The name of the project.
	Name string "json:\"name\""
	// The description of the project.
	Body OptString "json:\"body\""
}

type ProjectsCreateForRepoApplicationJSONForbidden BasicError

func (*ProjectsCreateForRepoApplicationJSONForbidden) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoApplicationJSONGone BasicError

func (*ProjectsCreateForRepoApplicationJSONGone) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoApplicationJSONNotFound BasicError

func (*ProjectsCreateForRepoApplicationJSONNotFound) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForRepoApplicationJSONUnauthorized) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoReq struct {
	// The name of the project.
	Name string "json:\"name\""
	// The description of the project.
	Body OptString "json:\"body\""
}

type ProjectsDeleteApplicationJSONGone BasicError

func (*ProjectsDeleteApplicationJSONGone) projectsDeleteRes() {}

type ProjectsDeleteApplicationJSONNotFound BasicError

func (*ProjectsDeleteApplicationJSONNotFound) projectsDeleteRes() {}

type ProjectsDeleteApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteApplicationJSONUnauthorized) projectsDeleteRes() {}

type ProjectsDeleteCardApplicationJSONNotFound BasicError

func (*ProjectsDeleteCardApplicationJSONNotFound) projectsDeleteCardRes() {}

type ProjectsDeleteCardApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteCardApplicationJSONUnauthorized) projectsDeleteCardRes() {}

type ProjectsDeleteCardForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
	Errors           []string  "json:\"errors\""
}

func (*ProjectsDeleteCardForbidden) projectsDeleteCardRes() {}

// ProjectsDeleteCardNoContent is response for ProjectsDeleteCard operation.
type ProjectsDeleteCardNoContent struct{}

func (*ProjectsDeleteCardNoContent) projectsDeleteCardRes() {}

type ProjectsDeleteColumnApplicationJSONForbidden BasicError

func (*ProjectsDeleteColumnApplicationJSONForbidden) projectsDeleteColumnRes() {}

type ProjectsDeleteColumnApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteColumnApplicationJSONUnauthorized) projectsDeleteColumnRes() {}

// ProjectsDeleteColumnNoContent is response for ProjectsDeleteColumn operation.
type ProjectsDeleteColumnNoContent struct{}

func (*ProjectsDeleteColumnNoContent) projectsDeleteColumnRes() {}

type ProjectsDeleteForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
	Errors           []string  "json:\"errors\""
}

func (*ProjectsDeleteForbidden) projectsDeleteRes() {}

// ProjectsDeleteNoContent is response for ProjectsDelete operation.
type ProjectsDeleteNoContent struct{}

func (*ProjectsDeleteNoContent) projectsDeleteRes() {}

type ProjectsGetApplicationJSONForbidden BasicError

func (*ProjectsGetApplicationJSONForbidden) projectsGetRes() {}

type ProjectsGetApplicationJSONUnauthorized BasicError

func (*ProjectsGetApplicationJSONUnauthorized) projectsGetRes() {}

type ProjectsGetCardApplicationJSONForbidden BasicError

func (*ProjectsGetCardApplicationJSONForbidden) projectsGetCardRes() {}

type ProjectsGetCardApplicationJSONNotFound BasicError

func (*ProjectsGetCardApplicationJSONNotFound) projectsGetCardRes() {}

type ProjectsGetCardApplicationJSONUnauthorized BasicError

func (*ProjectsGetCardApplicationJSONUnauthorized) projectsGetCardRes() {}

type ProjectsGetColumnApplicationJSONForbidden BasicError

func (*ProjectsGetColumnApplicationJSONForbidden) projectsGetColumnRes() {}

type ProjectsGetColumnApplicationJSONNotFound BasicError

func (*ProjectsGetColumnApplicationJSONNotFound) projectsGetColumnRes() {}

type ProjectsGetColumnApplicationJSONUnauthorized BasicError

func (*ProjectsGetColumnApplicationJSONUnauthorized) projectsGetColumnRes() {}

type ProjectsGetPermissionForUserApplicationJSONForbidden BasicError

func (*ProjectsGetPermissionForUserApplicationJSONForbidden) projectsGetPermissionForUserRes() {}

type ProjectsGetPermissionForUserApplicationJSONNotFound BasicError

func (*ProjectsGetPermissionForUserApplicationJSONNotFound) projectsGetPermissionForUserRes() {}

type ProjectsGetPermissionForUserApplicationJSONUnauthorized BasicError

func (*ProjectsGetPermissionForUserApplicationJSONUnauthorized) projectsGetPermissionForUserRes() {}

type ProjectsListCardsApplicationJSONForbidden BasicError

func (*ProjectsListCardsApplicationJSONForbidden) projectsListCardsRes() {}

type ProjectsListCardsApplicationJSONUnauthorized BasicError

func (*ProjectsListCardsApplicationJSONUnauthorized) projectsListCardsRes() {}

type ProjectsListCardsArchivedState string

const (
	ProjectsListCardsArchivedStateAll         ProjectsListCardsArchivedState = "all"
	ProjectsListCardsArchivedStateArchived    ProjectsListCardsArchivedState = "archived"
	ProjectsListCardsArchivedStateNotArchived ProjectsListCardsArchivedState = "not_archived"
)

type ProjectsListCardsOKApplicationJSON []ProjectCard

func (ProjectsListCardsOKApplicationJSON) projectsListCardsRes() {}

type ProjectsListCollaboratorsAffiliation string

const (
	ProjectsListCollaboratorsAffiliationOutside ProjectsListCollaboratorsAffiliation = "outside"
	ProjectsListCollaboratorsAffiliationDirect  ProjectsListCollaboratorsAffiliation = "direct"
	ProjectsListCollaboratorsAffiliationAll     ProjectsListCollaboratorsAffiliation = "all"
)

type ProjectsListCollaboratorsApplicationJSONForbidden BasicError

func (*ProjectsListCollaboratorsApplicationJSONForbidden) projectsListCollaboratorsRes() {}

type ProjectsListCollaboratorsApplicationJSONNotFound BasicError

func (*ProjectsListCollaboratorsApplicationJSONNotFound) projectsListCollaboratorsRes() {}

type ProjectsListCollaboratorsApplicationJSONUnauthorized BasicError

func (*ProjectsListCollaboratorsApplicationJSONUnauthorized) projectsListCollaboratorsRes() {}

type ProjectsListCollaboratorsOKApplicationJSON []SimpleUser

func (ProjectsListCollaboratorsOKApplicationJSON) projectsListCollaboratorsRes() {}

type ProjectsListColumnsApplicationJSONForbidden BasicError

func (*ProjectsListColumnsApplicationJSONForbidden) projectsListColumnsRes() {}

type ProjectsListColumnsApplicationJSONUnauthorized BasicError

func (*ProjectsListColumnsApplicationJSONUnauthorized) projectsListColumnsRes() {}

type ProjectsListColumnsOKApplicationJSON []ProjectColumn

func (ProjectsListColumnsOKApplicationJSON) projectsListColumnsRes() {}

type ProjectsListForOrgOKApplicationJSON []Project

func (ProjectsListForOrgOKApplicationJSON) projectsListForOrgRes() {}

type ProjectsListForOrgState string

const (
	ProjectsListForOrgStateOpen   ProjectsListForOrgState = "open"
	ProjectsListForOrgStateClosed ProjectsListForOrgState = "closed"
	ProjectsListForOrgStateAll    ProjectsListForOrgState = "all"
)

type ProjectsListForRepoApplicationJSONForbidden BasicError

func (*ProjectsListForRepoApplicationJSONForbidden) projectsListForRepoRes() {}

type ProjectsListForRepoApplicationJSONGone BasicError

func (*ProjectsListForRepoApplicationJSONGone) projectsListForRepoRes() {}

type ProjectsListForRepoApplicationJSONNotFound BasicError

func (*ProjectsListForRepoApplicationJSONNotFound) projectsListForRepoRes() {}

type ProjectsListForRepoApplicationJSONUnauthorized BasicError

func (*ProjectsListForRepoApplicationJSONUnauthorized) projectsListForRepoRes() {}

type ProjectsListForRepoOKApplicationJSON []Project

func (ProjectsListForRepoOKApplicationJSON) projectsListForRepoRes() {}

type ProjectsListForRepoState string

const (
	ProjectsListForRepoStateOpen   ProjectsListForRepoState = "open"
	ProjectsListForRepoStateClosed ProjectsListForRepoState = "closed"
	ProjectsListForRepoStateAll    ProjectsListForRepoState = "all"
)

type ProjectsListForUserOKApplicationJSON []Project

func (ProjectsListForUserOKApplicationJSON) projectsListForUserRes() {}

type ProjectsListForUserState string

const (
	ProjectsListForUserStateOpen   ProjectsListForUserState = "open"
	ProjectsListForUserStateClosed ProjectsListForUserState = "closed"
	ProjectsListForUserStateAll    ProjectsListForUserState = "all"
)

type ProjectsMoveCardCreated map[string]jx.Raw

func (s *ProjectsMoveCardCreated) init() ProjectsMoveCardCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (ProjectsMoveCardCreated) projectsMoveCardRes() {}

type ProjectsMoveCardForbidden struct {
	Message          OptString                             "json:\"message\""
	DocumentationURL OptString                             "json:\"documentation_url\""
	Errors           []ProjectsMoveCardForbiddenErrorsItem "json:\"errors\""
}

func (*ProjectsMoveCardForbidden) projectsMoveCardRes() {}

type ProjectsMoveCardForbiddenErrorsItem struct {
	Code     OptString "json:\"code\""
	Message  OptString "json:\"message\""
	Resource OptString "json:\"resource\""
	Field    OptString "json:\"field\""
}

type ProjectsMoveCardReq struct {
	// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to
	// place after the specified card.
	Position string "json:\"position\""
	// The unique identifier of the column the card should be moved to.
	ColumnID OptInt "json:\"column_id\""
}

type ProjectsMoveCardServiceUnavailable struct {
	Code             OptString                                      "json:\"code\""
	Message          OptString                                      "json:\"message\""
	DocumentationURL OptString                                      "json:\"documentation_url\""
	Errors           []ProjectsMoveCardServiceUnavailableErrorsItem "json:\"errors\""
}

func (*ProjectsMoveCardServiceUnavailable) projectsMoveCardRes() {}

type ProjectsMoveCardServiceUnavailableErrorsItem struct {
	Code    OptString "json:\"code\""
	Message OptString "json:\"message\""
}

type ProjectsMoveColumnApplicationJSONForbidden BasicError

func (*ProjectsMoveColumnApplicationJSONForbidden) projectsMoveColumnRes() {}

type ProjectsMoveColumnApplicationJSONUnauthorized BasicError

func (*ProjectsMoveColumnApplicationJSONUnauthorized) projectsMoveColumnRes() {}

type ProjectsMoveColumnCreated map[string]jx.Raw

func (s *ProjectsMoveColumnCreated) init() ProjectsMoveColumnCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

func (ProjectsMoveColumnCreated) projectsMoveColumnRes() {}

type ProjectsMoveColumnReq struct {
	// The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to
	// place after the specified column.
	Position string "json:\"position\""
}

type ProjectsRemoveCollaboratorApplicationJSONForbidden BasicError

func (*ProjectsRemoveCollaboratorApplicationJSONForbidden) projectsRemoveCollaboratorRes() {}

type ProjectsRemoveCollaboratorApplicationJSONNotFound BasicError

func (*ProjectsRemoveCollaboratorApplicationJSONNotFound) projectsRemoveCollaboratorRes() {}

type ProjectsRemoveCollaboratorApplicationJSONUnauthorized BasicError

func (*ProjectsRemoveCollaboratorApplicationJSONUnauthorized) projectsRemoveCollaboratorRes() {}

// ProjectsRemoveCollaboratorNoContent is response for ProjectsRemoveCollaborator operation.
type ProjectsRemoveCollaboratorNoContent struct{}

func (*ProjectsRemoveCollaboratorNoContent) projectsRemoveCollaboratorRes() {}

type ProjectsUpdateApplicationJSONGone BasicError

func (*ProjectsUpdateApplicationJSONGone) projectsUpdateRes() {}

type ProjectsUpdateApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateApplicationJSONUnauthorized) projectsUpdateRes() {}

type ProjectsUpdateCardApplicationJSONForbidden BasicError

func (*ProjectsUpdateCardApplicationJSONForbidden) projectsUpdateCardRes() {}

type ProjectsUpdateCardApplicationJSONNotFound BasicError

func (*ProjectsUpdateCardApplicationJSONNotFound) projectsUpdateCardRes() {}

type ProjectsUpdateCardApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateCardApplicationJSONUnauthorized) projectsUpdateCardRes() {}

type ProjectsUpdateCardReq struct {
	// The project card's note.
	Note OptNilString "json:\"note\""
	// Whether or not the card is archived.
	Archived OptBool "json:\"archived\""
}

type ProjectsUpdateColumnApplicationJSONForbidden BasicError

func (*ProjectsUpdateColumnApplicationJSONForbidden) projectsUpdateColumnRes() {}

type ProjectsUpdateColumnApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateColumnApplicationJSONUnauthorized) projectsUpdateColumnRes() {}

type ProjectsUpdateColumnReq struct {
	// Name of the project column.
	Name string "json:\"name\""
}

type ProjectsUpdateForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
	Errors           []string  "json:\"errors\""
}

func (*ProjectsUpdateForbidden) projectsUpdateRes() {}

// ProjectsUpdateNotFound is response for ProjectsUpdate operation.
type ProjectsUpdateNotFound struct{}

func (*ProjectsUpdateNotFound) projectsUpdateRes() {}

type ProjectsUpdateReq struct {
	// Name of the project.
	Name OptString "json:\"name\""
	// Body of the project.
	Body OptNilString "json:\"body\""
	// State of the project; either 'open' or 'closed'.
	State OptString "json:\"state\""
	// The baseline permission that all organization members have on this project.
	OrganizationPermission OptProjectsUpdateReqOrganizationPermission "json:\"organization_permission\""
	// Whether or not this project can be seen by everyone.
	Private OptBool "json:\"private\""
}

// The baseline permission that all organization members have on this project.
type ProjectsUpdateReqOrganizationPermission string

const (
	ProjectsUpdateReqOrganizationPermissionRead  ProjectsUpdateReqOrganizationPermission = "read"
	ProjectsUpdateReqOrganizationPermissionWrite ProjectsUpdateReqOrganizationPermission = "write"
	ProjectsUpdateReqOrganizationPermissionAdmin ProjectsUpdateReqOrganizationPermission = "admin"
	ProjectsUpdateReqOrganizationPermissionNone  ProjectsUpdateReqOrganizationPermission = "none"
)

// Branch protections protect branches.
// Ref: #/components/schemas/protected-branch
type ProtectedBranch struct {
	URL                            url.URL                                          "json:\"url\""
	RequiredStatusChecks           OptStatusCheckPolicy                             "json:\"required_status_checks\""
	RequiredPullRequestReviews     OptProtectedBranchRequiredPullRequestReviews     "json:\"required_pull_request_reviews\""
	RequiredSignatures             OptProtectedBranchRequiredSignatures             "json:\"required_signatures\""
	EnforceAdmins                  OptProtectedBranchEnforceAdmins                  "json:\"enforce_admins\""
	RequiredLinearHistory          OptProtectedBranchRequiredLinearHistory          "json:\"required_linear_history\""
	AllowForcePushes               OptProtectedBranchAllowForcePushes               "json:\"allow_force_pushes\""
	AllowDeletions                 OptProtectedBranchAllowDeletions                 "json:\"allow_deletions\""
	Restrictions                   OptBranchRestrictionPolicy                       "json:\"restrictions\""
	RequiredConversationResolution OptProtectedBranchRequiredConversationResolution "json:\"required_conversation_resolution\""
}

func (*ProtectedBranch) reposUpdateBranchProtectionRes() {}

// Protected Branch Admin Enforced.
// Ref: #/components/schemas/protected-branch-admin-enforced
type ProtectedBranchAdminEnforced struct {
	URL     url.URL "json:\"url\""
	Enabled bool    "json:\"enabled\""
}

func (*ProtectedBranchAdminEnforced) reposCreateCommitSignatureProtectionRes() {}
func (*ProtectedBranchAdminEnforced) reposGetCommitSignatureProtectionRes()    {}

type ProtectedBranchAllowDeletions struct {
	Enabled         bool "json:\"enabled\""
	AdditionalProps ProtectedBranchAllowDeletionsAdditional
}

type ProtectedBranchAllowDeletionsAdditional map[string]jx.Raw

func (s *ProtectedBranchAllowDeletionsAdditional) init() ProtectedBranchAllowDeletionsAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ProtectedBranchAllowForcePushes struct {
	Enabled         bool "json:\"enabled\""
	AdditionalProps ProtectedBranchAllowForcePushesAdditional
}

type ProtectedBranchAllowForcePushesAdditional map[string]jx.Raw

func (s *ProtectedBranchAllowForcePushesAdditional) init() ProtectedBranchAllowForcePushesAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ProtectedBranchEnforceAdmins struct {
	URL             url.URL "json:\"url\""
	Enabled         bool    "json:\"enabled\""
	AdditionalProps ProtectedBranchEnforceAdminsAdditional
}

type ProtectedBranchEnforceAdminsAdditional map[string]jx.Raw

func (s *ProtectedBranchEnforceAdminsAdditional) init() ProtectedBranchEnforceAdminsAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Protected Branch Pull Request Review.
// Ref: #/components/schemas/protected-branch-pull-request-review
type ProtectedBranchPullRequestReview struct {
	URL                          OptURI                                                   "json:\"url\""
	DismissalRestrictions        OptProtectedBranchPullRequestReviewDismissalRestrictions "json:\"dismissal_restrictions\""
	DismissStaleReviews          bool                                                     "json:\"dismiss_stale_reviews\""
	RequireCodeOwnerReviews      bool                                                     "json:\"require_code_owner_reviews\""
	RequiredApprovingReviewCount OptInt                                                   "json:\"required_approving_review_count\""
}

func (*ProtectedBranchPullRequestReview) reposUpdatePullRequestReviewProtectionRes() {}

type ProtectedBranchPullRequestReviewDismissalRestrictions struct {
	// The list of users with review dismissal access.
	Users []SimpleUser "json:\"users\""
	// The list of teams with review dismissal access.
	Teams    []Team    "json:\"teams\""
	URL      OptString "json:\"url\""
	UsersURL OptString "json:\"users_url\""
	TeamsURL OptString "json:\"teams_url\""
}

type ProtectedBranchRequiredConversationResolution struct {
	Enabled         OptBool "json:\"enabled\""
	AdditionalProps ProtectedBranchRequiredConversationResolutionAdditional
}

type ProtectedBranchRequiredConversationResolutionAdditional map[string]jx.Raw

func (s *ProtectedBranchRequiredConversationResolutionAdditional) init() ProtectedBranchRequiredConversationResolutionAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ProtectedBranchRequiredLinearHistory struct {
	Enabled         bool "json:\"enabled\""
	AdditionalProps ProtectedBranchRequiredLinearHistoryAdditional
}

type ProtectedBranchRequiredLinearHistoryAdditional map[string]jx.Raw

func (s *ProtectedBranchRequiredLinearHistoryAdditional) init() ProtectedBranchRequiredLinearHistoryAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ProtectedBranchRequiredPullRequestReviews struct {
	URL                          url.URL                                                           "json:\"url\""
	DismissStaleReviews          OptBool                                                           "json:\"dismiss_stale_reviews\""
	RequireCodeOwnerReviews      OptBool                                                           "json:\"require_code_owner_reviews\""
	RequiredApprovingReviewCount OptInt                                                            "json:\"required_approving_review_count\""
	DismissalRestrictions        OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions "json:\"dismissal_restrictions\""
}

type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	URL      url.URL      "json:\"url\""
	UsersURL url.URL      "json:\"users_url\""
	TeamsURL url.URL      "json:\"teams_url\""
	Users    []SimpleUser "json:\"users\""
	Teams    []Team       "json:\"teams\""
}

type ProtectedBranchRequiredSignatures struct {
	URL     url.URL "json:\"url\""
	Enabled bool    "json:\"enabled\""
}

// Public User.
// Ref: #/components/schemas/public-user
type PublicUser struct {
	Login             string            "json:\"login\""
	ID                int               "json:\"id\""
	NodeID            string            "json:\"node_id\""
	AvatarURL         url.URL           "json:\"avatar_url\""
	GravatarID        NilString         "json:\"gravatar_id\""
	URL               url.URL           "json:\"url\""
	HTMLURL           url.URL           "json:\"html_url\""
	FollowersURL      url.URL           "json:\"followers_url\""
	FollowingURL      string            "json:\"following_url\""
	GistsURL          string            "json:\"gists_url\""
	StarredURL        string            "json:\"starred_url\""
	SubscriptionsURL  url.URL           "json:\"subscriptions_url\""
	OrganizationsURL  url.URL           "json:\"organizations_url\""
	ReposURL          url.URL           "json:\"repos_url\""
	EventsURL         string            "json:\"events_url\""
	ReceivedEventsURL url.URL           "json:\"received_events_url\""
	Type              string            "json:\"type\""
	SiteAdmin         bool              "json:\"site_admin\""
	Name              NilString         "json:\"name\""
	Company           NilString         "json:\"company\""
	Blog              NilString         "json:\"blog\""
	Location          NilString         "json:\"location\""
	Email             NilString         "json:\"email\""
	Hireable          NilBool           "json:\"hireable\""
	Bio               NilString         "json:\"bio\""
	TwitterUsername   OptNilString      "json:\"twitter_username\""
	PublicRepos       int               "json:\"public_repos\""
	PublicGists       int               "json:\"public_gists\""
	Followers         int               "json:\"followers\""
	Following         int               "json:\"following\""
	CreatedAt         time.Time         "json:\"created_at\""
	UpdatedAt         time.Time         "json:\"updated_at\""
	Plan              OptPublicUserPlan "json:\"plan\""
	SuspendedAt       OptNilDateTime    "json:\"suspended_at\""
	PrivateGists      OptInt            "json:\"private_gists\""
	TotalPrivateRepos OptInt            "json:\"total_private_repos\""
	OwnedPrivateRepos OptInt            "json:\"owned_private_repos\""
	DiskUsage         OptInt            "json:\"disk_usage\""
	Collaborators     OptInt            "json:\"collaborators\""
	AdditionalProps   PublicUserAdditional
}

type PublicUserAdditional map[string]jx.Raw

func (s *PublicUserAdditional) init() PublicUserAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type PublicUserPlan struct {
	Collaborators int    "json:\"collaborators\""
	Name          string "json:\"name\""
	Space         int    "json:\"space\""
	PrivateRepos  int    "json:\"private_repos\""
}

// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a
// pull request is sent, interested parties can review the set of changes, discuss potential
// modifications, and even push follow-up commits if necessary.
// Ref: #/components/schemas/pull-request
type PullRequest struct {
	URL               url.URL "json:\"url\""
	ID                int     "json:\"id\""
	NodeID            string  "json:\"node_id\""
	HTMLURL           url.URL "json:\"html_url\""
	DiffURL           url.URL "json:\"diff_url\""
	PatchURL          url.URL "json:\"patch_url\""
	IssueURL          url.URL "json:\"issue_url\""
	CommitsURL        url.URL "json:\"commits_url\""
	ReviewCommentsURL url.URL "json:\"review_comments_url\""
	ReviewCommentURL  string  "json:\"review_comment_url\""
	CommentsURL       url.URL "json:\"comments_url\""
	StatusesURL       url.URL "json:\"statuses_url\""
	// Number uniquely identifying the pull request within its repository.
	Number int "json:\"number\""
	// State of this Pull Request. Either `open` or `closed`.
	State  PullRequestState "json:\"state\""
	Locked bool             "json:\"locked\""
	// The title of the pull request.
	Title              string                  "json:\"title\""
	User               NilNullableSimpleUser   "json:\"user\""
	Body               NilString               "json:\"body\""
	Labels             []PullRequestLabelsItem "json:\"labels\""
	Milestone          NilNullableMilestone    "json:\"milestone\""
	ActiveLockReason   OptNilString            "json:\"active_lock_reason\""
	CreatedAt          time.Time               "json:\"created_at\""
	UpdatedAt          time.Time               "json:\"updated_at\""
	ClosedAt           NilDateTime             "json:\"closed_at\""
	MergedAt           NilDateTime             "json:\"merged_at\""
	MergeCommitSha     NilString               "json:\"merge_commit_sha\""
	Assignee           NilNullableSimpleUser   "json:\"assignee\""
	Assignees          OptNilSimpleUserArray   "json:\"assignees\""
	RequestedReviewers OptNilSimpleUserArray   "json:\"requested_reviewers\""
	RequestedTeams     OptNilTeamSimpleArray   "json:\"requested_teams\""
	Head               PullRequestHead         "json:\"head\""
	Base               PullRequestBase         "json:\"base\""
	Links              PullRequestLinks        "json:\"_links\""
	AuthorAssociation  AuthorAssociation       "json:\"author_association\""
	AutoMerge          NilAutoMerge            "json:\"auto_merge\""
	// Indicates whether or not the pull request is a draft.
	Draft          OptBool               "json:\"draft\""
	Merged         bool                  "json:\"merged\""
	Mergeable      NilBool               "json:\"mergeable\""
	Rebaseable     OptNilBool            "json:\"rebaseable\""
	MergeableState string                "json:\"mergeable_state\""
	MergedBy       NilNullableSimpleUser "json:\"merged_by\""
	Comments       int                   "json:\"comments\""
	ReviewComments int                   "json:\"review_comments\""
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify bool "json:\"maintainer_can_modify\""
	Commits             int  "json:\"commits\""
	Additions           int  "json:\"additions\""
	Deletions           int  "json:\"deletions\""
	ChangedFiles        int  "json:\"changed_files\""
}

func (*PullRequest) pullsCreateRes() {}
func (*PullRequest) pullsGetRes()    {}
func (*PullRequest) pullsUpdateRes() {}

type PullRequestBase struct {
	Label string              "json:\"label\""
	Ref   string              "json:\"ref\""
	Repo  PullRequestBaseRepo "json:\"repo\""
	Sha   string              "json:\"sha\""
	User  PullRequestBaseUser "json:\"user\""
}

type PullRequestBaseRepo struct {
	ArchiveURL       string                            "json:\"archive_url\""
	AssigneesURL     string                            "json:\"assignees_url\""
	BlobsURL         string                            "json:\"blobs_url\""
	BranchesURL      string                            "json:\"branches_url\""
	CollaboratorsURL string                            "json:\"collaborators_url\""
	CommentsURL      string                            "json:\"comments_url\""
	CommitsURL       string                            "json:\"commits_url\""
	CompareURL       string                            "json:\"compare_url\""
	ContentsURL      string                            "json:\"contents_url\""
	ContributorsURL  url.URL                           "json:\"contributors_url\""
	DeploymentsURL   url.URL                           "json:\"deployments_url\""
	Description      NilString                         "json:\"description\""
	DownloadsURL     url.URL                           "json:\"downloads_url\""
	EventsURL        url.URL                           "json:\"events_url\""
	Fork             bool                              "json:\"fork\""
	ForksURL         url.URL                           "json:\"forks_url\""
	FullName         string                            "json:\"full_name\""
	GitCommitsURL    string                            "json:\"git_commits_url\""
	GitRefsURL       string                            "json:\"git_refs_url\""
	GitTagsURL       string                            "json:\"git_tags_url\""
	HooksURL         url.URL                           "json:\"hooks_url\""
	HTMLURL          url.URL                           "json:\"html_url\""
	ID               int                               "json:\"id\""
	NodeID           string                            "json:\"node_id\""
	IssueCommentURL  string                            "json:\"issue_comment_url\""
	IssueEventsURL   string                            "json:\"issue_events_url\""
	IssuesURL        string                            "json:\"issues_url\""
	KeysURL          string                            "json:\"keys_url\""
	LabelsURL        string                            "json:\"labels_url\""
	LanguagesURL     url.URL                           "json:\"languages_url\""
	MergesURL        url.URL                           "json:\"merges_url\""
	MilestonesURL    string                            "json:\"milestones_url\""
	Name             string                            "json:\"name\""
	NotificationsURL string                            "json:\"notifications_url\""
	Owner            PullRequestBaseRepoOwner          "json:\"owner\""
	Private          bool                              "json:\"private\""
	PullsURL         string                            "json:\"pulls_url\""
	ReleasesURL      string                            "json:\"releases_url\""
	StargazersURL    url.URL                           "json:\"stargazers_url\""
	StatusesURL      string                            "json:\"statuses_url\""
	SubscribersURL   url.URL                           "json:\"subscribers_url\""
	SubscriptionURL  url.URL                           "json:\"subscription_url\""
	TagsURL          url.URL                           "json:\"tags_url\""
	TeamsURL         url.URL                           "json:\"teams_url\""
	TreesURL         string                            "json:\"trees_url\""
	URL              url.URL                           "json:\"url\""
	CloneURL         string                            "json:\"clone_url\""
	DefaultBranch    string                            "json:\"default_branch\""
	Forks            int                               "json:\"forks\""
	ForksCount       int                               "json:\"forks_count\""
	GitURL           string                            "json:\"git_url\""
	HasDownloads     bool                              "json:\"has_downloads\""
	HasIssues        bool                              "json:\"has_issues\""
	HasProjects      bool                              "json:\"has_projects\""
	HasWiki          bool                              "json:\"has_wiki\""
	HasPages         bool                              "json:\"has_pages\""
	Homepage         NilURI                            "json:\"homepage\""
	Language         NilString                         "json:\"language\""
	MasterBranch     OptString                         "json:\"master_branch\""
	Archived         bool                              "json:\"archived\""
	Disabled         bool                              "json:\"disabled\""
	MirrorURL        NilURI                            "json:\"mirror_url\""
	OpenIssues       int                               "json:\"open_issues\""
	OpenIssuesCount  int                               "json:\"open_issues_count\""
	Permissions      OptPullRequestBaseRepoPermissions "json:\"permissions\""
	TempCloneToken   OptString                         "json:\"temp_clone_token\""
	AllowMergeCommit OptBool                           "json:\"allow_merge_commit\""
	AllowSquashMerge OptBool                           "json:\"allow_squash_merge\""
	AllowRebaseMerge OptBool                           "json:\"allow_rebase_merge\""
	License          NilNullableLicenseSimple          "json:\"license\""
	PushedAt         time.Time                         "json:\"pushed_at\""
	Size             int                               "json:\"size\""
	SSHURL           string                            "json:\"ssh_url\""
	StargazersCount  int                               "json:\"stargazers_count\""
	SvnURL           url.URL                           "json:\"svn_url\""
	Topics           []string                          "json:\"topics\""
	Watchers         int                               "json:\"watchers\""
	WatchersCount    int                               "json:\"watchers_count\""
	CreatedAt        time.Time                         "json:\"created_at\""
	UpdatedAt        time.Time                         "json:\"updated_at\""
	AllowForking     OptBool                           "json:\"allow_forking\""
}

type PullRequestBaseRepoOwner struct {
	AvatarURL         url.URL   "json:\"avatar_url\""
	EventsURL         string    "json:\"events_url\""
	FollowersURL      url.URL   "json:\"followers_url\""
	FollowingURL      string    "json:\"following_url\""
	GistsURL          string    "json:\"gists_url\""
	GravatarID        NilString "json:\"gravatar_id\""
	HTMLURL           url.URL   "json:\"html_url\""
	ID                int       "json:\"id\""
	NodeID            string    "json:\"node_id\""
	Login             string    "json:\"login\""
	OrganizationsURL  url.URL   "json:\"organizations_url\""
	ReceivedEventsURL url.URL   "json:\"received_events_url\""
	ReposURL          url.URL   "json:\"repos_url\""
	SiteAdmin         bool      "json:\"site_admin\""
	StarredURL        string    "json:\"starred_url\""
	SubscriptionsURL  url.URL   "json:\"subscriptions_url\""
	Type              string    "json:\"type\""
	URL               url.URL   "json:\"url\""
}

type PullRequestBaseRepoPermissions struct {
	Admin    bool    "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     bool    "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     bool    "json:\"pull\""
}

type PullRequestBaseUser struct {
	AvatarURL         url.URL   "json:\"avatar_url\""
	EventsURL         string    "json:\"events_url\""
	FollowersURL      url.URL   "json:\"followers_url\""
	FollowingURL      string    "json:\"following_url\""
	GistsURL          string    "json:\"gists_url\""
	GravatarID        NilString "json:\"gravatar_id\""
	HTMLURL           url.URL   "json:\"html_url\""
	ID                int       "json:\"id\""
	NodeID            string    "json:\"node_id\""
	Login             string    "json:\"login\""
	OrganizationsURL  url.URL   "json:\"organizations_url\""
	ReceivedEventsURL url.URL   "json:\"received_events_url\""
	ReposURL          url.URL   "json:\"repos_url\""
	SiteAdmin         bool      "json:\"site_admin\""
	StarredURL        string    "json:\"starred_url\""
	SubscriptionsURL  url.URL   "json:\"subscriptions_url\""
	Type              string    "json:\"type\""
	URL               url.URL   "json:\"url\""
}

type PullRequestHead struct {
	Label string                 "json:\"label\""
	Ref   string                 "json:\"ref\""
	Repo  NilPullRequestHeadRepo "json:\"repo\""
	Sha   string                 "json:\"sha\""
	User  PullRequestHeadUser    "json:\"user\""
}

type PullRequestHeadRepo struct {
	ArchiveURL       string                            "json:\"archive_url\""
	AssigneesURL     string                            "json:\"assignees_url\""
	BlobsURL         string                            "json:\"blobs_url\""
	BranchesURL      string                            "json:\"branches_url\""
	CollaboratorsURL string                            "json:\"collaborators_url\""
	CommentsURL      string                            "json:\"comments_url\""
	CommitsURL       string                            "json:\"commits_url\""
	CompareURL       string                            "json:\"compare_url\""
	ContentsURL      string                            "json:\"contents_url\""
	ContributorsURL  url.URL                           "json:\"contributors_url\""
	DeploymentsURL   url.URL                           "json:\"deployments_url\""
	Description      NilString                         "json:\"description\""
	DownloadsURL     url.URL                           "json:\"downloads_url\""
	EventsURL        url.URL                           "json:\"events_url\""
	Fork             bool                              "json:\"fork\""
	ForksURL         url.URL                           "json:\"forks_url\""
	FullName         string                            "json:\"full_name\""
	GitCommitsURL    string                            "json:\"git_commits_url\""
	GitRefsURL       string                            "json:\"git_refs_url\""
	GitTagsURL       string                            "json:\"git_tags_url\""
	HooksURL         url.URL                           "json:\"hooks_url\""
	HTMLURL          url.URL                           "json:\"html_url\""
	ID               int                               "json:\"id\""
	NodeID           string                            "json:\"node_id\""
	IssueCommentURL  string                            "json:\"issue_comment_url\""
	IssueEventsURL   string                            "json:\"issue_events_url\""
	IssuesURL        string                            "json:\"issues_url\""
	KeysURL          string                            "json:\"keys_url\""
	LabelsURL        string                            "json:\"labels_url\""
	LanguagesURL     url.URL                           "json:\"languages_url\""
	MergesURL        url.URL                           "json:\"merges_url\""
	MilestonesURL    string                            "json:\"milestones_url\""
	Name             string                            "json:\"name\""
	NotificationsURL string                            "json:\"notifications_url\""
	Owner            PullRequestHeadRepoOwner          "json:\"owner\""
	Private          bool                              "json:\"private\""
	PullsURL         string                            "json:\"pulls_url\""
	ReleasesURL      string                            "json:\"releases_url\""
	StargazersURL    url.URL                           "json:\"stargazers_url\""
	StatusesURL      string                            "json:\"statuses_url\""
	SubscribersURL   url.URL                           "json:\"subscribers_url\""
	SubscriptionURL  url.URL                           "json:\"subscription_url\""
	TagsURL          url.URL                           "json:\"tags_url\""
	TeamsURL         url.URL                           "json:\"teams_url\""
	TreesURL         string                            "json:\"trees_url\""
	URL              url.URL                           "json:\"url\""
	CloneURL         string                            "json:\"clone_url\""
	DefaultBranch    string                            "json:\"default_branch\""
	Forks            int                               "json:\"forks\""
	ForksCount       int                               "json:\"forks_count\""
	GitURL           string                            "json:\"git_url\""
	HasDownloads     bool                              "json:\"has_downloads\""
	HasIssues        bool                              "json:\"has_issues\""
	HasProjects      bool                              "json:\"has_projects\""
	HasWiki          bool                              "json:\"has_wiki\""
	HasPages         bool                              "json:\"has_pages\""
	Homepage         NilURI                            "json:\"homepage\""
	Language         NilString                         "json:\"language\""
	MasterBranch     OptString                         "json:\"master_branch\""
	Archived         bool                              "json:\"archived\""
	Disabled         bool                              "json:\"disabled\""
	MirrorURL        NilURI                            "json:\"mirror_url\""
	OpenIssues       int                               "json:\"open_issues\""
	OpenIssuesCount  int                               "json:\"open_issues_count\""
	Permissions      OptPullRequestHeadRepoPermissions "json:\"permissions\""
	TempCloneToken   OptString                         "json:\"temp_clone_token\""
	AllowMergeCommit OptBool                           "json:\"allow_merge_commit\""
	AllowSquashMerge OptBool                           "json:\"allow_squash_merge\""
	AllowRebaseMerge OptBool                           "json:\"allow_rebase_merge\""
	License          NilPullRequestHeadRepoLicense     "json:\"license\""
	PushedAt         time.Time                         "json:\"pushed_at\""
	Size             int                               "json:\"size\""
	SSHURL           string                            "json:\"ssh_url\""
	StargazersCount  int                               "json:\"stargazers_count\""
	SvnURL           url.URL                           "json:\"svn_url\""
	Topics           []string                          "json:\"topics\""
	Watchers         int                               "json:\"watchers\""
	WatchersCount    int                               "json:\"watchers_count\""
	CreatedAt        time.Time                         "json:\"created_at\""
	UpdatedAt        time.Time                         "json:\"updated_at\""
	AllowForking     OptBool                           "json:\"allow_forking\""
}

type PullRequestHeadRepoLicense struct {
	Key    string    "json:\"key\""
	Name   string    "json:\"name\""
	URL    NilURI    "json:\"url\""
	SpdxID NilString "json:\"spdx_id\""
	NodeID string    "json:\"node_id\""
}

type PullRequestHeadRepoOwner struct {
	AvatarURL         url.URL   "json:\"avatar_url\""
	EventsURL         string    "json:\"events_url\""
	FollowersURL      url.URL   "json:\"followers_url\""
	FollowingURL      string    "json:\"following_url\""
	GistsURL          string    "json:\"gists_url\""
	GravatarID        NilString "json:\"gravatar_id\""
	HTMLURL           url.URL   "json:\"html_url\""
	ID                int       "json:\"id\""
	NodeID            string    "json:\"node_id\""
	Login             string    "json:\"login\""
	OrganizationsURL  url.URL   "json:\"organizations_url\""
	ReceivedEventsURL url.URL   "json:\"received_events_url\""
	ReposURL          url.URL   "json:\"repos_url\""
	SiteAdmin         bool      "json:\"site_admin\""
	StarredURL        string    "json:\"starred_url\""
	SubscriptionsURL  url.URL   "json:\"subscriptions_url\""
	Type              string    "json:\"type\""
	URL               url.URL   "json:\"url\""
}

type PullRequestHeadRepoPermissions struct {
	Admin    bool    "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     bool    "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     bool    "json:\"pull\""
}

type PullRequestHeadUser struct {
	AvatarURL         url.URL   "json:\"avatar_url\""
	EventsURL         string    "json:\"events_url\""
	FollowersURL      url.URL   "json:\"followers_url\""
	FollowingURL      string    "json:\"following_url\""
	GistsURL          string    "json:\"gists_url\""
	GravatarID        NilString "json:\"gravatar_id\""
	HTMLURL           url.URL   "json:\"html_url\""
	ID                int       "json:\"id\""
	NodeID            string    "json:\"node_id\""
	Login             string    "json:\"login\""
	OrganizationsURL  url.URL   "json:\"organizations_url\""
	ReceivedEventsURL url.URL   "json:\"received_events_url\""
	ReposURL          url.URL   "json:\"repos_url\""
	SiteAdmin         bool      "json:\"site_admin\""
	StarredURL        string    "json:\"starred_url\""
	SubscriptionsURL  url.URL   "json:\"subscriptions_url\""
	Type              string    "json:\"type\""
	URL               url.URL   "json:\"url\""
}

type PullRequestLabelsItem struct {
	ID          OptInt64     "json:\"id\""
	NodeID      OptString    "json:\"node_id\""
	URL         OptString    "json:\"url\""
	Name        OptString    "json:\"name\""
	Description OptNilString "json:\"description\""
	Color       OptString    "json:\"color\""
	Default     OptBool      "json:\"default\""
}

type PullRequestLinks struct {
	Comments       Link "json:\"comments\""
	Commits        Link "json:\"commits\""
	Statuses       Link "json:\"statuses\""
	HTML           Link "json:\"html\""
	Issue          Link "json:\"issue\""
	ReviewComments Link "json:\"review_comments\""
	ReviewComment  Link "json:\"review_comment\""
	Self           Link "json:\"self\""
}

// Pull Request Merge Result.
// Ref: #/components/schemas/pull-request-merge-result
type PullRequestMergeResult struct {
	Sha     string "json:\"sha\""
	Merged  bool   "json:\"merged\""
	Message string "json:\"message\""
}

func (*PullRequestMergeResult) pullsMergeRes() {}

// Ref: #/components/schemas/pull-request-minimal
type PullRequestMinimal struct {
	ID     int                    "json:\"id\""
	Number int                    "json:\"number\""
	URL    string                 "json:\"url\""
	Head   PullRequestMinimalHead "json:\"head\""
	Base   PullRequestMinimalBase "json:\"base\""
}

type PullRequestMinimalBase struct {
	Ref  string                     "json:\"ref\""
	Sha  string                     "json:\"sha\""
	Repo PullRequestMinimalBaseRepo "json:\"repo\""
}

type PullRequestMinimalBaseRepo struct {
	ID   int    "json:\"id\""
	URL  string "json:\"url\""
	Name string "json:\"name\""
}

type PullRequestMinimalHead struct {
	Ref  string                     "json:\"ref\""
	Sha  string                     "json:\"sha\""
	Repo PullRequestMinimalHeadRepo "json:\"repo\""
}

type PullRequestMinimalHeadRepo struct {
	ID   int    "json:\"id\""
	URL  string "json:\"url\""
	Name string "json:\"name\""
}

// Pull Request Reviews are reviews on pull requests.
// Ref: #/components/schemas/pull-request-review
type PullRequestReview struct {
	// Unique identifier of the review.
	ID     int                   "json:\"id\""
	NodeID string                "json:\"node_id\""
	User   NilNullableSimpleUser "json:\"user\""
	// The text of the review.
	Body           string                 "json:\"body\""
	State          string                 "json:\"state\""
	HTMLURL        url.URL                "json:\"html_url\""
	PullRequestURL url.URL                "json:\"pull_request_url\""
	Links          PullRequestReviewLinks "json:\"_links\""
	SubmittedAt    OptDateTime            "json:\"submitted_at\""
	// A commit SHA for the review.
	CommitID          string            "json:\"commit_id\""
	BodyHTML          OptString         "json:\"body_html\""
	BodyText          OptString         "json:\"body_text\""
	AuthorAssociation AuthorAssociation "json:\"author_association\""
}

func (*PullRequestReview) pullsCreateReviewRes()        {}
func (*PullRequestReview) pullsDeletePendingReviewRes() {}
func (*PullRequestReview) pullsDismissReviewRes()       {}
func (*PullRequestReview) pullsGetReviewRes()           {}
func (*PullRequestReview) pullsSubmitReviewRes()        {}
func (*PullRequestReview) pullsUpdateReviewRes()        {}

// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
// Ref: #/components/schemas/pull-request-review-comment
type PullRequestReviewComment struct {
	// URL for the pull request review comment.
	URL string "json:\"url\""
	// The ID of the pull request review to which the comment belongs.
	PullRequestReviewID NilInt "json:\"pull_request_review_id\""
	// The ID of the pull request review comment.
	ID int "json:\"id\""
	// The node ID of the pull request review comment.
	NodeID string "json:\"node_id\""
	// The diff of the line that the comment refers to.
	DiffHunk string "json:\"diff_hunk\""
	// The relative path of the file to which the comment applies.
	Path string "json:\"path\""
	// The line index in the diff to which the comment applies.
	Position int "json:\"position\""
	// The index of the original line in the diff to which the comment applies.
	OriginalPosition int "json:\"original_position\""
	// The SHA of the commit to which the comment applies.
	CommitID string "json:\"commit_id\""
	// The SHA of the original commit to which the comment applies.
	OriginalCommitID string "json:\"original_commit_id\""
	// The comment ID to reply to.
	InReplyToID OptInt     "json:\"in_reply_to_id\""
	User        SimpleUser "json:\"user\""
	// The text of the comment.
	Body      string    "json:\"body\""
	CreatedAt time.Time "json:\"created_at\""
	UpdatedAt time.Time "json:\"updated_at\""
	// HTML URL for the pull request review comment.
	HTMLURL url.URL "json:\"html_url\""
	// URL for the pull request that the review comment belongs to.
	PullRequestURL    url.URL                       "json:\"pull_request_url\""
	AuthorAssociation AuthorAssociation             "json:\"author_association\""
	Links             PullRequestReviewCommentLinks "json:\"_links\""
	// The first line of the range for a multi-line comment.
	StartLine OptNilInt "json:\"start_line\""
	// The first line of the range for a multi-line comment.
	OriginalStartLine OptNilInt "json:\"original_start_line\""
	// The side of the first line of the range for a multi-line comment.
	StartSide OptNilPullRequestReviewCommentStartSide "json:\"start_side\""
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	Line OptInt "json:\"line\""
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	OriginalLine OptInt "json:\"original_line\""
	// The side of the diff to which the comment applies. The side of the last line of the range for a
	// multi-line comment.
	Side      OptPullRequestReviewCommentSide "json:\"side\""
	Reactions OptReactionRollup               "json:\"reactions\""
	BodyHTML  OptString                       "json:\"body_html\""
	BodyText  OptString                       "json:\"body_text\""
}

func (*PullRequestReviewComment) pullsCreateReplyForReviewCommentRes() {}
func (*PullRequestReviewComment) pullsCreateReviewCommentRes()         {}
func (*PullRequestReviewComment) pullsGetReviewCommentRes()            {}

type PullRequestReviewCommentLinks struct {
	Self        PullRequestReviewCommentLinksSelf        "json:\"self\""
	HTML        PullRequestReviewCommentLinksHTML        "json:\"html\""
	PullRequest PullRequestReviewCommentLinksPullRequest "json:\"pull_request\""
}

type PullRequestReviewCommentLinksHTML struct {
	Href url.URL "json:\"href\""
}

type PullRequestReviewCommentLinksPullRequest struct {
	Href url.URL "json:\"href\""
}

type PullRequestReviewCommentLinksSelf struct {
	Href url.URL "json:\"href\""
}

// The side of the diff to which the comment applies. The side of the last line of the range for a
// multi-line comment.
type PullRequestReviewCommentSide string

const (
	PullRequestReviewCommentSideLEFT  PullRequestReviewCommentSide = "LEFT"
	PullRequestReviewCommentSideRIGHT PullRequestReviewCommentSide = "RIGHT"
)

// The side of the first line of the range for a multi-line comment.
type PullRequestReviewCommentStartSide string

const (
	PullRequestReviewCommentStartSideLEFT  PullRequestReviewCommentStartSide = "LEFT"
	PullRequestReviewCommentStartSideRIGHT PullRequestReviewCommentStartSide = "RIGHT"
)

type PullRequestReviewLinks struct {
	HTML        PullRequestReviewLinksHTML        "json:\"html\""
	PullRequest PullRequestReviewLinksPullRequest "json:\"pull_request\""
}

type PullRequestReviewLinksHTML struct {
	Href string "json:\"href\""
}

type PullRequestReviewLinksPullRequest struct {
	Href string "json:\"href\""
}

// Pull Request Review Request.
// Ref: #/components/schemas/pull-request-review-request
type PullRequestReviewRequest struct {
	Users []SimpleUser "json:\"users\""
	Teams []Team       "json:\"teams\""
}

// Pull Request Simple.
// Ref: #/components/schemas/pull-request-simple
type PullRequestSimple struct {
	URL                url.URL                       "json:\"url\""
	ID                 int                           "json:\"id\""
	NodeID             string                        "json:\"node_id\""
	HTMLURL            url.URL                       "json:\"html_url\""
	DiffURL            url.URL                       "json:\"diff_url\""
	PatchURL           url.URL                       "json:\"patch_url\""
	IssueURL           url.URL                       "json:\"issue_url\""
	CommitsURL         url.URL                       "json:\"commits_url\""
	ReviewCommentsURL  url.URL                       "json:\"review_comments_url\""
	ReviewCommentURL   string                        "json:\"review_comment_url\""
	CommentsURL        url.URL                       "json:\"comments_url\""
	StatusesURL        url.URL                       "json:\"statuses_url\""
	Number             int                           "json:\"number\""
	State              string                        "json:\"state\""
	Locked             bool                          "json:\"locked\""
	Title              string                        "json:\"title\""
	User               NilNullableSimpleUser         "json:\"user\""
	Body               NilString                     "json:\"body\""
	Labels             []PullRequestSimpleLabelsItem "json:\"labels\""
	Milestone          NilNullableMilestone          "json:\"milestone\""
	ActiveLockReason   OptNilString                  "json:\"active_lock_reason\""
	CreatedAt          time.Time                     "json:\"created_at\""
	UpdatedAt          time.Time                     "json:\"updated_at\""
	ClosedAt           NilDateTime                   "json:\"closed_at\""
	MergedAt           NilDateTime                   "json:\"merged_at\""
	MergeCommitSha     NilString                     "json:\"merge_commit_sha\""
	Assignee           NilNullableSimpleUser         "json:\"assignee\""
	Assignees          OptNilSimpleUserArray         "json:\"assignees\""
	RequestedReviewers OptNilSimpleUserArray         "json:\"requested_reviewers\""
	RequestedTeams     OptNilTeamArray               "json:\"requested_teams\""
	Head               PullRequestSimpleHead         "json:\"head\""
	Base               PullRequestSimpleBase         "json:\"base\""
	Links              PullRequestSimpleLinks        "json:\"_links\""
	AuthorAssociation  AuthorAssociation             "json:\"author_association\""
	AutoMerge          NilAutoMerge                  "json:\"auto_merge\""
	// Indicates whether or not the pull request is a draft.
	Draft OptBool "json:\"draft\""
}

func (*PullRequestSimple) pullsRemoveRequestedReviewersRes() {}

type PullRequestSimpleBase struct {
	Label string                "json:\"label\""
	Ref   string                "json:\"ref\""
	Repo  Repository            "json:\"repo\""
	Sha   string                "json:\"sha\""
	User  NilNullableSimpleUser "json:\"user\""
}

type PullRequestSimpleHead struct {
	Label string                "json:\"label\""
	Ref   string                "json:\"ref\""
	Repo  Repository            "json:\"repo\""
	Sha   string                "json:\"sha\""
	User  NilNullableSimpleUser "json:\"user\""
}

type PullRequestSimpleLabelsItem struct {
	ID          OptInt64  "json:\"id\""
	NodeID      OptString "json:\"node_id\""
	URL         OptString "json:\"url\""
	Name        OptString "json:\"name\""
	Description OptString "json:\"description\""
	Color       OptString "json:\"color\""
	Default     OptBool   "json:\"default\""
}

type PullRequestSimpleLinks struct {
	Comments       Link "json:\"comments\""
	Commits        Link "json:\"commits\""
	Statuses       Link "json:\"statuses\""
	HTML           Link "json:\"html\""
	Issue          Link "json:\"issue\""
	ReviewComments Link "json:\"review_comments\""
	ReviewComment  Link "json:\"review_comment\""
	Self           Link "json:\"self\""
}

// State of this Pull Request. Either `open` or `closed`.
type PullRequestState string

const (
	PullRequestStateOpen   PullRequestState = "open"
	PullRequestStateClosed PullRequestState = "closed"
)

// PullsCheckIfMergedNoContent is response for PullsCheckIfMerged operation.
type PullsCheckIfMergedNoContent struct{}

func (*PullsCheckIfMergedNoContent) pullsCheckIfMergedRes() {}

// PullsCheckIfMergedNotFound is response for PullsCheckIfMerged operation.
type PullsCheckIfMergedNotFound struct{}

func (*PullsCheckIfMergedNotFound) pullsCheckIfMergedRes() {}

type PullsCreateReplyForReviewCommentReq struct {
	// The text of the review comment.
	Body string "json:\"body\""
}

type PullsCreateReq struct {
	// The title of the new pull request.
	Title OptString "json:\"title\""
	// The name of the branch where your changes are implemented. For cross-repository pull requests in
	// the same network, namespace `head` with a user like this: `username:branch`.
	Head string "json:\"head\""
	// The name of the branch you want the changes pulled into. This should be an existing branch on the
	// current repository. You cannot submit a pull request to one repository that requests a merge to a
	// base of another repository.
	Base string "json:\"base\""
	// The contents of the pull request.
	Body OptString "json:\"body\""
	// Indicates whether [maintainers can modify](https://help.github.
	// com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify OptBool "json:\"maintainer_can_modify\""
	// Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.
	// com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to
	// learn more.
	Draft OptBool "json:\"draft\""
	Issue OptInt  "json:\"issue\""
}

type PullsCreateReviewCommentReq struct {
	// The text of the review comment.
	Body string "json:\"body\""
	// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment
	// outdated if a subsequent commit modifies the line you specify as the `position`.
	CommitID OptString "json:\"commit_id\""
	// The relative path to the file that necessitates a comment.
	Path OptString "json:\"path\""
	// **Required without `comfort-fade` preview**. The position in the diff where you want to add a
	// review comment. Note this value is not the same as the line number in the file. For help finding
	// the position value, read the note above.
	Position OptInt "json:\"position\""
	// **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull
	// request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
	//  Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are
	// shown for context. For a multi-line comment, side represents whether the last line of the comment
	// range is a deletion or addition. For more information, see "[Diff view options](https://help.
	// github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub
	// Help documentation.
	Side OptPullsCreateReviewCommentReqSide "json:\"side\""
	// **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the
	// comment applies to. For a multi-line comment, the last line of the range that your comment applies
	// to.
	Line OptInt "json:\"line\""
	// **Required when using multi-line comments**. To create multi-line comments, you must use the
	// `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that
	// your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a
	// pull request](https://help.github.
	// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
	// GitHub Help documentation.
	StartLine OptInt "json:\"start_line\""
	// **Required when using multi-line comments**. To create multi-line comments, you must use the
	// `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment
	// applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on
	// a pull request](https://help.github.
	// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
	// GitHub Help documentation. See `side` in this table for additional context.
	StartSide OptPullsCreateReviewCommentReqStartSide "json:\"start_side\""
	InReplyTo OptInt                                  "json:\"in_reply_to\""
}

// **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull
// request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
//  Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are
// shown for context. For a multi-line comment, side represents whether the last line of the comment
// range is a deletion or addition. For more information, see "[Diff view options](https://help.
// github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub
// Help documentation.
type PullsCreateReviewCommentReqSide string

const (
	PullsCreateReviewCommentReqSideLEFT  PullsCreateReviewCommentReqSide = "LEFT"
	PullsCreateReviewCommentReqSideRIGHT PullsCreateReviewCommentReqSide = "RIGHT"
)

// **Required when using multi-line comments**. To create multi-line comments, you must use the
// `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment
// applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on
// a pull request](https://help.github.
// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
// GitHub Help documentation. See `side` in this table for additional context.
type PullsCreateReviewCommentReqStartSide string

const (
	PullsCreateReviewCommentReqStartSideLEFT  PullsCreateReviewCommentReqStartSide = "LEFT"
	PullsCreateReviewCommentReqStartSideRIGHT PullsCreateReviewCommentReqStartSide = "RIGHT"
	PullsCreateReviewCommentReqStartSideSide  PullsCreateReviewCommentReqStartSide = "side"
)

type PullsCreateReviewReq struct {
	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review
	// comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults
	// to the most recent commit in the pull request when you do not specify a value.
	CommitID OptString "json:\"commit_id\""
	// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of
	// the pull request review.
	Body OptString "json:\"body\""
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
	// or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you
	// will need to [submit the pull request review](https://docs.github.
	// com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
	Event OptPullsCreateReviewReqEvent "json:\"event\""
	// Use the following table to specify the location, destination, and contents of the draft review
	// comment.
	Comments []PullsCreateReviewReqCommentsItem "json:\"comments\""
}

type PullsCreateReviewReqCommentsItem struct {
	// The relative path to the file that necessitates a review comment.
	Path string "json:\"path\""
	// The position in the diff where you want to add a review comment. Note this value is not the same
	// as the line number in the file. For help finding the position value, read the note below.
	Position OptInt "json:\"position\""
	// Text of the review comment.
	Body      string    "json:\"body\""
	Line      OptInt    "json:\"line\""
	Side      OptString "json:\"side\""
	StartLine OptInt    "json:\"start_line\""
	StartSide OptString "json:\"start_side\""
}

// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
// or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you
// will need to [submit the pull request review](https://docs.github.
// com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
type PullsCreateReviewReqEvent string

const (
	PullsCreateReviewReqEventAPPROVE        PullsCreateReviewReqEvent = "APPROVE"
	PullsCreateReviewReqEventREQUESTCHANGES PullsCreateReviewReqEvent = "REQUEST_CHANGES"
	PullsCreateReviewReqEventCOMMENT        PullsCreateReviewReqEvent = "COMMENT"
)

// PullsDeleteReviewCommentNoContent is response for PullsDeleteReviewComment operation.
type PullsDeleteReviewCommentNoContent struct{}

func (*PullsDeleteReviewCommentNoContent) pullsDeleteReviewCommentRes() {}

type PullsDismissReviewReq struct {
	// The message for the pull request review dismissal.
	Message string    "json:\"message\""
	Event   OptString "json:\"event\""
}

type PullsGetApplicationJSONInternalServerError BasicError

func (*PullsGetApplicationJSONInternalServerError) pullsGetRes() {}

type PullsGetApplicationJSONNotFound BasicError

func (*PullsGetApplicationJSONNotFound) pullsGetRes() {}

type PullsListCommentsForReviewOKApplicationJSON []ReviewComment

func (PullsListCommentsForReviewOKApplicationJSON) pullsListCommentsForReviewRes() {}

type PullsListDirection string

const (
	PullsListDirectionAsc  PullsListDirection = "asc"
	PullsListDirectionDesc PullsListDirection = "desc"
)

type PullsListFilesOKApplicationJSON []DiffEntry

func (PullsListFilesOKApplicationJSON) pullsListFilesRes() {}

type PullsListOKApplicationJSON []PullRequestSimple

func (PullsListOKApplicationJSON) pullsListRes() {}

type PullsListReviewCommentsDirection string

const (
	PullsListReviewCommentsDirectionAsc  PullsListReviewCommentsDirection = "asc"
	PullsListReviewCommentsDirectionDesc PullsListReviewCommentsDirection = "desc"
)

type PullsListReviewCommentsForRepoDirection string

const (
	PullsListReviewCommentsForRepoDirectionAsc  PullsListReviewCommentsForRepoDirection = "asc"
	PullsListReviewCommentsForRepoDirectionDesc PullsListReviewCommentsForRepoDirection = "desc"
)

type PullsListReviewCommentsForRepoSort string

const (
	PullsListReviewCommentsForRepoSortCreated   PullsListReviewCommentsForRepoSort = "created"
	PullsListReviewCommentsForRepoSortUpdated   PullsListReviewCommentsForRepoSort = "updated"
	PullsListReviewCommentsForRepoSortCreatedAt PullsListReviewCommentsForRepoSort = "created_at"
)

type PullsListReviewCommentsSort string

const (
	PullsListReviewCommentsSortCreated PullsListReviewCommentsSort = "created"
	PullsListReviewCommentsSortUpdated PullsListReviewCommentsSort = "updated"
)

type PullsListSort string

const (
	PullsListSortCreated          PullsListSort = "created"
	PullsListSortUpdated          PullsListSort = "updated"
	PullsListSortPopularity       PullsListSort = "popularity"
	PullsListSortLongMinusRunning PullsListSort = "long-running"
)

type PullsListState string

const (
	PullsListStateOpen   PullsListState = "open"
	PullsListStateClosed PullsListState = "closed"
	PullsListStateAll    PullsListState = "all"
)

type PullsMergeApplicationJSONForbidden BasicError

func (*PullsMergeApplicationJSONForbidden) pullsMergeRes() {}

type PullsMergeApplicationJSONNotFound BasicError

func (*PullsMergeApplicationJSONNotFound) pullsMergeRes() {}

type PullsMergeConflict struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*PullsMergeConflict) pullsMergeRes() {}

type PullsMergeMethodNotAllowed struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*PullsMergeMethodNotAllowed) pullsMergeRes() {}

type PullsMergeReq struct {
	// Title for the automatic commit message.
	CommitTitle OptString "json:\"commit_title\""
	// Extra detail to append to automatic commit message.
	CommitMessage OptString "json:\"commit_message\""
	// SHA that pull request head must match to allow merge.
	Sha OptString "json:\"sha\""
	// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
	MergeMethod OptPullsMergeReqMergeMethod "json:\"merge_method\""
}

// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
type PullsMergeReqMergeMethod string

const (
	PullsMergeReqMergeMethodMerge  PullsMergeReqMergeMethod = "merge"
	PullsMergeReqMergeMethodSquash PullsMergeReqMergeMethod = "squash"
	PullsMergeReqMergeMethodRebase PullsMergeReqMergeMethod = "rebase"
)

type PullsRemoveRequestedReviewersReq struct {
	// An array of user `login`s that will be removed.
	Reviewers []string "json:\"reviewers\""
	// An array of team `slug`s that will be removed.
	TeamReviewers []string "json:\"team_reviewers\""
}

type PullsSubmitReviewApplicationJSONForbidden BasicError

func (*PullsSubmitReviewApplicationJSONForbidden) pullsSubmitReviewRes() {}

type PullsSubmitReviewApplicationJSONNotFound BasicError

func (*PullsSubmitReviewApplicationJSONNotFound) pullsSubmitReviewRes() {}

type PullsSubmitReviewReq struct {
	// The body text of the pull request review.
	Body OptString "json:\"body\""
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
	// or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and
	// sets the review action state to `PENDING`, which means you will need to re-submit the pull request
	// review using a review action.
	Event PullsSubmitReviewReqEvent "json:\"event\""
}

// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
// or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and
// sets the review action state to `PENDING`, which means you will need to re-submit the pull request
// review using a review action.
type PullsSubmitReviewReqEvent string

const (
	PullsSubmitReviewReqEventAPPROVE        PullsSubmitReviewReqEvent = "APPROVE"
	PullsSubmitReviewReqEventREQUESTCHANGES PullsSubmitReviewReqEvent = "REQUEST_CHANGES"
	PullsSubmitReviewReqEventCOMMENT        PullsSubmitReviewReqEvent = "COMMENT"
)

type PullsUpdateBranchAccepted struct {
	Message OptString "json:\"message\""
	URL     OptString "json:\"url\""
}

func (*PullsUpdateBranchAccepted) pullsUpdateBranchRes() {}

type PullsUpdateBranchReq struct {
	// The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull
	// request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a
	// `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.
	// com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA
	// of the pull request's current HEAD ref.
	ExpectedHeadSha OptString "json:\"expected_head_sha\""
}

type PullsUpdateReq struct {
	// The title of the pull request.
	Title OptString "json:\"title\""
	// The contents of the pull request.
	Body OptString "json:\"body\""
	// State of this Pull Request. Either `open` or `closed`.
	State OptPullsUpdateReqState "json:\"state\""
	// The name of the branch you want your changes pulled into. This should be an existing branch on the
	// current repository. You cannot update the base branch on a pull request to point to another
	// repository.
	Base OptString "json:\"base\""
	// Indicates whether [maintainers can modify](https://help.github.
	// com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify OptBool "json:\"maintainer_can_modify\""
}

// State of this Pull Request. Either `open` or `closed`.
type PullsUpdateReqState string

const (
	PullsUpdateReqStateOpen   PullsUpdateReqState = "open"
	PullsUpdateReqStateClosed PullsUpdateReqState = "closed"
)

type PullsUpdateReviewCommentReq struct {
	// The text of the reply to the review comment.
	Body string "json:\"body\""
}

type PullsUpdateReviewReq struct {
	// The body text of the pull request review.
	Body string "json:\"body\""
}

// Ref: #/components/schemas/rate-limit
type RateLimit struct {
	Limit     int "json:\"limit\""
	Remaining int "json:\"remaining\""
	Reset     int "json:\"reset\""
	Used      int "json:\"used\""
}

// Rate Limit Overview.
// Ref: #/components/schemas/rate-limit-overview
type RateLimitOverview struct {
	Resources RateLimitOverviewResources "json:\"resources\""
	Rate      RateLimit                  "json:\"rate\""
}

func (*RateLimitOverview) rateLimitGetRes() {}

type RateLimitOverviewResources struct {
	Core                      RateLimit    "json:\"core\""
	Graphql                   OptRateLimit "json:\"graphql\""
	Search                    RateLimit    "json:\"search\""
	SourceImport              OptRateLimit "json:\"source_import\""
	IntegrationManifest       OptRateLimit "json:\"integration_manifest\""
	CodeScanningUpload        OptRateLimit "json:\"code_scanning_upload\""
	ActionsRunnerRegistration OptRateLimit "json:\"actions_runner_registration\""
}

// Reactions to conversations provide a way to help people express their feelings more simply and
// effectively.
// Ref: #/components/schemas/reaction
type Reaction struct {
	ID     int                   "json:\"id\""
	NodeID string                "json:\"node_id\""
	User   NilNullableSimpleUser "json:\"user\""
	// The reaction to use.
	Content   ReactionContent "json:\"content\""
	CreatedAt time.Time       "json:\"created_at\""
}

// The reaction to use.
type ReactionContent string

const (
	ReactionContentPlus1    ReactionContent = "+1"
	ReactionContentMinus1   ReactionContent = "-1"
	ReactionContentLaugh    ReactionContent = "laugh"
	ReactionContentConfused ReactionContent = "confused"
	ReactionContentHeart    ReactionContent = "heart"
	ReactionContentHooray   ReactionContent = "hooray"
	ReactionContentRocket   ReactionContent = "rocket"
	ReactionContentEyes     ReactionContent = "eyes"
)

// Ref: #/components/schemas/reaction-rollup
type ReactionRollup struct {
	URL        url.URL "json:\"url\""
	TotalCount int     "json:\"total_count\""
	Plus1      int     "json:\"+1\""
	Minus1     int     "json:\"-1\""
	Laugh      int     "json:\"laugh\""
	Confused   int     "json:\"confused\""
	Heart      int     "json:\"heart\""
	Hooray     int     "json:\"hooray\""
	Eyes       int     "json:\"eyes\""
	Rocket     int     "json:\"rocket\""
}

type ReactionsCreateForCommitCommentApplicationJSONCreated Reaction

func (*ReactionsCreateForCommitCommentApplicationJSONCreated) reactionsCreateForCommitCommentRes() {}

type ReactionsCreateForCommitCommentApplicationJSONOK Reaction

func (*ReactionsCreateForCommitCommentApplicationJSONOK) reactionsCreateForCommitCommentRes() {}

type ReactionsCreateForCommitCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// commit comment.
	Content ReactionsCreateForCommitCommentReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// commit comment.
type ReactionsCreateForCommitCommentReqContent string

const (
	ReactionsCreateForCommitCommentReqContentPlus1    ReactionsCreateForCommitCommentReqContent = "+1"
	ReactionsCreateForCommitCommentReqContentMinus1   ReactionsCreateForCommitCommentReqContent = "-1"
	ReactionsCreateForCommitCommentReqContentLaugh    ReactionsCreateForCommitCommentReqContent = "laugh"
	ReactionsCreateForCommitCommentReqContentConfused ReactionsCreateForCommitCommentReqContent = "confused"
	ReactionsCreateForCommitCommentReqContentHeart    ReactionsCreateForCommitCommentReqContent = "heart"
	ReactionsCreateForCommitCommentReqContentHooray   ReactionsCreateForCommitCommentReqContent = "hooray"
	ReactionsCreateForCommitCommentReqContentRocket   ReactionsCreateForCommitCommentReqContent = "rocket"
	ReactionsCreateForCommitCommentReqContentEyes     ReactionsCreateForCommitCommentReqContent = "eyes"
)

type ReactionsCreateForIssueApplicationJSONCreated Reaction

func (*ReactionsCreateForIssueApplicationJSONCreated) reactionsCreateForIssueRes() {}

type ReactionsCreateForIssueApplicationJSONOK Reaction

func (*ReactionsCreateForIssueApplicationJSONOK) reactionsCreateForIssueRes() {}

type ReactionsCreateForIssueCommentApplicationJSONCreated Reaction

func (*ReactionsCreateForIssueCommentApplicationJSONCreated) reactionsCreateForIssueCommentRes() {}

type ReactionsCreateForIssueCommentApplicationJSONOK Reaction

func (*ReactionsCreateForIssueCommentApplicationJSONOK) reactionsCreateForIssueCommentRes() {}

type ReactionsCreateForIssueCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// issue comment.
	Content ReactionsCreateForIssueCommentReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// issue comment.
type ReactionsCreateForIssueCommentReqContent string

const (
	ReactionsCreateForIssueCommentReqContentPlus1    ReactionsCreateForIssueCommentReqContent = "+1"
	ReactionsCreateForIssueCommentReqContentMinus1   ReactionsCreateForIssueCommentReqContent = "-1"
	ReactionsCreateForIssueCommentReqContentLaugh    ReactionsCreateForIssueCommentReqContent = "laugh"
	ReactionsCreateForIssueCommentReqContentConfused ReactionsCreateForIssueCommentReqContent = "confused"
	ReactionsCreateForIssueCommentReqContentHeart    ReactionsCreateForIssueCommentReqContent = "heart"
	ReactionsCreateForIssueCommentReqContentHooray   ReactionsCreateForIssueCommentReqContent = "hooray"
	ReactionsCreateForIssueCommentReqContentRocket   ReactionsCreateForIssueCommentReqContent = "rocket"
	ReactionsCreateForIssueCommentReqContentEyes     ReactionsCreateForIssueCommentReqContent = "eyes"
)

type ReactionsCreateForIssueReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// issue.
	Content ReactionsCreateForIssueReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// issue.
type ReactionsCreateForIssueReqContent string

const (
	ReactionsCreateForIssueReqContentPlus1    ReactionsCreateForIssueReqContent = "+1"
	ReactionsCreateForIssueReqContentMinus1   ReactionsCreateForIssueReqContent = "-1"
	ReactionsCreateForIssueReqContentLaugh    ReactionsCreateForIssueReqContent = "laugh"
	ReactionsCreateForIssueReqContentConfused ReactionsCreateForIssueReqContent = "confused"
	ReactionsCreateForIssueReqContentHeart    ReactionsCreateForIssueReqContent = "heart"
	ReactionsCreateForIssueReqContentHooray   ReactionsCreateForIssueReqContent = "hooray"
	ReactionsCreateForIssueReqContentRocket   ReactionsCreateForIssueReqContent = "rocket"
	ReactionsCreateForIssueReqContentEyes     ReactionsCreateForIssueReqContent = "eyes"
)

type ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated Reaction

func (*ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated) reactionsCreateForPullRequestReviewCommentRes() {
}

type ReactionsCreateForPullRequestReviewCommentApplicationJSONOK Reaction

func (*ReactionsCreateForPullRequestReviewCommentApplicationJSONOK) reactionsCreateForPullRequestReviewCommentRes() {
}

type ReactionsCreateForPullRequestReviewCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// pull request review comment.
	Content ReactionsCreateForPullRequestReviewCommentReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// pull request review comment.
type ReactionsCreateForPullRequestReviewCommentReqContent string

const (
	ReactionsCreateForPullRequestReviewCommentReqContentPlus1    ReactionsCreateForPullRequestReviewCommentReqContent = "+1"
	ReactionsCreateForPullRequestReviewCommentReqContentMinus1   ReactionsCreateForPullRequestReviewCommentReqContent = "-1"
	ReactionsCreateForPullRequestReviewCommentReqContentLaugh    ReactionsCreateForPullRequestReviewCommentReqContent = "laugh"
	ReactionsCreateForPullRequestReviewCommentReqContentConfused ReactionsCreateForPullRequestReviewCommentReqContent = "confused"
	ReactionsCreateForPullRequestReviewCommentReqContentHeart    ReactionsCreateForPullRequestReviewCommentReqContent = "heart"
	ReactionsCreateForPullRequestReviewCommentReqContentHooray   ReactionsCreateForPullRequestReviewCommentReqContent = "hooray"
	ReactionsCreateForPullRequestReviewCommentReqContentRocket   ReactionsCreateForPullRequestReviewCommentReqContent = "rocket"
	ReactionsCreateForPullRequestReviewCommentReqContentEyes     ReactionsCreateForPullRequestReviewCommentReqContent = "eyes"
)

type ReactionsCreateForReleaseApplicationJSONCreated Reaction

func (*ReactionsCreateForReleaseApplicationJSONCreated) reactionsCreateForReleaseRes() {}

type ReactionsCreateForReleaseApplicationJSONOK Reaction

func (*ReactionsCreateForReleaseApplicationJSONOK) reactionsCreateForReleaseRes() {}

type ReactionsCreateForReleaseReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// release.
	Content ReactionsCreateForReleaseReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// release.
type ReactionsCreateForReleaseReqContent string

const (
	ReactionsCreateForReleaseReqContentPlus1  ReactionsCreateForReleaseReqContent = "+1"
	ReactionsCreateForReleaseReqContentLaugh  ReactionsCreateForReleaseReqContent = "laugh"
	ReactionsCreateForReleaseReqContentHeart  ReactionsCreateForReleaseReqContent = "heart"
	ReactionsCreateForReleaseReqContentHooray ReactionsCreateForReleaseReqContent = "hooray"
	ReactionsCreateForReleaseReqContentRocket ReactionsCreateForReleaseReqContent = "rocket"
	ReactionsCreateForReleaseReqContentEyes   ReactionsCreateForReleaseReqContent = "eyes"
)

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) reactionsCreateForTeamDiscussionCommentInOrgRes() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) reactionsCreateForTeamDiscussionCommentInOrgRes() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion comment.
	Content ReactionsCreateForTeamDiscussionCommentInOrgReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion comment.
type ReactionsCreateForTeamDiscussionCommentInOrgReqContent string

const (
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "+1"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentMinus1   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "-1"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentLaugh    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentConfused ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "confused"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentHeart    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "heart"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentHooray   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentRocket   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentEyes     ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "eyes"
)

type ReactionsCreateForTeamDiscussionCommentLegacyReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion comment.
	Content ReactionsCreateForTeamDiscussionCommentLegacyReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion comment.
type ReactionsCreateForTeamDiscussionCommentLegacyReqContent string

const (
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "+1"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentMinus1   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "-1"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentLaugh    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentConfused ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "confused"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentHeart    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "heart"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentHooray   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentRocket   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentEyes     ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "eyes"
)

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated Reaction

func (*ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) reactionsCreateForTeamDiscussionInOrgRes() {
}

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK Reaction

func (*ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) reactionsCreateForTeamDiscussionInOrgRes() {
}

type ReactionsCreateForTeamDiscussionInOrgReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion.
	Content ReactionsCreateForTeamDiscussionInOrgReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion.
type ReactionsCreateForTeamDiscussionInOrgReqContent string

const (
	ReactionsCreateForTeamDiscussionInOrgReqContentPlus1    ReactionsCreateForTeamDiscussionInOrgReqContent = "+1"
	ReactionsCreateForTeamDiscussionInOrgReqContentMinus1   ReactionsCreateForTeamDiscussionInOrgReqContent = "-1"
	ReactionsCreateForTeamDiscussionInOrgReqContentLaugh    ReactionsCreateForTeamDiscussionInOrgReqContent = "laugh"
	ReactionsCreateForTeamDiscussionInOrgReqContentConfused ReactionsCreateForTeamDiscussionInOrgReqContent = "confused"
	ReactionsCreateForTeamDiscussionInOrgReqContentHeart    ReactionsCreateForTeamDiscussionInOrgReqContent = "heart"
	ReactionsCreateForTeamDiscussionInOrgReqContentHooray   ReactionsCreateForTeamDiscussionInOrgReqContent = "hooray"
	ReactionsCreateForTeamDiscussionInOrgReqContentRocket   ReactionsCreateForTeamDiscussionInOrgReqContent = "rocket"
	ReactionsCreateForTeamDiscussionInOrgReqContentEyes     ReactionsCreateForTeamDiscussionInOrgReqContent = "eyes"
)

type ReactionsCreateForTeamDiscussionLegacyReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion.
	Content ReactionsCreateForTeamDiscussionLegacyReqContent "json:\"content\""
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion.
type ReactionsCreateForTeamDiscussionLegacyReqContent string

const (
	ReactionsCreateForTeamDiscussionLegacyReqContentPlus1    ReactionsCreateForTeamDiscussionLegacyReqContent = "+1"
	ReactionsCreateForTeamDiscussionLegacyReqContentMinus1   ReactionsCreateForTeamDiscussionLegacyReqContent = "-1"
	ReactionsCreateForTeamDiscussionLegacyReqContentLaugh    ReactionsCreateForTeamDiscussionLegacyReqContent = "laugh"
	ReactionsCreateForTeamDiscussionLegacyReqContentConfused ReactionsCreateForTeamDiscussionLegacyReqContent = "confused"
	ReactionsCreateForTeamDiscussionLegacyReqContentHeart    ReactionsCreateForTeamDiscussionLegacyReqContent = "heart"
	ReactionsCreateForTeamDiscussionLegacyReqContentHooray   ReactionsCreateForTeamDiscussionLegacyReqContent = "hooray"
	ReactionsCreateForTeamDiscussionLegacyReqContentRocket   ReactionsCreateForTeamDiscussionLegacyReqContent = "rocket"
	ReactionsCreateForTeamDiscussionLegacyReqContentEyes     ReactionsCreateForTeamDiscussionLegacyReqContent = "eyes"
)

// ReactionsDeleteForCommitCommentNoContent is response for ReactionsDeleteForCommitComment operation.
type ReactionsDeleteForCommitCommentNoContent struct{}

// ReactionsDeleteForIssueCommentNoContent is response for ReactionsDeleteForIssueComment operation.
type ReactionsDeleteForIssueCommentNoContent struct{}

// ReactionsDeleteForIssueNoContent is response for ReactionsDeleteForIssue operation.
type ReactionsDeleteForIssueNoContent struct{}

// ReactionsDeleteForPullRequestCommentNoContent is response for ReactionsDeleteForPullRequestComment operation.
type ReactionsDeleteForPullRequestCommentNoContent struct{}

// ReactionsDeleteForTeamDiscussionCommentNoContent is response for ReactionsDeleteForTeamDiscussionComment operation.
type ReactionsDeleteForTeamDiscussionCommentNoContent struct{}

// ReactionsDeleteForTeamDiscussionNoContent is response for ReactionsDeleteForTeamDiscussion operation.
type ReactionsDeleteForTeamDiscussionNoContent struct{}

type ReactionsDeleteLegacyApplicationJSONForbidden BasicError

func (*ReactionsDeleteLegacyApplicationJSONForbidden) reactionsDeleteLegacyRes() {}

type ReactionsDeleteLegacyApplicationJSONGone BasicError

func (*ReactionsDeleteLegacyApplicationJSONGone) reactionsDeleteLegacyRes() {}

type ReactionsDeleteLegacyApplicationJSONUnauthorized BasicError

func (*ReactionsDeleteLegacyApplicationJSONUnauthorized) reactionsDeleteLegacyRes() {}

// ReactionsDeleteLegacyNoContent is response for ReactionsDeleteLegacy operation.
type ReactionsDeleteLegacyNoContent struct{}

func (*ReactionsDeleteLegacyNoContent) reactionsDeleteLegacyRes() {}

type ReactionsListForCommitCommentContent string

const (
	ReactionsListForCommitCommentContentPlus1    ReactionsListForCommitCommentContent = "+1"
	ReactionsListForCommitCommentContentMinus1   ReactionsListForCommitCommentContent = "-1"
	ReactionsListForCommitCommentContentLaugh    ReactionsListForCommitCommentContent = "laugh"
	ReactionsListForCommitCommentContentConfused ReactionsListForCommitCommentContent = "confused"
	ReactionsListForCommitCommentContentHeart    ReactionsListForCommitCommentContent = "heart"
	ReactionsListForCommitCommentContentHooray   ReactionsListForCommitCommentContent = "hooray"
	ReactionsListForCommitCommentContentRocket   ReactionsListForCommitCommentContent = "rocket"
	ReactionsListForCommitCommentContentEyes     ReactionsListForCommitCommentContent = "eyes"
)

type ReactionsListForCommitCommentOKApplicationJSON []Reaction

func (ReactionsListForCommitCommentOKApplicationJSON) reactionsListForCommitCommentRes() {}

type ReactionsListForIssueApplicationJSONGone BasicError

func (*ReactionsListForIssueApplicationJSONGone) reactionsListForIssueRes() {}

type ReactionsListForIssueApplicationJSONNotFound BasicError

func (*ReactionsListForIssueApplicationJSONNotFound) reactionsListForIssueRes() {}

type ReactionsListForIssueCommentContent string

const (
	ReactionsListForIssueCommentContentPlus1    ReactionsListForIssueCommentContent = "+1"
	ReactionsListForIssueCommentContentMinus1   ReactionsListForIssueCommentContent = "-1"
	ReactionsListForIssueCommentContentLaugh    ReactionsListForIssueCommentContent = "laugh"
	ReactionsListForIssueCommentContentConfused ReactionsListForIssueCommentContent = "confused"
	ReactionsListForIssueCommentContentHeart    ReactionsListForIssueCommentContent = "heart"
	ReactionsListForIssueCommentContentHooray   ReactionsListForIssueCommentContent = "hooray"
	ReactionsListForIssueCommentContentRocket   ReactionsListForIssueCommentContent = "rocket"
	ReactionsListForIssueCommentContentEyes     ReactionsListForIssueCommentContent = "eyes"
)

type ReactionsListForIssueCommentOKApplicationJSON []Reaction

func (ReactionsListForIssueCommentOKApplicationJSON) reactionsListForIssueCommentRes() {}

type ReactionsListForIssueContent string

const (
	ReactionsListForIssueContentPlus1    ReactionsListForIssueContent = "+1"
	ReactionsListForIssueContentMinus1   ReactionsListForIssueContent = "-1"
	ReactionsListForIssueContentLaugh    ReactionsListForIssueContent = "laugh"
	ReactionsListForIssueContentConfused ReactionsListForIssueContent = "confused"
	ReactionsListForIssueContentHeart    ReactionsListForIssueContent = "heart"
	ReactionsListForIssueContentHooray   ReactionsListForIssueContent = "hooray"
	ReactionsListForIssueContentRocket   ReactionsListForIssueContent = "rocket"
	ReactionsListForIssueContentEyes     ReactionsListForIssueContent = "eyes"
)

type ReactionsListForIssueOKApplicationJSON []Reaction

func (ReactionsListForIssueOKApplicationJSON) reactionsListForIssueRes() {}

type ReactionsListForPullRequestReviewCommentContent string

const (
	ReactionsListForPullRequestReviewCommentContentPlus1    ReactionsListForPullRequestReviewCommentContent = "+1"
	ReactionsListForPullRequestReviewCommentContentMinus1   ReactionsListForPullRequestReviewCommentContent = "-1"
	ReactionsListForPullRequestReviewCommentContentLaugh    ReactionsListForPullRequestReviewCommentContent = "laugh"
	ReactionsListForPullRequestReviewCommentContentConfused ReactionsListForPullRequestReviewCommentContent = "confused"
	ReactionsListForPullRequestReviewCommentContentHeart    ReactionsListForPullRequestReviewCommentContent = "heart"
	ReactionsListForPullRequestReviewCommentContentHooray   ReactionsListForPullRequestReviewCommentContent = "hooray"
	ReactionsListForPullRequestReviewCommentContentRocket   ReactionsListForPullRequestReviewCommentContent = "rocket"
	ReactionsListForPullRequestReviewCommentContentEyes     ReactionsListForPullRequestReviewCommentContent = "eyes"
)

type ReactionsListForPullRequestReviewCommentOKApplicationJSON []Reaction

func (ReactionsListForPullRequestReviewCommentOKApplicationJSON) reactionsListForPullRequestReviewCommentRes() {
}

type ReactionsListForTeamDiscussionCommentInOrgContent string

const (
	ReactionsListForTeamDiscussionCommentInOrgContentPlus1    ReactionsListForTeamDiscussionCommentInOrgContent = "+1"
	ReactionsListForTeamDiscussionCommentInOrgContentMinus1   ReactionsListForTeamDiscussionCommentInOrgContent = "-1"
	ReactionsListForTeamDiscussionCommentInOrgContentLaugh    ReactionsListForTeamDiscussionCommentInOrgContent = "laugh"
	ReactionsListForTeamDiscussionCommentInOrgContentConfused ReactionsListForTeamDiscussionCommentInOrgContent = "confused"
	ReactionsListForTeamDiscussionCommentInOrgContentHeart    ReactionsListForTeamDiscussionCommentInOrgContent = "heart"
	ReactionsListForTeamDiscussionCommentInOrgContentHooray   ReactionsListForTeamDiscussionCommentInOrgContent = "hooray"
	ReactionsListForTeamDiscussionCommentInOrgContentRocket   ReactionsListForTeamDiscussionCommentInOrgContent = "rocket"
	ReactionsListForTeamDiscussionCommentInOrgContentEyes     ReactionsListForTeamDiscussionCommentInOrgContent = "eyes"
)

type ReactionsListForTeamDiscussionCommentLegacyContent string

const (
	ReactionsListForTeamDiscussionCommentLegacyContentPlus1    ReactionsListForTeamDiscussionCommentLegacyContent = "+1"
	ReactionsListForTeamDiscussionCommentLegacyContentMinus1   ReactionsListForTeamDiscussionCommentLegacyContent = "-1"
	ReactionsListForTeamDiscussionCommentLegacyContentLaugh    ReactionsListForTeamDiscussionCommentLegacyContent = "laugh"
	ReactionsListForTeamDiscussionCommentLegacyContentConfused ReactionsListForTeamDiscussionCommentLegacyContent = "confused"
	ReactionsListForTeamDiscussionCommentLegacyContentHeart    ReactionsListForTeamDiscussionCommentLegacyContent = "heart"
	ReactionsListForTeamDiscussionCommentLegacyContentHooray   ReactionsListForTeamDiscussionCommentLegacyContent = "hooray"
	ReactionsListForTeamDiscussionCommentLegacyContentRocket   ReactionsListForTeamDiscussionCommentLegacyContent = "rocket"
	ReactionsListForTeamDiscussionCommentLegacyContentEyes     ReactionsListForTeamDiscussionCommentLegacyContent = "eyes"
)

type ReactionsListForTeamDiscussionInOrgContent string

const (
	ReactionsListForTeamDiscussionInOrgContentPlus1    ReactionsListForTeamDiscussionInOrgContent = "+1"
	ReactionsListForTeamDiscussionInOrgContentMinus1   ReactionsListForTeamDiscussionInOrgContent = "-1"
	ReactionsListForTeamDiscussionInOrgContentLaugh    ReactionsListForTeamDiscussionInOrgContent = "laugh"
	ReactionsListForTeamDiscussionInOrgContentConfused ReactionsListForTeamDiscussionInOrgContent = "confused"
	ReactionsListForTeamDiscussionInOrgContentHeart    ReactionsListForTeamDiscussionInOrgContent = "heart"
	ReactionsListForTeamDiscussionInOrgContentHooray   ReactionsListForTeamDiscussionInOrgContent = "hooray"
	ReactionsListForTeamDiscussionInOrgContentRocket   ReactionsListForTeamDiscussionInOrgContent = "rocket"
	ReactionsListForTeamDiscussionInOrgContentEyes     ReactionsListForTeamDiscussionInOrgContent = "eyes"
)

type ReactionsListForTeamDiscussionLegacyContent string

const (
	ReactionsListForTeamDiscussionLegacyContentPlus1    ReactionsListForTeamDiscussionLegacyContent = "+1"
	ReactionsListForTeamDiscussionLegacyContentMinus1   ReactionsListForTeamDiscussionLegacyContent = "-1"
	ReactionsListForTeamDiscussionLegacyContentLaugh    ReactionsListForTeamDiscussionLegacyContent = "laugh"
	ReactionsListForTeamDiscussionLegacyContentConfused ReactionsListForTeamDiscussionLegacyContent = "confused"
	ReactionsListForTeamDiscussionLegacyContentHeart    ReactionsListForTeamDiscussionLegacyContent = "heart"
	ReactionsListForTeamDiscussionLegacyContentHooray   ReactionsListForTeamDiscussionLegacyContent = "hooray"
	ReactionsListForTeamDiscussionLegacyContentRocket   ReactionsListForTeamDiscussionLegacyContent = "rocket"
	ReactionsListForTeamDiscussionLegacyContentEyes     ReactionsListForTeamDiscussionLegacyContent = "eyes"
)

// Referrer Traffic.
// Ref: #/components/schemas/referrer-traffic
type ReferrerTraffic struct {
	Referrer string "json:\"referrer\""
	Count    int    "json:\"count\""
	Uniques  int    "json:\"uniques\""
}

// A release.
// Ref: #/components/schemas/release
type Release struct {
	URL        url.URL "json:\"url\""
	HTMLURL    url.URL "json:\"html_url\""
	AssetsURL  url.URL "json:\"assets_url\""
	UploadURL  string  "json:\"upload_url\""
	TarballURL NilURI  "json:\"tarball_url\""
	ZipballURL NilURI  "json:\"zipball_url\""
	ID         int     "json:\"id\""
	NodeID     string  "json:\"node_id\""
	// The name of the tag.
	TagName string "json:\"tag_name\""
	// Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish string       "json:\"target_commitish\""
	Name            NilString    "json:\"name\""
	Body            OptNilString "json:\"body\""
	// True to create a draft (unpublished) release, false to create a published one.
	Draft bool "json:\"draft\""
	// Whether to identify the release as a prerelease or a full release.
	Prerelease    bool           "json:\"prerelease\""
	CreatedAt     time.Time      "json:\"created_at\""
	PublishedAt   NilDateTime    "json:\"published_at\""
	Author        SimpleUser     "json:\"author\""
	Assets        []ReleaseAsset "json:\"assets\""
	BodyHTML      OptString      "json:\"body_html\""
	BodyText      OptString      "json:\"body_text\""
	MentionsCount OptInt         "json:\"mentions_count\""
	// The URL of the release discussion.
	DiscussionURL OptURI            "json:\"discussion_url\""
	Reactions     OptReactionRollup "json:\"reactions\""
}

func (*Release) reposCreateReleaseRes()   {}
func (*Release) reposGetReleaseByTagRes() {}
func (*Release) reposGetReleaseRes()      {}
func (*Release) reposUpdateReleaseRes()   {}

// Data related to a release.
// Ref: #/components/schemas/release-asset
type ReleaseAsset struct {
	URL                url.URL "json:\"url\""
	BrowserDownloadURL url.URL "json:\"browser_download_url\""
	ID                 int     "json:\"id\""
	NodeID             string  "json:\"node_id\""
	// The file name of the asset.
	Name  string    "json:\"name\""
	Label NilString "json:\"label\""
	// State of the release asset.
	State         ReleaseAssetState     "json:\"state\""
	ContentType   string                "json:\"content_type\""
	Size          int                   "json:\"size\""
	DownloadCount int                   "json:\"download_count\""
	CreatedAt     time.Time             "json:\"created_at\""
	UpdatedAt     time.Time             "json:\"updated_at\""
	Uploader      NilNullableSimpleUser "json:\"uploader\""
}

func (*ReleaseAsset) reposGetReleaseAssetRes() {}

// State of the release asset.
type ReleaseAssetState string

const (
	ReleaseAssetStateUploaded ReleaseAssetState = "uploaded"
	ReleaseAssetStateOpen     ReleaseAssetState = "open"
)

// Repo Search Result Item.
// Ref: #/components/schemas/repo-search-result-item
type RepoSearchResultItem struct {
	ID               int                   "json:\"id\""
	NodeID           string                "json:\"node_id\""
	Name             string                "json:\"name\""
	FullName         string                "json:\"full_name\""
	Owner            NilNullableSimpleUser "json:\"owner\""
	Private          bool                  "json:\"private\""
	HTMLURL          url.URL               "json:\"html_url\""
	Description      NilString             "json:\"description\""
	Fork             bool                  "json:\"fork\""
	URL              url.URL               "json:\"url\""
	CreatedAt        time.Time             "json:\"created_at\""
	UpdatedAt        time.Time             "json:\"updated_at\""
	PushedAt         time.Time             "json:\"pushed_at\""
	Homepage         NilURI                "json:\"homepage\""
	Size             int                   "json:\"size\""
	StargazersCount  int                   "json:\"stargazers_count\""
	WatchersCount    int                   "json:\"watchers_count\""
	Language         NilString             "json:\"language\""
	ForksCount       int                   "json:\"forks_count\""
	OpenIssuesCount  int                   "json:\"open_issues_count\""
	MasterBranch     OptString             "json:\"master_branch\""
	DefaultBranch    string                "json:\"default_branch\""
	Score            float64               "json:\"score\""
	ForksURL         url.URL               "json:\"forks_url\""
	KeysURL          string                "json:\"keys_url\""
	CollaboratorsURL string                "json:\"collaborators_url\""
	TeamsURL         url.URL               "json:\"teams_url\""
	HooksURL         url.URL               "json:\"hooks_url\""
	IssueEventsURL   string                "json:\"issue_events_url\""
	EventsURL        url.URL               "json:\"events_url\""
	AssigneesURL     string                "json:\"assignees_url\""
	BranchesURL      string                "json:\"branches_url\""
	TagsURL          url.URL               "json:\"tags_url\""
	BlobsURL         string                "json:\"blobs_url\""
	GitTagsURL       string                "json:\"git_tags_url\""
	GitRefsURL       string                "json:\"git_refs_url\""
	TreesURL         string                "json:\"trees_url\""
	StatusesURL      string                "json:\"statuses_url\""
	LanguagesURL     url.URL               "json:\"languages_url\""
	StargazersURL    url.URL               "json:\"stargazers_url\""
	ContributorsURL  url.URL               "json:\"contributors_url\""
	SubscribersURL   url.URL               "json:\"subscribers_url\""
	SubscriptionURL  url.URL               "json:\"subscription_url\""
	CommitsURL       string                "json:\"commits_url\""
	GitCommitsURL    string                "json:\"git_commits_url\""
	CommentsURL      string                "json:\"comments_url\""
	IssueCommentURL  string                "json:\"issue_comment_url\""
	ContentsURL      string                "json:\"contents_url\""
	CompareURL       string                "json:\"compare_url\""
	MergesURL        url.URL               "json:\"merges_url\""
	ArchiveURL       string                "json:\"archive_url\""
	DownloadsURL     url.URL               "json:\"downloads_url\""
	IssuesURL        string                "json:\"issues_url\""
	PullsURL         string                "json:\"pulls_url\""
	MilestonesURL    string                "json:\"milestones_url\""
	NotificationsURL string                "json:\"notifications_url\""
	LabelsURL        string                "json:\"labels_url\""
	ReleasesURL      string                "json:\"releases_url\""
	DeploymentsURL   url.URL               "json:\"deployments_url\""
	GitURL           string                "json:\"git_url\""
	SSHURL           string                "json:\"ssh_url\""
	CloneURL         string                "json:\"clone_url\""
	SvnURL           url.URL               "json:\"svn_url\""
	Forks            int                   "json:\"forks\""
	OpenIssues       int                   "json:\"open_issues\""
	Watchers         int                   "json:\"watchers\""
	Topics           []string              "json:\"topics\""
	MirrorURL        NilURI                "json:\"mirror_url\""
	HasIssues        bool                  "json:\"has_issues\""
	HasProjects      bool                  "json:\"has_projects\""
	HasPages         bool                  "json:\"has_pages\""
	HasWiki          bool                  "json:\"has_wiki\""
	HasDownloads     bool                  "json:\"has_downloads\""
	Archived         bool                  "json:\"archived\""
	// Returns whether or not this repository disabled.
	Disabled            bool                               "json:\"disabled\""
	License             NilNullableLicenseSimple           "json:\"license\""
	Permissions         OptRepoSearchResultItemPermissions "json:\"permissions\""
	TextMatches         *SearchResultTextMatches           "json:\"text_matches\""
	TempCloneToken      OptString                          "json:\"temp_clone_token\""
	AllowMergeCommit    OptBool                            "json:\"allow_merge_commit\""
	AllowSquashMerge    OptBool                            "json:\"allow_squash_merge\""
	AllowRebaseMerge    OptBool                            "json:\"allow_rebase_merge\""
	AllowAutoMerge      OptBool                            "json:\"allow_auto_merge\""
	DeleteBranchOnMerge OptBool                            "json:\"delete_branch_on_merge\""
	AllowForking        OptBool                            "json:\"allow_forking\""
}

type RepoSearchResultItemPermissions struct {
	Admin    bool    "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     bool    "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     bool    "json:\"pull\""
}

type ReposAcceptInvitationApplicationJSONConflict BasicError

func (*ReposAcceptInvitationApplicationJSONConflict) reposAcceptInvitationRes() {}

type ReposAcceptInvitationApplicationJSONForbidden BasicError

func (*ReposAcceptInvitationApplicationJSONForbidden) reposAcceptInvitationRes() {}

type ReposAcceptInvitationApplicationJSONNotFound BasicError

func (*ReposAcceptInvitationApplicationJSONNotFound) reposAcceptInvitationRes() {}

// ReposAcceptInvitationNoContent is response for ReposAcceptInvitation operation.
type ReposAcceptInvitationNoContent struct{}

func (*ReposAcceptInvitationNoContent) reposAcceptInvitationRes() {}

type ReposAddAppAccessRestrictionsOKApplicationJSON []Integration

func (ReposAddAppAccessRestrictionsOKApplicationJSON) reposAddAppAccessRestrictionsRes() {}

// ReposAddAppAccessRestrictionsReq represents sum type.
type ReposAddAppAccessRestrictionsReq struct {
	Type                              ReposAddAppAccessRestrictionsReqType // switch on this field
	ReposAddAppAccessRestrictionsReq0 ReposAddAppAccessRestrictionsReq0
	StringArray                       []string
}

// ReposAddAppAccessRestrictionsReqType is oneOf type of ReposAddAppAccessRestrictionsReq.
type ReposAddAppAccessRestrictionsReqType string

// Possible values for ReposAddAppAccessRestrictionsReqType.
const (
	ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq ReposAddAppAccessRestrictionsReqType = "ReposAddAppAccessRestrictionsReq0"
	StringArrayReposAddAppAccessRestrictionsReq                       ReposAddAppAccessRestrictionsReqType = "[]string"
)

// IsReposAddAppAccessRestrictionsReq0 reports whether ReposAddAppAccessRestrictionsReq is ReposAddAppAccessRestrictionsReq0.
func (s ReposAddAppAccessRestrictionsReq) IsReposAddAppAccessRestrictionsReq0() bool {
	return s.Type == ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddAppAccessRestrictionsReq is []string.
func (s ReposAddAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddAppAccessRestrictionsReq
}

// SetReposAddAppAccessRestrictionsReq0 sets ReposAddAppAccessRestrictionsReq to ReposAddAppAccessRestrictionsReq0.
func (s *ReposAddAppAccessRestrictionsReq) SetReposAddAppAccessRestrictionsReq0(v ReposAddAppAccessRestrictionsReq0) {
	s.Type = ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq
	s.ReposAddAppAccessRestrictionsReq0 = v
}

// GetReposAddAppAccessRestrictionsReq0 returns ReposAddAppAccessRestrictionsReq0 and true boolean if ReposAddAppAccessRestrictionsReq is ReposAddAppAccessRestrictionsReq0.
func (s ReposAddAppAccessRestrictionsReq) GetReposAddAppAccessRestrictionsReq0() (v ReposAddAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddAppAccessRestrictionsReq0, true
}

// NewReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq returns new ReposAddAppAccessRestrictionsReq from ReposAddAppAccessRestrictionsReq0.
func NewReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq(v ReposAddAppAccessRestrictionsReq0) ReposAddAppAccessRestrictionsReq {
	var s ReposAddAppAccessRestrictionsReq
	s.SetReposAddAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddAppAccessRestrictionsReq to []string.
func (s *ReposAddAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddAppAccessRestrictionsReq is []string.
func (s ReposAddAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddAppAccessRestrictionsReq returns new ReposAddAppAccessRestrictionsReq from []string.
func NewStringArrayReposAddAppAccessRestrictionsReq(v []string) ReposAddAppAccessRestrictionsReq {
	var s ReposAddAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string "json:\"apps\""
}

// ReposAddCollaboratorNoContent is response for ReposAddCollaborator operation.
type ReposAddCollaboratorNoContent struct{}

func (*ReposAddCollaboratorNoContent) reposAddCollaboratorRes() {}

type ReposAddCollaboratorReq struct {
	// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can
	// be one of:
	// \* `pull` - can pull, but not push to or administer this repository.
	// \* `push` - can pull and push, but not administer this repository.
	// \* `admin` - can pull, push and administer this repository.
	// \* `maintain` - Recommended for project managers who need to manage the repository without access
	// to sensitive or destructive actions.
	// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests
	// without write access.
	// \* custom repository role name - Can assign a custom repository role if the owning organization
	// has defined any.
	Permission  OptReposAddCollaboratorReqPermission "json:\"permission\""
	Permissions OptString                            "json:\"permissions\""
}

// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can
// be one of:
// \* `pull` - can pull, but not push to or administer this repository.
// \* `push` - can pull and push, but not administer this repository.
// \* `admin` - can pull, push and administer this repository.
// \* `maintain` - Recommended for project managers who need to manage the repository without access
// to sensitive or destructive actions.
// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests
// without write access.
// \* custom repository role name - Can assign a custom repository role if the owning organization
// has defined any.
type ReposAddCollaboratorReqPermission string

const (
	ReposAddCollaboratorReqPermissionPull     ReposAddCollaboratorReqPermission = "pull"
	ReposAddCollaboratorReqPermissionPush     ReposAddCollaboratorReqPermission = "push"
	ReposAddCollaboratorReqPermissionAdmin    ReposAddCollaboratorReqPermission = "admin"
	ReposAddCollaboratorReqPermissionMaintain ReposAddCollaboratorReqPermission = "maintain"
	ReposAddCollaboratorReqPermissionTriage   ReposAddCollaboratorReqPermission = "triage"
)

type ReposAddStatusCheckContextsApplicationJSONForbidden BasicError

func (*ReposAddStatusCheckContextsApplicationJSONForbidden) reposAddStatusCheckContextsRes() {}

type ReposAddStatusCheckContextsApplicationJSONNotFound BasicError

func (*ReposAddStatusCheckContextsApplicationJSONNotFound) reposAddStatusCheckContextsRes() {}

type ReposAddStatusCheckContextsOKApplicationJSON []string

func (ReposAddStatusCheckContextsOKApplicationJSON) reposAddStatusCheckContextsRes() {}

// ReposAddStatusCheckContextsReq represents sum type.
type ReposAddStatusCheckContextsReq struct {
	Type                            ReposAddStatusCheckContextsReqType // switch on this field
	ReposAddStatusCheckContextsReq0 ReposAddStatusCheckContextsReq0
	StringArray                     []string
}

// ReposAddStatusCheckContextsReqType is oneOf type of ReposAddStatusCheckContextsReq.
type ReposAddStatusCheckContextsReqType string

// Possible values for ReposAddStatusCheckContextsReqType.
const (
	ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq ReposAddStatusCheckContextsReqType = "ReposAddStatusCheckContextsReq0"
	StringArrayReposAddStatusCheckContextsReq                     ReposAddStatusCheckContextsReqType = "[]string"
)

// IsReposAddStatusCheckContextsReq0 reports whether ReposAddStatusCheckContextsReq is ReposAddStatusCheckContextsReq0.
func (s ReposAddStatusCheckContextsReq) IsReposAddStatusCheckContextsReq0() bool {
	return s.Type == ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq
}

// IsStringArray reports whether ReposAddStatusCheckContextsReq is []string.
func (s ReposAddStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddStatusCheckContextsReq
}

// SetReposAddStatusCheckContextsReq0 sets ReposAddStatusCheckContextsReq to ReposAddStatusCheckContextsReq0.
func (s *ReposAddStatusCheckContextsReq) SetReposAddStatusCheckContextsReq0(v ReposAddStatusCheckContextsReq0) {
	s.Type = ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq
	s.ReposAddStatusCheckContextsReq0 = v
}

// GetReposAddStatusCheckContextsReq0 returns ReposAddStatusCheckContextsReq0 and true boolean if ReposAddStatusCheckContextsReq is ReposAddStatusCheckContextsReq0.
func (s ReposAddStatusCheckContextsReq) GetReposAddStatusCheckContextsReq0() (v ReposAddStatusCheckContextsReq0, ok bool) {
	if !s.IsReposAddStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposAddStatusCheckContextsReq0, true
}

// NewReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq returns new ReposAddStatusCheckContextsReq from ReposAddStatusCheckContextsReq0.
func NewReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq(v ReposAddStatusCheckContextsReq0) ReposAddStatusCheckContextsReq {
	var s ReposAddStatusCheckContextsReq
	s.SetReposAddStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposAddStatusCheckContextsReq to []string.
func (s *ReposAddStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddStatusCheckContextsReq is []string.
func (s ReposAddStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddStatusCheckContextsReq returns new ReposAddStatusCheckContextsReq from []string.
func NewStringArrayReposAddStatusCheckContextsReq(v []string) ReposAddStatusCheckContextsReq {
	var s ReposAddStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposAddStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string "json:\"contexts\""
}

type ReposAddTeamAccessRestrictionsOKApplicationJSON []Team

func (ReposAddTeamAccessRestrictionsOKApplicationJSON) reposAddTeamAccessRestrictionsRes() {}

// ReposAddTeamAccessRestrictionsReq represents sum type.
type ReposAddTeamAccessRestrictionsReq struct {
	Type                               ReposAddTeamAccessRestrictionsReqType // switch on this field
	ReposAddTeamAccessRestrictionsReq0 ReposAddTeamAccessRestrictionsReq0
	StringArray                        []string
}

// ReposAddTeamAccessRestrictionsReqType is oneOf type of ReposAddTeamAccessRestrictionsReq.
type ReposAddTeamAccessRestrictionsReqType string

// Possible values for ReposAddTeamAccessRestrictionsReqType.
const (
	ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq ReposAddTeamAccessRestrictionsReqType = "ReposAddTeamAccessRestrictionsReq0"
	StringArrayReposAddTeamAccessRestrictionsReq                        ReposAddTeamAccessRestrictionsReqType = "[]string"
)

// IsReposAddTeamAccessRestrictionsReq0 reports whether ReposAddTeamAccessRestrictionsReq is ReposAddTeamAccessRestrictionsReq0.
func (s ReposAddTeamAccessRestrictionsReq) IsReposAddTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddTeamAccessRestrictionsReq is []string.
func (s ReposAddTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddTeamAccessRestrictionsReq
}

// SetReposAddTeamAccessRestrictionsReq0 sets ReposAddTeamAccessRestrictionsReq to ReposAddTeamAccessRestrictionsReq0.
func (s *ReposAddTeamAccessRestrictionsReq) SetReposAddTeamAccessRestrictionsReq0(v ReposAddTeamAccessRestrictionsReq0) {
	s.Type = ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq
	s.ReposAddTeamAccessRestrictionsReq0 = v
}

// GetReposAddTeamAccessRestrictionsReq0 returns ReposAddTeamAccessRestrictionsReq0 and true boolean if ReposAddTeamAccessRestrictionsReq is ReposAddTeamAccessRestrictionsReq0.
func (s ReposAddTeamAccessRestrictionsReq) GetReposAddTeamAccessRestrictionsReq0() (v ReposAddTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddTeamAccessRestrictionsReq0, true
}

// NewReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq returns new ReposAddTeamAccessRestrictionsReq from ReposAddTeamAccessRestrictionsReq0.
func NewReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq(v ReposAddTeamAccessRestrictionsReq0) ReposAddTeamAccessRestrictionsReq {
	var s ReposAddTeamAccessRestrictionsReq
	s.SetReposAddTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddTeamAccessRestrictionsReq to []string.
func (s *ReposAddTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddTeamAccessRestrictionsReq is []string.
func (s ReposAddTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddTeamAccessRestrictionsReq returns new ReposAddTeamAccessRestrictionsReq from []string.
func NewStringArrayReposAddTeamAccessRestrictionsReq(v []string) ReposAddTeamAccessRestrictionsReq {
	var s ReposAddTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string "json:\"teams\""
}

type ReposAddUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (ReposAddUserAccessRestrictionsOKApplicationJSON) reposAddUserAccessRestrictionsRes() {}

// ReposAddUserAccessRestrictionsReq represents sum type.
type ReposAddUserAccessRestrictionsReq struct {
	Type                               ReposAddUserAccessRestrictionsReqType // switch on this field
	ReposAddUserAccessRestrictionsReq0 ReposAddUserAccessRestrictionsReq0
	StringArray                        []string
}

// ReposAddUserAccessRestrictionsReqType is oneOf type of ReposAddUserAccessRestrictionsReq.
type ReposAddUserAccessRestrictionsReqType string

// Possible values for ReposAddUserAccessRestrictionsReqType.
const (
	ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq ReposAddUserAccessRestrictionsReqType = "ReposAddUserAccessRestrictionsReq0"
	StringArrayReposAddUserAccessRestrictionsReq                        ReposAddUserAccessRestrictionsReqType = "[]string"
)

// IsReposAddUserAccessRestrictionsReq0 reports whether ReposAddUserAccessRestrictionsReq is ReposAddUserAccessRestrictionsReq0.
func (s ReposAddUserAccessRestrictionsReq) IsReposAddUserAccessRestrictionsReq0() bool {
	return s.Type == ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddUserAccessRestrictionsReq is []string.
func (s ReposAddUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddUserAccessRestrictionsReq
}

// SetReposAddUserAccessRestrictionsReq0 sets ReposAddUserAccessRestrictionsReq to ReposAddUserAccessRestrictionsReq0.
func (s *ReposAddUserAccessRestrictionsReq) SetReposAddUserAccessRestrictionsReq0(v ReposAddUserAccessRestrictionsReq0) {
	s.Type = ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq
	s.ReposAddUserAccessRestrictionsReq0 = v
}

// GetReposAddUserAccessRestrictionsReq0 returns ReposAddUserAccessRestrictionsReq0 and true boolean if ReposAddUserAccessRestrictionsReq is ReposAddUserAccessRestrictionsReq0.
func (s ReposAddUserAccessRestrictionsReq) GetReposAddUserAccessRestrictionsReq0() (v ReposAddUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddUserAccessRestrictionsReq0, true
}

// NewReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq returns new ReposAddUserAccessRestrictionsReq from ReposAddUserAccessRestrictionsReq0.
func NewReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq(v ReposAddUserAccessRestrictionsReq0) ReposAddUserAccessRestrictionsReq {
	var s ReposAddUserAccessRestrictionsReq
	s.SetReposAddUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddUserAccessRestrictionsReq to []string.
func (s *ReposAddUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddUserAccessRestrictionsReq is []string.
func (s ReposAddUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddUserAccessRestrictionsReq returns new ReposAddUserAccessRestrictionsReq from []string.
func NewStringArrayReposAddUserAccessRestrictionsReq(v []string) ReposAddUserAccessRestrictionsReq {
	var s ReposAddUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string "json:\"users\""
}

// ReposCheckCollaboratorNoContent is response for ReposCheckCollaborator operation.
type ReposCheckCollaboratorNoContent struct{}

func (*ReposCheckCollaboratorNoContent) reposCheckCollaboratorRes() {}

// ReposCheckCollaboratorNotFound is response for ReposCheckCollaborator operation.
type ReposCheckCollaboratorNotFound struct{}

func (*ReposCheckCollaboratorNotFound) reposCheckCollaboratorRes() {}

// ReposCheckVulnerabilityAlertsNoContent is response for ReposCheckVulnerabilityAlerts operation.
type ReposCheckVulnerabilityAlertsNoContent struct{}

func (*ReposCheckVulnerabilityAlertsNoContent) reposCheckVulnerabilityAlertsRes() {}

// ReposCheckVulnerabilityAlertsNotFound is response for ReposCheckVulnerabilityAlerts operation.
type ReposCheckVulnerabilityAlertsNotFound struct{}

func (*ReposCheckVulnerabilityAlertsNotFound) reposCheckVulnerabilityAlertsRes() {}

type ReposCompareCommitsApplicationJSONInternalServerError BasicError

func (*ReposCompareCommitsApplicationJSONInternalServerError) reposCompareCommitsRes() {}

type ReposCompareCommitsApplicationJSONNotFound BasicError

func (*ReposCompareCommitsApplicationJSONNotFound) reposCompareCommitsRes() {}

type ReposCreateAutolinkReq struct {
	// The prefix appended by a number will generate a link any time it is found in an issue, pull
	// request, or commit.
	KeyPrefix string "json:\"key_prefix\""
	// The URL must contain <num> for the reference number.
	URLTemplate string "json:\"url_template\""
}

type ReposCreateCommitCommentReq struct {
	// The contents of the comment.
	Body string "json:\"body\""
	// Relative path of the file to comment on.
	Path OptString "json:\"path\""
	// Line index in the diff to comment on.
	Position OptInt "json:\"position\""
	// **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
	Line OptInt "json:\"line\""
}

type ReposCreateCommitStatusReq struct {
	// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
	State ReposCreateCommitStatusReqState "json:\"state\""
	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow
	// users to easily see the source of the status.
	// For example, if your continuous integration system is posting build status, you would want to
	// provide the deep link for the build output for this specific SHA:
	// `http://ci.example.com/user/repo/build/sha`.
	TargetURL OptString "json:\"target_url\""
	// A short description of the status.
	Description OptString "json:\"description\""
	// A string label to differentiate this status from the status of other systems. This field is
	// case-insensitive.
	Context OptString "json:\"context\""
}

// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
type ReposCreateCommitStatusReqState string

const (
	ReposCreateCommitStatusReqStateError   ReposCreateCommitStatusReqState = "error"
	ReposCreateCommitStatusReqStateFailure ReposCreateCommitStatusReqState = "failure"
	ReposCreateCommitStatusReqStatePending ReposCreateCommitStatusReqState = "pending"
	ReposCreateCommitStatusReqStateSuccess ReposCreateCommitStatusReqState = "success"
)

type ReposCreateDeployKeyReq struct {
	// A name for the key.
	Title OptString "json:\"title\""
	// The contents of the key.
	Key string "json:\"key\""
	// If `true`, the key will only be able to read repository contents. Otherwise, the key will be able
	// to read and write.
	// Deploy keys with write access can perform the same actions as an organization member with admin
	// access, or a collaborator on a personal repository. For more information, see "[Repository
	// permission levels for an organization](https://help.github.
	// com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a
	// user account repository](https://help.github.
	// com/articles/permission-levels-for-a-user-account-repository/).".
	ReadOnly OptBool "json:\"read_only\""
}

type ReposCreateDeploymentAccepted struct {
	Message OptString "json:\"message\""
}

func (*ReposCreateDeploymentAccepted) reposCreateDeploymentRes() {}

// ReposCreateDeploymentConflict is response for ReposCreateDeployment operation.
type ReposCreateDeploymentConflict struct{}

func (*ReposCreateDeploymentConflict) reposCreateDeploymentRes() {}

type ReposCreateDeploymentReq struct {
	// The ref to deploy. This can be a branch, tag, or SHA.
	Ref string "json:\"ref\""
	// Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
	Task OptString "json:\"task\""
	// Attempts to automatically merge the default branch into the requested ref, if it's behind the
	// default branch.
	AutoMerge OptBool "json:\"auto_merge\""
	// The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against
	// commit status checks. If you omit this parameter, GitHub verifies all unique contexts before
	// creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique
	// contexts.
	RequiredContexts []string                           "json:\"required_contexts\""
	Payload          OptReposCreateDeploymentReqPayload "json:\"payload\""
	// Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
	Environment OptString "json:\"environment\""
	// Short description of the deployment.
	Description OptNilString "json:\"description\""
	// Specifies if the given environment is specific to the deployment and will no longer exist at some
	// point in the future. Default: `false`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	TransientEnvironment OptBool "json:\"transient_environment\""
	// Specifies if the given environment is one that end-users directly interact with. Default: `true`
	// when `environment` is `production` and `false` otherwise.
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	ProductionEnvironment OptBool "json:\"production_environment\""
}

// ReposCreateDeploymentReqPayload represents sum type.
type ReposCreateDeploymentReqPayload struct {
	Type                             ReposCreateDeploymentReqPayloadType // switch on this field
	ReposCreateDeploymentReqPayload0 ReposCreateDeploymentReqPayload0
	String                           string
}

// ReposCreateDeploymentReqPayloadType is oneOf type of ReposCreateDeploymentReqPayload.
type ReposCreateDeploymentReqPayloadType string

// Possible values for ReposCreateDeploymentReqPayloadType.
const (
	ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload ReposCreateDeploymentReqPayloadType = "ReposCreateDeploymentReqPayload0"
	StringReposCreateDeploymentReqPayload                           ReposCreateDeploymentReqPayloadType = "string"
)

// IsReposCreateDeploymentReqPayload0 reports whether ReposCreateDeploymentReqPayload is ReposCreateDeploymentReqPayload0.
func (s ReposCreateDeploymentReqPayload) IsReposCreateDeploymentReqPayload0() bool {
	return s.Type == ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload
}

// IsString reports whether ReposCreateDeploymentReqPayload is string.
func (s ReposCreateDeploymentReqPayload) IsString() bool {
	return s.Type == StringReposCreateDeploymentReqPayload
}

// SetReposCreateDeploymentReqPayload0 sets ReposCreateDeploymentReqPayload to ReposCreateDeploymentReqPayload0.
func (s *ReposCreateDeploymentReqPayload) SetReposCreateDeploymentReqPayload0(v ReposCreateDeploymentReqPayload0) {
	s.Type = ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload
	s.ReposCreateDeploymentReqPayload0 = v
}

// GetReposCreateDeploymentReqPayload0 returns ReposCreateDeploymentReqPayload0 and true boolean if ReposCreateDeploymentReqPayload is ReposCreateDeploymentReqPayload0.
func (s ReposCreateDeploymentReqPayload) GetReposCreateDeploymentReqPayload0() (v ReposCreateDeploymentReqPayload0, ok bool) {
	if !s.IsReposCreateDeploymentReqPayload0() {
		return v, false
	}
	return s.ReposCreateDeploymentReqPayload0, true
}

// NewReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload returns new ReposCreateDeploymentReqPayload from ReposCreateDeploymentReqPayload0.
func NewReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload(v ReposCreateDeploymentReqPayload0) ReposCreateDeploymentReqPayload {
	var s ReposCreateDeploymentReqPayload
	s.SetReposCreateDeploymentReqPayload0(v)
	return s
}

// SetString sets ReposCreateDeploymentReqPayload to string.
func (s *ReposCreateDeploymentReqPayload) SetString(v string) {
	s.Type = StringReposCreateDeploymentReqPayload
	s.String = v
}

// GetString returns string and true boolean if ReposCreateDeploymentReqPayload is string.
func (s ReposCreateDeploymentReqPayload) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringReposCreateDeploymentReqPayload returns new ReposCreateDeploymentReqPayload from string.
func NewStringReposCreateDeploymentReqPayload(v string) ReposCreateDeploymentReqPayload {
	var s ReposCreateDeploymentReqPayload
	s.SetString(v)
	return s
}

type ReposCreateDeploymentReqPayload0 map[string]jx.Raw

func (s *ReposCreateDeploymentReqPayload0) init() ReposCreateDeploymentReqPayload0 {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReposCreateDeploymentStatusReq struct {
	// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`
	// `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the
	// [`application/vnd.github.ant-man-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress`
	// and `queued` states, you must provide the [`application/vnd.github.
	// flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses)
	// custom media type. When you set a transient deployment to `inactive`, the deployment will be shown
	// as `destroyed` in GitHub.
	State ReposCreateDeploymentStatusReqState "json:\"state\""
	// The target URL to associate with this status. This URL should contain output to keep the user
	// updated while the task is running or serve as historical information for what happened in the
	// deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
	TargetURL OptString "json:\"target_url\""
	// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to
	// accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`.
	//  Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	LogURL OptString "json:\"log_url\""
	// A short description of the status. The maximum description length is 140 characters.
	Description OptString "json:\"description\""
	// Name for the target deployment environment, which can be changed when setting a deploy status. For
	// example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the
	// [`application/vnd.github.flash-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#deployment-statuses) custom media type.
	Environment OptReposCreateDeploymentStatusReqEnvironment "json:\"environment\""
	// Sets the URL for accessing your environment. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	EnvironmentURL OptString "json:\"environment_url\""
	// Adds a new `inactive` status to all prior non-transient, non-production environment deployments
	// with the same repository and `environment` name as the created status's deployment. An `inactive`
	// status is only added to deployments that had a `success` state. Default: `true`
	// **Note:** To add an `inactive` status to `production` environments, you must use the
	// [`application/vnd.github.flash-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#deployment-statuses) custom media type.
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	AutoInactive OptBool "json:\"auto_inactive\""
}

// Name for the target deployment environment, which can be changed when setting a deploy status. For
// example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the
// [`application/vnd.github.flash-preview+json`](https://docs.github.
// com/rest/overview/api-previews#deployment-statuses) custom media type.
type ReposCreateDeploymentStatusReqEnvironment string

const (
	ReposCreateDeploymentStatusReqEnvironmentProduction ReposCreateDeploymentStatusReqEnvironment = "production"
	ReposCreateDeploymentStatusReqEnvironmentStaging    ReposCreateDeploymentStatusReqEnvironment = "staging"
	ReposCreateDeploymentStatusReqEnvironmentQa         ReposCreateDeploymentStatusReqEnvironment = "qa"
)

// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`
// `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the
// [`application/vnd.github.ant-man-preview+json`](https://docs.github.
// com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress`
// and `queued` states, you must provide the [`application/vnd.github.
// flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses)
// custom media type. When you set a transient deployment to `inactive`, the deployment will be shown
// as `destroyed` in GitHub.
type ReposCreateDeploymentStatusReqState string

const (
	ReposCreateDeploymentStatusReqStateError      ReposCreateDeploymentStatusReqState = "error"
	ReposCreateDeploymentStatusReqStateFailure    ReposCreateDeploymentStatusReqState = "failure"
	ReposCreateDeploymentStatusReqStateInactive   ReposCreateDeploymentStatusReqState = "inactive"
	ReposCreateDeploymentStatusReqStateInProgress ReposCreateDeploymentStatusReqState = "in_progress"
	ReposCreateDeploymentStatusReqStateQueued     ReposCreateDeploymentStatusReqState = "queued"
	ReposCreateDeploymentStatusReqStatePending    ReposCreateDeploymentStatusReqState = "pending"
	ReposCreateDeploymentStatusReqStateSuccess    ReposCreateDeploymentStatusReqState = "success"
)

// ReposCreateDispatchEventNoContent is response for ReposCreateDispatchEvent operation.
type ReposCreateDispatchEventNoContent struct{}

func (*ReposCreateDispatchEventNoContent) reposCreateDispatchEventRes() {}

type ReposCreateDispatchEventReq struct {
	// A custom webhook event name.
	EventType string "json:\"event_type\""
	// JSON payload with extra information about the webhook event that your action or worklow may use.
	ClientPayload OptReposCreateDispatchEventReqClientPayload "json:\"client_payload\""
}

// JSON payload with extra information about the webhook event that your action or worklow may use.
type ReposCreateDispatchEventReqClientPayload map[string]jx.Raw

func (s *ReposCreateDispatchEventReqClientPayload) init() ReposCreateDispatchEventReqClientPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReposCreateForAuthenticatedUserApplicationJSONBadRequest BasicError

func (*ReposCreateForAuthenticatedUserApplicationJSONBadRequest) reposCreateForAuthenticatedUserRes() {
}

type ReposCreateForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ReposCreateForAuthenticatedUserApplicationJSONForbidden) reposCreateForAuthenticatedUserRes() {
}

type ReposCreateForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ReposCreateForAuthenticatedUserApplicationJSONNotFound) reposCreateForAuthenticatedUserRes() {}

type ReposCreateForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ReposCreateForAuthenticatedUserApplicationJSONUnauthorized) reposCreateForAuthenticatedUserRes() {
}

type ReposCreateForAuthenticatedUserReq struct {
	// The name of the repository.
	Name string "json:\"name\""
	// A short description of the repository.
	Description OptString "json:\"description\""
	// A URL with more information about the repository.
	Homepage OptString "json:\"homepage\""
	// Whether the repository is private.
	Private OptBool "json:\"private\""
	// Whether issues are enabled.
	HasIssues OptBool "json:\"has_issues\""
	// Whether projects are enabled.
	HasProjects OptBool "json:\"has_projects\""
	// Whether the wiki is enabled.
	HasWiki OptBool "json:\"has_wiki\""
	// The id of the team that will be granted access to this repository. This is only valid when
	// creating a repository in an organization.
	TeamID OptInt "json:\"team_id\""
	// Whether the repository is initialized with a minimal README.
	AutoInit OptBool "json:\"auto_init\""
	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate OptString "json:\"gitignore_template\""
	// The license keyword of the open source license for this repository.
	LicenseTemplate OptString "json:\"license_template\""
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge OptBool "json:\"allow_rebase_merge\""
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
	// Whether downloads are enabled.
	HasDownloads OptBool "json:\"has_downloads\""
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool "json:\"is_template\""
}

type ReposCreateForkApplicationJSONBadRequest BasicError

func (*ReposCreateForkApplicationJSONBadRequest) reposCreateForkRes() {}

type ReposCreateForkApplicationJSONForbidden BasicError

func (*ReposCreateForkApplicationJSONForbidden) reposCreateForkRes() {}

type ReposCreateForkApplicationJSONNotFound BasicError

func (*ReposCreateForkApplicationJSONNotFound) reposCreateForkRes() {}

type ReposCreateForkReq struct {
	// Optional parameter to specify the organization name if forking into an organization.
	Organization OptString "json:\"organization\""
}

type ReposCreateInOrgReq struct {
	// The name of the repository.
	Name string "json:\"name\""
	// A short description of the repository.
	Description OptString "json:\"description\""
	// A URL with more information about the repository.
	Homepage OptString "json:\"homepage\""
	// Whether the repository is private.
	Private OptBool "json:\"private\""
	// Can be `public` or `private`. If your organization is associated with an enterprise account using
	// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
	// Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories
	// available to all users on the enterprise. For more information, see "[Creating an internal
	// repository](https://help.github.
	// com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
	// The `visibility` parameter overrides the `private` parameter when you use both parameters with the
	// `nebula-preview` preview header.
	Visibility OptReposCreateInOrgReqVisibility "json:\"visibility\""
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues OptBool "json:\"has_issues\""
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
	// you're creating a repository in an organization that has disabled repository projects, the default
	// is `false`, and if you pass `true`, the API returns an error.
	HasProjects OptBool "json:\"has_projects\""
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki OptBool "json:\"has_wiki\""
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate OptBool "json:\"is_template\""
	// The id of the team that will be granted access to this repository. This is only valid when
	// creating a repository in an organization.
	TeamID OptInt "json:\"team_id\""
	// Pass `true` to create an initial commit with empty README.
	AutoInit OptBool "json:\"auto_init\""
	// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply.
	// Use the name of the template without the extension. For example, "Haskell".
	GitignoreTemplate OptString "json:\"gitignore_template\""
	// Choose an [open source license template](https://choosealicense.com/) that best suits your needs,
	// and then use the [license keyword](https://help.github.
	// com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template`
	// string. For example, "mit" or "mpl-2.0".
	LicenseTemplate OptString "json:\"license_template\""
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging
	// pull requests with merge commits.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge OptBool "json:\"allow_rebase_merge\""
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or
	// `false` to prevent automatic deletion.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
}

// Can be `public` or `private`. If your organization is associated with an enterprise account using
// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
// Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories
// available to all users on the enterprise. For more information, see "[Creating an internal
// repository](https://help.github.
// com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
// The `visibility` parameter overrides the `private` parameter when you use both parameters with the
// `nebula-preview` preview header.
type ReposCreateInOrgReqVisibility string

const (
	ReposCreateInOrgReqVisibilityPublic     ReposCreateInOrgReqVisibility = "public"
	ReposCreateInOrgReqVisibilityPrivate    ReposCreateInOrgReqVisibility = "private"
	ReposCreateInOrgReqVisibilityVisibility ReposCreateInOrgReqVisibility = "visibility"
	ReposCreateInOrgReqVisibilityInternal   ReposCreateInOrgReqVisibility = "internal"
)

type ReposCreateOrUpdateFileContentsApplicationJSONConflict BasicError

func (*ReposCreateOrUpdateFileContentsApplicationJSONConflict) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsApplicationJSONCreated FileCommit

func (*ReposCreateOrUpdateFileContentsApplicationJSONCreated) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsApplicationJSONNotFound BasicError

func (*ReposCreateOrUpdateFileContentsApplicationJSONNotFound) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsApplicationJSONOK FileCommit

func (*ReposCreateOrUpdateFileContentsApplicationJSONOK) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsReq struct {
	// The commit message.
	Message string "json:\"message\""
	// The new file content, using Base64 encoding.
	Content string "json:\"content\""
	// **Required if you are updating a file**. The blob SHA of the file being replaced.
	Sha OptString "json:\"sha\""
	// The branch name. Default: the repository’s default branch (usually `master`).
	Branch OptString "json:\"branch\""
	// The person that committed the file. Default: the authenticated user.
	Committer OptReposCreateOrUpdateFileContentsReqCommitter "json:\"committer\""
	// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
	Author OptReposCreateOrUpdateFileContentsReqAuthor "json:\"author\""
}

// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
type ReposCreateOrUpdateFileContentsReqAuthor struct {
	// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is
	// omitted.
	Name string "json:\"name\""
	// The email of the author or committer of the commit. You'll receive a `422` status code if `email`
	// is omitted.
	Email string    "json:\"email\""
	Date  OptString "json:\"date\""
}

// The person that committed the file. Default: the authenticated user.
type ReposCreateOrUpdateFileContentsReqCommitter struct {
	// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is
	// omitted.
	Name string "json:\"name\""
	// The email of the author or committer of the commit. You'll receive a `422` status code if `email`
	// is omitted.
	Email string    "json:\"email\""
	Date  OptString "json:\"date\""
}

// The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteReq struct {
	// The source branch and directory used to publish your Pages site.
	Source ReposCreatePagesSiteReqSource "json:\"source\""
}

// The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteReqSource struct {
	// The repository branch used to publish your site's source files.
	Branch string "json:\"branch\""
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/`
	// or `/docs`. Default: `/`.
	Path OptReposCreatePagesSiteReqSourcePath "json:\"path\""
}

// The repository directory that includes the source files for the Pages site. Allowed paths are `/`
// or `/docs`. Default: `/`.
type ReposCreatePagesSiteReqSourcePath string

const (
	ReposCreatePagesSiteReqSourcePathSlash     ReposCreatePagesSiteReqSourcePath = "/"
	ReposCreatePagesSiteReqSourcePathSlashDocs ReposCreatePagesSiteReqSourcePath = "/docs"
)

type ReposCreateReleaseReq struct {
	// The name of the tag.
	TagName string "json:\"tag_name\""
	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch
	// or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
	// (usually `master`).
	TargetCommitish OptString "json:\"target_commitish\""
	// The name of the release.
	Name OptString "json:\"name\""
	// Text describing the contents of the tag.
	Body OptString "json:\"body\""
	// `true` to create a draft (unpublished) release, `false` to create a published one.
	Draft OptBool "json:\"draft\""
	// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
	Prerelease OptBool "json:\"prerelease\""
	// If specified, a discussion of the specified category is created and linked to the release. The
	// value must be a category that already exists in the repository. For more information, see
	// "[Managing categories for discussions in your repository](https://docs.github.
	// com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).".
	DiscussionCategoryName OptString "json:\"discussion_category_name\""
}

type ReposCreateUsingTemplateReq struct {
	// The organization or person who will own the new repository. To create a new repository in an
	// organization, the authenticated user must be a member of the specified organization.
	Owner OptString "json:\"owner\""
	// The name of the new repository.
	Name string "json:\"name\""
	// A short description of the new repository.
	Description OptString "json:\"description\""
	// Set to `true` to include the directory structure and files from all branches in the template
	// repository, and not just the default branch. Default: `false`.
	IncludeAllBranches OptBool "json:\"include_all_branches\""
	// Either `true` to create a new private repository or `false` to create a new public one.
	Private OptBool "json:\"private\""
}

type ReposCreateWebhookApplicationJSONForbidden BasicError

func (*ReposCreateWebhookApplicationJSONForbidden) reposCreateWebhookRes() {}

type ReposCreateWebhookApplicationJSONNotFound BasicError

func (*ReposCreateWebhookApplicationJSONNotFound) reposCreateWebhookRes() {}

type ReposCreateWebhookReq struct {
	// Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
	Name OptString "json:\"name\""
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/repos#create-hook-config-params).
	Config OptReposCreateWebhookReqConfig "json:\"config\""
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string "json:\"events\""
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active          OptBool "json:\"active\""
	AdditionalProps ReposCreateWebhookReqAdditional
}

type ReposCreateWebhookReqAdditional map[string]jx.Raw

func (s *ReposCreateWebhookReqAdditional) init() ReposCreateWebhookReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/repos#create-hook-config-params).
type ReposCreateWebhookReqConfig struct {
	URL         OptWebhookConfigURL         "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	Token       OptString                   "json:\"token\""
	Digest      OptString                   "json:\"digest\""
}

type ReposDeclineInvitationApplicationJSONConflict BasicError

func (*ReposDeclineInvitationApplicationJSONConflict) reposDeclineInvitationRes() {}

type ReposDeclineInvitationApplicationJSONForbidden BasicError

func (*ReposDeclineInvitationApplicationJSONForbidden) reposDeclineInvitationRes() {}

type ReposDeclineInvitationApplicationJSONNotFound BasicError

func (*ReposDeclineInvitationApplicationJSONNotFound) reposDeclineInvitationRes() {}

// ReposDeclineInvitationNoContent is response for ReposDeclineInvitation operation.
type ReposDeclineInvitationNoContent struct{}

func (*ReposDeclineInvitationNoContent) reposDeclineInvitationRes() {}

// ReposDeleteAccessRestrictionsNoContent is response for ReposDeleteAccessRestrictions operation.
type ReposDeleteAccessRestrictionsNoContent struct{}

// ReposDeleteAdminBranchProtectionNoContent is response for ReposDeleteAdminBranchProtection operation.
type ReposDeleteAdminBranchProtectionNoContent struct{}

func (*ReposDeleteAdminBranchProtectionNoContent) reposDeleteAdminBranchProtectionRes() {}

// ReposDeleteAnEnvironmentNoContent is response for ReposDeleteAnEnvironment operation.
type ReposDeleteAnEnvironmentNoContent struct{}

type ReposDeleteApplicationJSONNotFound BasicError

func (*ReposDeleteApplicationJSONNotFound) reposDeleteRes() {}

type ReposDeleteApplicationJSONTemporaryRedirect BasicError

func (*ReposDeleteApplicationJSONTemporaryRedirect) reposDeleteRes() {}

// ReposDeleteAutolinkNoContent is response for ReposDeleteAutolink operation.
type ReposDeleteAutolinkNoContent struct{}

func (*ReposDeleteAutolinkNoContent) reposDeleteAutolinkRes() {}

// ReposDeleteBranchProtectionNoContent is response for ReposDeleteBranchProtection operation.
type ReposDeleteBranchProtectionNoContent struct{}

func (*ReposDeleteBranchProtectionNoContent) reposDeleteBranchProtectionRes() {}

// ReposDeleteCommitCommentNoContent is response for ReposDeleteCommitComment operation.
type ReposDeleteCommitCommentNoContent struct{}

func (*ReposDeleteCommitCommentNoContent) reposDeleteCommitCommentRes() {}

// ReposDeleteCommitSignatureProtectionNoContent is response for ReposDeleteCommitSignatureProtection operation.
type ReposDeleteCommitSignatureProtectionNoContent struct{}

func (*ReposDeleteCommitSignatureProtectionNoContent) reposDeleteCommitSignatureProtectionRes() {}

// ReposDeleteDeployKeyNoContent is response for ReposDeleteDeployKey operation.
type ReposDeleteDeployKeyNoContent struct{}

// ReposDeleteDeploymentNoContent is response for ReposDeleteDeployment operation.
type ReposDeleteDeploymentNoContent struct{}

func (*ReposDeleteDeploymentNoContent) reposDeleteDeploymentRes() {}

type ReposDeleteFileApplicationJSONConflict BasicError

func (*ReposDeleteFileApplicationJSONConflict) reposDeleteFileRes() {}

type ReposDeleteFileApplicationJSONNotFound BasicError

func (*ReposDeleteFileApplicationJSONNotFound) reposDeleteFileRes() {}

type ReposDeleteFileReq struct {
	// The commit message.
	Message string "json:\"message\""
	// The blob SHA of the file being replaced.
	Sha string "json:\"sha\""
	// The branch name. Default: the repository’s default branch (usually `master`).
	Branch OptString "json:\"branch\""
	// Object containing information about the committer.
	Committer OptReposDeleteFileReqCommitter "json:\"committer\""
	// Object containing information about the author.
	Author OptReposDeleteFileReqAuthor "json:\"author\""
}

// Object containing information about the author.
type ReposDeleteFileReqAuthor struct {
	// The name of the author (or committer) of the commit.
	Name OptString "json:\"name\""
	// The email of the author (or committer) of the commit.
	Email OptString "json:\"email\""
}

// Object containing information about the committer.
type ReposDeleteFileReqCommitter struct {
	// The name of the author (or committer) of the commit.
	Name OptString "json:\"name\""
	// The email of the author (or committer) of the commit.
	Email OptString "json:\"email\""
}

type ReposDeleteForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*ReposDeleteForbidden) reposDeleteRes() {}

// ReposDeleteInvitationNoContent is response for ReposDeleteInvitation operation.
type ReposDeleteInvitationNoContent struct{}

// ReposDeleteNoContent is response for ReposDelete operation.
type ReposDeleteNoContent struct{}

func (*ReposDeleteNoContent) reposDeleteRes() {}

// ReposDeletePagesSiteNoContent is response for ReposDeletePagesSite operation.
type ReposDeletePagesSiteNoContent struct{}

func (*ReposDeletePagesSiteNoContent) reposDeletePagesSiteRes() {}

// ReposDeletePullRequestReviewProtectionNoContent is response for ReposDeletePullRequestReviewProtection operation.
type ReposDeletePullRequestReviewProtectionNoContent struct{}

func (*ReposDeletePullRequestReviewProtectionNoContent) reposDeletePullRequestReviewProtectionRes() {}

// ReposDeleteReleaseAssetNoContent is response for ReposDeleteReleaseAsset operation.
type ReposDeleteReleaseAssetNoContent struct{}

// ReposDeleteReleaseNoContent is response for ReposDeleteRelease operation.
type ReposDeleteReleaseNoContent struct{}

// ReposDeleteWebhookNoContent is response for ReposDeleteWebhook operation.
type ReposDeleteWebhookNoContent struct{}

func (*ReposDeleteWebhookNoContent) reposDeleteWebhookRes() {}

// ReposDisableAutomatedSecurityFixesNoContent is response for ReposDisableAutomatedSecurityFixes operation.
type ReposDisableAutomatedSecurityFixesNoContent struct{}

// ReposDisableLfsForRepoNoContent is response for ReposDisableLfsForRepo operation.
type ReposDisableLfsForRepoNoContent struct{}

// ReposDisableVulnerabilityAlertsNoContent is response for ReposDisableVulnerabilityAlerts operation.
type ReposDisableVulnerabilityAlertsNoContent struct{}

// ReposDownloadTarballArchiveFound is response for ReposDownloadTarballArchive operation.
type ReposDownloadTarballArchiveFound struct{}

// ReposDownloadZipballArchiveFound is response for ReposDownloadZipballArchive operation.
type ReposDownloadZipballArchiveFound struct{}

// ReposEnableAutomatedSecurityFixesNoContent is response for ReposEnableAutomatedSecurityFixes operation.
type ReposEnableAutomatedSecurityFixesNoContent struct{}

// ReposEnableLfsForRepoForbidden is response for ReposEnableLfsForRepo operation.
type ReposEnableLfsForRepoForbidden struct{}

func (*ReposEnableLfsForRepoForbidden) reposEnableLfsForRepoRes() {}

// ReposEnableVulnerabilityAlertsNoContent is response for ReposEnableVulnerabilityAlerts operation.
type ReposEnableVulnerabilityAlertsNoContent struct{}

type ReposGetAllStatusCheckContextsOKApplicationJSON []string

func (ReposGetAllStatusCheckContextsOKApplicationJSON) reposGetAllStatusCheckContextsRes() {}

type ReposGetApplicationJSONForbidden BasicError

func (*ReposGetApplicationJSONForbidden) reposGetRes() {}

type ReposGetApplicationJSONMovedPermanently BasicError

func (*ReposGetApplicationJSONMovedPermanently) reposGetRes() {}

type ReposGetApplicationJSONNotFound BasicError

func (*ReposGetApplicationJSONNotFound) reposGetRes() {}

type ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON []Integration

func (ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) reposGetAppsWithAccessToProtectedBranchRes() {
}

type ReposGetBranchApplicationJSONMovedPermanently BasicError

func (*ReposGetBranchApplicationJSONMovedPermanently) reposGetBranchRes() {}

type ReposGetBranchApplicationJSONNotFound BasicError

func (*ReposGetBranchApplicationJSONNotFound) reposGetBranchRes() {}

type ReposGetClonesPer string

const (
	ReposGetClonesPerEmpty ReposGetClonesPer = ""
	ReposGetClonesPerDay   ReposGetClonesPer = "day"
	ReposGetClonesPerWeek  ReposGetClonesPer = "week"
)

type ReposGetCodeFrequencyStatsOKApplicationJSON []CodeFrequencyStat

func (ReposGetCodeFrequencyStatsOKApplicationJSON) reposGetCodeFrequencyStatsRes() {}

type ReposGetCommitActivityStatsOKApplicationJSON []CommitActivity

func (ReposGetCommitActivityStatsOKApplicationJSON) reposGetCommitActivityStatsRes() {}

type ReposGetCommitApplicationJSONInternalServerError BasicError

func (*ReposGetCommitApplicationJSONInternalServerError) reposGetCommitRes() {}

type ReposGetCommitApplicationJSONNotFound BasicError

func (*ReposGetCommitApplicationJSONNotFound) reposGetCommitRes() {}

type ReposGetContributorsStatsOKApplicationJSON []ContributorActivity

func (ReposGetContributorsStatsOKApplicationJSON) reposGetContributorsStatsRes() {}

// ReposGetPagesHealthCheckBadRequest is response for ReposGetPagesHealthCheck operation.
type ReposGetPagesHealthCheckBadRequest struct{}

func (*ReposGetPagesHealthCheckBadRequest) reposGetPagesHealthCheckRes() {}

// ReposGetPagesHealthCheckUnprocessableEntity is response for ReposGetPagesHealthCheck operation.
type ReposGetPagesHealthCheckUnprocessableEntity struct{}

func (*ReposGetPagesHealthCheckUnprocessableEntity) reposGetPagesHealthCheckRes() {}

type ReposGetPunchCardStatsOKApplicationJSON []CodeFrequencyStat

func (ReposGetPunchCardStatsOKApplicationJSON) reposGetPunchCardStatsRes() {}

type ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON []Team

func (ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) reposGetTeamsWithAccessToProtectedBranchRes() {
}

type ReposGetTopPathsOKApplicationJSON []ContentTraffic

func (ReposGetTopPathsOKApplicationJSON) reposGetTopPathsRes() {}

type ReposGetTopReferrersOKApplicationJSON []ReferrerTraffic

func (ReposGetTopReferrersOKApplicationJSON) reposGetTopReferrersRes() {}

type ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON []SimpleUser

func (ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) reposGetUsersWithAccessToProtectedBranchRes() {
}

type ReposGetViewsPer string

const (
	ReposGetViewsPerEmpty ReposGetViewsPer = ""
	ReposGetViewsPerDay   ReposGetViewsPer = "day"
	ReposGetViewsPerWeek  ReposGetViewsPer = "week"
)

type ReposListBranchesForHeadCommitOKApplicationJSON []BranchShort

func (ReposListBranchesForHeadCommitOKApplicationJSON) reposListBranchesForHeadCommitRes() {}

type ReposListBranchesOKApplicationJSON []ShortBranch

func (ReposListBranchesOKApplicationJSON) reposListBranchesRes() {}

type ReposListCollaboratorsAffiliation string

const (
	ReposListCollaboratorsAffiliationOutside ReposListCollaboratorsAffiliation = "outside"
	ReposListCollaboratorsAffiliationDirect  ReposListCollaboratorsAffiliation = "direct"
	ReposListCollaboratorsAffiliationAll     ReposListCollaboratorsAffiliation = "all"
)

type ReposListCollaboratorsOKApplicationJSON []Collaborator

func (ReposListCollaboratorsOKApplicationJSON) reposListCollaboratorsRes() {}

type ReposListCommitStatusesForRefOKApplicationJSON []Status

func (ReposListCommitStatusesForRefOKApplicationJSON) reposListCommitStatusesForRefRes() {}

type ReposListCommitsApplicationJSONBadRequest BasicError

func (*ReposListCommitsApplicationJSONBadRequest) reposListCommitsRes() {}

type ReposListCommitsApplicationJSONConflict BasicError

func (*ReposListCommitsApplicationJSONConflict) reposListCommitsRes() {}

type ReposListCommitsApplicationJSONInternalServerError BasicError

func (*ReposListCommitsApplicationJSONInternalServerError) reposListCommitsRes() {}

type ReposListCommitsApplicationJSONNotFound BasicError

func (*ReposListCommitsApplicationJSONNotFound) reposListCommitsRes() {}

type ReposListCommitsOKApplicationJSON []Commit

func (ReposListCommitsOKApplicationJSON) reposListCommitsRes() {}

type ReposListContributorsApplicationJSONForbidden BasicError

func (*ReposListContributorsApplicationJSONForbidden) reposListContributorsRes() {}

type ReposListContributorsApplicationJSONNotFound BasicError

func (*ReposListContributorsApplicationJSONNotFound) reposListContributorsRes() {}

// ReposListContributorsNoContent is response for ReposListContributors operation.
type ReposListContributorsNoContent struct{}

func (*ReposListContributorsNoContent) reposListContributorsRes() {}

type ReposListContributorsOKApplicationJSON []Contributor

func (ReposListContributorsOKApplicationJSON) reposListContributorsRes() {}

type ReposListDeploymentStatusesOKApplicationJSON []DeploymentStatus

func (ReposListDeploymentStatusesOKApplicationJSON) reposListDeploymentStatusesRes() {}

type ReposListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ReposListForAuthenticatedUserApplicationJSONForbidden) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ReposListForAuthenticatedUserApplicationJSONUnauthorized) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserDirection string

const (
	ReposListForAuthenticatedUserDirectionAsc  ReposListForAuthenticatedUserDirection = "asc"
	ReposListForAuthenticatedUserDirectionDesc ReposListForAuthenticatedUserDirection = "desc"
)

type ReposListForAuthenticatedUserOKApplicationJSON []Repository

func (ReposListForAuthenticatedUserOKApplicationJSON) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserSort string

const (
	ReposListForAuthenticatedUserSortCreated  ReposListForAuthenticatedUserSort = "created"
	ReposListForAuthenticatedUserSortUpdated  ReposListForAuthenticatedUserSort = "updated"
	ReposListForAuthenticatedUserSortPushed   ReposListForAuthenticatedUserSort = "pushed"
	ReposListForAuthenticatedUserSortFullName ReposListForAuthenticatedUserSort = "full_name"
)

type ReposListForAuthenticatedUserType string

const (
	ReposListForAuthenticatedUserTypeAll     ReposListForAuthenticatedUserType = "all"
	ReposListForAuthenticatedUserTypeOwner   ReposListForAuthenticatedUserType = "owner"
	ReposListForAuthenticatedUserTypePublic  ReposListForAuthenticatedUserType = "public"
	ReposListForAuthenticatedUserTypePrivate ReposListForAuthenticatedUserType = "private"
	ReposListForAuthenticatedUserTypeMember  ReposListForAuthenticatedUserType = "member"
)

type ReposListForAuthenticatedUserVisibility string

const (
	ReposListForAuthenticatedUserVisibilityAll     ReposListForAuthenticatedUserVisibility = "all"
	ReposListForAuthenticatedUserVisibilityPublic  ReposListForAuthenticatedUserVisibility = "public"
	ReposListForAuthenticatedUserVisibilityPrivate ReposListForAuthenticatedUserVisibility = "private"
)

type ReposListForOrgDirection string

const (
	ReposListForOrgDirectionAsc  ReposListForOrgDirection = "asc"
	ReposListForOrgDirectionDesc ReposListForOrgDirection = "desc"
)

type ReposListForOrgSort string

const (
	ReposListForOrgSortCreated  ReposListForOrgSort = "created"
	ReposListForOrgSortUpdated  ReposListForOrgSort = "updated"
	ReposListForOrgSortPushed   ReposListForOrgSort = "pushed"
	ReposListForOrgSortFullName ReposListForOrgSort = "full_name"
)

type ReposListForOrgType string

const (
	ReposListForOrgTypeAll      ReposListForOrgType = "all"
	ReposListForOrgTypePublic   ReposListForOrgType = "public"
	ReposListForOrgTypePrivate  ReposListForOrgType = "private"
	ReposListForOrgTypeForks    ReposListForOrgType = "forks"
	ReposListForOrgTypeSources  ReposListForOrgType = "sources"
	ReposListForOrgTypeMember   ReposListForOrgType = "member"
	ReposListForOrgTypeInternal ReposListForOrgType = "internal"
)

type ReposListForUserDirection string

const (
	ReposListForUserDirectionAsc  ReposListForUserDirection = "asc"
	ReposListForUserDirectionDesc ReposListForUserDirection = "desc"
)

type ReposListForUserSort string

const (
	ReposListForUserSortCreated  ReposListForUserSort = "created"
	ReposListForUserSortUpdated  ReposListForUserSort = "updated"
	ReposListForUserSortPushed   ReposListForUserSort = "pushed"
	ReposListForUserSortFullName ReposListForUserSort = "full_name"
)

type ReposListForUserType string

const (
	ReposListForUserTypeAll    ReposListForUserType = "all"
	ReposListForUserTypeOwner  ReposListForUserType = "owner"
	ReposListForUserTypeMember ReposListForUserType = "member"
)

type ReposListForksOKApplicationJSON []MinimalRepository

func (ReposListForksOKApplicationJSON) reposListForksRes() {}

type ReposListForksSort string

const (
	ReposListForksSortNewest     ReposListForksSort = "newest"
	ReposListForksSortOldest     ReposListForksSort = "oldest"
	ReposListForksSortStargazers ReposListForksSort = "stargazers"
	ReposListForksSortWatchers   ReposListForksSort = "watchers"
)

type ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListInvitationsForAuthenticatedUserOKApplicationJSON []RepositoryInvitation

func (ReposListInvitationsForAuthenticatedUserOKApplicationJSON) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListPublicOKApplicationJSON []MinimalRepository

func (ReposListPublicOKApplicationJSON) reposListPublicRes() {}

type ReposListReleasesOKApplicationJSON []Release

func (ReposListReleasesOKApplicationJSON) reposListReleasesRes() {}

type ReposListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (ReposListWebhookDeliveriesOKApplicationJSON) reposListWebhookDeliveriesRes() {}

type ReposListWebhooksOKApplicationJSON []Hook

func (ReposListWebhooksOKApplicationJSON) reposListWebhooksRes() {}

// ReposMergeConflict is response for ReposMerge operation.
type ReposMergeConflict struct{}

func (*ReposMergeConflict) reposMergeRes() {}

// ReposMergeNoContent is response for ReposMerge operation.
type ReposMergeNoContent struct{}

func (*ReposMergeNoContent) reposMergeRes() {}

// ReposMergeNotFound is response for ReposMerge operation.
type ReposMergeNotFound struct{}

func (*ReposMergeNotFound) reposMergeRes() {}

type ReposMergeReq struct {
	// The name of the base branch that the head will be merged into.
	Base string "json:\"base\""
	// The head to merge. This can be a branch name or a commit SHA1.
	Head string "json:\"head\""
	// Commit message to use for the merge commit. If omitted, a default message will be used.
	CommitMessage OptString "json:\"commit_message\""
}

// ReposMergeUpstreamConflict is response for ReposMergeUpstream operation.
type ReposMergeUpstreamConflict struct{}

func (*ReposMergeUpstreamConflict) reposMergeUpstreamRes() {}

type ReposMergeUpstreamReq struct {
	// The name of the branch which should be updated to match upstream.
	Branch string "json:\"branch\""
}

// ReposMergeUpstreamUnprocessableEntity is response for ReposMergeUpstream operation.
type ReposMergeUpstreamUnprocessableEntity struct{}

func (*ReposMergeUpstreamUnprocessableEntity) reposMergeUpstreamRes() {}

// ReposPingWebhookNoContent is response for ReposPingWebhook operation.
type ReposPingWebhookNoContent struct{}

func (*ReposPingWebhookNoContent) reposPingWebhookRes() {}

type ReposRemoveAppAccessRestrictionsOKApplicationJSON []Integration

func (ReposRemoveAppAccessRestrictionsOKApplicationJSON) reposRemoveAppAccessRestrictionsRes() {}

// ReposRemoveAppAccessRestrictionsReq represents sum type.
type ReposRemoveAppAccessRestrictionsReq struct {
	Type                                 ReposRemoveAppAccessRestrictionsReqType // switch on this field
	ReposRemoveAppAccessRestrictionsReq0 ReposRemoveAppAccessRestrictionsReq0
	StringArray                          []string
}

// ReposRemoveAppAccessRestrictionsReqType is oneOf type of ReposRemoveAppAccessRestrictionsReq.
type ReposRemoveAppAccessRestrictionsReqType string

// Possible values for ReposRemoveAppAccessRestrictionsReqType.
const (
	ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq ReposRemoveAppAccessRestrictionsReqType = "ReposRemoveAppAccessRestrictionsReq0"
	StringArrayReposRemoveAppAccessRestrictionsReq                          ReposRemoveAppAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveAppAccessRestrictionsReq0 reports whether ReposRemoveAppAccessRestrictionsReq is ReposRemoveAppAccessRestrictionsReq0.
func (s ReposRemoveAppAccessRestrictionsReq) IsReposRemoveAppAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveAppAccessRestrictionsReq is []string.
func (s ReposRemoveAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveAppAccessRestrictionsReq
}

// SetReposRemoveAppAccessRestrictionsReq0 sets ReposRemoveAppAccessRestrictionsReq to ReposRemoveAppAccessRestrictionsReq0.
func (s *ReposRemoveAppAccessRestrictionsReq) SetReposRemoveAppAccessRestrictionsReq0(v ReposRemoveAppAccessRestrictionsReq0) {
	s.Type = ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq
	s.ReposRemoveAppAccessRestrictionsReq0 = v
}

// GetReposRemoveAppAccessRestrictionsReq0 returns ReposRemoveAppAccessRestrictionsReq0 and true boolean if ReposRemoveAppAccessRestrictionsReq is ReposRemoveAppAccessRestrictionsReq0.
func (s ReposRemoveAppAccessRestrictionsReq) GetReposRemoveAppAccessRestrictionsReq0() (v ReposRemoveAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveAppAccessRestrictionsReq0, true
}

// NewReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq returns new ReposRemoveAppAccessRestrictionsReq from ReposRemoveAppAccessRestrictionsReq0.
func NewReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq(v ReposRemoveAppAccessRestrictionsReq0) ReposRemoveAppAccessRestrictionsReq {
	var s ReposRemoveAppAccessRestrictionsReq
	s.SetReposRemoveAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveAppAccessRestrictionsReq to []string.
func (s *ReposRemoveAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveAppAccessRestrictionsReq is []string.
func (s ReposRemoveAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveAppAccessRestrictionsReq returns new ReposRemoveAppAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveAppAccessRestrictionsReq(v []string) ReposRemoveAppAccessRestrictionsReq {
	var s ReposRemoveAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string "json:\"apps\""
}

// ReposRemoveCollaboratorNoContent is response for ReposRemoveCollaborator operation.
type ReposRemoveCollaboratorNoContent struct{}

type ReposRemoveStatusCheckContextsOKApplicationJSON []string

func (ReposRemoveStatusCheckContextsOKApplicationJSON) reposRemoveStatusCheckContextsRes() {}

// ReposRemoveStatusCheckContextsReq represents sum type.
type ReposRemoveStatusCheckContextsReq struct {
	Type                               ReposRemoveStatusCheckContextsReqType // switch on this field
	ReposRemoveStatusCheckContextsReq0 ReposRemoveStatusCheckContextsReq0
	StringArray                        []string
}

// ReposRemoveStatusCheckContextsReqType is oneOf type of ReposRemoveStatusCheckContextsReq.
type ReposRemoveStatusCheckContextsReqType string

// Possible values for ReposRemoveStatusCheckContextsReqType.
const (
	ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq ReposRemoveStatusCheckContextsReqType = "ReposRemoveStatusCheckContextsReq0"
	StringArrayReposRemoveStatusCheckContextsReq                        ReposRemoveStatusCheckContextsReqType = "[]string"
)

// IsReposRemoveStatusCheckContextsReq0 reports whether ReposRemoveStatusCheckContextsReq is ReposRemoveStatusCheckContextsReq0.
func (s ReposRemoveStatusCheckContextsReq) IsReposRemoveStatusCheckContextsReq0() bool {
	return s.Type == ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq
}

// IsStringArray reports whether ReposRemoveStatusCheckContextsReq is []string.
func (s ReposRemoveStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveStatusCheckContextsReq
}

// SetReposRemoveStatusCheckContextsReq0 sets ReposRemoveStatusCheckContextsReq to ReposRemoveStatusCheckContextsReq0.
func (s *ReposRemoveStatusCheckContextsReq) SetReposRemoveStatusCheckContextsReq0(v ReposRemoveStatusCheckContextsReq0) {
	s.Type = ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq
	s.ReposRemoveStatusCheckContextsReq0 = v
}

// GetReposRemoveStatusCheckContextsReq0 returns ReposRemoveStatusCheckContextsReq0 and true boolean if ReposRemoveStatusCheckContextsReq is ReposRemoveStatusCheckContextsReq0.
func (s ReposRemoveStatusCheckContextsReq) GetReposRemoveStatusCheckContextsReq0() (v ReposRemoveStatusCheckContextsReq0, ok bool) {
	if !s.IsReposRemoveStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposRemoveStatusCheckContextsReq0, true
}

// NewReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq returns new ReposRemoveStatusCheckContextsReq from ReposRemoveStatusCheckContextsReq0.
func NewReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq(v ReposRemoveStatusCheckContextsReq0) ReposRemoveStatusCheckContextsReq {
	var s ReposRemoveStatusCheckContextsReq
	s.SetReposRemoveStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveStatusCheckContextsReq to []string.
func (s *ReposRemoveStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveStatusCheckContextsReq is []string.
func (s ReposRemoveStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveStatusCheckContextsReq returns new ReposRemoveStatusCheckContextsReq from []string.
func NewStringArrayReposRemoveStatusCheckContextsReq(v []string) ReposRemoveStatusCheckContextsReq {
	var s ReposRemoveStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string "json:\"contexts\""
}

// ReposRemoveStatusCheckProtectionNoContent is response for ReposRemoveStatusCheckProtection operation.
type ReposRemoveStatusCheckProtectionNoContent struct{}

type ReposRemoveTeamAccessRestrictionsOKApplicationJSON []Team

func (ReposRemoveTeamAccessRestrictionsOKApplicationJSON) reposRemoveTeamAccessRestrictionsRes() {}

// ReposRemoveTeamAccessRestrictionsReq represents sum type.
type ReposRemoveTeamAccessRestrictionsReq struct {
	Type                                  ReposRemoveTeamAccessRestrictionsReqType // switch on this field
	ReposRemoveTeamAccessRestrictionsReq0 ReposRemoveTeamAccessRestrictionsReq0
	StringArray                           []string
}

// ReposRemoveTeamAccessRestrictionsReqType is oneOf type of ReposRemoveTeamAccessRestrictionsReq.
type ReposRemoveTeamAccessRestrictionsReqType string

// Possible values for ReposRemoveTeamAccessRestrictionsReqType.
const (
	ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq ReposRemoveTeamAccessRestrictionsReqType = "ReposRemoveTeamAccessRestrictionsReq0"
	StringArrayReposRemoveTeamAccessRestrictionsReq                           ReposRemoveTeamAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveTeamAccessRestrictionsReq0 reports whether ReposRemoveTeamAccessRestrictionsReq is ReposRemoveTeamAccessRestrictionsReq0.
func (s ReposRemoveTeamAccessRestrictionsReq) IsReposRemoveTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveTeamAccessRestrictionsReq is []string.
func (s ReposRemoveTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveTeamAccessRestrictionsReq
}

// SetReposRemoveTeamAccessRestrictionsReq0 sets ReposRemoveTeamAccessRestrictionsReq to ReposRemoveTeamAccessRestrictionsReq0.
func (s *ReposRemoveTeamAccessRestrictionsReq) SetReposRemoveTeamAccessRestrictionsReq0(v ReposRemoveTeamAccessRestrictionsReq0) {
	s.Type = ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq
	s.ReposRemoveTeamAccessRestrictionsReq0 = v
}

// GetReposRemoveTeamAccessRestrictionsReq0 returns ReposRemoveTeamAccessRestrictionsReq0 and true boolean if ReposRemoveTeamAccessRestrictionsReq is ReposRemoveTeamAccessRestrictionsReq0.
func (s ReposRemoveTeamAccessRestrictionsReq) GetReposRemoveTeamAccessRestrictionsReq0() (v ReposRemoveTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveTeamAccessRestrictionsReq0, true
}

// NewReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq returns new ReposRemoveTeamAccessRestrictionsReq from ReposRemoveTeamAccessRestrictionsReq0.
func NewReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq(v ReposRemoveTeamAccessRestrictionsReq0) ReposRemoveTeamAccessRestrictionsReq {
	var s ReposRemoveTeamAccessRestrictionsReq
	s.SetReposRemoveTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveTeamAccessRestrictionsReq to []string.
func (s *ReposRemoveTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveTeamAccessRestrictionsReq is []string.
func (s ReposRemoveTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveTeamAccessRestrictionsReq returns new ReposRemoveTeamAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveTeamAccessRestrictionsReq(v []string) ReposRemoveTeamAccessRestrictionsReq {
	var s ReposRemoveTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string "json:\"teams\""
}

type ReposRemoveUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (ReposRemoveUserAccessRestrictionsOKApplicationJSON) reposRemoveUserAccessRestrictionsRes() {}

// ReposRemoveUserAccessRestrictionsReq represents sum type.
type ReposRemoveUserAccessRestrictionsReq struct {
	Type                                  ReposRemoveUserAccessRestrictionsReqType // switch on this field
	ReposRemoveUserAccessRestrictionsReq0 ReposRemoveUserAccessRestrictionsReq0
	StringArray                           []string
}

// ReposRemoveUserAccessRestrictionsReqType is oneOf type of ReposRemoveUserAccessRestrictionsReq.
type ReposRemoveUserAccessRestrictionsReqType string

// Possible values for ReposRemoveUserAccessRestrictionsReqType.
const (
	ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq ReposRemoveUserAccessRestrictionsReqType = "ReposRemoveUserAccessRestrictionsReq0"
	StringArrayReposRemoveUserAccessRestrictionsReq                           ReposRemoveUserAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveUserAccessRestrictionsReq0 reports whether ReposRemoveUserAccessRestrictionsReq is ReposRemoveUserAccessRestrictionsReq0.
func (s ReposRemoveUserAccessRestrictionsReq) IsReposRemoveUserAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveUserAccessRestrictionsReq is []string.
func (s ReposRemoveUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveUserAccessRestrictionsReq
}

// SetReposRemoveUserAccessRestrictionsReq0 sets ReposRemoveUserAccessRestrictionsReq to ReposRemoveUserAccessRestrictionsReq0.
func (s *ReposRemoveUserAccessRestrictionsReq) SetReposRemoveUserAccessRestrictionsReq0(v ReposRemoveUserAccessRestrictionsReq0) {
	s.Type = ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq
	s.ReposRemoveUserAccessRestrictionsReq0 = v
}

// GetReposRemoveUserAccessRestrictionsReq0 returns ReposRemoveUserAccessRestrictionsReq0 and true boolean if ReposRemoveUserAccessRestrictionsReq is ReposRemoveUserAccessRestrictionsReq0.
func (s ReposRemoveUserAccessRestrictionsReq) GetReposRemoveUserAccessRestrictionsReq0() (v ReposRemoveUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveUserAccessRestrictionsReq0, true
}

// NewReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq returns new ReposRemoveUserAccessRestrictionsReq from ReposRemoveUserAccessRestrictionsReq0.
func NewReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq(v ReposRemoveUserAccessRestrictionsReq0) ReposRemoveUserAccessRestrictionsReq {
	var s ReposRemoveUserAccessRestrictionsReq
	s.SetReposRemoveUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveUserAccessRestrictionsReq to []string.
func (s *ReposRemoveUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveUserAccessRestrictionsReq is []string.
func (s ReposRemoveUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveUserAccessRestrictionsReq returns new ReposRemoveUserAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveUserAccessRestrictionsReq(v []string) ReposRemoveUserAccessRestrictionsReq {
	var s ReposRemoveUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string "json:\"users\""
}

type ReposRenameBranchApplicationJSONForbidden BasicError

func (*ReposRenameBranchApplicationJSONForbidden) reposRenameBranchRes() {}

type ReposRenameBranchApplicationJSONNotFound BasicError

func (*ReposRenameBranchApplicationJSONNotFound) reposRenameBranchRes() {}

type ReposRenameBranchReq struct {
	// The new name of the branch.
	NewName string "json:\"new_name\""
}

type ReposReplaceAllTopicsReq struct {
	// An array of topics to add to the repository. Pass one or more topics to _replace_ the set of
	// existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:**
	// Topic `names` cannot contain uppercase letters.
	Names []string "json:\"names\""
}

type ReposSetAppAccessRestrictionsOKApplicationJSON []Integration

func (ReposSetAppAccessRestrictionsOKApplicationJSON) reposSetAppAccessRestrictionsRes() {}

// ReposSetAppAccessRestrictionsReq represents sum type.
type ReposSetAppAccessRestrictionsReq struct {
	Type                              ReposSetAppAccessRestrictionsReqType // switch on this field
	ReposSetAppAccessRestrictionsReq0 ReposSetAppAccessRestrictionsReq0
	StringArray                       []string
}

// ReposSetAppAccessRestrictionsReqType is oneOf type of ReposSetAppAccessRestrictionsReq.
type ReposSetAppAccessRestrictionsReqType string

// Possible values for ReposSetAppAccessRestrictionsReqType.
const (
	ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq ReposSetAppAccessRestrictionsReqType = "ReposSetAppAccessRestrictionsReq0"
	StringArrayReposSetAppAccessRestrictionsReq                       ReposSetAppAccessRestrictionsReqType = "[]string"
)

// IsReposSetAppAccessRestrictionsReq0 reports whether ReposSetAppAccessRestrictionsReq is ReposSetAppAccessRestrictionsReq0.
func (s ReposSetAppAccessRestrictionsReq) IsReposSetAppAccessRestrictionsReq0() bool {
	return s.Type == ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetAppAccessRestrictionsReq is []string.
func (s ReposSetAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetAppAccessRestrictionsReq
}

// SetReposSetAppAccessRestrictionsReq0 sets ReposSetAppAccessRestrictionsReq to ReposSetAppAccessRestrictionsReq0.
func (s *ReposSetAppAccessRestrictionsReq) SetReposSetAppAccessRestrictionsReq0(v ReposSetAppAccessRestrictionsReq0) {
	s.Type = ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq
	s.ReposSetAppAccessRestrictionsReq0 = v
}

// GetReposSetAppAccessRestrictionsReq0 returns ReposSetAppAccessRestrictionsReq0 and true boolean if ReposSetAppAccessRestrictionsReq is ReposSetAppAccessRestrictionsReq0.
func (s ReposSetAppAccessRestrictionsReq) GetReposSetAppAccessRestrictionsReq0() (v ReposSetAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetAppAccessRestrictionsReq0, true
}

// NewReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq returns new ReposSetAppAccessRestrictionsReq from ReposSetAppAccessRestrictionsReq0.
func NewReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq(v ReposSetAppAccessRestrictionsReq0) ReposSetAppAccessRestrictionsReq {
	var s ReposSetAppAccessRestrictionsReq
	s.SetReposSetAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetAppAccessRestrictionsReq to []string.
func (s *ReposSetAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetAppAccessRestrictionsReq is []string.
func (s ReposSetAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetAppAccessRestrictionsReq returns new ReposSetAppAccessRestrictionsReq from []string.
func NewStringArrayReposSetAppAccessRestrictionsReq(v []string) ReposSetAppAccessRestrictionsReq {
	var s ReposSetAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string "json:\"apps\""
}

type ReposSetStatusCheckContextsOKApplicationJSON []string

func (ReposSetStatusCheckContextsOKApplicationJSON) reposSetStatusCheckContextsRes() {}

// ReposSetStatusCheckContextsReq represents sum type.
type ReposSetStatusCheckContextsReq struct {
	Type                            ReposSetStatusCheckContextsReqType // switch on this field
	ReposSetStatusCheckContextsReq0 ReposSetStatusCheckContextsReq0
	StringArray                     []string
}

// ReposSetStatusCheckContextsReqType is oneOf type of ReposSetStatusCheckContextsReq.
type ReposSetStatusCheckContextsReqType string

// Possible values for ReposSetStatusCheckContextsReqType.
const (
	ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq ReposSetStatusCheckContextsReqType = "ReposSetStatusCheckContextsReq0"
	StringArrayReposSetStatusCheckContextsReq                     ReposSetStatusCheckContextsReqType = "[]string"
)

// IsReposSetStatusCheckContextsReq0 reports whether ReposSetStatusCheckContextsReq is ReposSetStatusCheckContextsReq0.
func (s ReposSetStatusCheckContextsReq) IsReposSetStatusCheckContextsReq0() bool {
	return s.Type == ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq
}

// IsStringArray reports whether ReposSetStatusCheckContextsReq is []string.
func (s ReposSetStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetStatusCheckContextsReq
}

// SetReposSetStatusCheckContextsReq0 sets ReposSetStatusCheckContextsReq to ReposSetStatusCheckContextsReq0.
func (s *ReposSetStatusCheckContextsReq) SetReposSetStatusCheckContextsReq0(v ReposSetStatusCheckContextsReq0) {
	s.Type = ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq
	s.ReposSetStatusCheckContextsReq0 = v
}

// GetReposSetStatusCheckContextsReq0 returns ReposSetStatusCheckContextsReq0 and true boolean if ReposSetStatusCheckContextsReq is ReposSetStatusCheckContextsReq0.
func (s ReposSetStatusCheckContextsReq) GetReposSetStatusCheckContextsReq0() (v ReposSetStatusCheckContextsReq0, ok bool) {
	if !s.IsReposSetStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposSetStatusCheckContextsReq0, true
}

// NewReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq returns new ReposSetStatusCheckContextsReq from ReposSetStatusCheckContextsReq0.
func NewReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq(v ReposSetStatusCheckContextsReq0) ReposSetStatusCheckContextsReq {
	var s ReposSetStatusCheckContextsReq
	s.SetReposSetStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposSetStatusCheckContextsReq to []string.
func (s *ReposSetStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetStatusCheckContextsReq is []string.
func (s ReposSetStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetStatusCheckContextsReq returns new ReposSetStatusCheckContextsReq from []string.
func NewStringArrayReposSetStatusCheckContextsReq(v []string) ReposSetStatusCheckContextsReq {
	var s ReposSetStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposSetStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string "json:\"contexts\""
}

type ReposSetTeamAccessRestrictionsOKApplicationJSON []Team

func (ReposSetTeamAccessRestrictionsOKApplicationJSON) reposSetTeamAccessRestrictionsRes() {}

// ReposSetTeamAccessRestrictionsReq represents sum type.
type ReposSetTeamAccessRestrictionsReq struct {
	Type                               ReposSetTeamAccessRestrictionsReqType // switch on this field
	ReposSetTeamAccessRestrictionsReq0 ReposSetTeamAccessRestrictionsReq0
	StringArray                        []string
}

// ReposSetTeamAccessRestrictionsReqType is oneOf type of ReposSetTeamAccessRestrictionsReq.
type ReposSetTeamAccessRestrictionsReqType string

// Possible values for ReposSetTeamAccessRestrictionsReqType.
const (
	ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq ReposSetTeamAccessRestrictionsReqType = "ReposSetTeamAccessRestrictionsReq0"
	StringArrayReposSetTeamAccessRestrictionsReq                        ReposSetTeamAccessRestrictionsReqType = "[]string"
)

// IsReposSetTeamAccessRestrictionsReq0 reports whether ReposSetTeamAccessRestrictionsReq is ReposSetTeamAccessRestrictionsReq0.
func (s ReposSetTeamAccessRestrictionsReq) IsReposSetTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetTeamAccessRestrictionsReq is []string.
func (s ReposSetTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetTeamAccessRestrictionsReq
}

// SetReposSetTeamAccessRestrictionsReq0 sets ReposSetTeamAccessRestrictionsReq to ReposSetTeamAccessRestrictionsReq0.
func (s *ReposSetTeamAccessRestrictionsReq) SetReposSetTeamAccessRestrictionsReq0(v ReposSetTeamAccessRestrictionsReq0) {
	s.Type = ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq
	s.ReposSetTeamAccessRestrictionsReq0 = v
}

// GetReposSetTeamAccessRestrictionsReq0 returns ReposSetTeamAccessRestrictionsReq0 and true boolean if ReposSetTeamAccessRestrictionsReq is ReposSetTeamAccessRestrictionsReq0.
func (s ReposSetTeamAccessRestrictionsReq) GetReposSetTeamAccessRestrictionsReq0() (v ReposSetTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetTeamAccessRestrictionsReq0, true
}

// NewReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq returns new ReposSetTeamAccessRestrictionsReq from ReposSetTeamAccessRestrictionsReq0.
func NewReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq(v ReposSetTeamAccessRestrictionsReq0) ReposSetTeamAccessRestrictionsReq {
	var s ReposSetTeamAccessRestrictionsReq
	s.SetReposSetTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetTeamAccessRestrictionsReq to []string.
func (s *ReposSetTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetTeamAccessRestrictionsReq is []string.
func (s ReposSetTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetTeamAccessRestrictionsReq returns new ReposSetTeamAccessRestrictionsReq from []string.
func NewStringArrayReposSetTeamAccessRestrictionsReq(v []string) ReposSetTeamAccessRestrictionsReq {
	var s ReposSetTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string "json:\"teams\""
}

type ReposSetUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (ReposSetUserAccessRestrictionsOKApplicationJSON) reposSetUserAccessRestrictionsRes() {}

// ReposSetUserAccessRestrictionsReq represents sum type.
type ReposSetUserAccessRestrictionsReq struct {
	Type                               ReposSetUserAccessRestrictionsReqType // switch on this field
	ReposSetUserAccessRestrictionsReq0 ReposSetUserAccessRestrictionsReq0
	StringArray                        []string
}

// ReposSetUserAccessRestrictionsReqType is oneOf type of ReposSetUserAccessRestrictionsReq.
type ReposSetUserAccessRestrictionsReqType string

// Possible values for ReposSetUserAccessRestrictionsReqType.
const (
	ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq ReposSetUserAccessRestrictionsReqType = "ReposSetUserAccessRestrictionsReq0"
	StringArrayReposSetUserAccessRestrictionsReq                        ReposSetUserAccessRestrictionsReqType = "[]string"
)

// IsReposSetUserAccessRestrictionsReq0 reports whether ReposSetUserAccessRestrictionsReq is ReposSetUserAccessRestrictionsReq0.
func (s ReposSetUserAccessRestrictionsReq) IsReposSetUserAccessRestrictionsReq0() bool {
	return s.Type == ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetUserAccessRestrictionsReq is []string.
func (s ReposSetUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetUserAccessRestrictionsReq
}

// SetReposSetUserAccessRestrictionsReq0 sets ReposSetUserAccessRestrictionsReq to ReposSetUserAccessRestrictionsReq0.
func (s *ReposSetUserAccessRestrictionsReq) SetReposSetUserAccessRestrictionsReq0(v ReposSetUserAccessRestrictionsReq0) {
	s.Type = ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq
	s.ReposSetUserAccessRestrictionsReq0 = v
}

// GetReposSetUserAccessRestrictionsReq0 returns ReposSetUserAccessRestrictionsReq0 and true boolean if ReposSetUserAccessRestrictionsReq is ReposSetUserAccessRestrictionsReq0.
func (s ReposSetUserAccessRestrictionsReq) GetReposSetUserAccessRestrictionsReq0() (v ReposSetUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetUserAccessRestrictionsReq0, true
}

// NewReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq returns new ReposSetUserAccessRestrictionsReq from ReposSetUserAccessRestrictionsReq0.
func NewReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq(v ReposSetUserAccessRestrictionsReq0) ReposSetUserAccessRestrictionsReq {
	var s ReposSetUserAccessRestrictionsReq
	s.SetReposSetUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetUserAccessRestrictionsReq to []string.
func (s *ReposSetUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetUserAccessRestrictionsReq is []string.
func (s ReposSetUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetUserAccessRestrictionsReq returns new ReposSetUserAccessRestrictionsReq from []string.
func NewStringArrayReposSetUserAccessRestrictionsReq(v []string) ReposSetUserAccessRestrictionsReq {
	var s ReposSetUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string "json:\"users\""
}

// ReposTestPushWebhookNoContent is response for ReposTestPushWebhook operation.
type ReposTestPushWebhookNoContent struct{}

func (*ReposTestPushWebhookNoContent) reposTestPushWebhookRes() {}

type ReposTransferReq struct {
	// The username or organization name the repository will be transferred to.
	NewOwner string "json:\"new_owner\""
	// ID of the team or teams to add to the repository. Teams can only be added to organization-owned
	// repositories.
	TeamIds []int "json:\"team_ids\""
}

type ReposUpdateApplicationJSONForbidden BasicError

func (*ReposUpdateApplicationJSONForbidden) reposUpdateRes() {}

type ReposUpdateApplicationJSONNotFound BasicError

func (*ReposUpdateApplicationJSONNotFound) reposUpdateRes() {}

type ReposUpdateApplicationJSONTemporaryRedirect BasicError

func (*ReposUpdateApplicationJSONTemporaryRedirect) reposUpdateRes() {}

type ReposUpdateBranchProtectionApplicationJSONForbidden BasicError

func (*ReposUpdateBranchProtectionApplicationJSONForbidden) reposUpdateBranchProtectionRes() {}

type ReposUpdateBranchProtectionApplicationJSONNotFound BasicError

func (*ReposUpdateBranchProtectionApplicationJSONNotFound) reposUpdateBranchProtectionRes() {}

type ReposUpdateBranchProtectionReq struct {
	// Require status checks to pass before merging. Set to `null` to disable.
	RequiredStatusChecks NilReposUpdateBranchProtectionReqRequiredStatusChecks "json:\"required_status_checks\""
	// Enforce all configured restrictions for administrators. Set to `true` to enforce required status
	// checks for repository administrators. Set to `null` to disable.
	EnforceAdmins NilBool "json:\"enforce_admins\""
	// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
	RequiredPullRequestReviews NilReposUpdateBranchProtectionReqRequiredPullRequestReviews "json:\"required_pull_request_reviews\""
	// Restrict who can push to the protected branch. User, app, and team `restrictions` are only
	// available for organization-owned repositories. Set to `null` to disable.
	Restrictions NilReposUpdateBranchProtectionReqRestrictions "json:\"restrictions\""
	// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
	//  Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git
	// history. Your repository must allow squash merging or rebase merging before you can enable a
	// linear commit history. Default: `false`. For more information, see "[Requiring a linear commit
	// history](https://help.github.
	// com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help
	// documentation.
	RequiredLinearHistory OptBool "json:\"required_linear_history\""
	// Permits force pushes to the protected branch by anyone with write access to the repository. Set to
	// `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`.
	// For more information, see "[Enabling force pushes to a protected branch](https://help.github.
	// com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the
	// GitHub Help documentation.".
	AllowForcePushes OptNilBool "json:\"allow_force_pushes\""
	// Allows deletion of the protected branch by anyone with write access to the repository. Set to
	// `false` to prevent deletion of the protected branch. Default: `false`. For more information, see
	// "[Enabling force pushes to a protected branch](https://help.github.
	// com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the
	// GitHub Help documentation.
	AllowDeletions OptBool "json:\"allow_deletions\""
	// Requires all conversations on code to be resolved before a pull request can be merged into a
	// branch that matches this rule. Set to `false` to disable. Default: `false`.
	RequiredConversationResolution OptBool "json:\"required_conversation_resolution\""
}

// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRequiredPullRequestReviews struct {
	// Specify which users and teams can dismiss pull request reviews. Pass an empty
	// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
	// available for organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions "json:\"dismissal_restrictions\""
	// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new
	// commit.
	DismissStaleReviews OptBool "json:\"dismiss_stale_reviews\""
	// Blocks merging pull requests until [code owners](https://help.github.
	// com/articles/about-code-owners/) review them.
	RequireCodeOwnerReviews OptBool "json:\"require_code_owner_reviews\""
	// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
	RequiredApprovingReviewCount OptInt "json:\"required_approving_review_count\""
}

// Specify which users and teams can dismiss pull request reviews. Pass an empty
// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
// available for organization-owned repositories. Omit this parameter for personal repositories.
type ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions struct {
	// The list of user `login`s with dismissal access.
	Users []string "json:\"users\""
	// The list of team `slug`s with dismissal access.
	Teams []string "json:\"teams\""
}

// Require status checks to pass before merging. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRequiredStatusChecks struct {
	// Require branches to be up to date before merging.
	Strict bool "json:\"strict\""
	// The list of status checks to require in order to merge into this branch.
	Contexts []string "json:\"contexts\""
}

// Restrict who can push to the protected branch. User, app, and team `restrictions` are only
// available for organization-owned repositories. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRestrictions struct {
	// The list of user `login`s with push access.
	Users []string "json:\"users\""
	// The list of team `slug`s with push access.
	Teams []string "json:\"teams\""
	// The list of app `slug`s with push access.
	Apps []string "json:\"apps\""
}

type ReposUpdateCommitCommentReq struct {
	// The contents of the comment.
	Body string "json:\"body\""
}

type ReposUpdateInvitationReq struct {
	// The permissions that the associated user will have on the repository. Valid values are `read`,
	// `write`, `maintain`, `triage`, and `admin`.
	Permissions OptReposUpdateInvitationReqPermissions "json:\"permissions\""
}

// The permissions that the associated user will have on the repository. Valid values are `read`,
// `write`, `maintain`, `triage`, and `admin`.
type ReposUpdateInvitationReqPermissions string

const (
	ReposUpdateInvitationReqPermissionsRead     ReposUpdateInvitationReqPermissions = "read"
	ReposUpdateInvitationReqPermissionsWrite    ReposUpdateInvitationReqPermissions = "write"
	ReposUpdateInvitationReqPermissionsMaintain ReposUpdateInvitationReqPermissions = "maintain"
	ReposUpdateInvitationReqPermissionsTriage   ReposUpdateInvitationReqPermissions = "triage"
	ReposUpdateInvitationReqPermissionsAdmin    ReposUpdateInvitationReqPermissions = "admin"
)

type ReposUpdatePullRequestReviewProtectionReq struct {
	// Specify which users and teams can dismiss pull request reviews. Pass an empty
	// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
	// available for organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions "json:\"dismissal_restrictions\""
	// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new
	// commit.
	DismissStaleReviews OptBool "json:\"dismiss_stale_reviews\""
	// Blocks merging pull requests until [code owners](https://help.github.
	// com/articles/about-code-owners/) have reviewed.
	RequireCodeOwnerReviews OptBool "json:\"require_code_owner_reviews\""
	// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
	RequiredApprovingReviewCount OptInt "json:\"required_approving_review_count\""
}

// Specify which users and teams can dismiss pull request reviews. Pass an empty
// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
// available for organization-owned repositories. Omit this parameter for personal repositories.
type ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions struct {
	// The list of user `login`s with dismissal access.
	Users []string "json:\"users\""
	// The list of team `slug`s with dismissal access.
	Teams []string "json:\"teams\""
}

type ReposUpdateReleaseAssetReq struct {
	// The file name of the asset.
	Name OptString "json:\"name\""
	// An alternate short description of the asset. Used in place of the filename.
	Label OptString "json:\"label\""
	State OptString "json:\"state\""
}

type ReposUpdateReleaseReq struct {
	// The name of the tag.
	TagName OptString "json:\"tag_name\""
	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch
	// or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
	// (usually `master`).
	TargetCommitish OptString "json:\"target_commitish\""
	// The name of the release.
	Name OptString "json:\"name\""
	// Text describing the contents of the tag.
	Body OptString "json:\"body\""
	// `true` makes the release a draft, and `false` publishes the release.
	Draft OptBool "json:\"draft\""
	// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
	Prerelease OptBool "json:\"prerelease\""
	// If specified, a discussion of the specified category is created and linked to the release. The
	// value must be a category that already exists in the repository. If there is already a discussion
	// linked to the release, this parameter is ignored. For more information, see "[Managing categories
	// for discussions in your repository](https://docs.github.
	// com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).".
	DiscussionCategoryName OptString "json:\"discussion_category_name\""
}

type ReposUpdateReq struct {
	// The name of the repository.
	Name OptString "json:\"name\""
	// A short description of the repository.
	Description OptString "json:\"description\""
	// A URL with more information about the repository.
	Homepage OptString "json:\"homepage\""
	// Either `true` to make the repository private or `false` to make it public. Default: `false`.
	// **Note**: You will get a `422` error if the organization restricts [changing repository
	// visibility](https://help.github.
	// com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
	Private OptBool "json:\"private\""
	// Can be `public` or `private`. If your organization is associated with an enterprise account using
	// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
	// The `visibility` parameter overrides the `private` parameter when you use both along with the
	// `nebula-preview` preview header.
	Visibility OptReposUpdateReqVisibility "json:\"visibility\""
	// Specify which security and analysis features to enable or disable. For example, to enable GitHub
	// Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis":
	// {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private
	// repository covered by an Advanced Security license, you can check which security and analysis
	// features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
	SecurityAndAnalysis OptNilReposUpdateReqSecurityAndAnalysis "json:\"security_and_analysis\""
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues OptBool "json:\"has_issues\""
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
	// you're creating a repository in an organization that has disabled repository projects, the default
	// is `false`, and if you pass `true`, the API returns an error.
	HasProjects OptBool "json:\"has_projects\""
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki OptBool "json:\"has_wiki\""
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate OptBool "json:\"is_template\""
	// Updates the default branch for this repository.
	DefaultBranch OptString "json:\"default_branch\""
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging
	// pull requests with merge commits.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge OptBool "json:\"allow_rebase_merge\""
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or
	// `false` to prevent automatic deletion.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
	// `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
	Archived OptBool "json:\"archived\""
	// Either `true` to allow private forks, or `false` to prevent private forks.
	AllowForking OptBool "json:\"allow_forking\""
}

// Specify which security and analysis features to enable or disable. For example, to enable GitHub
// Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis":
// {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private
// repository covered by an Advanced Security license, you can check which security and analysis
// features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
type ReposUpdateReqSecurityAndAnalysis struct {
	// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For
	// more information, see "[About GitHub Advanced
	// Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).".
	AdvancedSecurity OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity "json:\"advanced_security\""
	// Use the `status` property to enable or disable secret scanning for this repository. For more
	// information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning).".
	SecretScanning OptReposUpdateReqSecurityAndAnalysisSecretScanning "json:\"secret_scanning\""
}

// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For
// more information, see "[About GitHub Advanced
// Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).".
type ReposUpdateReqSecurityAndAnalysisAdvancedSecurity struct {
	// Can be `enabled` or `disabled`.
	Status OptString "json:\"status\""
}

// Use the `status` property to enable or disable secret scanning for this repository. For more
// information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning).".
type ReposUpdateReqSecurityAndAnalysisSecretScanning struct {
	// Can be `enabled` or `disabled`.
	Status OptString "json:\"status\""
}

// Can be `public` or `private`. If your organization is associated with an enterprise account using
// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
// The `visibility` parameter overrides the `private` parameter when you use both along with the
// `nebula-preview` preview header.
type ReposUpdateReqVisibility string

const (
	ReposUpdateReqVisibilityPublic     ReposUpdateReqVisibility = "public"
	ReposUpdateReqVisibilityPrivate    ReposUpdateReqVisibility = "private"
	ReposUpdateReqVisibilityVisibility ReposUpdateReqVisibility = "visibility"
	ReposUpdateReqVisibilityInternal   ReposUpdateReqVisibility = "internal"
)

type ReposUpdateStatusCheckProtectionReq struct {
	// Require branches to be up to date before merging.
	Strict OptBool "json:\"strict\""
	// The list of status checks to require in order to merge into this branch.
	Contexts []string "json:\"contexts\""
}

type ReposUpdateWebhookConfigForRepoReq struct {
	URL             OptWebhookConfigURL         "json:\"url\""
	ContentType     OptWebhookConfigContentType "json:\"content_type\""
	Secret          OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl     OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	AdditionalProps ReposUpdateWebhookConfigForRepoReqAdditional
}

type ReposUpdateWebhookConfigForRepoReqAdditional map[string]jx.Raw

func (s *ReposUpdateWebhookConfigForRepoReqAdditional) init() ReposUpdateWebhookConfigForRepoReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReposUpdateWebhookReq struct {
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/repos#create-hook-config-params).
	Config OptReposUpdateWebhookReqConfig "json:\"config\""
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for. This replaces the entire array of events.
	Events []string "json:\"events\""
	// Determines a list of events to be added to the list of events that the Hook triggers for.
	AddEvents []string "json:\"add_events\""
	// Determines a list of events to be removed from the list of events that the Hook triggers for.
	RemoveEvents []string "json:\"remove_events\""
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool "json:\"active\""
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/repos#create-hook-config-params).
type ReposUpdateWebhookReqConfig struct {
	URL         WebhookConfigURL            "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
	Address     OptString                   "json:\"address\""
	Room        OptString                   "json:\"room\""
}

// A git repository.
// Ref: #/components/schemas/repository
type Repository struct {
	// Unique identifier of the repository.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// The name of the repository.
	Name         string                   "json:\"name\""
	FullName     string                   "json:\"full_name\""
	License      NilNullableLicenseSimple "json:\"license\""
	Organization OptNilNullableSimpleUser "json:\"organization\""
	Forks        int                      "json:\"forks\""
	Permissions  OptRepositoryPermissions "json:\"permissions\""
	Owner        SimpleUser               "json:\"owner\""
	// Whether the repository is private or public.
	Private          bool      "json:\"private\""
	HTMLURL          url.URL   "json:\"html_url\""
	Description      NilString "json:\"description\""
	Fork             bool      "json:\"fork\""
	URL              url.URL   "json:\"url\""
	ArchiveURL       string    "json:\"archive_url\""
	AssigneesURL     string    "json:\"assignees_url\""
	BlobsURL         string    "json:\"blobs_url\""
	BranchesURL      string    "json:\"branches_url\""
	CollaboratorsURL string    "json:\"collaborators_url\""
	CommentsURL      string    "json:\"comments_url\""
	CommitsURL       string    "json:\"commits_url\""
	CompareURL       string    "json:\"compare_url\""
	ContentsURL      string    "json:\"contents_url\""
	ContributorsURL  url.URL   "json:\"contributors_url\""
	DeploymentsURL   url.URL   "json:\"deployments_url\""
	DownloadsURL     url.URL   "json:\"downloads_url\""
	EventsURL        url.URL   "json:\"events_url\""
	ForksURL         url.URL   "json:\"forks_url\""
	GitCommitsURL    string    "json:\"git_commits_url\""
	GitRefsURL       string    "json:\"git_refs_url\""
	GitTagsURL       string    "json:\"git_tags_url\""
	GitURL           string    "json:\"git_url\""
	IssueCommentURL  string    "json:\"issue_comment_url\""
	IssueEventsURL   string    "json:\"issue_events_url\""
	IssuesURL        string    "json:\"issues_url\""
	KeysURL          string    "json:\"keys_url\""
	LabelsURL        string    "json:\"labels_url\""
	LanguagesURL     url.URL   "json:\"languages_url\""
	MergesURL        url.URL   "json:\"merges_url\""
	MilestonesURL    string    "json:\"milestones_url\""
	NotificationsURL string    "json:\"notifications_url\""
	PullsURL         string    "json:\"pulls_url\""
	ReleasesURL      string    "json:\"releases_url\""
	SSHURL           string    "json:\"ssh_url\""
	StargazersURL    url.URL   "json:\"stargazers_url\""
	StatusesURL      string    "json:\"statuses_url\""
	SubscribersURL   url.URL   "json:\"subscribers_url\""
	SubscriptionURL  url.URL   "json:\"subscription_url\""
	TagsURL          url.URL   "json:\"tags_url\""
	TeamsURL         url.URL   "json:\"teams_url\""
	TreesURL         string    "json:\"trees_url\""
	CloneURL         string    "json:\"clone_url\""
	MirrorURL        NilURI    "json:\"mirror_url\""
	HooksURL         url.URL   "json:\"hooks_url\""
	SvnURL           url.URL   "json:\"svn_url\""
	Homepage         NilURI    "json:\"homepage\""
	Language         NilString "json:\"language\""
	ForksCount       int       "json:\"forks_count\""
	StargazersCount  int       "json:\"stargazers_count\""
	WatchersCount    int       "json:\"watchers_count\""
	Size             int       "json:\"size\""
	// The default branch of the repository.
	DefaultBranch   string "json:\"default_branch\""
	OpenIssuesCount int    "json:\"open_issues_count\""
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  "json:\"is_template\""
	Topics     []string "json:\"topics\""
	// Whether issues are enabled.
	HasIssues bool "json:\"has_issues\""
	// Whether projects are enabled.
	HasProjects bool "json:\"has_projects\""
	// Whether the wiki is enabled.
	HasWiki  bool "json:\"has_wiki\""
	HasPages bool "json:\"has_pages\""
	// Whether downloads are enabled.
	HasDownloads bool "json:\"has_downloads\""
	// Whether the repository is archived.
	Archived bool "json:\"archived\""
	// Returns whether or not this repository disabled.
	Disabled bool "json:\"disabled\""
	// The repository visibility: public, private, or internal.
	Visibility OptString   "json:\"visibility\""
	PushedAt   NilDateTime "json:\"pushed_at\""
	CreatedAt  NilDateTime "json:\"created_at\""
	UpdatedAt  NilDateTime "json:\"updated_at\""
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                            "json:\"allow_rebase_merge\""
	TemplateRepository OptNilRepositoryTemplateRepository "json:\"template_repository\""
	TempCloneToken     OptString                          "json:\"temp_clone_token\""
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Whether to allow forking this repo.
	AllowForking     OptBool   "json:\"allow_forking\""
	SubscribersCount OptInt    "json:\"subscribers_count\""
	NetworkCount     OptInt    "json:\"network_count\""
	OpenIssues       int       "json:\"open_issues\""
	Watchers         int       "json:\"watchers\""
	MasterBranch     OptString "json:\"master_branch\""
	StarredAt        OptString "json:\"starred_at\""
}

func (*Repository) reposCreateForAuthenticatedUserRes() {}
func (*Repository) reposCreateInOrgRes()                {}

// Repository Collaborator Permission.
// Ref: #/components/schemas/repository-collaborator-permission
type RepositoryCollaboratorPermission struct {
	Permission string                "json:\"permission\""
	User       NilNullableSimpleUser "json:\"user\""
}

func (*RepositoryCollaboratorPermission) projectsGetPermissionForUserRes()        {}
func (*RepositoryCollaboratorPermission) reposGetCollaboratorPermissionLevelRes() {}

// Repository invitations let you manage who you collaborate with.
// Ref: #/components/schemas/repository-invitation
type RepositoryInvitation struct {
	// Unique identifier of the repository invitation.
	ID         int                   "json:\"id\""
	Repository MinimalRepository     "json:\"repository\""
	Invitee    NilNullableSimpleUser "json:\"invitee\""
	Inviter    NilNullableSimpleUser "json:\"inviter\""
	// The permission associated with the invitation.
	Permissions RepositoryInvitationPermissions "json:\"permissions\""
	CreatedAt   time.Time                       "json:\"created_at\""
	// Whether or not the invitation has expired.
	Expired OptBool "json:\"expired\""
	// URL for the repository invitation.
	URL     string "json:\"url\""
	HTMLURL string "json:\"html_url\""
	NodeID  string "json:\"node_id\""
}

func (*RepositoryInvitation) reposAddCollaboratorRes() {}

// The permission associated with the invitation.
type RepositoryInvitationPermissions string

const (
	RepositoryInvitationPermissionsRead     RepositoryInvitationPermissions = "read"
	RepositoryInvitationPermissionsWrite    RepositoryInvitationPermissions = "write"
	RepositoryInvitationPermissionsAdmin    RepositoryInvitationPermissions = "admin"
	RepositoryInvitationPermissionsTriage   RepositoryInvitationPermissions = "triage"
	RepositoryInvitationPermissionsMaintain RepositoryInvitationPermissions = "maintain"
)

type RepositoryPermissions struct {
	Admin    bool    "json:\"admin\""
	Pull     bool    "json:\"pull\""
	Triage   OptBool "json:\"triage\""
	Push     bool    "json:\"push\""
	Maintain OptBool "json:\"maintain\""
}

// Repository invitations let you manage who you collaborate with.
// Ref: #/components/schemas/repository-subscription
type RepositorySubscription struct {
	// Determines if notifications should be received from this repository.
	Subscribed bool "json:\"subscribed\""
	// Determines if all notifications should be blocked from this repository.
	Ignored       bool      "json:\"ignored\""
	Reason        NilString "json:\"reason\""
	CreatedAt     time.Time "json:\"created_at\""
	URL           url.URL   "json:\"url\""
	RepositoryURL url.URL   "json:\"repository_url\""
}

func (*RepositorySubscription) activityGetRepoSubscriptionRes() {}

type RepositoryTemplateRepository struct {
	ID                  OptInt                                     "json:\"id\""
	NodeID              OptString                                  "json:\"node_id\""
	Name                OptString                                  "json:\"name\""
	FullName            OptString                                  "json:\"full_name\""
	Owner               OptRepositoryTemplateRepositoryOwner       "json:\"owner\""
	Private             OptBool                                    "json:\"private\""
	HTMLURL             OptString                                  "json:\"html_url\""
	Description         OptString                                  "json:\"description\""
	Fork                OptBool                                    "json:\"fork\""
	URL                 OptString                                  "json:\"url\""
	ArchiveURL          OptString                                  "json:\"archive_url\""
	AssigneesURL        OptString                                  "json:\"assignees_url\""
	BlobsURL            OptString                                  "json:\"blobs_url\""
	BranchesURL         OptString                                  "json:\"branches_url\""
	CollaboratorsURL    OptString                                  "json:\"collaborators_url\""
	CommentsURL         OptString                                  "json:\"comments_url\""
	CommitsURL          OptString                                  "json:\"commits_url\""
	CompareURL          OptString                                  "json:\"compare_url\""
	ContentsURL         OptString                                  "json:\"contents_url\""
	ContributorsURL     OptString                                  "json:\"contributors_url\""
	DeploymentsURL      OptString                                  "json:\"deployments_url\""
	DownloadsURL        OptString                                  "json:\"downloads_url\""
	EventsURL           OptString                                  "json:\"events_url\""
	ForksURL            OptString                                  "json:\"forks_url\""
	GitCommitsURL       OptString                                  "json:\"git_commits_url\""
	GitRefsURL          OptString                                  "json:\"git_refs_url\""
	GitTagsURL          OptString                                  "json:\"git_tags_url\""
	GitURL              OptString                                  "json:\"git_url\""
	IssueCommentURL     OptString                                  "json:\"issue_comment_url\""
	IssueEventsURL      OptString                                  "json:\"issue_events_url\""
	IssuesURL           OptString                                  "json:\"issues_url\""
	KeysURL             OptString                                  "json:\"keys_url\""
	LabelsURL           OptString                                  "json:\"labels_url\""
	LanguagesURL        OptString                                  "json:\"languages_url\""
	MergesURL           OptString                                  "json:\"merges_url\""
	MilestonesURL       OptString                                  "json:\"milestones_url\""
	NotificationsURL    OptString                                  "json:\"notifications_url\""
	PullsURL            OptString                                  "json:\"pulls_url\""
	ReleasesURL         OptString                                  "json:\"releases_url\""
	SSHURL              OptString                                  "json:\"ssh_url\""
	StargazersURL       OptString                                  "json:\"stargazers_url\""
	StatusesURL         OptString                                  "json:\"statuses_url\""
	SubscribersURL      OptString                                  "json:\"subscribers_url\""
	SubscriptionURL     OptString                                  "json:\"subscription_url\""
	TagsURL             OptString                                  "json:\"tags_url\""
	TeamsURL            OptString                                  "json:\"teams_url\""
	TreesURL            OptString                                  "json:\"trees_url\""
	CloneURL            OptString                                  "json:\"clone_url\""
	MirrorURL           OptString                                  "json:\"mirror_url\""
	HooksURL            OptString                                  "json:\"hooks_url\""
	SvnURL              OptString                                  "json:\"svn_url\""
	Homepage            OptString                                  "json:\"homepage\""
	Language            OptString                                  "json:\"language\""
	ForksCount          OptInt                                     "json:\"forks_count\""
	StargazersCount     OptInt                                     "json:\"stargazers_count\""
	WatchersCount       OptInt                                     "json:\"watchers_count\""
	Size                OptInt                                     "json:\"size\""
	DefaultBranch       OptString                                  "json:\"default_branch\""
	OpenIssuesCount     OptInt                                     "json:\"open_issues_count\""
	IsTemplate          OptBool                                    "json:\"is_template\""
	Topics              []string                                   "json:\"topics\""
	HasIssues           OptBool                                    "json:\"has_issues\""
	HasProjects         OptBool                                    "json:\"has_projects\""
	HasWiki             OptBool                                    "json:\"has_wiki\""
	HasPages            OptBool                                    "json:\"has_pages\""
	HasDownloads        OptBool                                    "json:\"has_downloads\""
	Archived            OptBool                                    "json:\"archived\""
	Disabled            OptBool                                    "json:\"disabled\""
	Visibility          OptString                                  "json:\"visibility\""
	PushedAt            OptString                                  "json:\"pushed_at\""
	CreatedAt           OptString                                  "json:\"created_at\""
	UpdatedAt           OptString                                  "json:\"updated_at\""
	Permissions         OptRepositoryTemplateRepositoryPermissions "json:\"permissions\""
	AllowRebaseMerge    OptBool                                    "json:\"allow_rebase_merge\""
	TempCloneToken      OptString                                  "json:\"temp_clone_token\""
	AllowSquashMerge    OptBool                                    "json:\"allow_squash_merge\""
	AllowAutoMerge      OptBool                                    "json:\"allow_auto_merge\""
	DeleteBranchOnMerge OptBool                                    "json:\"delete_branch_on_merge\""
	AllowMergeCommit    OptBool                                    "json:\"allow_merge_commit\""
	SubscribersCount    OptInt                                     "json:\"subscribers_count\""
	NetworkCount        OptInt                                     "json:\"network_count\""
}

type RepositoryTemplateRepositoryOwner struct {
	Login             OptString "json:\"login\""
	ID                OptInt    "json:\"id\""
	NodeID            OptString "json:\"node_id\""
	AvatarURL         OptString "json:\"avatar_url\""
	GravatarID        OptString "json:\"gravatar_id\""
	URL               OptString "json:\"url\""
	HTMLURL           OptString "json:\"html_url\""
	FollowersURL      OptString "json:\"followers_url\""
	FollowingURL      OptString "json:\"following_url\""
	GistsURL          OptString "json:\"gists_url\""
	StarredURL        OptString "json:\"starred_url\""
	SubscriptionsURL  OptString "json:\"subscriptions_url\""
	OrganizationsURL  OptString "json:\"organizations_url\""
	ReposURL          OptString "json:\"repos_url\""
	EventsURL         OptString "json:\"events_url\""
	ReceivedEventsURL OptString "json:\"received_events_url\""
	Type              OptString "json:\"type\""
	SiteAdmin         OptBool   "json:\"site_admin\""
}

type RepositoryTemplateRepositoryPermissions struct {
	Admin    OptBool "json:\"admin\""
	Maintain OptBool "json:\"maintain\""
	Push     OptBool "json:\"push\""
	Triage   OptBool "json:\"triage\""
	Pull     OptBool "json:\"pull\""
}

// Legacy Review Comment.
// Ref: #/components/schemas/review-comment
type ReviewComment struct {
	URL                 url.URL               "json:\"url\""
	PullRequestReviewID NilInt                "json:\"pull_request_review_id\""
	ID                  int                   "json:\"id\""
	NodeID              string                "json:\"node_id\""
	DiffHunk            string                "json:\"diff_hunk\""
	Path                string                "json:\"path\""
	Position            NilInt                "json:\"position\""
	OriginalPosition    int                   "json:\"original_position\""
	CommitID            string                "json:\"commit_id\""
	OriginalCommitID    string                "json:\"original_commit_id\""
	InReplyToID         OptInt                "json:\"in_reply_to_id\""
	User                NilNullableSimpleUser "json:\"user\""
	Body                string                "json:\"body\""
	CreatedAt           time.Time             "json:\"created_at\""
	UpdatedAt           time.Time             "json:\"updated_at\""
	HTMLURL             url.URL               "json:\"html_url\""
	PullRequestURL      url.URL               "json:\"pull_request_url\""
	AuthorAssociation   AuthorAssociation     "json:\"author_association\""
	Links               ReviewCommentLinks    "json:\"_links\""
	BodyText            OptString             "json:\"body_text\""
	BodyHTML            OptString             "json:\"body_html\""
	Reactions           OptReactionRollup     "json:\"reactions\""
	// The side of the first line of the range for a multi-line comment.
	Side OptReviewCommentSide "json:\"side\""
	// The side of the first line of the range for a multi-line comment.
	StartSide OptNilReviewCommentStartSide "json:\"start_side\""
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	Line OptInt "json:\"line\""
	// The original line of the blob to which the comment applies. The last line of the range for a
	// multi-line comment.
	OriginalLine OptInt "json:\"original_line\""
	// The first line of the range for a multi-line comment.
	StartLine OptNilInt "json:\"start_line\""
	// The original first line of the range for a multi-line comment.
	OriginalStartLine OptNilInt "json:\"original_start_line\""
}

type ReviewCommentLinks struct {
	Self        Link "json:\"self\""
	HTML        Link "json:\"html\""
	PullRequest Link "json:\"pull_request\""
}

// The side of the first line of the range for a multi-line comment.
type ReviewCommentSide string

const (
	ReviewCommentSideLEFT  ReviewCommentSide = "LEFT"
	ReviewCommentSideRIGHT ReviewCommentSide = "RIGHT"
)

// The side of the first line of the range for a multi-line comment.
type ReviewCommentStartSide string

const (
	ReviewCommentStartSideLEFT  ReviewCommentStartSide = "LEFT"
	ReviewCommentStartSideRIGHT ReviewCommentStartSide = "RIGHT"
)

// A self hosted runner.
// Ref: #/components/schemas/runner
type Runner struct {
	// The id of the runner.
	ID int "json:\"id\""
	// The name of the runner.
	Name string "json:\"name\""
	// The Operating System of the runner.
	Os string "json:\"os\""
	// The status of the runner.
	Status string             "json:\"status\""
	Busy   bool               "json:\"busy\""
	Labels []RunnerLabelsItem "json:\"labels\""
}

// Runner Application.
// Ref: #/components/schemas/runner-application
type RunnerApplication struct {
	Os           string "json:\"os\""
	Architecture string "json:\"architecture\""
	DownloadURL  string "json:\"download_url\""
	Filename     string "json:\"filename\""
	// A short lived bearer token used to download the runner, if needed.
	TempDownloadToken OptString "json:\"temp_download_token\""
	SHA256Checksum    OptString "json:\"sha256_checksum\""
}

// Ref: #/components/schemas/runner-groups-enterprise
type RunnerGroupsEnterprise struct {
	ID                       float64   "json:\"id\""
	Name                     string    "json:\"name\""
	Visibility               string    "json:\"visibility\""
	Default                  bool      "json:\"default\""
	SelectedOrganizationsURL OptString "json:\"selected_organizations_url\""
	RunnersURL               string    "json:\"runners_url\""
	AllowsPublicRepositories bool      "json:\"allows_public_repositories\""
}

// Ref: #/components/schemas/runner-groups-org
type RunnerGroupsOrg struct {
	ID         float64 "json:\"id\""
	Name       string  "json:\"name\""
	Visibility string  "json:\"visibility\""
	Default    bool    "json:\"default\""
	// Link to the selected repositories resource for this runner group. Not present unless visibility
	// was set to `selected`.
	SelectedRepositoriesURL           OptString "json:\"selected_repositories_url\""
	RunnersURL                        string    "json:\"runners_url\""
	Inherited                         bool      "json:\"inherited\""
	InheritedAllowsPublicRepositories OptBool   "json:\"inherited_allows_public_repositories\""
	AllowsPublicRepositories          bool      "json:\"allows_public_repositories\""
}

type RunnerLabelsItem struct {
	// Unique identifier of the label.
	ID OptInt "json:\"id\""
	// Name of the label.
	Name OptString "json:\"name\""
	// The type of label. Read-only labels are applied automatically when the runner is configured.
	Type OptRunnerLabelsItemType "json:\"type\""
}

// The type of label. Read-only labels are applied automatically when the runner is configured.
type RunnerLabelsItemType string

const (
	RunnerLabelsItemTypeReadMinusOnly RunnerLabelsItemType = "read-only"
	RunnerLabelsItemTypeCustom        RunnerLabelsItemType = "custom"
)

type ScimDeleteUserFromOrgApplicationJSONForbidden ScimError

func (*ScimDeleteUserFromOrgApplicationJSONForbidden) scimDeleteUserFromOrgRes() {}

type ScimDeleteUserFromOrgApplicationJSONNotFound ScimError

func (*ScimDeleteUserFromOrgApplicationJSONNotFound) scimDeleteUserFromOrgRes() {}

// ScimDeleteUserFromOrgNoContent is response for ScimDeleteUserFromOrg operation.
type ScimDeleteUserFromOrgNoContent struct{}

func (*ScimDeleteUserFromOrgNoContent) scimDeleteUserFromOrgRes() {}

// Ref: #/components/schemas/scim-enterprise-group
type ScimEnterpriseGroup struct {
	Schemas     []string                         "json:\"schemas\""
	ID          string                           "json:\"id\""
	ExternalId  OptNilString                     "json:\"externalId\""
	DisplayName OptString                        "json:\"displayName\""
	Members     []ScimEnterpriseGroupMembersItem "json:\"members\""
	Meta        OptScimEnterpriseGroupMeta       "json:\"meta\""
}

type ScimEnterpriseGroupMembersItem struct {
	Value   OptString "json:\"value\""
	Ref     OptString "json:\"$ref\""
	Display OptString "json:\"display\""
}

type ScimEnterpriseGroupMeta struct {
	ResourceType OptString "json:\"resourceType\""
	Created      OptString "json:\"created\""
	LastModified OptString "json:\"lastModified\""
	Location     OptString "json:\"location\""
}

// Ref: #/components/schemas/scim-enterprise-user
type ScimEnterpriseUser struct {
	Schemas    []string                       "json:\"schemas\""
	ID         string                         "json:\"id\""
	ExternalId OptString                      "json:\"externalId\""
	UserName   OptString                      "json:\"userName\""
	Name       OptScimEnterpriseUserName      "json:\"name\""
	Emails     []ScimEnterpriseUserEmailsItem "json:\"emails\""
	Groups     []ScimEnterpriseUserGroupsItem "json:\"groups\""
	Active     OptBool                        "json:\"active\""
	Meta       OptScimEnterpriseUserMeta      "json:\"meta\""
}

type ScimEnterpriseUserEmailsItem struct {
	Value   OptString "json:\"value\""
	Type    OptString "json:\"type\""
	Primary OptBool   "json:\"primary\""
}

type ScimEnterpriseUserGroupsItem struct {
	Value OptString "json:\"value\""
}

type ScimEnterpriseUserMeta struct {
	ResourceType OptString "json:\"resourceType\""
	Created      OptString "json:\"created\""
	LastModified OptString "json:\"lastModified\""
	Location     OptString "json:\"location\""
}

type ScimEnterpriseUserName struct {
	GivenName  OptString "json:\"givenName\""
	FamilyName OptString "json:\"familyName\""
}

// Scim Error.
// Ref: #/components/schemas/scim-error
type ScimError struct {
	Message          OptNilString "json:\"message\""
	DocumentationURL OptNilString "json:\"documentation_url\""
	Detail           OptNilString "json:\"detail\""
	Status           OptInt       "json:\"status\""
	ScimType         OptNilString "json:\"scimType\""
	Schemas          []string     "json:\"schemas\""
}

// Ref: #/components/schemas/scim-group-list-enterprise
type ScimGroupListEnterprise struct {
	Schemas      []string                               "json:\"schemas\""
	TotalResults float64                                "json:\"totalResults\""
	ItemsPerPage float64                                "json:\"itemsPerPage\""
	StartIndex   float64                                "json:\"startIndex\""
	Resources    []ScimGroupListEnterpriseResourcesItem "json:\"Resources\""
}

type ScimGroupListEnterpriseResourcesItem struct {
	Schemas     []string                                          "json:\"schemas\""
	ID          string                                            "json:\"id\""
	ExternalId  OptNilString                                      "json:\"externalId\""
	DisplayName OptString                                         "json:\"displayName\""
	Members     []ScimGroupListEnterpriseResourcesItemMembersItem "json:\"members\""
	Meta        OptScimGroupListEnterpriseResourcesItemMeta       "json:\"meta\""
}

type ScimGroupListEnterpriseResourcesItemMembersItem struct {
	Value   OptString "json:\"value\""
	Ref     OptString "json:\"$ref\""
	Display OptString "json:\"display\""
}

type ScimGroupListEnterpriseResourcesItemMeta struct {
	ResourceType OptString "json:\"resourceType\""
	Created      OptString "json:\"created\""
	LastModified OptString "json:\"lastModified\""
	Location     OptString "json:\"location\""
}

// Ref: #/components/schemas/scim-user-list-enterprise
type ScimUserListEnterprise struct {
	Schemas      []string                              "json:\"schemas\""
	TotalResults float64                               "json:\"totalResults\""
	ItemsPerPage float64                               "json:\"itemsPerPage\""
	StartIndex   float64                               "json:\"startIndex\""
	Resources    []ScimUserListEnterpriseResourcesItem "json:\"Resources\""
}

type ScimUserListEnterpriseResourcesItem struct {
	Schemas    []string                                        "json:\"schemas\""
	ID         string                                          "json:\"id\""
	ExternalId OptString                                       "json:\"externalId\""
	UserName   OptString                                       "json:\"userName\""
	Name       OptScimUserListEnterpriseResourcesItemName      "json:\"name\""
	Emails     []ScimUserListEnterpriseResourcesItemEmailsItem "json:\"emails\""
	Groups     []ScimUserListEnterpriseResourcesItemGroupsItem "json:\"groups\""
	Active     OptBool                                         "json:\"active\""
	Meta       OptScimUserListEnterpriseResourcesItemMeta      "json:\"meta\""
}

type ScimUserListEnterpriseResourcesItemEmailsItem struct {
	Value   OptString "json:\"value\""
	Primary OptBool   "json:\"primary\""
	Type    OptString "json:\"type\""
}

type ScimUserListEnterpriseResourcesItemGroupsItem struct {
	Value OptString "json:\"value\""
}

type ScimUserListEnterpriseResourcesItemMeta struct {
	ResourceType OptString "json:\"resourceType\""
	Created      OptString "json:\"created\""
	LastModified OptString "json:\"lastModified\""
	Location     OptString "json:\"location\""
}

type ScimUserListEnterpriseResourcesItemName struct {
	GivenName  OptString "json:\"givenName\""
	FamilyName OptString "json:\"familyName\""
}

type SearchCodeOK struct {
	TotalCount        int                    "json:\"total_count\""
	IncompleteResults bool                   "json:\"incomplete_results\""
	Items             []CodeSearchResultItem "json:\"items\""
}

func (*SearchCodeOK) searchCodeRes() {}

type SearchCodeOrder string

const (
	SearchCodeOrderDesc SearchCodeOrder = "desc"
	SearchCodeOrderAsc  SearchCodeOrder = "asc"
)

type SearchCodeSort string

const (
	SearchCodeSortIndexed SearchCodeSort = "indexed"
)

type SearchCommitsOK struct {
	TotalCount        int                      "json:\"total_count\""
	IncompleteResults bool                     "json:\"incomplete_results\""
	Items             []CommitSearchResultItem "json:\"items\""
}

func (*SearchCommitsOK) searchCommitsRes() {}

type SearchCommitsOrder string

const (
	SearchCommitsOrderDesc SearchCommitsOrder = "desc"
	SearchCommitsOrderAsc  SearchCommitsOrder = "asc"
)

type SearchCommitsSort string

const (
	SearchCommitsSortAuthorMinusDate    SearchCommitsSort = "author-date"
	SearchCommitsSortCommitterMinusDate SearchCommitsSort = "committer-date"
)

type SearchIssuesAndPullRequestsOK struct {
	TotalCount        int                     "json:\"total_count\""
	IncompleteResults bool                    "json:\"incomplete_results\""
	Items             []IssueSearchResultItem "json:\"items\""
}

func (*SearchIssuesAndPullRequestsOK) searchIssuesAndPullRequestsRes() {}

type SearchIssuesAndPullRequestsOrder string

const (
	SearchIssuesAndPullRequestsOrderDesc SearchIssuesAndPullRequestsOrder = "desc"
	SearchIssuesAndPullRequestsOrderAsc  SearchIssuesAndPullRequestsOrder = "asc"
)

type SearchIssuesAndPullRequestsSort string

const (
	SearchIssuesAndPullRequestsSortComments                   SearchIssuesAndPullRequestsSort = "comments"
	SearchIssuesAndPullRequestsSortReactions                  SearchIssuesAndPullRequestsSort = "reactions"
	SearchIssuesAndPullRequestsSortReactionsMinusPlus1        SearchIssuesAndPullRequestsSort = "reactions-+1"
	SearchIssuesAndPullRequestsSortReactionsMinusMinus1       SearchIssuesAndPullRequestsSort = "reactions--1"
	SearchIssuesAndPullRequestsSortReactionsMinusSmile        SearchIssuesAndPullRequestsSort = "reactions-smile"
	SearchIssuesAndPullRequestsSortReactionsMinusThinkingFace SearchIssuesAndPullRequestsSort = "reactions-thinking_face"
	SearchIssuesAndPullRequestsSortReactionsMinusHeart        SearchIssuesAndPullRequestsSort = "reactions-heart"
	SearchIssuesAndPullRequestsSortReactionsMinusTada         SearchIssuesAndPullRequestsSort = "reactions-tada"
	SearchIssuesAndPullRequestsSortInteractions               SearchIssuesAndPullRequestsSort = "interactions"
	SearchIssuesAndPullRequestsSortCreated                    SearchIssuesAndPullRequestsSort = "created"
	SearchIssuesAndPullRequestsSortUpdated                    SearchIssuesAndPullRequestsSort = "updated"
)

type SearchLabelsApplicationJSONForbidden BasicError

func (*SearchLabelsApplicationJSONForbidden) searchLabelsRes() {}

type SearchLabelsApplicationJSONNotFound BasicError

func (*SearchLabelsApplicationJSONNotFound) searchLabelsRes() {}

type SearchLabelsOK struct {
	TotalCount        int                     "json:\"total_count\""
	IncompleteResults bool                    "json:\"incomplete_results\""
	Items             []LabelSearchResultItem "json:\"items\""
}

func (*SearchLabelsOK) searchLabelsRes() {}

type SearchLabelsOrder string

const (
	SearchLabelsOrderDesc SearchLabelsOrder = "desc"
	SearchLabelsOrderAsc  SearchLabelsOrder = "asc"
)

type SearchLabelsSort string

const (
	SearchLabelsSortCreated SearchLabelsSort = "created"
	SearchLabelsSortUpdated SearchLabelsSort = "updated"
)

type SearchReposOK struct {
	TotalCount        int                    "json:\"total_count\""
	IncompleteResults bool                   "json:\"incomplete_results\""
	Items             []RepoSearchResultItem "json:\"items\""
}

func (*SearchReposOK) searchReposRes() {}

type SearchReposOrder string

const (
	SearchReposOrderDesc SearchReposOrder = "desc"
	SearchReposOrderAsc  SearchReposOrder = "asc"
)

type SearchReposSort string

const (
	SearchReposSortStars                      SearchReposSort = "stars"
	SearchReposSortForks                      SearchReposSort = "forks"
	SearchReposSortHelpMinusWantedMinusIssues SearchReposSort = "help-wanted-issues"
	SearchReposSortUpdated                    SearchReposSort = "updated"
)

type SearchResultTextMatches []SearchResultTextMatchesItem

type SearchResultTextMatchesItem struct {
	ObjectURL  OptString                                "json:\"object_url\""
	ObjectType OptNilString                             "json:\"object_type\""
	Property   OptString                                "json:\"property\""
	Fragment   OptString                                "json:\"fragment\""
	Matches    []SearchResultTextMatchesItemMatchesItem "json:\"matches\""
}

type SearchResultTextMatchesItemMatchesItem struct {
	Text    OptString "json:\"text\""
	Indices []int     "json:\"indices\""
}

type SearchTopicsOK struct {
	TotalCount        int                     "json:\"total_count\""
	IncompleteResults bool                    "json:\"incomplete_results\""
	Items             []TopicSearchResultItem "json:\"items\""
}

func (*SearchTopicsOK) searchTopicsRes() {}

type SearchUsersOK struct {
	TotalCount        int                    "json:\"total_count\""
	IncompleteResults bool                   "json:\"incomplete_results\""
	Items             []UserSearchResultItem "json:\"items\""
}

func (*SearchUsersOK) searchUsersRes() {}

type SearchUsersOrder string

const (
	SearchUsersOrderDesc SearchUsersOrder = "desc"
	SearchUsersOrderAsc  SearchUsersOrder = "asc"
)

type SearchUsersSort string

const (
	SearchUsersSortFollowers    SearchUsersSort = "followers"
	SearchUsersSortRepositories SearchUsersSort = "repositories"
	SearchUsersSortJoined       SearchUsersSort = "joined"
)

// Ref: #/components/schemas/secret-scanning-alert
type SecretScanningAlert struct {
	Number    OptAlertNumber    "json:\"number\""
	CreatedAt OptAlertCreatedAt "json:\"created_at\""
	URL       OptAlertURL       "json:\"url\""
	HTMLURL   OptAlertHTMLURL   "json:\"html_url\""
	// The REST API URL of the code locations for this alert.
	LocationsURL OptURI                              "json:\"locations_url\""
	State        OptSecretScanningAlertState         "json:\"state\""
	Resolution   OptNilSecretScanningAlertResolution "json:\"resolution\""
	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt OptNilDateTime           "json:\"resolved_at\""
	ResolvedBy OptNilNullableSimpleUser "json:\"resolved_by\""
	// The type of secret that secret scanning detected.
	SecretType OptString "json:\"secret_type\""
	// The secret that was detected.
	Secret OptString "json:\"secret\""
}

func (*SecretScanningAlert) secretScanningGetAlertRes()    {}
func (*SecretScanningAlert) secretScanningUpdateAlertRes() {}

// **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of
// `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
// Ref: #/components/schemas/secret-scanning-alert-resolution
type SecretScanningAlertResolution string

const (
	SecretScanningAlertResolutionFalsePositive SecretScanningAlertResolution = "false_positive"
	SecretScanningAlertResolutionWontFix       SecretScanningAlertResolution = "wont_fix"
	SecretScanningAlertResolutionRevoked       SecretScanningAlertResolution = "revoked"
	SecretScanningAlertResolutionUsedInTests   SecretScanningAlertResolution = "used_in_tests"
)

// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide
// `resolution` when you set the state to `resolved`.
// Ref: #/components/schemas/secret-scanning-alert-state
type SecretScanningAlertState string

const (
	SecretScanningAlertStateOpen     SecretScanningAlertState = "open"
	SecretScanningAlertStateResolved SecretScanningAlertState = "resolved"
)

// SecretScanningGetAlertNotFound is response for SecretScanningGetAlert operation.
type SecretScanningGetAlertNotFound struct{}

func (*SecretScanningGetAlertNotFound) secretScanningGetAlertRes() {}

type SecretScanningListAlertsForOrgOKApplicationJSON []OrganizationSecretScanningAlert

func (SecretScanningListAlertsForOrgOKApplicationJSON) secretScanningListAlertsForOrgRes() {}

type SecretScanningListAlertsForOrgState string

const (
	SecretScanningListAlertsForOrgStateOpen     SecretScanningListAlertsForOrgState = "open"
	SecretScanningListAlertsForOrgStateResolved SecretScanningListAlertsForOrgState = "resolved"
)

// SecretScanningListAlertsForRepoNotFound is response for SecretScanningListAlertsForRepo operation.
type SecretScanningListAlertsForRepoNotFound struct{}

func (*SecretScanningListAlertsForRepoNotFound) secretScanningListAlertsForRepoRes() {}

type SecretScanningListAlertsForRepoOKApplicationJSON []SecretScanningAlert

func (SecretScanningListAlertsForRepoOKApplicationJSON) secretScanningListAlertsForRepoRes() {}

type SecretScanningListAlertsForRepoState string

const (
	SecretScanningListAlertsForRepoStateOpen     SecretScanningListAlertsForRepoState = "open"
	SecretScanningListAlertsForRepoStateResolved SecretScanningListAlertsForRepoState = "resolved"
)

// SecretScanningUpdateAlertNotFound is response for SecretScanningUpdateAlert operation.
type SecretScanningUpdateAlertNotFound struct{}

func (*SecretScanningUpdateAlertNotFound) secretScanningUpdateAlertRes() {}

type SecretScanningUpdateAlertReq struct {
	State      SecretScanningAlertState            "json:\"state\""
	Resolution OptNilSecretScanningAlertResolution "json:\"resolution\""
}

// SecretScanningUpdateAlertUnprocessableEntity is response for SecretScanningUpdateAlert operation.
type SecretScanningUpdateAlertUnprocessableEntity struct{}

func (*SecretScanningUpdateAlertUnprocessableEntity) secretScanningUpdateAlertRes() {}

// Ref: #/components/schemas/selected-actions
type SelectedActions struct {
	// Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions`
	// organization.
	GithubOwnedAllowed OptBool "json:\"github_owned_allowed\""
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow
	// all GitHub Marketplace actions by verified creators.
	VerifiedAllowed OptBool "json:\"verified_allowed\""
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and
	// SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.".
	PatternsAllowed []string "json:\"patterns_allowed\""
}

type SelectedActionsURL string

type ServiceUnavailable struct {
	Code             OptString "json:\"code\""
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*ServiceUnavailable) activityListPublicEventsRes()        {}
func (*ServiceUnavailable) codeScanningDeleteAnalysisRes()      {}
func (*ServiceUnavailable) codeScanningGetAlertRes()            {}
func (*ServiceUnavailable) codeScanningGetAnalysisRes()         {}
func (*ServiceUnavailable) codeScanningGetSarifRes()            {}
func (*ServiceUnavailable) codeScanningListAlertInstancesRes()  {}
func (*ServiceUnavailable) codeScanningListAlertsForRepoRes()   {}
func (*ServiceUnavailable) codeScanningListRecentAnalysesRes()  {}
func (*ServiceUnavailable) codeScanningUpdateAlertRes()         {}
func (*ServiceUnavailable) codeScanningUploadSarifRes()         {}
func (*ServiceUnavailable) issuesCreateRes()                    {}
func (*ServiceUnavailable) issuesUpdateRes()                    {}
func (*ServiceUnavailable) reposDeleteFileRes()                 {}
func (*ServiceUnavailable) searchCodeRes()                      {}
func (*ServiceUnavailable) searchIssuesAndPullRequestsRes()     {}
func (*ServiceUnavailable) searchReposRes()                     {}
func (*ServiceUnavailable) searchUsersRes()                     {}
func (*ServiceUnavailable) secretScanningGetAlertRes()          {}
func (*ServiceUnavailable) secretScanningListAlertsForOrgRes()  {}
func (*ServiceUnavailable) secretScanningListAlertsForRepoRes() {}
func (*ServiceUnavailable) secretScanningUpdateAlertRes()       {}

// Short Blob.
// Ref: #/components/schemas/short-blob
type ShortBlob struct {
	URL string "json:\"url\""
	Sha string "json:\"sha\""
}

func (*ShortBlob) gitCreateBlobRes() {}

// Short Branch.
// Ref: #/components/schemas/short-branch
type ShortBranch struct {
	Name          string              "json:\"name\""
	Commit        ShortBranchCommit   "json:\"commit\""
	Protected     bool                "json:\"protected\""
	Protection    OptBranchProtection "json:\"protection\""
	ProtectionURL OptURI              "json:\"protection_url\""
}

type ShortBranchCommit struct {
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

// Simple Commit.
// Ref: #/components/schemas/simple-commit
type SimpleCommit struct {
	ID        string                   "json:\"id\""
	TreeID    string                   "json:\"tree_id\""
	Message   string                   "json:\"message\""
	Timestamp time.Time                "json:\"timestamp\""
	Author    NilSimpleCommitAuthor    "json:\"author\""
	Committer NilSimpleCommitCommitter "json:\"committer\""
}

type SimpleCommitAuthor struct {
	Name  string "json:\"name\""
	Email string "json:\"email\""
}

type SimpleCommitCommitter struct {
	Name  string "json:\"name\""
	Email string "json:\"email\""
}

// Ref: #/components/schemas/simple-commit-status
type SimpleCommitStatus struct {
	Description NilString  "json:\"description\""
	ID          int        "json:\"id\""
	NodeID      string     "json:\"node_id\""
	State       string     "json:\"state\""
	Context     string     "json:\"context\""
	TargetURL   url.URL    "json:\"target_url\""
	Required    OptNilBool "json:\"required\""
	AvatarURL   NilURI     "json:\"avatar_url\""
	URL         url.URL    "json:\"url\""
	CreatedAt   time.Time  "json:\"created_at\""
	UpdatedAt   time.Time  "json:\"updated_at\""
}

// Simple User.
// Ref: #/components/schemas/simple-user
type SimpleUser struct {
	Name              OptNilString "json:\"name\""
	Email             OptNilString "json:\"email\""
	Login             string       "json:\"login\""
	ID                int          "json:\"id\""
	NodeID            string       "json:\"node_id\""
	AvatarURL         url.URL      "json:\"avatar_url\""
	GravatarID        NilString    "json:\"gravatar_id\""
	URL               url.URL      "json:\"url\""
	HTMLURL           url.URL      "json:\"html_url\""
	FollowersURL      url.URL      "json:\"followers_url\""
	FollowingURL      string       "json:\"following_url\""
	GistsURL          string       "json:\"gists_url\""
	StarredURL        string       "json:\"starred_url\""
	SubscriptionsURL  url.URL      "json:\"subscriptions_url\""
	OrganizationsURL  url.URL      "json:\"organizations_url\""
	ReposURL          url.URL      "json:\"repos_url\""
	EventsURL         string       "json:\"events_url\""
	ReceivedEventsURL url.URL      "json:\"received_events_url\""
	Type              string       "json:\"type\""
	SiteAdmin         bool         "json:\"site_admin\""
	StarredAt         OptString    "json:\"starred_at\""
}

// The status of a commit.
// Ref: #/components/schemas/status
type Status struct {
	URL         string                "json:\"url\""
	AvatarURL   NilString             "json:\"avatar_url\""
	ID          int                   "json:\"id\""
	NodeID      string                "json:\"node_id\""
	State       string                "json:\"state\""
	Description string                "json:\"description\""
	TargetURL   string                "json:\"target_url\""
	Context     string                "json:\"context\""
	CreatedAt   string                "json:\"created_at\""
	UpdatedAt   string                "json:\"updated_at\""
	Creator     NilNullableSimpleUser "json:\"creator\""
}

// Status Check Policy.
// Ref: #/components/schemas/status-check-policy
type StatusCheckPolicy struct {
	URL         url.URL  "json:\"url\""
	Strict      bool     "json:\"strict\""
	Contexts    []string "json:\"contexts\""
	ContextsURL url.URL  "json:\"contexts_url\""
}

func (*StatusCheckPolicy) reposGetStatusChecksProtectionRes()   {}
func (*StatusCheckPolicy) reposUpdateStatusCheckProtectionRes() {}

// Tag.
// Ref: #/components/schemas/tag
type Tag struct {
	Name       string    "json:\"name\""
	Commit     TagCommit "json:\"commit\""
	ZipballURL url.URL   "json:\"zipball_url\""
	TarballURL url.URL   "json:\"tarball_url\""
	NodeID     string    "json:\"node_id\""
}

type TagCommit struct {
	Sha string  "json:\"sha\""
	URL url.URL "json:\"url\""
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team
type Team struct {
	ID              int                   "json:\"id\""
	NodeID          string                "json:\"node_id\""
	Name            string                "json:\"name\""
	Slug            string                "json:\"slug\""
	Description     NilString             "json:\"description\""
	Privacy         OptString             "json:\"privacy\""
	Permission      string                "json:\"permission\""
	Permissions     OptTeamPermissions    "json:\"permissions\""
	URL             url.URL               "json:\"url\""
	HTMLURL         url.URL               "json:\"html_url\""
	MembersURL      string                "json:\"members_url\""
	RepositoriesURL url.URL               "json:\"repositories_url\""
	Parent          NilNullableTeamSimple "json:\"parent\""
}

// A team discussion is a persistent record of a free-form conversation within a team.
// Ref: #/components/schemas/team-discussion
type TeamDiscussion struct {
	Author NilNullableSimpleUser "json:\"author\""
	// The main text of the discussion.
	Body     string "json:\"body\""
	BodyHTML string "json:\"body_html\""
	// The current version of the body content. If provided, this update operation will be rejected if
	// the given version does not match the latest version on the server.
	BodyVersion   string      "json:\"body_version\""
	CommentsCount int         "json:\"comments_count\""
	CommentsURL   url.URL     "json:\"comments_url\""
	CreatedAt     time.Time   "json:\"created_at\""
	LastEditedAt  NilDateTime "json:\"last_edited_at\""
	HTMLURL       url.URL     "json:\"html_url\""
	NodeID        string      "json:\"node_id\""
	// The unique sequence number of a team discussion.
	Number int "json:\"number\""
	// Whether or not this discussion should be pinned for easy retrieval.
	Pinned bool "json:\"pinned\""
	// Whether or not this discussion should be restricted to team members and organization
	// administrators.
	Private bool    "json:\"private\""
	TeamURL url.URL "json:\"team_url\""
	// The title of the discussion.
	Title     string            "json:\"title\""
	UpdatedAt time.Time         "json:\"updated_at\""
	URL       url.URL           "json:\"url\""
	Reactions OptReactionRollup "json:\"reactions\""
}

// A reply to a discussion within a team.
// Ref: #/components/schemas/team-discussion-comment
type TeamDiscussionComment struct {
	Author NilNullableSimpleUser "json:\"author\""
	// The main text of the comment.
	Body     string "json:\"body\""
	BodyHTML string "json:\"body_html\""
	// The current version of the body content. If provided, this update operation will be rejected if
	// the given version does not match the latest version on the server.
	BodyVersion   string      "json:\"body_version\""
	CreatedAt     time.Time   "json:\"created_at\""
	LastEditedAt  NilDateTime "json:\"last_edited_at\""
	DiscussionURL url.URL     "json:\"discussion_url\""
	HTMLURL       url.URL     "json:\"html_url\""
	NodeID        string      "json:\"node_id\""
	// The unique sequence number of a team discussion comment.
	Number    int               "json:\"number\""
	UpdatedAt time.Time         "json:\"updated_at\""
	URL       url.URL           "json:\"url\""
	Reactions OptReactionRollup "json:\"reactions\""
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team-full
type TeamFull struct {
	// Unique identifier of the team.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the team.
	URL     url.URL "json:\"url\""
	HTMLURL url.URL "json:\"html_url\""
	// Name of the team.
	Name        string    "json:\"name\""
	Slug        string    "json:\"slug\""
	Description NilString "json:\"description\""
	// The level of privacy this team should have.
	Privacy OptTeamFullPrivacy "json:\"privacy\""
	// Permission that the team will have for its repositories.
	Permission      string                   "json:\"permission\""
	MembersURL      string                   "json:\"members_url\""
	RepositoriesURL url.URL                  "json:\"repositories_url\""
	Parent          OptNilNullableTeamSimple "json:\"parent\""
	MembersCount    int                      "json:\"members_count\""
	ReposCount      int                      "json:\"repos_count\""
	CreatedAt       time.Time                "json:\"created_at\""
	UpdatedAt       time.Time                "json:\"updated_at\""
	Organization    OrganizationFull         "json:\"organization\""
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString "json:\"ldap_dn\""
}

func (*TeamFull) teamsCreateRes()    {}
func (*TeamFull) teamsGetByNameRes() {}
func (*TeamFull) teamsGetLegacyRes() {}

// The level of privacy this team should have.
type TeamFullPrivacy string

const (
	TeamFullPrivacyClosed TeamFullPrivacy = "closed"
	TeamFullPrivacySecret TeamFullPrivacy = "secret"
)

// Team Membership.
// Ref: #/components/schemas/team-membership
type TeamMembership struct {
	URL url.URL "json:\"url\""
	// The role of the user in the team.
	Role TeamMembershipRole "json:\"role\""
	// The state of the user's membership in the team.
	State TeamMembershipState "json:\"state\""
}

func (*TeamMembership) teamsAddOrUpdateMembershipForUserInOrgRes()  {}
func (*TeamMembership) teamsAddOrUpdateMembershipForUserLegacyRes() {}
func (*TeamMembership) teamsGetMembershipForUserInOrgRes()          {}
func (*TeamMembership) teamsGetMembershipForUserLegacyRes()         {}

// The role of the user in the team.
type TeamMembershipRole string

const (
	TeamMembershipRoleMember     TeamMembershipRole = "member"
	TeamMembershipRoleMaintainer TeamMembershipRole = "maintainer"
)

// The state of the user's membership in the team.
type TeamMembershipState string

const (
	TeamMembershipStateActive  TeamMembershipState = "active"
	TeamMembershipStatePending TeamMembershipState = "pending"
)

type TeamPermissions struct {
	Pull     bool "json:\"pull\""
	Triage   bool "json:\"triage\""
	Push     bool "json:\"push\""
	Maintain bool "json:\"maintain\""
	Admin    bool "json:\"admin\""
}

// A team's access to a project.
// Ref: #/components/schemas/team-project
type TeamProject struct {
	OwnerURL   string     "json:\"owner_url\""
	URL        string     "json:\"url\""
	HTMLURL    string     "json:\"html_url\""
	ColumnsURL string     "json:\"columns_url\""
	ID         int        "json:\"id\""
	NodeID     string     "json:\"node_id\""
	Name       string     "json:\"name\""
	Body       NilString  "json:\"body\""
	Number     int        "json:\"number\""
	State      string     "json:\"state\""
	Creator    SimpleUser "json:\"creator\""
	CreatedAt  string     "json:\"created_at\""
	UpdatedAt  string     "json:\"updated_at\""
	// The organization permission for this project. Only present when owner is an organization.
	OrganizationPermission OptString "json:\"organization_permission\""
	// Whether the project is private or not. Only present when owner is an organization.
	Private     OptBool                "json:\"private\""
	Permissions TeamProjectPermissions "json:\"permissions\""
}

func (*TeamProject) teamsCheckPermissionsForProjectInOrgRes()  {}
func (*TeamProject) teamsCheckPermissionsForProjectLegacyRes() {}

type TeamProjectPermissions struct {
	Read  bool "json:\"read\""
	Write bool "json:\"write\""
	Admin bool "json:\"admin\""
}

// A team's access to a repository.
// Ref: #/components/schemas/team-repository
type TeamRepository struct {
	// Unique identifier of the repository.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// The name of the repository.
	Name        string                       "json:\"name\""
	FullName    string                       "json:\"full_name\""
	License     NilNullableLicenseSimple     "json:\"license\""
	Forks       int                          "json:\"forks\""
	Permissions OptTeamRepositoryPermissions "json:\"permissions\""
	Owner       NilNullableSimpleUser        "json:\"owner\""
	// Whether the repository is private or public.
	Private          bool      "json:\"private\""
	HTMLURL          url.URL   "json:\"html_url\""
	Description      NilString "json:\"description\""
	Fork             bool      "json:\"fork\""
	URL              url.URL   "json:\"url\""
	ArchiveURL       string    "json:\"archive_url\""
	AssigneesURL     string    "json:\"assignees_url\""
	BlobsURL         string    "json:\"blobs_url\""
	BranchesURL      string    "json:\"branches_url\""
	CollaboratorsURL string    "json:\"collaborators_url\""
	CommentsURL      string    "json:\"comments_url\""
	CommitsURL       string    "json:\"commits_url\""
	CompareURL       string    "json:\"compare_url\""
	ContentsURL      string    "json:\"contents_url\""
	ContributorsURL  url.URL   "json:\"contributors_url\""
	DeploymentsURL   url.URL   "json:\"deployments_url\""
	DownloadsURL     url.URL   "json:\"downloads_url\""
	EventsURL        url.URL   "json:\"events_url\""
	ForksURL         url.URL   "json:\"forks_url\""
	GitCommitsURL    string    "json:\"git_commits_url\""
	GitRefsURL       string    "json:\"git_refs_url\""
	GitTagsURL       string    "json:\"git_tags_url\""
	GitURL           string    "json:\"git_url\""
	IssueCommentURL  string    "json:\"issue_comment_url\""
	IssueEventsURL   string    "json:\"issue_events_url\""
	IssuesURL        string    "json:\"issues_url\""
	KeysURL          string    "json:\"keys_url\""
	LabelsURL        string    "json:\"labels_url\""
	LanguagesURL     url.URL   "json:\"languages_url\""
	MergesURL        url.URL   "json:\"merges_url\""
	MilestonesURL    string    "json:\"milestones_url\""
	NotificationsURL string    "json:\"notifications_url\""
	PullsURL         string    "json:\"pulls_url\""
	ReleasesURL      string    "json:\"releases_url\""
	SSHURL           string    "json:\"ssh_url\""
	StargazersURL    url.URL   "json:\"stargazers_url\""
	StatusesURL      string    "json:\"statuses_url\""
	SubscribersURL   url.URL   "json:\"subscribers_url\""
	SubscriptionURL  url.URL   "json:\"subscription_url\""
	TagsURL          url.URL   "json:\"tags_url\""
	TeamsURL         url.URL   "json:\"teams_url\""
	TreesURL         string    "json:\"trees_url\""
	CloneURL         string    "json:\"clone_url\""
	MirrorURL        NilURI    "json:\"mirror_url\""
	HooksURL         url.URL   "json:\"hooks_url\""
	SvnURL           url.URL   "json:\"svn_url\""
	Homepage         NilURI    "json:\"homepage\""
	Language         NilString "json:\"language\""
	ForksCount       int       "json:\"forks_count\""
	StargazersCount  int       "json:\"stargazers_count\""
	WatchersCount    int       "json:\"watchers_count\""
	Size             int       "json:\"size\""
	// The default branch of the repository.
	DefaultBranch   string "json:\"default_branch\""
	OpenIssuesCount int    "json:\"open_issues_count\""
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  "json:\"is_template\""
	Topics     []string "json:\"topics\""
	// Whether issues are enabled.
	HasIssues bool "json:\"has_issues\""
	// Whether projects are enabled.
	HasProjects bool "json:\"has_projects\""
	// Whether the wiki is enabled.
	HasWiki  bool "json:\"has_wiki\""
	HasPages bool "json:\"has_pages\""
	// Whether downloads are enabled.
	HasDownloads bool "json:\"has_downloads\""
	// Whether the repository is archived.
	Archived bool "json:\"archived\""
	// Returns whether or not this repository disabled.
	Disabled bool "json:\"disabled\""
	// The repository visibility: public, private, or internal.
	Visibility OptString   "json:\"visibility\""
	PushedAt   NilDateTime "json:\"pushed_at\""
	CreatedAt  NilDateTime "json:\"created_at\""
	UpdatedAt  NilDateTime "json:\"updated_at\""
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                  "json:\"allow_rebase_merge\""
	TemplateRepository OptNilNullableRepository "json:\"template_repository\""
	TempCloneToken     OptString                "json:\"temp_clone_token\""
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool "json:\"allow_squash_merge\""
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool "json:\"allow_auto_merge\""
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool "json:\"delete_branch_on_merge\""
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool "json:\"allow_merge_commit\""
	// Whether to allow forking this repo.
	AllowForking     OptBool   "json:\"allow_forking\""
	SubscribersCount OptInt    "json:\"subscribers_count\""
	NetworkCount     OptInt    "json:\"network_count\""
	OpenIssues       int       "json:\"open_issues\""
	Watchers         int       "json:\"watchers\""
	MasterBranch     OptString "json:\"master_branch\""
}

func (*TeamRepository) teamsCheckPermissionsForRepoInOrgRes()  {}
func (*TeamRepository) teamsCheckPermissionsForRepoLegacyRes() {}

type TeamRepositoryPermissions struct {
	Admin    bool    "json:\"admin\""
	Pull     bool    "json:\"pull\""
	Triage   OptBool "json:\"triage\""
	Push     bool    "json:\"push\""
	Maintain OptBool "json:\"maintain\""
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team-simple
type TeamSimple struct {
	// Unique identifier of the team.
	ID     int    "json:\"id\""
	NodeID string "json:\"node_id\""
	// URL for the team.
	URL        url.URL "json:\"url\""
	MembersURL string  "json:\"members_url\""
	// Name of the team.
	Name string "json:\"name\""
	// Description of the team.
	Description NilString "json:\"description\""
	// Permission that the team will have for its repositories.
	Permission string "json:\"permission\""
	// The level of privacy this team should have.
	Privacy         OptString "json:\"privacy\""
	HTMLURL         url.URL   "json:\"html_url\""
	RepositoriesURL url.URL   "json:\"repositories_url\""
	Slug            string    "json:\"slug\""
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString "json:\"ldap_dn\""
}

// TeamsAddMemberLegacyNoContent is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyNoContent struct{}

func (*TeamsAddMemberLegacyNoContent) teamsAddMemberLegacyRes() {}

// TeamsAddMemberLegacyNotFound is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyNotFound struct{}

func (*TeamsAddMemberLegacyNotFound) teamsAddMemberLegacyRes() {}

// TeamsAddMemberLegacyUnprocessableEntity is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyUnprocessableEntity struct{}

func (*TeamsAddMemberLegacyUnprocessableEntity) teamsAddMemberLegacyRes() {}

// TeamsAddOrUpdateMembershipForUserInOrgForbidden is response for TeamsAddOrUpdateMembershipForUserInOrg operation.
type TeamsAddOrUpdateMembershipForUserInOrgForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgForbidden) teamsAddOrUpdateMembershipForUserInOrgRes() {}

type TeamsAddOrUpdateMembershipForUserInOrgReq struct {
	// The role that this user should have in the team. Can be one of:
	// \* `member` - a normal member of the team.
	// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
	// members to team maintainer, and edit the team's name and description.
	Role OptTeamsAddOrUpdateMembershipForUserInOrgReqRole "json:\"role\""
}

// The role that this user should have in the team. Can be one of:
// \* `member` - a normal member of the team.
// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
// members to team maintainer, and edit the team's name and description.
type TeamsAddOrUpdateMembershipForUserInOrgReqRole string

const (
	TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember     TeamsAddOrUpdateMembershipForUserInOrgReqRole = "member"
	TeamsAddOrUpdateMembershipForUserInOrgReqRoleMaintainer TeamsAddOrUpdateMembershipForUserInOrgReqRole = "maintainer"
)

// TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity is response for TeamsAddOrUpdateMembershipForUserInOrg operation.
type TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) teamsAddOrUpdateMembershipForUserInOrgRes() {
}

// TeamsAddOrUpdateMembershipForUserLegacyForbidden is response for TeamsAddOrUpdateMembershipForUserLegacy operation.
type TeamsAddOrUpdateMembershipForUserLegacyForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyForbidden) teamsAddOrUpdateMembershipForUserLegacyRes() {
}

type TeamsAddOrUpdateMembershipForUserLegacyReq struct {
	// The role that this user should have in the team. Can be one of:
	// \* `member` - a normal member of the team.
	// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
	// members to team maintainer, and edit the team's name and description.
	Role OptTeamsAddOrUpdateMembershipForUserLegacyReqRole "json:\"role\""
}

// The role that this user should have in the team. Can be one of:
// \* `member` - a normal member of the team.
// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
// members to team maintainer, and edit the team's name and description.
type TeamsAddOrUpdateMembershipForUserLegacyReqRole string

const (
	TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember     TeamsAddOrUpdateMembershipForUserLegacyReqRole = "member"
	TeamsAddOrUpdateMembershipForUserLegacyReqRoleMaintainer TeamsAddOrUpdateMembershipForUserLegacyReqRole = "maintainer"
)

// TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity is response for TeamsAddOrUpdateMembershipForUserLegacy operation.
type TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) teamsAddOrUpdateMembershipForUserLegacyRes() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*TeamsAddOrUpdateProjectPermissionsInOrgForbidden) teamsAddOrUpdateProjectPermissionsInOrgRes() {
}

// TeamsAddOrUpdateProjectPermissionsInOrgNoContent is response for TeamsAddOrUpdateProjectPermissionsInOrg operation.
type TeamsAddOrUpdateProjectPermissionsInOrgNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsInOrgNoContent) teamsAddOrUpdateProjectPermissionsInOrgRes() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgReq struct {
	// The permission to grant to the team for this project. Can be one of:
	// \* `read` - team members can read, but not write to or administer this project.
	// \* `write` - team members can read and write, but not administer this project.
	// \* `admin` - team members can read, write and administer this project.
	// Default: the team's `permission` attribute will be used to determine what permission to grant the
	// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
	// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
	// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
	Permission OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission "json:\"permission\""
}

// The permission to grant to the team for this project. Can be one of:
// \* `read` - team members can read, but not write to or administer this project.
// \* `write` - team members can read and write, but not administer this project.
// \* `admin` - team members can read, write and administer this project.
// Default: the team's `permission` attribute will be used to determine what permission to grant the
// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
type TeamsAddOrUpdateProjectPermissionsInOrgReqPermission string

const (
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead  TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "read"
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionWrite TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "write"
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionAdmin TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "admin"
)

type TeamsAddOrUpdateProjectPermissionsLegacyForbidden struct {
	Message          OptString "json:\"message\""
	DocumentationURL OptString "json:\"documentation_url\""
}

func (*TeamsAddOrUpdateProjectPermissionsLegacyForbidden) teamsAddOrUpdateProjectPermissionsLegacyRes() {
}

// TeamsAddOrUpdateProjectPermissionsLegacyNoContent is response for TeamsAddOrUpdateProjectPermissionsLegacy operation.
type TeamsAddOrUpdateProjectPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsLegacyNoContent) teamsAddOrUpdateProjectPermissionsLegacyRes() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyReq struct {
	// The permission to grant to the team for this project. Can be one of:
	// \* `read` - team members can read, but not write to or administer this project.
	// \* `write` - team members can read and write, but not administer this project.
	// \* `admin` - team members can read, write and administer this project.
	// Default: the team's `permission` attribute will be used to determine what permission to grant the
	// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
	// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
	// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
	Permission OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission "json:\"permission\""
}

// The permission to grant to the team for this project. Can be one of:
// \* `read` - team members can read, but not write to or administer this project.
// \* `write` - team members can read and write, but not administer this project.
// \* `admin` - team members can read, write and administer this project.
// Default: the team's `permission` attribute will be used to determine what permission to grant the
// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
type TeamsAddOrUpdateProjectPermissionsLegacyReqPermission string

const (
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead  TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "read"
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionWrite TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "write"
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionAdmin TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "admin"
)

// TeamsAddOrUpdateRepoPermissionsInOrgNoContent is response for TeamsAddOrUpdateRepoPermissionsInOrg operation.
type TeamsAddOrUpdateRepoPermissionsInOrgNoContent struct{}

type TeamsAddOrUpdateRepoPermissionsInOrgReq struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	// \* `maintain` - team members can manage the repository without access to sensitive or destructive
	// actions. Recommended for project managers. Only applies to repositories owned by organizations.
	// \* `triage` - team members can proactively manage issues and pull requests without write access.
	// Recommended for contributors who triage a repository. Only applies to repositories owned by
	// organizations.
	// If no permission is specified, the team's `permission` attribute will be used to determine what
	// permission to grant the team on this repository.
	Permission OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission "json:\"permission\""
}

// The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
// \* `maintain` - team members can manage the repository without access to sensitive or destructive
// actions. Recommended for project managers. Only applies to repositories owned by organizations.
// \* `triage` - team members can proactively manage issues and pull requests without write access.
// Recommended for contributors who triage a repository. Only applies to repositories owned by
// organizations.
// If no permission is specified, the team's `permission` attribute will be used to determine what
// permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsInOrgReqPermission string

const (
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull     TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPush     TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "push"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionAdmin    TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "admin"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionMaintain TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "maintain"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionTriage   TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "triage"
)

// TeamsAddOrUpdateRepoPermissionsLegacyNoContent is response for TeamsAddOrUpdateRepoPermissionsLegacy operation.
type TeamsAddOrUpdateRepoPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateRepoPermissionsLegacyNoContent) teamsAddOrUpdateRepoPermissionsLegacyRes() {}

type TeamsAddOrUpdateRepoPermissionsLegacyReq struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	// If no permission is specified, the team's `permission` attribute will be used to determine what
	// permission to grant the team on this repository.
	Permission OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission "json:\"permission\""
}

// The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
// If no permission is specified, the team's `permission` attribute will be used to determine what
// permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsLegacyReqPermission string

const (
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull  TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPush  TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "push"
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionAdmin TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "admin"
)

// TeamsCheckPermissionsForProjectInOrgNotFound is response for TeamsCheckPermissionsForProjectInOrg operation.
type TeamsCheckPermissionsForProjectInOrgNotFound struct{}

func (*TeamsCheckPermissionsForProjectInOrgNotFound) teamsCheckPermissionsForProjectInOrgRes() {}

// TeamsCheckPermissionsForProjectLegacyNotFound is response for TeamsCheckPermissionsForProjectLegacy operation.
type TeamsCheckPermissionsForProjectLegacyNotFound struct{}

func (*TeamsCheckPermissionsForProjectLegacyNotFound) teamsCheckPermissionsForProjectLegacyRes() {}

// TeamsCheckPermissionsForRepoInOrgNoContent is response for TeamsCheckPermissionsForRepoInOrg operation.
type TeamsCheckPermissionsForRepoInOrgNoContent struct{}

func (*TeamsCheckPermissionsForRepoInOrgNoContent) teamsCheckPermissionsForRepoInOrgRes() {}

// TeamsCheckPermissionsForRepoInOrgNotFound is response for TeamsCheckPermissionsForRepoInOrg operation.
type TeamsCheckPermissionsForRepoInOrgNotFound struct{}

func (*TeamsCheckPermissionsForRepoInOrgNotFound) teamsCheckPermissionsForRepoInOrgRes() {}

// TeamsCheckPermissionsForRepoLegacyNoContent is response for TeamsCheckPermissionsForRepoLegacy operation.
type TeamsCheckPermissionsForRepoLegacyNoContent struct{}

func (*TeamsCheckPermissionsForRepoLegacyNoContent) teamsCheckPermissionsForRepoLegacyRes() {}

// TeamsCheckPermissionsForRepoLegacyNotFound is response for TeamsCheckPermissionsForRepoLegacy operation.
type TeamsCheckPermissionsForRepoLegacyNotFound struct{}

func (*TeamsCheckPermissionsForRepoLegacyNotFound) teamsCheckPermissionsForRepoLegacyRes() {}

type TeamsCreateDiscussionCommentInOrgReq struct {
	// The discussion comment's body text.
	Body string "json:\"body\""
}

type TeamsCreateDiscussionCommentLegacyReq struct {
	// The discussion comment's body text.
	Body string "json:\"body\""
}

type TeamsCreateDiscussionInOrgReq struct {
	// The discussion post's title.
	Title string "json:\"title\""
	// The discussion post's body text.
	Body string "json:\"body\""
	// Private posts are only visible to team members, organization owners, and team maintainers. Public
	// posts are visible to all members of the organization. Set to `true` to create a private post.
	Private OptBool "json:\"private\""
}

type TeamsCreateDiscussionLegacyReq struct {
	// The discussion post's title.
	Title string "json:\"title\""
	// The discussion post's body text.
	Body string "json:\"body\""
	// Private posts are only visible to team members, organization owners, and team maintainers. Public
	// posts are visible to all members of the organization. Set to `true` to create a private post.
	Private OptBool "json:\"private\""
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will
	// replace the original one. You must include any existing groups that you don't want to remove.
	Groups          []TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem "json:\"groups\""
	AdditionalProps TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqAdditional
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqAdditional map[string]jx.Raw

func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqAdditional) init() TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem struct {
	// ID of the IdP group.
	GroupID string "json:\"group_id\""
	// Name of the IdP group.
	GroupName string "json:\"group_name\""
	// Description of the IdP group.
	GroupDescription string "json:\"group_description\""
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will
	// replace the original one. You must include any existing groups that you don't want to remove.
	Groups   []TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem "json:\"groups\""
	SyncedAt OptString                                                   "json:\"synced_at\""
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem struct {
	// ID of the IdP group.
	GroupID string "json:\"group_id\""
	// Name of the IdP group.
	GroupName string "json:\"group_name\""
	// Description of the IdP group.
	GroupDescription string    "json:\"group_description\""
	ID               OptString "json:\"id\""
	Name             OptString "json:\"name\""
	Description      OptString "json:\"description\""
}

type TeamsCreateReq struct {
	// The name of the team.
	Name string "json:\"name\""
	// The description of the team.
	Description OptString "json:\"description\""
	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers []string "json:\"maintainers\""
	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames []string "json:\"repo_names\""
	// The level of privacy this team should have. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// Default: `secret`
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	// Default for child team: `closed`.
	Privacy OptTeamsCreateReqPrivacy "json:\"privacy\""
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsCreateReqPermission "json:\"permission\""
	// The ID of a team to set as the parent team.
	ParentTeamID OptInt "json:\"parent_team_id\""
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsCreateReqPermission string

const (
	TeamsCreateReqPermissionPull  TeamsCreateReqPermission = "pull"
	TeamsCreateReqPermissionPush  TeamsCreateReqPermission = "push"
	TeamsCreateReqPermissionAdmin TeamsCreateReqPermission = "admin"
)

// The level of privacy this team should have. The options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// Default: `secret`
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
// Default for child team: `closed`.
type TeamsCreateReqPrivacy string

const (
	TeamsCreateReqPrivacySecret TeamsCreateReqPrivacy = "secret"
	TeamsCreateReqPrivacyClosed TeamsCreateReqPrivacy = "closed"
)

// TeamsDeleteDiscussionCommentInOrgNoContent is response for TeamsDeleteDiscussionCommentInOrg operation.
type TeamsDeleteDiscussionCommentInOrgNoContent struct{}

// TeamsDeleteDiscussionCommentLegacyNoContent is response for TeamsDeleteDiscussionCommentLegacy operation.
type TeamsDeleteDiscussionCommentLegacyNoContent struct{}

// TeamsDeleteDiscussionInOrgNoContent is response for TeamsDeleteDiscussionInOrg operation.
type TeamsDeleteDiscussionInOrgNoContent struct{}

// TeamsDeleteDiscussionLegacyNoContent is response for TeamsDeleteDiscussionLegacy operation.
type TeamsDeleteDiscussionLegacyNoContent struct{}

// TeamsDeleteInOrgNoContent is response for TeamsDeleteInOrg operation.
type TeamsDeleteInOrgNoContent struct{}

// TeamsDeleteLegacyNoContent is response for TeamsDeleteLegacy operation.
type TeamsDeleteLegacyNoContent struct{}

func (*TeamsDeleteLegacyNoContent) teamsDeleteLegacyRes() {}

// TeamsGetMemberLegacyNoContent is response for TeamsGetMemberLegacy operation.
type TeamsGetMemberLegacyNoContent struct{}

func (*TeamsGetMemberLegacyNoContent) teamsGetMemberLegacyRes() {}

// TeamsGetMemberLegacyNotFound is response for TeamsGetMemberLegacy operation.
type TeamsGetMemberLegacyNotFound struct{}

func (*TeamsGetMemberLegacyNotFound) teamsGetMemberLegacyRes() {}

// TeamsGetMembershipForUserInOrgNotFound is response for TeamsGetMembershipForUserInOrg operation.
type TeamsGetMembershipForUserInOrgNotFound struct{}

func (*TeamsGetMembershipForUserInOrgNotFound) teamsGetMembershipForUserInOrgRes() {}

type TeamsListChildLegacyApplicationJSONForbidden BasicError

func (*TeamsListChildLegacyApplicationJSONForbidden) teamsListChildLegacyRes() {}

type TeamsListChildLegacyApplicationJSONNotFound BasicError

func (*TeamsListChildLegacyApplicationJSONNotFound) teamsListChildLegacyRes() {}

type TeamsListChildLegacyOKApplicationJSON []Team

func (TeamsListChildLegacyOKApplicationJSON) teamsListChildLegacyRes() {}

type TeamsListDiscussionCommentsInOrgDirection string

const (
	TeamsListDiscussionCommentsInOrgDirectionAsc  TeamsListDiscussionCommentsInOrgDirection = "asc"
	TeamsListDiscussionCommentsInOrgDirectionDesc TeamsListDiscussionCommentsInOrgDirection = "desc"
)

type TeamsListDiscussionCommentsLegacyDirection string

const (
	TeamsListDiscussionCommentsLegacyDirectionAsc  TeamsListDiscussionCommentsLegacyDirection = "asc"
	TeamsListDiscussionCommentsLegacyDirectionDesc TeamsListDiscussionCommentsLegacyDirection = "desc"
)

type TeamsListDiscussionsInOrgDirection string

const (
	TeamsListDiscussionsInOrgDirectionAsc  TeamsListDiscussionsInOrgDirection = "asc"
	TeamsListDiscussionsInOrgDirectionDesc TeamsListDiscussionsInOrgDirection = "desc"
)

type TeamsListDiscussionsLegacyDirection string

const (
	TeamsListDiscussionsLegacyDirectionAsc  TeamsListDiscussionsLegacyDirection = "asc"
	TeamsListDiscussionsLegacyDirectionDesc TeamsListDiscussionsLegacyDirection = "desc"
)

type TeamsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*TeamsListForAuthenticatedUserApplicationJSONForbidden) teamsListForAuthenticatedUserRes() {}

type TeamsListForAuthenticatedUserApplicationJSONNotFound BasicError

func (*TeamsListForAuthenticatedUserApplicationJSONNotFound) teamsListForAuthenticatedUserRes() {}

type TeamsListForAuthenticatedUserOKApplicationJSON []TeamFull

func (TeamsListForAuthenticatedUserOKApplicationJSON) teamsListForAuthenticatedUserRes() {}

type TeamsListIdpGroupsForLegacyApplicationJSONForbidden BasicError

func (*TeamsListIdpGroupsForLegacyApplicationJSONForbidden) teamsListIdpGroupsForLegacyRes() {}

type TeamsListIdpGroupsForLegacyApplicationJSONNotFound BasicError

func (*TeamsListIdpGroupsForLegacyApplicationJSONNotFound) teamsListIdpGroupsForLegacyRes() {}

type TeamsListMembersInOrgRole string

const (
	TeamsListMembersInOrgRoleMember     TeamsListMembersInOrgRole = "member"
	TeamsListMembersInOrgRoleMaintainer TeamsListMembersInOrgRole = "maintainer"
	TeamsListMembersInOrgRoleAll        TeamsListMembersInOrgRole = "all"
)

type TeamsListMembersLegacyOKApplicationJSON []SimpleUser

func (TeamsListMembersLegacyOKApplicationJSON) teamsListMembersLegacyRes() {}

type TeamsListMembersLegacyRole string

const (
	TeamsListMembersLegacyRoleMember     TeamsListMembersLegacyRole = "member"
	TeamsListMembersLegacyRoleMaintainer TeamsListMembersLegacyRole = "maintainer"
	TeamsListMembersLegacyRoleAll        TeamsListMembersLegacyRole = "all"
)

type TeamsListOKApplicationJSON []Team

func (TeamsListOKApplicationJSON) teamsListRes() {}

type TeamsListProjectsLegacyOKApplicationJSON []TeamProject

func (TeamsListProjectsLegacyOKApplicationJSON) teamsListProjectsLegacyRes() {}

type TeamsListReposLegacyOKApplicationJSON []MinimalRepository

func (TeamsListReposLegacyOKApplicationJSON) teamsListReposLegacyRes() {}

// TeamsRemoveMemberLegacyNoContent is response for TeamsRemoveMemberLegacy operation.
type TeamsRemoveMemberLegacyNoContent struct{}

func (*TeamsRemoveMemberLegacyNoContent) teamsRemoveMemberLegacyRes() {}

// TeamsRemoveMemberLegacyNotFound is response for TeamsRemoveMemberLegacy operation.
type TeamsRemoveMemberLegacyNotFound struct{}

func (*TeamsRemoveMemberLegacyNotFound) teamsRemoveMemberLegacyRes() {}

// TeamsRemoveMembershipForUserInOrgForbidden is response for TeamsRemoveMembershipForUserInOrg operation.
type TeamsRemoveMembershipForUserInOrgForbidden struct{}

func (*TeamsRemoveMembershipForUserInOrgForbidden) teamsRemoveMembershipForUserInOrgRes() {}

// TeamsRemoveMembershipForUserInOrgNoContent is response for TeamsRemoveMembershipForUserInOrg operation.
type TeamsRemoveMembershipForUserInOrgNoContent struct{}

func (*TeamsRemoveMembershipForUserInOrgNoContent) teamsRemoveMembershipForUserInOrgRes() {}

// TeamsRemoveMembershipForUserLegacyForbidden is response for TeamsRemoveMembershipForUserLegacy operation.
type TeamsRemoveMembershipForUserLegacyForbidden struct{}

func (*TeamsRemoveMembershipForUserLegacyForbidden) teamsRemoveMembershipForUserLegacyRes() {}

// TeamsRemoveMembershipForUserLegacyNoContent is response for TeamsRemoveMembershipForUserLegacy operation.
type TeamsRemoveMembershipForUserLegacyNoContent struct{}

func (*TeamsRemoveMembershipForUserLegacyNoContent) teamsRemoveMembershipForUserLegacyRes() {}

// TeamsRemoveProjectInOrgNoContent is response for TeamsRemoveProjectInOrg operation.
type TeamsRemoveProjectInOrgNoContent struct{}

// TeamsRemoveProjectLegacyNoContent is response for TeamsRemoveProjectLegacy operation.
type TeamsRemoveProjectLegacyNoContent struct{}

func (*TeamsRemoveProjectLegacyNoContent) teamsRemoveProjectLegacyRes() {}

// TeamsRemoveRepoInOrgNoContent is response for TeamsRemoveRepoInOrg operation.
type TeamsRemoveRepoInOrgNoContent struct{}

// TeamsRemoveRepoLegacyNoContent is response for TeamsRemoveRepoLegacy operation.
type TeamsRemoveRepoLegacyNoContent struct{}

type TeamsUpdateDiscussionCommentInOrgReq struct {
	// The discussion comment's body text.
	Body string "json:\"body\""
}

type TeamsUpdateDiscussionCommentLegacyReq struct {
	// The discussion comment's body text.
	Body string "json:\"body\""
}

type TeamsUpdateDiscussionInOrgReq struct {
	// The discussion post's title.
	Title OptString "json:\"title\""
	// The discussion post's body text.
	Body OptString "json:\"body\""
}

type TeamsUpdateDiscussionLegacyReq struct {
	// The discussion post's title.
	Title OptString "json:\"title\""
	// The discussion post's body text.
	Body OptString "json:\"body\""
}

type TeamsUpdateInOrgReq struct {
	// The name of the team.
	Name OptString "json:\"name\""
	// The description of the team.
	Description OptString "json:\"description\""
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves
	// `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The
	// options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy OptTeamsUpdateInOrgReqPrivacy "json:\"privacy\""
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsUpdateInOrgReqPermission "json:\"permission\""
	// The ID of a team to set as the parent team.
	ParentTeamID OptNilInt "json:\"parent_team_id\""
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsUpdateInOrgReqPermission string

const (
	TeamsUpdateInOrgReqPermissionPull  TeamsUpdateInOrgReqPermission = "pull"
	TeamsUpdateInOrgReqPermissionPush  TeamsUpdateInOrgReqPermission = "push"
	TeamsUpdateInOrgReqPermissionAdmin TeamsUpdateInOrgReqPermission = "admin"
)

// The level of privacy this team should have. Editing teams without specifying this parameter leaves
// `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The
// options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
type TeamsUpdateInOrgReqPrivacy string

const (
	TeamsUpdateInOrgReqPrivacySecret TeamsUpdateInOrgReqPrivacy = "secret"
	TeamsUpdateInOrgReqPrivacyClosed TeamsUpdateInOrgReqPrivacy = "closed"
)

type TeamsUpdateLegacyApplicationJSONCreated TeamFull

func (*TeamsUpdateLegacyApplicationJSONCreated) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyApplicationJSONForbidden BasicError

func (*TeamsUpdateLegacyApplicationJSONForbidden) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyApplicationJSONNotFound BasicError

func (*TeamsUpdateLegacyApplicationJSONNotFound) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyApplicationJSONOK TeamFull

func (*TeamsUpdateLegacyApplicationJSONOK) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyReq struct {
	// The name of the team.
	Name string "json:\"name\""
	// The description of the team.
	Description OptString "json:\"description\""
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves
	// `privacy` intact. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy OptTeamsUpdateLegacyReqPrivacy "json:\"privacy\""
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsUpdateLegacyReqPermission "json:\"permission\""
	// The ID of a team to set as the parent team.
	ParentTeamID OptNilInt "json:\"parent_team_id\""
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsUpdateLegacyReqPermission string

const (
	TeamsUpdateLegacyReqPermissionPull  TeamsUpdateLegacyReqPermission = "pull"
	TeamsUpdateLegacyReqPermissionPush  TeamsUpdateLegacyReqPermission = "push"
	TeamsUpdateLegacyReqPermissionAdmin TeamsUpdateLegacyReqPermission = "admin"
)

// The level of privacy this team should have. Editing teams without specifying this parameter leaves
// `privacy` intact. The options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
type TeamsUpdateLegacyReqPrivacy string

const (
	TeamsUpdateLegacyReqPrivacySecret TeamsUpdateLegacyReqPrivacy = "secret"
	TeamsUpdateLegacyReqPrivacyClosed TeamsUpdateLegacyReqPrivacy = "closed"
)

// Thread.
// Ref: #/components/schemas/thread
type Thread struct {
	ID              string            "json:\"id\""
	Repository      MinimalRepository "json:\"repository\""
	Subject         ThreadSubject     "json:\"subject\""
	Reason          string            "json:\"reason\""
	Unread          bool              "json:\"unread\""
	UpdatedAt       string            "json:\"updated_at\""
	LastReadAt      NilString         "json:\"last_read_at\""
	URL             string            "json:\"url\""
	SubscriptionURL string            "json:\"subscription_url\""
}

func (*Thread) activityGetThreadRes() {}

type ThreadSubject struct {
	Title            string "json:\"title\""
	URL              string "json:\"url\""
	LatestCommentURL string "json:\"latest_comment_url\""
	Type             string "json:\"type\""
}

// Thread Subscription.
// Ref: #/components/schemas/thread-subscription
type ThreadSubscription struct {
	Subscribed    bool        "json:\"subscribed\""
	Ignored       bool        "json:\"ignored\""
	Reason        NilString   "json:\"reason\""
	CreatedAt     NilDateTime "json:\"created_at\""
	URL           url.URL     "json:\"url\""
	ThreadURL     OptURI      "json:\"thread_url\""
	RepositoryURL OptURI      "json:\"repository_url\""
}

func (*ThreadSubscription) activityGetThreadSubscriptionForAuthenticatedUserRes() {}
func (*ThreadSubscription) activitySetThreadSubscriptionRes()                     {}

// A topic aggregates entities that are related to a subject.
// Ref: #/components/schemas/topic
type Topic struct {
	Names []string "json:\"names\""
}

func (*Topic) reposGetAllTopicsRes()     {}
func (*Topic) reposReplaceAllTopicsRes() {}

// Topic Search Result Item.
// Ref: #/components/schemas/topic-search-result-item
type TopicSearchResultItem struct {
	Name             string                                      "json:\"name\""
	DisplayName      NilString                                   "json:\"display_name\""
	ShortDescription NilString                                   "json:\"short_description\""
	Description      NilString                                   "json:\"description\""
	CreatedBy        NilString                                   "json:\"created_by\""
	Released         NilString                                   "json:\"released\""
	CreatedAt        time.Time                                   "json:\"created_at\""
	UpdatedAt        time.Time                                   "json:\"updated_at\""
	Featured         bool                                        "json:\"featured\""
	Curated          bool                                        "json:\"curated\""
	Score            float64                                     "json:\"score\""
	RepositoryCount  OptNilInt                                   "json:\"repository_count\""
	LogoURL          OptNilURI                                   "json:\"logo_url\""
	TextMatches      *SearchResultTextMatches                    "json:\"text_matches\""
	Related          OptNilTopicSearchResultItemRelatedItemArray "json:\"related\""
	Aliases          OptNilTopicSearchResultItemAliasesItemArray "json:\"aliases\""
}

type TopicSearchResultItemAliasesItem struct {
	TopicRelation OptTopicSearchResultItemAliasesItemTopicRelation "json:\"topic_relation\""
}

type TopicSearchResultItemAliasesItemTopicRelation struct {
	ID           OptInt    "json:\"id\""
	Name         OptString "json:\"name\""
	TopicID      OptInt    "json:\"topic_id\""
	RelationType OptString "json:\"relation_type\""
}

type TopicSearchResultItemRelatedItem struct {
	TopicRelation OptTopicSearchResultItemRelatedItemTopicRelation "json:\"topic_relation\""
}

type TopicSearchResultItemRelatedItemTopicRelation struct {
	ID           OptInt    "json:\"id\""
	Name         OptString "json:\"name\""
	TopicID      OptInt    "json:\"topic_id\""
	RelationType OptString "json:\"relation_type\""
}

// Ref: #/components/schemas/traffic
type Traffic struct {
	Timestamp time.Time "json:\"timestamp\""
	Uniques   int       "json:\"uniques\""
	Count     int       "json:\"count\""
}

// User Marketplace Purchase.
// Ref: #/components/schemas/user-marketplace-purchase
type UserMarketplacePurchase struct {
	BillingCycle    string                 "json:\"billing_cycle\""
	NextBillingDate NilDateTime            "json:\"next_billing_date\""
	UnitCount       NilInt                 "json:\"unit_count\""
	OnFreeTrial     bool                   "json:\"on_free_trial\""
	FreeTrialEndsOn NilDateTime            "json:\"free_trial_ends_on\""
	UpdatedAt       NilDateTime            "json:\"updated_at\""
	Account         MarketplaceAccount     "json:\"account\""
	Plan            MarketplaceListingPlan "json:\"plan\""
}

// User Search Result Item.
// Ref: #/components/schemas/user-search-result-item
type UserSearchResultItem struct {
	Login             string                   "json:\"login\""
	ID                int                      "json:\"id\""
	NodeID            string                   "json:\"node_id\""
	AvatarURL         url.URL                  "json:\"avatar_url\""
	GravatarID        NilString                "json:\"gravatar_id\""
	URL               url.URL                  "json:\"url\""
	HTMLURL           url.URL                  "json:\"html_url\""
	FollowersURL      url.URL                  "json:\"followers_url\""
	SubscriptionsURL  url.URL                  "json:\"subscriptions_url\""
	OrganizationsURL  url.URL                  "json:\"organizations_url\""
	ReposURL          url.URL                  "json:\"repos_url\""
	ReceivedEventsURL url.URL                  "json:\"received_events_url\""
	Type              string                   "json:\"type\""
	Score             float64                  "json:\"score\""
	FollowingURL      string                   "json:\"following_url\""
	GistsURL          string                   "json:\"gists_url\""
	StarredURL        string                   "json:\"starred_url\""
	EventsURL         string                   "json:\"events_url\""
	PublicRepos       OptInt                   "json:\"public_repos\""
	PublicGists       OptInt                   "json:\"public_gists\""
	Followers         OptInt                   "json:\"followers\""
	Following         OptInt                   "json:\"following\""
	CreatedAt         OptDateTime              "json:\"created_at\""
	UpdatedAt         OptDateTime              "json:\"updated_at\""
	Name              OptNilString             "json:\"name\""
	Bio               OptNilString             "json:\"bio\""
	Email             OptNilString             "json:\"email\""
	Location          OptNilString             "json:\"location\""
	SiteAdmin         bool                     "json:\"site_admin\""
	Hireable          OptNilBool               "json:\"hireable\""
	TextMatches       *SearchResultTextMatches "json:\"text_matches\""
	Blog              OptNilString             "json:\"blog\""
	Company           OptNilString             "json:\"company\""
	SuspendedAt       OptNilDateTime           "json:\"suspended_at\""
}

type UsersAddEmailForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersAddEmailForAuthenticatedApplicationJSONForbidden) usersAddEmailForAuthenticatedRes() {}

type UsersAddEmailForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersAddEmailForAuthenticatedApplicationJSONNotFound) usersAddEmailForAuthenticatedRes() {}

type UsersAddEmailForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersAddEmailForAuthenticatedApplicationJSONUnauthorized) usersAddEmailForAuthenticatedRes() {}

type UsersAddEmailForAuthenticatedCreatedApplicationJSON []Email

func (UsersAddEmailForAuthenticatedCreatedApplicationJSON) usersAddEmailForAuthenticatedRes() {}

// UsersAddEmailForAuthenticatedReq represents sum type.
type UsersAddEmailForAuthenticatedReq struct {
	Type                              UsersAddEmailForAuthenticatedReqType // switch on this field
	UsersAddEmailForAuthenticatedReq0 UsersAddEmailForAuthenticatedReq0
	StringArray                       []string
	String                            string
}

// UsersAddEmailForAuthenticatedReqType is oneOf type of UsersAddEmailForAuthenticatedReq.
type UsersAddEmailForAuthenticatedReqType string

// Possible values for UsersAddEmailForAuthenticatedReqType.
const (
	UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq UsersAddEmailForAuthenticatedReqType = "UsersAddEmailForAuthenticatedReq0"
	StringArrayUsersAddEmailForAuthenticatedReq                       UsersAddEmailForAuthenticatedReqType = "[]string"
	StringUsersAddEmailForAuthenticatedReq                            UsersAddEmailForAuthenticatedReqType = "string"
)

// IsUsersAddEmailForAuthenticatedReq0 reports whether UsersAddEmailForAuthenticatedReq is UsersAddEmailForAuthenticatedReq0.
func (s UsersAddEmailForAuthenticatedReq) IsUsersAddEmailForAuthenticatedReq0() bool {
	return s.Type == UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq
}

// IsStringArray reports whether UsersAddEmailForAuthenticatedReq is []string.
func (s UsersAddEmailForAuthenticatedReq) IsStringArray() bool {
	return s.Type == StringArrayUsersAddEmailForAuthenticatedReq
}

// IsString reports whether UsersAddEmailForAuthenticatedReq is string.
func (s UsersAddEmailForAuthenticatedReq) IsString() bool {
	return s.Type == StringUsersAddEmailForAuthenticatedReq
}

// SetUsersAddEmailForAuthenticatedReq0 sets UsersAddEmailForAuthenticatedReq to UsersAddEmailForAuthenticatedReq0.
func (s *UsersAddEmailForAuthenticatedReq) SetUsersAddEmailForAuthenticatedReq0(v UsersAddEmailForAuthenticatedReq0) {
	s.Type = UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq
	s.UsersAddEmailForAuthenticatedReq0 = v
}

// GetUsersAddEmailForAuthenticatedReq0 returns UsersAddEmailForAuthenticatedReq0 and true boolean if UsersAddEmailForAuthenticatedReq is UsersAddEmailForAuthenticatedReq0.
func (s UsersAddEmailForAuthenticatedReq) GetUsersAddEmailForAuthenticatedReq0() (v UsersAddEmailForAuthenticatedReq0, ok bool) {
	if !s.IsUsersAddEmailForAuthenticatedReq0() {
		return v, false
	}
	return s.UsersAddEmailForAuthenticatedReq0, true
}

// NewUsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from UsersAddEmailForAuthenticatedReq0.
func NewUsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq(v UsersAddEmailForAuthenticatedReq0) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetUsersAddEmailForAuthenticatedReq0(v)
	return s
}

// SetStringArray sets UsersAddEmailForAuthenticatedReq to []string.
func (s *UsersAddEmailForAuthenticatedReq) SetStringArray(v []string) {
	s.Type = StringArrayUsersAddEmailForAuthenticatedReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UsersAddEmailForAuthenticatedReq is []string.
func (s UsersAddEmailForAuthenticatedReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from []string.
func NewStringArrayUsersAddEmailForAuthenticatedReq(v []string) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetStringArray(v)
	return s
}

// SetString sets UsersAddEmailForAuthenticatedReq to string.
func (s *UsersAddEmailForAuthenticatedReq) SetString(v string) {
	s.Type = StringUsersAddEmailForAuthenticatedReq
	s.String = v
}

// GetString returns string and true boolean if UsersAddEmailForAuthenticatedReq is string.
func (s UsersAddEmailForAuthenticatedReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from string.
func NewStringUsersAddEmailForAuthenticatedReq(v string) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetString(v)
	return s
}

type UsersAddEmailForAuthenticatedReq0 struct {
	// Adds one or more email addresses to your GitHub account. Must contain at least one email address.
	// **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses
	// directly, but we recommend that you pass an object using the `emails` key.
	Emails []string "json:\"emails\""
}

type UsersBlockApplicationJSONForbidden BasicError

func (*UsersBlockApplicationJSONForbidden) usersBlockRes() {}

type UsersBlockApplicationJSONNotFound BasicError

func (*UsersBlockApplicationJSONNotFound) usersBlockRes() {}

type UsersBlockApplicationJSONUnauthorized BasicError

func (*UsersBlockApplicationJSONUnauthorized) usersBlockRes() {}

// UsersBlockNoContent is response for UsersBlock operation.
type UsersBlockNoContent struct{}

func (*UsersBlockNoContent) usersBlockRes() {}

type UsersCheckBlockedApplicationJSONForbidden BasicError

func (*UsersCheckBlockedApplicationJSONForbidden) usersCheckBlockedRes() {}

type UsersCheckBlockedApplicationJSONNotFound BasicError

func (*UsersCheckBlockedApplicationJSONNotFound) usersCheckBlockedRes() {}

type UsersCheckBlockedApplicationJSONUnauthorized BasicError

func (*UsersCheckBlockedApplicationJSONUnauthorized) usersCheckBlockedRes() {}

// UsersCheckBlockedNoContent is response for UsersCheckBlocked operation.
type UsersCheckBlockedNoContent struct{}

func (*UsersCheckBlockedNoContent) usersCheckBlockedRes() {}

// UsersCheckFollowingForUserNoContent is response for UsersCheckFollowingForUser operation.
type UsersCheckFollowingForUserNoContent struct{}

func (*UsersCheckFollowingForUserNoContent) usersCheckFollowingForUserRes() {}

// UsersCheckFollowingForUserNotFound is response for UsersCheckFollowingForUser operation.
type UsersCheckFollowingForUserNotFound struct{}

func (*UsersCheckFollowingForUserNotFound) usersCheckFollowingForUserRes() {}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

// UsersCheckPersonIsFollowedByAuthenticatedNoContent is response for UsersCheckPersonIsFollowedByAuthenticated operation.
type UsersCheckPersonIsFollowedByAuthenticatedNoContent struct{}

func (*UsersCheckPersonIsFollowedByAuthenticatedNoContent) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden) usersCreateGpgKeyForAuthenticatedRes() {
}

type UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound) usersCreateGpgKeyForAuthenticatedRes() {
}

type UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized) usersCreateGpgKeyForAuthenticatedRes() {
}

type UsersCreateGpgKeyForAuthenticatedReq struct {
	// A GPG key in ASCII-armored format.
	ArmoredPublicKey string "json:\"armored_public_key\""
}

type UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersCreatePublicSSHKeyForAuthenticatedReq struct {
	// A descriptive name for the new key.
	Title OptString "json:\"title\""
	// The public SSH key to add to your GitHub account.
	Key string "json:\"key\""
}

type UsersDeleteEmailForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersDeleteEmailForAuthenticatedApplicationJSONForbidden) usersDeleteEmailForAuthenticatedRes() {
}

type UsersDeleteEmailForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersDeleteEmailForAuthenticatedApplicationJSONNotFound) usersDeleteEmailForAuthenticatedRes() {
}

type UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized) usersDeleteEmailForAuthenticatedRes() {
}

// UsersDeleteEmailForAuthenticatedNoContent is response for UsersDeleteEmailForAuthenticated operation.
type UsersDeleteEmailForAuthenticatedNoContent struct{}

func (*UsersDeleteEmailForAuthenticatedNoContent) usersDeleteEmailForAuthenticatedRes() {}

// UsersDeleteEmailForAuthenticatedReq represents sum type.
type UsersDeleteEmailForAuthenticatedReq struct {
	Type                                 UsersDeleteEmailForAuthenticatedReqType // switch on this field
	UsersDeleteEmailForAuthenticatedReq0 UsersDeleteEmailForAuthenticatedReq0
	StringArray                          []string
	String                               string
}

// UsersDeleteEmailForAuthenticatedReqType is oneOf type of UsersDeleteEmailForAuthenticatedReq.
type UsersDeleteEmailForAuthenticatedReqType string

// Possible values for UsersDeleteEmailForAuthenticatedReqType.
const (
	UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq UsersDeleteEmailForAuthenticatedReqType = "UsersDeleteEmailForAuthenticatedReq0"
	StringArrayUsersDeleteEmailForAuthenticatedReq                          UsersDeleteEmailForAuthenticatedReqType = "[]string"
	StringUsersDeleteEmailForAuthenticatedReq                               UsersDeleteEmailForAuthenticatedReqType = "string"
)

// IsUsersDeleteEmailForAuthenticatedReq0 reports whether UsersDeleteEmailForAuthenticatedReq is UsersDeleteEmailForAuthenticatedReq0.
func (s UsersDeleteEmailForAuthenticatedReq) IsUsersDeleteEmailForAuthenticatedReq0() bool {
	return s.Type == UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq
}

// IsStringArray reports whether UsersDeleteEmailForAuthenticatedReq is []string.
func (s UsersDeleteEmailForAuthenticatedReq) IsStringArray() bool {
	return s.Type == StringArrayUsersDeleteEmailForAuthenticatedReq
}

// IsString reports whether UsersDeleteEmailForAuthenticatedReq is string.
func (s UsersDeleteEmailForAuthenticatedReq) IsString() bool {
	return s.Type == StringUsersDeleteEmailForAuthenticatedReq
}

// SetUsersDeleteEmailForAuthenticatedReq0 sets UsersDeleteEmailForAuthenticatedReq to UsersDeleteEmailForAuthenticatedReq0.
func (s *UsersDeleteEmailForAuthenticatedReq) SetUsersDeleteEmailForAuthenticatedReq0(v UsersDeleteEmailForAuthenticatedReq0) {
	s.Type = UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq
	s.UsersDeleteEmailForAuthenticatedReq0 = v
}

// GetUsersDeleteEmailForAuthenticatedReq0 returns UsersDeleteEmailForAuthenticatedReq0 and true boolean if UsersDeleteEmailForAuthenticatedReq is UsersDeleteEmailForAuthenticatedReq0.
func (s UsersDeleteEmailForAuthenticatedReq) GetUsersDeleteEmailForAuthenticatedReq0() (v UsersDeleteEmailForAuthenticatedReq0, ok bool) {
	if !s.IsUsersDeleteEmailForAuthenticatedReq0() {
		return v, false
	}
	return s.UsersDeleteEmailForAuthenticatedReq0, true
}

// NewUsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from UsersDeleteEmailForAuthenticatedReq0.
func NewUsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq(v UsersDeleteEmailForAuthenticatedReq0) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetUsersDeleteEmailForAuthenticatedReq0(v)
	return s
}

// SetStringArray sets UsersDeleteEmailForAuthenticatedReq to []string.
func (s *UsersDeleteEmailForAuthenticatedReq) SetStringArray(v []string) {
	s.Type = StringArrayUsersDeleteEmailForAuthenticatedReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UsersDeleteEmailForAuthenticatedReq is []string.
func (s UsersDeleteEmailForAuthenticatedReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from []string.
func NewStringArrayUsersDeleteEmailForAuthenticatedReq(v []string) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetStringArray(v)
	return s
}

// SetString sets UsersDeleteEmailForAuthenticatedReq to string.
func (s *UsersDeleteEmailForAuthenticatedReq) SetString(v string) {
	s.Type = StringUsersDeleteEmailForAuthenticatedReq
	s.String = v
}

// GetString returns string and true boolean if UsersDeleteEmailForAuthenticatedReq is string.
func (s UsersDeleteEmailForAuthenticatedReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from string.
func NewStringUsersDeleteEmailForAuthenticatedReq(v string) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetString(v)
	return s
}

// Deletes one or more email addresses from your GitHub account. Must contain at least one email
// address. **Note:** Alternatively, you can pass a single email address or an `array` of emails
// addresses directly, but we recommend that you pass an object using the `emails` key.
type UsersDeleteEmailForAuthenticatedReq0 struct {
	// Email addresses associated with the GitHub user account.
	Emails []string "json:\"emails\""
}

type UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden) usersDeleteGpgKeyForAuthenticatedRes() {
}

type UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound) usersDeleteGpgKeyForAuthenticatedRes() {
}

type UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized) usersDeleteGpgKeyForAuthenticatedRes() {
}

// UsersDeleteGpgKeyForAuthenticatedNoContent is response for UsersDeleteGpgKeyForAuthenticated operation.
type UsersDeleteGpgKeyForAuthenticatedNoContent struct{}

func (*UsersDeleteGpgKeyForAuthenticatedNoContent) usersDeleteGpgKeyForAuthenticatedRes() {}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

// UsersDeletePublicSSHKeyForAuthenticatedNoContent is response for UsersDeletePublicSSHKeyForAuthenticated operation.
type UsersDeletePublicSSHKeyForAuthenticatedNoContent struct{}

func (*UsersDeletePublicSSHKeyForAuthenticatedNoContent) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersFollowApplicationJSONForbidden BasicError

func (*UsersFollowApplicationJSONForbidden) usersFollowRes() {}

type UsersFollowApplicationJSONNotFound BasicError

func (*UsersFollowApplicationJSONNotFound) usersFollowRes() {}

type UsersFollowApplicationJSONUnauthorized BasicError

func (*UsersFollowApplicationJSONUnauthorized) usersFollowRes() {}

// UsersFollowNoContent is response for UsersFollow operation.
type UsersFollowNoContent struct{}

func (*UsersFollowNoContent) usersFollowRes() {}

type UsersGetAuthenticatedApplicationJSONForbidden BasicError

func (*UsersGetAuthenticatedApplicationJSONForbidden) usersGetAuthenticatedRes() {}

type UsersGetAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersGetAuthenticatedApplicationJSONUnauthorized) usersGetAuthenticatedRes() {}

// UsersGetAuthenticatedOK represents sum type.
type UsersGetAuthenticatedOK struct {
	Type        UsersGetAuthenticatedOKType // switch on this field
	PrivateUser PrivateUser
	PublicUser  PublicUser
}

// UsersGetAuthenticatedOKType is oneOf type of UsersGetAuthenticatedOK.
type UsersGetAuthenticatedOKType string

// Possible values for UsersGetAuthenticatedOKType.
const (
	PrivateUserUsersGetAuthenticatedOK UsersGetAuthenticatedOKType = "PrivateUser"
	PublicUserUsersGetAuthenticatedOK  UsersGetAuthenticatedOKType = "PublicUser"
)

// IsPrivateUser reports whether UsersGetAuthenticatedOK is PrivateUser.
func (s UsersGetAuthenticatedOK) IsPrivateUser() bool {
	return s.Type == PrivateUserUsersGetAuthenticatedOK
}

// IsPublicUser reports whether UsersGetAuthenticatedOK is PublicUser.
func (s UsersGetAuthenticatedOK) IsPublicUser() bool {
	return s.Type == PublicUserUsersGetAuthenticatedOK
}

// SetPrivateUser sets UsersGetAuthenticatedOK to PrivateUser.
func (s *UsersGetAuthenticatedOK) SetPrivateUser(v PrivateUser) {
	s.Type = PrivateUserUsersGetAuthenticatedOK
	s.PrivateUser = v
}

// GetPrivateUser returns PrivateUser and true boolean if UsersGetAuthenticatedOK is PrivateUser.
func (s UsersGetAuthenticatedOK) GetPrivateUser() (v PrivateUser, ok bool) {
	if !s.IsPrivateUser() {
		return v, false
	}
	return s.PrivateUser, true
}

// NewPrivateUserUsersGetAuthenticatedOK returns new UsersGetAuthenticatedOK from PrivateUser.
func NewPrivateUserUsersGetAuthenticatedOK(v PrivateUser) UsersGetAuthenticatedOK {
	var s UsersGetAuthenticatedOK
	s.SetPrivateUser(v)
	return s
}

// SetPublicUser sets UsersGetAuthenticatedOK to PublicUser.
func (s *UsersGetAuthenticatedOK) SetPublicUser(v PublicUser) {
	s.Type = PublicUserUsersGetAuthenticatedOK
	s.PublicUser = v
}

// GetPublicUser returns PublicUser and true boolean if UsersGetAuthenticatedOK is PublicUser.
func (s UsersGetAuthenticatedOK) GetPublicUser() (v PublicUser, ok bool) {
	if !s.IsPublicUser() {
		return v, false
	}
	return s.PublicUser, true
}

// NewPublicUserUsersGetAuthenticatedOK returns new UsersGetAuthenticatedOK from PublicUser.
func NewPublicUserUsersGetAuthenticatedOK(v PublicUser) UsersGetAuthenticatedOK {
	var s UsersGetAuthenticatedOK
	s.SetPublicUser(v)
	return s
}

func (*UsersGetAuthenticatedOK) usersGetAuthenticatedRes() {}

// UsersGetByUsernameOK represents sum type.
type UsersGetByUsernameOK struct {
	Type        UsersGetByUsernameOKType // switch on this field
	PrivateUser PrivateUser
	PublicUser  PublicUser
}

// UsersGetByUsernameOKType is oneOf type of UsersGetByUsernameOK.
type UsersGetByUsernameOKType string

// Possible values for UsersGetByUsernameOKType.
const (
	PrivateUserUsersGetByUsernameOK UsersGetByUsernameOKType = "PrivateUser"
	PublicUserUsersGetByUsernameOK  UsersGetByUsernameOKType = "PublicUser"
)

// IsPrivateUser reports whether UsersGetByUsernameOK is PrivateUser.
func (s UsersGetByUsernameOK) IsPrivateUser() bool { return s.Type == PrivateUserUsersGetByUsernameOK }

// IsPublicUser reports whether UsersGetByUsernameOK is PublicUser.
func (s UsersGetByUsernameOK) IsPublicUser() bool { return s.Type == PublicUserUsersGetByUsernameOK }

// SetPrivateUser sets UsersGetByUsernameOK to PrivateUser.
func (s *UsersGetByUsernameOK) SetPrivateUser(v PrivateUser) {
	s.Type = PrivateUserUsersGetByUsernameOK
	s.PrivateUser = v
}

// GetPrivateUser returns PrivateUser and true boolean if UsersGetByUsernameOK is PrivateUser.
func (s UsersGetByUsernameOK) GetPrivateUser() (v PrivateUser, ok bool) {
	if !s.IsPrivateUser() {
		return v, false
	}
	return s.PrivateUser, true
}

// NewPrivateUserUsersGetByUsernameOK returns new UsersGetByUsernameOK from PrivateUser.
func NewPrivateUserUsersGetByUsernameOK(v PrivateUser) UsersGetByUsernameOK {
	var s UsersGetByUsernameOK
	s.SetPrivateUser(v)
	return s
}

// SetPublicUser sets UsersGetByUsernameOK to PublicUser.
func (s *UsersGetByUsernameOK) SetPublicUser(v PublicUser) {
	s.Type = PublicUserUsersGetByUsernameOK
	s.PublicUser = v
}

// GetPublicUser returns PublicUser and true boolean if UsersGetByUsernameOK is PublicUser.
func (s UsersGetByUsernameOK) GetPublicUser() (v PublicUser, ok bool) {
	if !s.IsPublicUser() {
		return v, false
	}
	return s.PublicUser, true
}

// NewPublicUserUsersGetByUsernameOK returns new UsersGetByUsernameOK from PublicUser.
func NewPublicUserUsersGetByUsernameOK(v PublicUser) UsersGetByUsernameOK {
	var s UsersGetByUsernameOK
	s.SetPublicUser(v)
	return s
}

func (*UsersGetByUsernameOK) usersGetByUsernameRes() {}

type UsersGetContextForUserSubjectType string

const (
	UsersGetContextForUserSubjectTypeOrganization UsersGetContextForUserSubjectType = "organization"
	UsersGetContextForUserSubjectTypeRepository   UsersGetContextForUserSubjectType = "repository"
	UsersGetContextForUserSubjectTypeIssue        UsersGetContextForUserSubjectType = "issue"
	UsersGetContextForUserSubjectTypePullRequest  UsersGetContextForUserSubjectType = "pull_request"
)

type UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden) usersGetGpgKeyForAuthenticatedRes() {}

type UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound) usersGetGpgKeyForAuthenticatedRes() {}

type UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized) usersGetGpgKeyForAuthenticatedRes() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden) usersGetPublicSSHKeyForAuthenticatedRes() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound) usersGetPublicSSHKeyForAuthenticatedRes() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) usersGetPublicSSHKeyForAuthenticatedRes() {
}

type UsersListBlockedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONForbidden) usersListBlockedByAuthenticatedRes() {
}

type UsersListBlockedByAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONNotFound) usersListBlockedByAuthenticatedRes() {}

type UsersListBlockedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONUnauthorized) usersListBlockedByAuthenticatedRes() {
}

type UsersListBlockedByAuthenticatedOKApplicationJSON []SimpleUser

func (UsersListBlockedByAuthenticatedOKApplicationJSON) usersListBlockedByAuthenticatedRes() {}

type UsersListEmailsForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONForbidden) usersListEmailsForAuthenticatedRes() {
}

type UsersListEmailsForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONNotFound) usersListEmailsForAuthenticatedRes() {}

type UsersListEmailsForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONUnauthorized) usersListEmailsForAuthenticatedRes() {
}

type UsersListEmailsForAuthenticatedOKApplicationJSON []Email

func (UsersListEmailsForAuthenticatedOKApplicationJSON) usersListEmailsForAuthenticatedRes() {}

type UsersListFollowedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListFollowedByAuthenticatedApplicationJSONForbidden) usersListFollowedByAuthenticatedRes() {
}

type UsersListFollowedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListFollowedByAuthenticatedApplicationJSONUnauthorized) usersListFollowedByAuthenticatedRes() {
}

type UsersListFollowedByAuthenticatedOKApplicationJSON []SimpleUser

func (UsersListFollowedByAuthenticatedOKApplicationJSON) usersListFollowedByAuthenticatedRes() {}

type UsersListFollowersForAuthenticatedUserApplicationJSONForbidden BasicError

func (*UsersListFollowersForAuthenticatedUserApplicationJSONForbidden) usersListFollowersForAuthenticatedUserRes() {
}

type UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized) usersListFollowersForAuthenticatedUserRes() {
}

type UsersListFollowersForAuthenticatedUserOKApplicationJSON []SimpleUser

func (UsersListFollowersForAuthenticatedUserOKApplicationJSON) usersListFollowersForAuthenticatedUserRes() {
}

type UsersListGpgKeysForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONForbidden) usersListGpgKeysForAuthenticatedRes() {
}

type UsersListGpgKeysForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONNotFound) usersListGpgKeysForAuthenticatedRes() {
}

type UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized) usersListGpgKeysForAuthenticatedRes() {
}

type UsersListGpgKeysForAuthenticatedOKApplicationJSON []GpgKey

func (UsersListGpgKeysForAuthenticatedOKApplicationJSON) usersListGpgKeysForAuthenticatedRes() {}

type UsersListOKApplicationJSON []SimpleUser

func (UsersListOKApplicationJSON) usersListRes() {}

type UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden) usersListPublicEmailsForAuthenticatedRes() {
}

type UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound) usersListPublicEmailsForAuthenticatedRes() {
}

type UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized) usersListPublicEmailsForAuthenticatedRes() {
}

type UsersListPublicEmailsForAuthenticatedOKApplicationJSON []Email

func (UsersListPublicEmailsForAuthenticatedOKApplicationJSON) usersListPublicEmailsForAuthenticatedRes() {
}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden) usersListPublicSSHKeysForAuthenticatedRes() {
}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound) usersListPublicSSHKeysForAuthenticatedRes() {
}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized) usersListPublicSSHKeysForAuthenticatedRes() {
}

type UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON []Key

func (UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) usersListPublicSSHKeysForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON []Email

func (UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedReq struct {
	// Denotes whether an email is publicly visible.
	Visibility UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility "json:\"visibility\""
}

// Denotes whether an email is publicly visible.
type UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility string

const (
	UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic  UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility = "public"
	UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPrivate UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility = "private"
)

type UsersUnblockApplicationJSONForbidden BasicError

func (*UsersUnblockApplicationJSONForbidden) usersUnblockRes() {}

type UsersUnblockApplicationJSONNotFound BasicError

func (*UsersUnblockApplicationJSONNotFound) usersUnblockRes() {}

type UsersUnblockApplicationJSONUnauthorized BasicError

func (*UsersUnblockApplicationJSONUnauthorized) usersUnblockRes() {}

// UsersUnblockNoContent is response for UsersUnblock operation.
type UsersUnblockNoContent struct{}

func (*UsersUnblockNoContent) usersUnblockRes() {}

type UsersUnfollowApplicationJSONForbidden BasicError

func (*UsersUnfollowApplicationJSONForbidden) usersUnfollowRes() {}

type UsersUnfollowApplicationJSONNotFound BasicError

func (*UsersUnfollowApplicationJSONNotFound) usersUnfollowRes() {}

type UsersUnfollowApplicationJSONUnauthorized BasicError

func (*UsersUnfollowApplicationJSONUnauthorized) usersUnfollowRes() {}

// UsersUnfollowNoContent is response for UsersUnfollow operation.
type UsersUnfollowNoContent struct{}

func (*UsersUnfollowNoContent) usersUnfollowRes() {}

type UsersUpdateAuthenticatedApplicationJSONForbidden BasicError

func (*UsersUpdateAuthenticatedApplicationJSONForbidden) usersUpdateAuthenticatedRes() {}

type UsersUpdateAuthenticatedApplicationJSONNotFound BasicError

func (*UsersUpdateAuthenticatedApplicationJSONNotFound) usersUpdateAuthenticatedRes() {}

type UsersUpdateAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersUpdateAuthenticatedApplicationJSONUnauthorized) usersUpdateAuthenticatedRes() {}

type UsersUpdateAuthenticatedReq struct {
	// The new name of the user.
	Name OptString "json:\"name\""
	// The publicly visible email address of the user.
	Email OptString "json:\"email\""
	// The new blog URL of the user.
	Blog OptString "json:\"blog\""
	// The new Twitter username of the user.
	TwitterUsername OptNilString "json:\"twitter_username\""
	// The new company of the user.
	Company OptString "json:\"company\""
	// The new location of the user.
	Location OptString "json:\"location\""
	// The new hiring availability of the user.
	Hireable OptBool "json:\"hireable\""
	// The new short biography of the user.
	Bio OptString "json:\"bio\""
}

// Validation Error.
// Ref: #/components/schemas/validation-error
type ValidationError struct {
	Message          string                      "json:\"message\""
	DocumentationURL string                      "json:\"documentation_url\""
	Errors           []ValidationErrorErrorsItem "json:\"errors\""
}

func (*ValidationError) activityListNotificationsForAuthenticatedUserRes()                   {}
func (*ValidationError) appsCheckTokenRes()                                                  {}
func (*ValidationError) appsCreateContentAttachmentRes()                                     {}
func (*ValidationError) appsCreateInstallationAccessTokenRes()                               {}
func (*ValidationError) appsDeleteAuthorizationRes()                                         {}
func (*ValidationError) appsDeleteTokenRes()                                                 {}
func (*ValidationError) appsGetWebhookDeliveryRes()                                          {}
func (*ValidationError) appsListAccountsForPlanRes()                                         {}
func (*ValidationError) appsListWebhookDeliveriesRes()                                       {}
func (*ValidationError) appsRedeliverWebhookDeliveryRes()                                    {}
func (*ValidationError) appsResetTokenRes()                                                  {}
func (*ValidationError) appsScopeTokenRes()                                                  {}
func (*ValidationError) gistsCreateRes()                                                     {}
func (*ValidationError) gistsForkRes()                                                       {}
func (*ValidationError) gistsGetRevisionRes()                                                {}
func (*ValidationError) gistsListForUserRes()                                                {}
func (*ValidationError) gistsListPublicRes()                                                 {}
func (*ValidationError) gitCreateBlobRes()                                                   {}
func (*ValidationError) gitCreateCommitRes()                                                 {}
func (*ValidationError) gitCreateRefRes()                                                    {}
func (*ValidationError) gitCreateTagRes()                                                    {}
func (*ValidationError) gitCreateTreeRes()                                                   {}
func (*ValidationError) gitDeleteRefRes()                                                    {}
func (*ValidationError) gitGetBlobRes()                                                      {}
func (*ValidationError) gitGetTreeRes()                                                      {}
func (*ValidationError) gitUpdateRefRes()                                                    {}
func (*ValidationError) interactionsSetRestrictionsForAuthenticatedUserRes()                 {}
func (*ValidationError) interactionsSetRestrictionsForOrgRes()                               {}
func (*ValidationError) issuesCreateCommentRes()                                             {}
func (*ValidationError) issuesCreateLabelRes()                                               {}
func (*ValidationError) issuesCreateMilestoneRes()                                           {}
func (*ValidationError) issuesCreateRes()                                                    {}
func (*ValidationError) issuesListCommentsForRepoRes()                                       {}
func (*ValidationError) issuesListEventsForRepoRes()                                         {}
func (*ValidationError) issuesListForRepoRes()                                               {}
func (*ValidationError) issuesListRes()                                                      {}
func (*ValidationError) issuesLockRes()                                                      {}
func (*ValidationError) issuesUpdateCommentRes()                                             {}
func (*ValidationError) issuesUpdateRes()                                                    {}
func (*ValidationError) migrationsMapCommitAuthorRes()                                       {}
func (*ValidationError) migrationsSetLfsPreferenceRes()                                      {}
func (*ValidationError) migrationsStartForAuthenticatedUserRes()                             {}
func (*ValidationError) migrationsStartForOrgRes()                                           {}
func (*ValidationError) migrationsStartImportRes()                                           {}
func (*ValidationError) oAuthAuthorizationsCreateAuthorizationRes()                          {}
func (*ValidationError) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {}
func (*ValidationError) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes()               {}
func (*ValidationError) oAuthAuthorizationsUpdateAuthorizationRes()                          {}
func (*ValidationError) orgsBlockUserRes()                                                   {}
func (*ValidationError) orgsCancelInvitationRes()                                            {}
func (*ValidationError) orgsCreateInvitationRes()                                            {}
func (*ValidationError) orgsCreateWebhookRes()                                               {}
func (*ValidationError) orgsGetWebhookDeliveryRes()                                          {}
func (*ValidationError) orgsListMembersRes()                                                 {}
func (*ValidationError) orgsListMembershipsForAuthenticatedUserRes()                         {}
func (*ValidationError) orgsListWebhookDeliveriesRes()                                       {}
func (*ValidationError) orgsRedeliverWebhookDeliveryRes()                                    {}
func (*ValidationError) orgsSetMembershipForUserRes()                                        {}
func (*ValidationError) orgsUpdateMembershipForAuthenticatedUserRes()                        {}
func (*ValidationError) orgsUpdateWebhookRes()                                               {}
func (*ValidationError) projectsAddCollaboratorRes()                                         {}
func (*ValidationError) projectsGetPermissionForUserRes()                                    {}
func (*ValidationError) projectsListCollaboratorsRes()                                       {}
func (*ValidationError) projectsListForUserRes()                                             {}
func (*ValidationError) projectsMoveCardRes()                                                {}
func (*ValidationError) projectsRemoveCollaboratorRes()                                      {}
func (*ValidationError) pullsCreateRes()                                                     {}
func (*ValidationError) pullsCreateReviewCommentRes()                                        {}
func (*ValidationError) pullsListFilesRes()                                                  {}
func (*ValidationError) pullsListRes()                                                       {}
func (*ValidationError) pullsMergeRes()                                                      {}
func (*ValidationError) pullsRemoveRequestedReviewersRes()                                   {}
func (*ValidationError) pullsUpdateBranchRes()                                               {}
func (*ValidationError) pullsUpdateRes()                                                     {}
func (*ValidationError) reactionsCreateForCommitCommentRes()                                 {}
func (*ValidationError) reactionsCreateForIssueCommentRes()                                  {}
func (*ValidationError) reactionsCreateForIssueRes()                                         {}
func (*ValidationError) reactionsCreateForPullRequestReviewCommentRes()                      {}
func (*ValidationError) reactionsCreateForReleaseRes()                                       {}
func (*ValidationError) reposAddAppAccessRestrictionsRes()                                   {}
func (*ValidationError) reposAddCollaboratorRes()                                            {}
func (*ValidationError) reposAddStatusCheckContextsRes()                                     {}
func (*ValidationError) reposAddTeamAccessRestrictionsRes()                                  {}
func (*ValidationError) reposAddUserAccessRestrictionsRes()                                  {}
func (*ValidationError) reposCreateAutolinkRes()                                             {}
func (*ValidationError) reposCreateCommitCommentRes()                                        {}
func (*ValidationError) reposCreateDeployKeyRes()                                            {}
func (*ValidationError) reposCreateDeploymentRes()                                           {}
func (*ValidationError) reposCreateDeploymentStatusRes()                                     {}
func (*ValidationError) reposCreateDispatchEventRes()                                        {}
func (*ValidationError) reposCreateForAuthenticatedUserRes()                                 {}
func (*ValidationError) reposCreateForkRes()                                                 {}
func (*ValidationError) reposCreateInOrgRes()                                                {}
func (*ValidationError) reposCreateOrUpdateFileContentsRes()                                 {}
func (*ValidationError) reposCreatePagesSiteRes()                                            {}
func (*ValidationError) reposCreateReleaseRes()                                              {}
func (*ValidationError) reposCreateWebhookRes()                                              {}
func (*ValidationError) reposDeleteFileRes()                                                 {}
func (*ValidationError) reposDeletePagesSiteRes()                                            {}
func (*ValidationError) reposGetCommitRes()                                                  {}
func (*ValidationError) reposGetReadmeInDirectoryRes()                                       {}
func (*ValidationError) reposGetReadmeRes()                                                  {}
func (*ValidationError) reposGetWebhookDeliveryRes()                                         {}
func (*ValidationError) reposListBranchesForHeadCommitRes()                                  {}
func (*ValidationError) reposListForAuthenticatedUserRes()                                   {}
func (*ValidationError) reposListPublicRes()                                                 {}
func (*ValidationError) reposListWebhookDeliveriesRes()                                      {}
func (*ValidationError) reposMergeRes()                                                      {}
func (*ValidationError) reposRedeliverWebhookDeliveryRes()                                   {}
func (*ValidationError) reposRemoveAppAccessRestrictionsRes()                                {}
func (*ValidationError) reposRemoveStatusCheckContextsRes()                                  {}
func (*ValidationError) reposRemoveTeamAccessRestrictionsRes()                               {}
func (*ValidationError) reposRemoveUserAccessRestrictionsRes()                               {}
func (*ValidationError) reposRenameBranchRes()                                               {}
func (*ValidationError) reposSetAppAccessRestrictionsRes()                                   {}
func (*ValidationError) reposSetStatusCheckContextsRes()                                     {}
func (*ValidationError) reposSetTeamAccessRestrictionsRes()                                  {}
func (*ValidationError) reposSetUserAccessRestrictionsRes()                                  {}
func (*ValidationError) reposUpdatePullRequestReviewProtectionRes()                          {}
func (*ValidationError) reposUpdateRes()                                                     {}
func (*ValidationError) reposUpdateStatusCheckProtectionRes()                                {}
func (*ValidationError) reposUpdateWebhookRes()                                              {}
func (*ValidationError) searchCodeRes()                                                      {}
func (*ValidationError) searchIssuesAndPullRequestsRes()                                     {}
func (*ValidationError) searchLabelsRes()                                                    {}
func (*ValidationError) searchReposRes()                                                     {}
func (*ValidationError) searchUsersRes()                                                     {}
func (*ValidationError) teamsAddOrUpdateProjectPermissionsLegacyRes()                        {}
func (*ValidationError) teamsAddOrUpdateRepoPermissionsLegacyRes()                           {}
func (*ValidationError) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes()                    {}
func (*ValidationError) teamsCreateRes()                                                     {}
func (*ValidationError) teamsDeleteLegacyRes()                                               {}
func (*ValidationError) teamsListChildLegacyRes()                                            {}
func (*ValidationError) teamsRemoveProjectLegacyRes()                                        {}
func (*ValidationError) teamsUpdateLegacyRes()                                               {}
func (*ValidationError) usersAddEmailForAuthenticatedRes()                                   {}
func (*ValidationError) usersBlockRes()                                                      {}
func (*ValidationError) usersCreateGpgKeyForAuthenticatedRes()                               {}
func (*ValidationError) usersCreatePublicSSHKeyForAuthenticatedRes()                         {}
func (*ValidationError) usersDeleteEmailForAuthenticatedRes()                                {}
func (*ValidationError) usersDeleteGpgKeyForAuthenticatedRes()                               {}
func (*ValidationError) usersGetContextForUserRes()                                          {}
func (*ValidationError) usersSetPrimaryEmailVisibilityForAuthenticatedRes()                  {}
func (*ValidationError) usersUpdateAuthenticatedRes()                                        {}

type ValidationErrorErrorsItem struct {
	Resource OptString                         "json:\"resource\""
	Field    OptString                         "json:\"field\""
	Message  OptString                         "json:\"message\""
	Code     string                            "json:\"code\""
	Index    OptInt                            "json:\"index\""
	Value    OptValidationErrorErrorsItemValue "json:\"value\""
}

// ValidationErrorErrorsItemValue represents sum type.
type ValidationErrorErrorsItemValue struct {
	Type        ValidationErrorErrorsItemValueType // switch on this field
	String      string
	Int         int
	StringArray []string
}

// ValidationErrorErrorsItemValueType is oneOf type of ValidationErrorErrorsItemValue.
type ValidationErrorErrorsItemValueType string

// Possible values for ValidationErrorErrorsItemValueType.
const (
	StringValidationErrorErrorsItemValue      ValidationErrorErrorsItemValueType = "string"
	IntValidationErrorErrorsItemValue         ValidationErrorErrorsItemValueType = "int"
	StringArrayValidationErrorErrorsItemValue ValidationErrorErrorsItemValueType = "[]string"
)

// IsString reports whether ValidationErrorErrorsItemValue is string.
func (s ValidationErrorErrorsItemValue) IsString() bool {
	return s.Type == StringValidationErrorErrorsItemValue
}

// IsInt reports whether ValidationErrorErrorsItemValue is int.
func (s ValidationErrorErrorsItemValue) IsInt() bool {
	return s.Type == IntValidationErrorErrorsItemValue
}

// IsStringArray reports whether ValidationErrorErrorsItemValue is []string.
func (s ValidationErrorErrorsItemValue) IsStringArray() bool {
	return s.Type == StringArrayValidationErrorErrorsItemValue
}

// SetString sets ValidationErrorErrorsItemValue to string.
func (s *ValidationErrorErrorsItemValue) SetString(v string) {
	s.Type = StringValidationErrorErrorsItemValue
	s.String = v
}

// GetString returns string and true boolean if ValidationErrorErrorsItemValue is string.
func (s ValidationErrorErrorsItemValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from string.
func NewStringValidationErrorErrorsItemValue(v string) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetString(v)
	return s
}

// SetInt sets ValidationErrorErrorsItemValue to int.
func (s *ValidationErrorErrorsItemValue) SetInt(v int) {
	s.Type = IntValidationErrorErrorsItemValue
	s.Int = v
}

// GetInt returns int and true boolean if ValidationErrorErrorsItemValue is int.
func (s ValidationErrorErrorsItemValue) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from int.
func NewIntValidationErrorErrorsItemValue(v int) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetInt(v)
	return s
}

// SetStringArray sets ValidationErrorErrorsItemValue to []string.
func (s *ValidationErrorErrorsItemValue) SetStringArray(v []string) {
	s.Type = StringArrayValidationErrorErrorsItemValue
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ValidationErrorErrorsItemValue is []string.
func (s ValidationErrorErrorsItemValue) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from []string.
func NewStringArrayValidationErrorErrorsItemValue(v []string) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetStringArray(v)
	return s
}

// Validation Error Simple.
// Ref: #/components/schemas/validation-error-simple
type ValidationErrorSimple struct {
	Message          string   "json:\"message\""
	DocumentationURL string   "json:\"documentation_url\""
	Errors           []string "json:\"errors\""
}

func (*ValidationErrorSimple) projectsCreateColumnRes()               {}
func (*ValidationErrorSimple) projectsCreateForAuthenticatedUserRes() {}
func (*ValidationErrorSimple) projectsCreateForOrgRes()               {}
func (*ValidationErrorSimple) projectsCreateForRepoRes()              {}
func (*ValidationErrorSimple) projectsListForOrgRes()                 {}
func (*ValidationErrorSimple) projectsListForRepoRes()                {}
func (*ValidationErrorSimple) projectsMoveColumnRes()                 {}
func (*ValidationErrorSimple) projectsUpdateCardRes()                 {}
func (*ValidationErrorSimple) projectsUpdateRes()                     {}
func (*ValidationErrorSimple) pullsCreateReviewRes()                  {}
func (*ValidationErrorSimple) pullsDeletePendingReviewRes()           {}
func (*ValidationErrorSimple) pullsDismissReviewRes()                 {}
func (*ValidationErrorSimple) pullsSubmitReviewRes()                  {}
func (*ValidationErrorSimple) pullsUpdateReviewRes()                  {}
func (*ValidationErrorSimple) reposDeleteDeploymentRes()              {}
func (*ValidationErrorSimple) reposReplaceAllTopicsRes()              {}
func (*ValidationErrorSimple) reposUpdateBranchProtectionRes()        {}

// Ref: #/components/schemas/verification
type Verification struct {
	Verified  bool      "json:\"verified\""
	Reason    string    "json:\"reason\""
	Payload   NilString "json:\"payload\""
	Signature NilString "json:\"signature\""
}

// View Traffic.
// Ref: #/components/schemas/view-traffic
type ViewTraffic struct {
	Count   int       "json:\"count\""
	Uniques int       "json:\"uniques\""
	Views   []Traffic "json:\"views\""
}

func (*ViewTraffic) reposGetViewsRes() {}

// Configuration object of the webhook.
// Ref: #/components/schemas/webhook-config
type WebhookConfig struct {
	URL         OptWebhookConfigURL         "json:\"url\""
	ContentType OptWebhookConfigContentType "json:\"content_type\""
	Secret      OptWebhookConfigSecret      "json:\"secret\""
	InsecureSsl OptWebhookConfigInsecureSsl "json:\"insecure_ssl\""
}

type WebhookConfigContentType string

// Ref: #/components/schemas/webhook-config-insecure-ssl
// WebhookConfigInsecureSsl represents sum type.
type WebhookConfigInsecureSsl struct {
	Type    WebhookConfigInsecureSslType // switch on this field
	String  string
	Float64 float64
}

// WebhookConfigInsecureSslType is oneOf type of WebhookConfigInsecureSsl.
type WebhookConfigInsecureSslType string

// Possible values for WebhookConfigInsecureSslType.
const (
	StringWebhookConfigInsecureSsl  WebhookConfigInsecureSslType = "string"
	Float64WebhookConfigInsecureSsl WebhookConfigInsecureSslType = "float64"
)

// IsString reports whether WebhookConfigInsecureSsl is string.
func (s WebhookConfigInsecureSsl) IsString() bool { return s.Type == StringWebhookConfigInsecureSsl }

// IsFloat64 reports whether WebhookConfigInsecureSsl is float64.
func (s WebhookConfigInsecureSsl) IsFloat64() bool { return s.Type == Float64WebhookConfigInsecureSsl }

// SetString sets WebhookConfigInsecureSsl to string.
func (s *WebhookConfigInsecureSsl) SetString(v string) {
	s.Type = StringWebhookConfigInsecureSsl
	s.String = v
}

// GetString returns string and true boolean if WebhookConfigInsecureSsl is string.
func (s WebhookConfigInsecureSsl) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringWebhookConfigInsecureSsl returns new WebhookConfigInsecureSsl from string.
func NewStringWebhookConfigInsecureSsl(v string) WebhookConfigInsecureSsl {
	var s WebhookConfigInsecureSsl
	s.SetString(v)
	return s
}

// SetFloat64 sets WebhookConfigInsecureSsl to float64.
func (s *WebhookConfigInsecureSsl) SetFloat64(v float64) {
	s.Type = Float64WebhookConfigInsecureSsl
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if WebhookConfigInsecureSsl is float64.
func (s WebhookConfigInsecureSsl) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64WebhookConfigInsecureSsl returns new WebhookConfigInsecureSsl from float64.
func NewFloat64WebhookConfigInsecureSsl(v float64) WebhookConfigInsecureSsl {
	var s WebhookConfigInsecureSsl
	s.SetFloat64(v)
	return s
}

type WebhookConfigSecret string

type WebhookConfigURL url.URL

// A GitHub Actions workflow.
// Ref: #/components/schemas/workflow
type Workflow struct {
	ID        int           "json:\"id\""
	NodeID    string        "json:\"node_id\""
	Name      string        "json:\"name\""
	Path      string        "json:\"path\""
	State     WorkflowState "json:\"state\""
	CreatedAt time.Time     "json:\"created_at\""
	UpdatedAt time.Time     "json:\"updated_at\""
	URL       string        "json:\"url\""
	HTMLURL   string        "json:\"html_url\""
	BadgeURL  string        "json:\"badge_url\""
	DeletedAt OptDateTime   "json:\"deleted_at\""
}

// An invocation of a workflow.
// Ref: #/components/schemas/workflow-run
type WorkflowRun struct {
	// The ID of the workflow run.
	ID int "json:\"id\""
	// The name of the workflow run.
	Name   OptNilString "json:\"name\""
	NodeID string       "json:\"node_id\""
	// The ID of the associated check suite.
	CheckSuiteID OptInt "json:\"check_suite_id\""
	// The node ID of the associated check suite.
	CheckSuiteNodeID OptString "json:\"check_suite_node_id\""
	HeadBranch       NilString "json:\"head_branch\""
	// The SHA of the head commit that points to the version of the worflow being run.
	HeadSha string "json:\"head_sha\""
	// The auto incrementing run number for the workflow run.
	RunNumber int "json:\"run_number\""
	// Attempt number of the run, 1 for first attempt and higher if the workflow was retried.
	RunAttempt OptInt    "json:\"run_attempt\""
	Event      string    "json:\"event\""
	Status     NilString "json:\"status\""
	Conclusion NilString "json:\"conclusion\""
	// The ID of the parent workflow.
	WorkflowID int "json:\"workflow_id\""
	// The URL to the workflow run.
	URL          string               "json:\"url\""
	HTMLURL      string               "json:\"html_url\""
	PullRequests []PullRequestMinimal "json:\"pull_requests\""
	CreatedAt    time.Time            "json:\"created_at\""
	UpdatedAt    time.Time            "json:\"updated_at\""
	// The URL to the jobs for the workflow run.
	JobsURL string "json:\"jobs_url\""
	// The URL to download the logs for the workflow run.
	LogsURL string "json:\"logs_url\""
	// The URL to the associated check suite.
	CheckSuiteURL string "json:\"check_suite_url\""
	// The URL to the artifacts for the workflow run.
	ArtifactsURL string "json:\"artifacts_url\""
	// The URL to cancel the workflow run.
	CancelURL string "json:\"cancel_url\""
	// The URL to rerun the workflow run.
	RerunURL string "json:\"rerun_url\""
	// The URL to the previous attempted run of this workflow, if one exists.
	PreviousAttemptURL OptNilString "json:\"previous_attempt_url\""
	// The URL to the workflow.
	WorkflowURL      string                  "json:\"workflow_url\""
	HeadCommit       NilNullableSimpleCommit "json:\"head_commit\""
	Repository       MinimalRepository       "json:\"repository\""
	HeadRepository   MinimalRepository       "json:\"head_repository\""
	HeadRepositoryID OptInt                  "json:\"head_repository_id\""
}

// Workflow Run Usage.
// Ref: #/components/schemas/workflow-run-usage
type WorkflowRunUsage struct {
	Billable      WorkflowRunUsageBillable "json:\"billable\""
	RunDurationMs OptInt                   "json:\"run_duration_ms\""
}

type WorkflowRunUsageBillable struct {
	UBUNTU  OptWorkflowRunUsageBillableUBUNTU  "json:\"UBUNTU\""
	MACOS   OptWorkflowRunUsageBillableMACOS   "json:\"MACOS\""
	WINDOWS OptWorkflowRunUsageBillableWINDOWS "json:\"WINDOWS\""
}

type WorkflowRunUsageBillableMACOS struct {
	TotalMs int "json:\"total_ms\""
	Jobs    int "json:\"jobs\""
}

type WorkflowRunUsageBillableUBUNTU struct {
	TotalMs int "json:\"total_ms\""
	Jobs    int "json:\"jobs\""
}

type WorkflowRunUsageBillableWINDOWS struct {
	TotalMs int "json:\"total_ms\""
	Jobs    int "json:\"jobs\""
}

type WorkflowState string

const (
	WorkflowStateActive             WorkflowState = "active"
	WorkflowStateDeleted            WorkflowState = "deleted"
	WorkflowStateDisabledFork       WorkflowState = "disabled_fork"
	WorkflowStateDisabledInactivity WorkflowState = "disabled_inactivity"
	WorkflowStateDisabledManually   WorkflowState = "disabled_manually"
)
