// Code generated by ogen, DO NOT EDIT.

package api

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	RepositoryID  int
}

type ActionsAddSelectedRepoToOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName   string
	RepositoryID int
}

type ActionsAddSelfHostedRunnerToGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsApproveWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsCancelWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsCreateOrUpdateEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

type ActionsCreateOrUpdateOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

type ActionsCreateOrUpdateRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

type ActionsCreateRegistrationTokenForOrgParams struct {
	Org string
}

type ActionsCreateRegistrationTokenForRepoParams struct {
	Owner string
	Repo  string
}

type ActionsCreateRemoveTokenForOrgParams struct {
	Org string
}

type ActionsCreateRemoveTokenForRepoParams struct {
	Owner string
	Repo  string
}

type ActionsCreateSelfHostedRunnerGroupForOrgParams struct {
	Org string
}

type ActionsDeleteArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID int
}

type ActionsDeleteEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

type ActionsDeleteOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

type ActionsDeleteRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

type ActionsDeleteSelfHostedRunnerFromOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsDeleteSelfHostedRunnerFromRepoParams struct {
	Owner string
	Repo  string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsDeleteSelfHostedRunnerGroupFromOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type ActionsDeleteWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsDeleteWorkflowRunLogsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsDisableSelectedRepositoryGithubActionsOrganizationParams struct {
	Org          string
	RepositoryID int
}

type ActionsDownloadArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID    int
	ArchiveFormat string
}

type ActionsDownloadJobLogsForWorkflowRunParams struct {
	Owner string
	Repo  string
	// Job_id parameter.
	JobID int
}

type ActionsDownloadWorkflowRunLogsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsEnableSelectedRepositoryGithubActionsOrganizationParams struct {
	Org          string
	RepositoryID int
}

type ActionsGetAllowedActionsOrganizationParams struct {
	Org string
}

type ActionsGetAllowedActionsRepositoryParams struct {
	Owner string
	Repo  string
}

type ActionsGetArtifactParams struct {
	Owner string
	Repo  string
	// Artifact_id parameter.
	ArtifactID int
}

type ActionsGetEnvironmentPublicKeyParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
}

type ActionsGetEnvironmentSecretParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Secret_name parameter.
	SecretName string
}

type ActionsGetGithubActionsPermissionsOrganizationParams struct {
	Org string
}

type ActionsGetGithubActionsPermissionsRepositoryParams struct {
	Owner string
	Repo  string
}

type ActionsGetJobForWorkflowRunParams struct {
	Owner string
	Repo  string
	// Job_id parameter.
	JobID int
}

type ActionsGetOrgPublicKeyParams struct {
	Org string
}

type ActionsGetOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

type ActionsGetRepoPublicKeyParams struct {
	Owner string
	Repo  string
}

type ActionsGetRepoSecretParams struct {
	Owner string
	Repo  string
	// Secret_name parameter.
	SecretName string
}

type ActionsGetReviewsForRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsGetSelfHostedRunnerForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsGetSelfHostedRunnerForRepoParams struct {
	Owner string
	Repo  string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsGetSelfHostedRunnerGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type ActionsGetWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsGetWorkflowRunUsageParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsListArtifactsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListEnvironmentSecretsParams struct {
	RepositoryID int
	// The name of the environment.
	EnvironmentName string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListJobsForWorkflowRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
	// Filters jobs by their `completed_at` timestamp. Can be one of:
	// \* `latest`: Returns jobs from the most recent execution of the workflow run.
	// \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
	Filter OptActionsListJobsForWorkflowRunFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListOrgSecretsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type ActionsListRepoSecretsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListRepoWorkflowsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListRunnerApplicationsForOrgParams struct {
	Org string
}

type ActionsListRunnerApplicationsForRepoParams struct {
	Owner string
	Repo  string
}

type ActionsListSelectedReposForOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListSelfHostedRunnerGroupsForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListSelfHostedRunnersForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListSelfHostedRunnersForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListSelfHostedRunnersInGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListWorkflowRunArtifactsParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActionsListWorkflowRunsForRepoParams struct {
	Owner string
	Repo  string
	// Returns someone's workflow runs. Use the login for the user who created the `push` associated with
	// the check suite or workflow run.
	Actor OptString
	// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
	Branch OptString
	// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or
	// `issue`. For more information, see "[Events that trigger workflows](https://help.github.
	// com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).".
	Event OptString
	// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a
	// conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of
	// `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see
	// "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run).".
	Status OptActionsListWorkflowRunsForRepoStatus
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page    OptInt
	Created OptDateTime
}

type ActionsReRunWorkflowParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	RepositoryID  int
}

type ActionsRemoveSelectedRepoFromOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName   string
	RepositoryID int
}

type ActionsRemoveSelfHostedRunnerFromGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type ActionsRetryWorkflowParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsReviewPendingDeploymentsForRunParams struct {
	Owner string
	Repo  string
	// The id of the workflow run.
	RunID int
}

type ActionsSetAllowedActionsOrganizationParams struct {
	Org string
}

type ActionsSetAllowedActionsRepositoryParams struct {
	Owner string
	Repo  string
}

type ActionsSetGithubActionsPermissionsOrganizationParams struct {
	Org string
}

type ActionsSetGithubActionsPermissionsRepositoryParams struct {
	Owner string
	Repo  string
}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type ActionsSetSelectedReposForOrgSecretParams struct {
	Org string
	// Secret_name parameter.
	SecretName string
}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams struct {
	Org string
}

type ActionsSetSelfHostedRunnersInGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type ActionsUpdateSelfHostedRunnerGroupForOrgParams struct {
	Org string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type ActivityCheckRepoIsStarredByAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

type ActivityDeleteRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

type ActivityDeleteThreadSubscriptionParams struct {
	// Thread_id parameter.
	ThreadID int
}

type ActivityGetRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

type ActivityGetThreadParams struct {
	// Thread_id parameter.
	ThreadID int
}

type ActivityGetThreadSubscriptionForAuthenticatedUserParams struct {
	// Thread_id parameter.
	ThreadID int
}

type ActivityListEventsForAuthenticatedUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListNotificationsForAuthenticatedUserParams struct {
	// If `true`, show notifications marked as read.
	All OptBool
	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating OptBool
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListOrgEventsForAuthenticatedUserParams struct {
	Username string
	Org      string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListPublicEventsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListPublicEventsForRepoNetworkParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListPublicEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListPublicOrgEventsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListReceivedEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListReceivedPublicEventsForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListRepoEventsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListRepoNotificationsForAuthenticatedUserParams struct {
	Owner string
	Repo  string
	// If `true`, show notifications marked as read.
	All OptBool
	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating OptBool
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListReposStarredByAuthenticatedUserParams struct {
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptActivityListReposStarredByAuthenticatedUserSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptActivityListReposStarredByAuthenticatedUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListReposWatchedByUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListWatchedReposForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityListWatchersForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ActivityMarkRepoNotificationsAsReadParams struct {
	Owner string
	Repo  string
}

type ActivityMarkThreadAsReadParams struct {
	// Thread_id parameter.
	ThreadID int
}

type ActivitySetRepoSubscriptionParams struct {
	Owner string
	Repo  string
}

type ActivitySetThreadSubscriptionParams struct {
	// Thread_id parameter.
	ThreadID int
}

type ActivityStarRepoForAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

type ActivityUnstarRepoForAuthenticatedUserParams struct {
	Owner string
	Repo  string
}

type AppsAddRepoToInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
	RepositoryID   int
}

type AppsCheckTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type AppsCreateContentAttachmentParams struct {
	// The owner of the repository. Determined from the `repository` `full_name` of the
	// `content_reference` event.
	Owner string
	// The name of the repository. Determined from the `repository` `full_name` of the
	// `content_reference` event.
	Repo string
	// The `id` of the `content_reference` event.
	ContentReferenceID int
}

type AppsCreateInstallationAccessTokenParams struct {
	// Installation_id parameter.
	InstallationID int
}

type AppsDeleteAuthorizationParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type AppsDeleteInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

type AppsDeleteTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type AppsGetBySlugParams struct {
	AppSlug string
}

type AppsGetSubscriptionPlanForAccountParams struct {
	// Account_id parameter.
	AccountID int
}

type AppsGetSubscriptionPlanForAccountStubbedParams struct {
	// Account_id parameter.
	AccountID int
}

type AppsGetWebhookDeliveryParams struct {
	DeliveryID int
}

type AppsListAccountsForPlanParams struct {
	// Plan_id parameter.
	PlanID int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptAppsListAccountsForPlanSort
	// To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without
	// the `sort` parameter.
	Direction OptAppsListAccountsForPlanDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListAccountsForPlanStubbedParams struct {
	// Plan_id parameter.
	PlanID int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptAppsListAccountsForPlanStubbedSort
	// To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without
	// the `sort` parameter.
	Direction OptAppsListAccountsForPlanStubbedDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListInstallationReposForAuthenticatedUserParams struct {
	// Installation_id parameter.
	InstallationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListPlansParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListPlansStubbedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListReposAccessibleToInstallationParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListSubscriptionsForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListSubscriptionsForAuthenticatedUserStubbedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type AppsListWebhookDeliveriesParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

type AppsRedeliverWebhookDeliveryParams struct {
	DeliveryID int
}

type AppsRemoveRepoFromInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
	RepositoryID   int
}

type AppsResetTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type AppsScopeTokenParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type AppsSuspendInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

type AppsUnsuspendInstallationParams struct {
	// Installation_id parameter.
	InstallationID int
}

type BillingGetGithubActionsBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type BillingGetGithubActionsBillingOrgParams struct {
	Org string
}

type BillingGetGithubActionsBillingUserParams struct {
	Username string
}

type BillingGetGithubPackagesBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type BillingGetGithubPackagesBillingOrgParams struct {
	Org string
}

type BillingGetGithubPackagesBillingUserParams struct {
	Username string
}

type BillingGetSharedStorageBillingGheParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type BillingGetSharedStorageBillingOrgParams struct {
	Org string
}

type BillingGetSharedStorageBillingUserParams struct {
	Username string
}

type ChecksCreateSuiteParams struct {
	Owner string
	Repo  string
}

type ChecksGetParams struct {
	Owner string
	Repo  string
	// Check_run_id parameter.
	CheckRunID int
}

type ChecksGetSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
}

type ChecksListAnnotationsParams struct {
	Owner string
	Repo  string
	// Check_run_id parameter.
	CheckRunID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ChecksListForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or
	// `completed`.
	Status OptChecksListForRefStatus
	// Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most
	// recent check runs) or `all`.
	Filter OptChecksListForRefFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page  OptInt
	AppID OptInt
}

type ChecksListForSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or
	// `completed`.
	Status OptChecksListForSuiteStatus
	// Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most
	// recent check runs) or `all`.
	Filter OptChecksListForSuiteFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ChecksListSuitesForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Filters check suites by GitHub App `id`.
	AppID OptInt
	// Returns check runs with the specified `name`.
	CheckName OptString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ChecksRerequestSuiteParams struct {
	Owner string
	Repo  string
	// Check_suite_id parameter.
	CheckSuiteID int
}

type ChecksSetSuitesPreferencesParams struct {
	Owner string
	Repo  string
}

type CodeScanningDeleteAnalysisParams struct {
	Owner string
	Repo  string
	// The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
	// operation.
	AnalysisID int
	// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final
	// analysis in a set without setting this parameter to `true`, you'll get a 400 response with the
	// message: `Analysis is last of its type and deletion may result in the loss of historical alert
	// data. Please specify confirm_delete.`.
	ConfirmDelete OptNilString
}

type CodeScanningGetAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

type CodeScanningGetAnalysisParams struct {
	Owner string
	Repo  string
	// The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
	// operation.
	AnalysisID int
}

type CodeScanningGetSarifParams struct {
	Owner string
	Repo  string
	// The SARIF ID obtained after uploading.
	SarifID string
}

type CodeScanningListAlertInstancesParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either
	// as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
}

type CodeScanningListAlertsForRepoParams struct {
	Owner string
	Repo  string
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the
	// tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName OptCodeScanningAnalysisToolName
	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code
	// scanning tools may not include a GUID in their analysis data. You can specify the tool by using
	// either `tool_guid` or `tool_name`, but not both.
	ToolGUID OptNilCodeScanningAnalysisToolGUID
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either
	// as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
	// Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
	State OptCodeScanningAlertState
}

type CodeScanningListRecentAnalysesParams struct {
	Owner string
	Repo  string
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the
	// tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName OptCodeScanningAnalysisToolName
	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code
	// scanning tools may not include a GUID in their analysis data. You can specify the tool by using
	// either `tool_guid` or `tool_name`, but not both.
	ToolGUID OptNilCodeScanningAnalysisToolGUID
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The Git reference for the analyses you want to list. The `ref` for a branch can be formatted
	// either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use
	// `refs/pull/<number>/merge`.
	Ref OptCodeScanningRef
	// Filter analyses belonging to the same SARIF upload.
	SarifID OptCodeScanningAnalysisSarifID
}

type CodeScanningUpdateAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

type CodeScanningUploadSarifParams struct {
	Owner string
	Repo  string
}

type CodesOfConductGetConductCodeParams struct {
	Key string
}

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of an organization.
	OrgID int
}

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type EnterpriseAdminCreateRegistrationTokenForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminCreateRemoveTokenForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminDeleteScimGroupFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type EnterpriseAdminDeleteUserFromEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of an organization.
	OrgID int
}

type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of an organization.
	OrgID int
}

type EnterpriseAdminGetAllowedActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminGetAuditLogParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.
	// com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase OptString
	// The event types to include:
	// - `web` - returns web (non-Git) events
	// - `git` - returns Git events
	// - `all` - returns both web and Git events
	// The default is `web`.
	Include OptEnterpriseAdminGetAuditLogInclude
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events after this cursor.
	After OptString
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events before this cursor.
	Before OptString
	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events
	// first, specify `asc`.
	// The default is `desc`.
	Order OptEnterpriseAdminGetAuditLogOrder
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
	// Attributes to exclude.
	ExcludedAttributes OptString
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

type EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type EnterpriseAdminListProvisionedGroupsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Used for pagination: the index of the first result to return.
	StartIndex OptInt
	// Used for pagination: the number of results to return.
	Count OptInt
	// Filter results.
	Filter OptString
	// Attributes to exclude.
	ExcludedAttributes OptString
}

type EnterpriseAdminListProvisionedIdentitiesEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Used for pagination: the index of the first result to return.
	StartIndex OptInt
	// Used for pagination: the number of results to return.
	Count OptInt
	// Filter results.
	Filter OptString
}

type EnterpriseAdminListRunnerApplicationsForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type EnterpriseAdminListSelfHostedRunnersForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of an organization.
	OrgID int
}

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
	// Unique identifier of the self-hosted runner.
	RunnerID int
}

type EnterpriseAdminSetAllowedActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Identifier generated by the GitHub SCIM endpoint.
	ScimGroupID string
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Scim_user_id parameter.
	ScimUserID string
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams struct {
	// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
	Enterprise string
	// Unique identifier of the self-hosted runner group.
	RunnerGroupID int
}

type GistsCheckIsStarredParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsCreateCommentParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsDeleteParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsDeleteCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

type GistsForkParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsGetParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsGetCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

type GistsGetRevisionParams struct {
	// Gist_id parameter.
	GistID string
	Sha    string
}

type GistsListParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListCommentsParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListCommitsParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListForUserParams struct {
	Username string
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListForksParams struct {
	// Gist_id parameter.
	GistID string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListPublicParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsListStarredParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GistsStarParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsUnstarParams struct {
	// Gist_id parameter.
	GistID string
}

type GistsUpdateCommentParams struct {
	// Gist_id parameter.
	GistID string
	// Comment_id parameter.
	CommentID int
}

type GitCreateBlobParams struct {
	Owner string
	Repo  string
}

type GitCreateCommitParams struct {
	Owner string
	Repo  string
}

type GitCreateRefParams struct {
	Owner string
	Repo  string
}

type GitCreateTagParams struct {
	Owner string
	Repo  string
}

type GitCreateTreeParams struct {
	Owner string
	Repo  string
}

type GitDeleteRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

type GitGetBlobParams struct {
	Owner   string
	Repo    string
	FileSha string
}

type GitGetCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

type GitGetRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

type GitGetTagParams struct {
	Owner  string
	Repo   string
	TagSha string
}

type GitGetTreeParams struct {
	Owner   string
	Repo    string
	TreeSha string
	// Setting this parameter to any value returns the objects or subtrees referenced by the tree
	// specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable
	// returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent
	// recursively returning objects or subtrees.
	Recursive OptString
}

type GitListMatchingRefsParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type GitUpdateRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
}

type GitignoreGetTemplateParams struct {
	Name string
}

type InteractionsRemoveRestrictionsForOrgParams struct {
	Org string
}

type InteractionsRemoveRestrictionsForRepoParams struct {
	Owner string
	Repo  string
}

type InteractionsSetRestrictionsForOrgParams struct {
	Org string
}

type InteractionsSetRestrictionsForRepoParams struct {
	Owner string
	Repo  string
}

type IssuesAddAssigneesParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesCheckUserCanBeAssignedParams struct {
	Owner    string
	Repo     string
	Assignee string
}

type IssuesCreateParams struct {
	Owner string
	Repo  string
}

type IssuesCreateCommentParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesCreateLabelParams struct {
	Owner string
	Repo  string
}

type IssuesCreateMilestoneParams struct {
	Owner string
	Repo  string
}

type IssuesDeleteCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type IssuesDeleteLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

type IssuesDeleteMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

type IssuesGetParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesGetCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type IssuesGetEventParams struct {
	Owner   string
	Repo    string
	EventID int
}

type IssuesGetLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

type IssuesGetMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

type IssuesListParams struct {
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since  OptDateTime
	Collab OptBool
	Orgs   OptBool
	Owned  OptBool
	Pulls  OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListAssigneesParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListCommentsParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListCommentsForRepoParams struct {
	Owner string
	Repo  string
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptIssuesListCommentsForRepoSort
	// Either `asc` or `desc`. Ignored without the `sort` parameter.
	Direction OptIssuesListCommentsForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListEventsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListForAuthenticatedUserParams struct {
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListForAuthenticatedUserFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForAuthenticatedUserState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForAuthenticatedUserSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForAuthenticatedUserDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListForOrgParams struct {
	Org string
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or
	// creation.
	Filter OptIssuesListForOrgFilter
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForOrgState
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForOrgSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForOrgDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListForRepoParams struct {
	Owner string
	Repo  string
	// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*`
	// is passed, issues with any milestone are accepted. If the string `none` is passed, issues without
	// milestones are returned.
	Milestone OptString
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State OptIssuesListForRepoState
	// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues
	// assigned to any user.
	Assignee OptString
	// The user that created the issue.
	Creator OptString
	// A user that's mentioned in the issue.
	Mentioned OptString
	// A list of comma separated label names. Example: `bug,ui,@high`.
	Labels OptString
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort OptIssuesListForRepoSort
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptIssuesListForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListLabelsForMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListLabelsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListLabelsOnIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesListMilestonesParams struct {
	Owner string
	Repo  string
	// The state of the milestone. Either `open`, `closed`, or `all`.
	State OptIssuesListMilestonesState
	// What to sort results by. Either `due_on` or `completeness`.
	Sort OptIssuesListMilestonesSort
	// The direction of the sort. Either `asc` or `desc`.
	Direction OptIssuesListMilestonesDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type IssuesLockParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesRemoveAllLabelsParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesRemoveAssigneesParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesRemoveLabelParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	Name        string
}

type IssuesUnlockParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesUpdateParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type IssuesUpdateCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type IssuesUpdateLabelParams struct {
	Owner string
	Repo  string
	Name  string
}

type IssuesUpdateMilestoneParams struct {
	Owner string
	Repo  string
	// Milestone_number parameter.
	MilestoneNumber int
}

type LicensesGetParams struct {
	License string
}

type LicensesGetAllCommonlyUsedParams struct {
	Featured OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type LicensesGetForRepoParams struct {
	Owner string
	Repo  string
}

type MigrationsCancelImportParams struct {
	Owner string
	Repo  string
}

type MigrationsDeleteArchiveForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
}

type MigrationsDeleteArchiveForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
}

type MigrationsDownloadArchiveForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
}

type MigrationsGetArchiveForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
}

type MigrationsGetCommitAuthorsParams struct {
	Owner string
	Repo  string
	// A user ID. Only return users with an ID greater than this ID.
	Since OptInt
}

type MigrationsGetImportStatusParams struct {
	Owner string
	Repo  string
}

type MigrationsGetLargeFilesParams struct {
	Owner string
	Repo  string
}

type MigrationsGetStatusForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
	Exclude     []string
}

type MigrationsGetStatusForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Exclude attributes from the API response to improve performance.
	Exclude []MigrationsGetStatusForOrgExcludeItem
}

type MigrationsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type MigrationsListForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Exclude attributes from the API response to improve performance.
	Exclude []MigrationsListForOrgExcludeItem
}

type MigrationsListReposForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type MigrationsListReposForUserParams struct {
	// Migration_id parameter.
	MigrationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type MigrationsMapCommitAuthorParams struct {
	Owner    string
	Repo     string
	AuthorID int
}

type MigrationsSetLfsPreferenceParams struct {
	Owner string
	Repo  string
}

type MigrationsStartForOrgParams struct {
	Org string
}

type MigrationsStartImportParams struct {
	Owner string
	Repo  string
}

type MigrationsUnlockRepoForAuthenticatedUserParams struct {
	// Migration_id parameter.
	MigrationID int
	// Repo_name parameter.
	RepoName string
}

type MigrationsUnlockRepoForOrgParams struct {
	Org string
	// Migration_id parameter.
	MigrationID int
	// Repo_name parameter.
	RepoName string
}

type MigrationsUpdateImportParams struct {
	Owner string
	Repo  string
}

type OAuthAuthorizationsDeleteAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

type OAuthAuthorizationsDeleteGrantParams struct {
	// Grant_id parameter.
	GrantID int
}

type OAuthAuthorizationsGetAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

type OAuthAuthorizationsGetGrantParams struct {
	// Grant_id parameter.
	GrantID int
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppParams struct {
	// The client ID of your GitHub app.
	ClientID string
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParams struct {
	// The client ID of your GitHub app.
	ClientID    string
	Fingerprint string
}

type OAuthAuthorizationsListAuthorizationsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// The client ID of your GitHub app.
	ClientID OptString
}

type OAuthAuthorizationsListGrantsParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// The client ID of your GitHub app.
	ClientID OptString
}

type OAuthAuthorizationsUpdateAuthorizationParams struct {
	// Authorization_id parameter.
	AuthorizationID int
}

type OrgsBlockUserParams struct {
	Org      string
	Username string
}

type OrgsCancelInvitationParams struct {
	Org string
	// Invitation_id parameter.
	InvitationID int
}

type OrgsCheckBlockedUserParams struct {
	Org      string
	Username string
}

type OrgsCheckMembershipForUserParams struct {
	Org      string
	Username string
}

type OrgsCheckPublicMembershipForUserParams struct {
	Org      string
	Username string
}

type OrgsConvertMemberToOutsideCollaboratorParams struct {
	Org      string
	Username string
}

type OrgsCreateInvitationParams struct {
	Org string
}

type OrgsCreateWebhookParams struct {
	Org string
}

type OrgsDeleteWebhookParams struct {
	Org    string
	HookID int
}

type OrgsGetParams struct {
	Org string
}

type OrgsGetAuditLogParams struct {
	Org string
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.
	// com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase OptString
	// The event types to include:
	// - `web` - returns web (non-Git) events
	// - `git` - returns Git events
	// - `all` - returns both web and Git events
	// The default is `web`.
	Include OptOrgsGetAuditLogInclude
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events after this cursor.
	After OptString
	// A cursor, as given in the [Link header](https://docs.github.
	// com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches
	// for events before this cursor.
	Before OptString
	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events
	// first, specify `asc`.
	// The default is `desc`.
	Order OptOrgsGetAuditLogOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsGetMembershipForAuthenticatedUserParams struct {
	Org string
}

type OrgsGetMembershipForUserParams struct {
	Org      string
	Username string
}

type OrgsGetWebhookParams struct {
	Org    string
	HookID int
}

type OrgsGetWebhookConfigForOrgParams struct {
	Org    string
	HookID int
}

type OrgsGetWebhookDeliveryParams struct {
	Org        string
	HookID     int
	DeliveryID int
}

type OrgsListParams struct {
	// An organization ID. Only return organizations with an ID greater than this ID.
	Since OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type OrgsListBlockedUsersParams struct {
	Org string
}

type OrgsListFailedInvitationsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListInvitationTeamsParams struct {
	Org string
	// Invitation_id parameter.
	InvitationID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListMembersParams struct {
	Org string
	// Filter members returned in the list. Can be one of:
	// \* `2fa_disabled` - Members without [two-factor authentication](https://github.
	// com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
	// \* `all` - All members the authenticated user can see.
	Filter OptOrgsListMembersFilter
	// Filter members returned by their role. Can be one of:
	// \* `all` - All members of the organization, regardless of role.
	// \* `admin` - Organization owners.
	// \* `member` - Non-owner organization members.
	Role OptOrgsListMembersRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListMembershipsForAuthenticatedUserParams struct {
	// Indicates the state of the memberships to return. Can be either `active` or `pending`. If not
	// specified, the API returns both active and pending memberships.
	State OptOrgsListMembershipsForAuthenticatedUserState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListOutsideCollaboratorsParams struct {
	Org string
	// Filter the list of outside collaborators. Can be one of:
	// \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.
	// com/blog/1614-two-factor-authentication) enabled.
	// \* `all`: All outside collaborators.
	Filter OptOrgsListOutsideCollaboratorsFilter
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListPendingInvitationsParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListPublicMembersParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsListSamlSSOAuthorizationsParams struct {
	Org string
}

type OrgsListWebhookDeliveriesParams struct {
	Org    string
	HookID int
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

type OrgsListWebhooksParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type OrgsPingWebhookParams struct {
	Org    string
	HookID int
}

type OrgsRedeliverWebhookDeliveryParams struct {
	Org        string
	HookID     int
	DeliveryID int
}

type OrgsRemoveMemberParams struct {
	Org      string
	Username string
}

type OrgsRemoveMembershipForUserParams struct {
	Org      string
	Username string
}

type OrgsRemoveOutsideCollaboratorParams struct {
	Org      string
	Username string
}

type OrgsRemovePublicMembershipForAuthenticatedUserParams struct {
	Org      string
	Username string
}

type OrgsRemoveSamlSSOAuthorizationParams struct {
	Org          string
	CredentialID int
}

type OrgsSetMembershipForUserParams struct {
	Org      string
	Username string
}

type OrgsSetPublicMembershipForAuthenticatedUserParams struct {
	Org      string
	Username string
}

type OrgsUnblockUserParams struct {
	Org      string
	Username string
}

type OrgsUpdateMembershipForAuthenticatedUserParams struct {
	Org string
}

type OrgsUpdateWebhookParams struct {
	Org    string
	HookID int
}

type OrgsUpdateWebhookConfigForOrgParams struct {
	Org    string
	HookID int
}

type PackagesDeletePackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
}

type PackagesDeletePackageForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
}

type PackagesDeletePackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

type PackagesDeletePackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesDeletePackageVersionForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesDeletePackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesDeletePackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The state of the package, either active or deleted.
	State OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The state of the package, either active or deleted.
	State OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

type PackagesGetPackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
}

type PackagesGetPackageForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForOrganizationPackageType
	// The name of the package.
	PackageName string
	Org         string
}

type PackagesGetPackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
}

type PackagesGetPackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesGetPackageVersionForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForOrganizationPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesGetPackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesGetPackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
	Username         string
}

type PackagesListPackagesForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForAuthenticatedUserPackageType
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForAuthenticatedUserVisibility
}

type PackagesListPackagesForOrganizationParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForOrganizationPackageType
	Org         string
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForOrganizationVisibility
}

type PackagesListPackagesForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesListPackagesForUserPackageType
	// The selected visibility of the packages. Can be one of `public`, `private`, or `internal`. Only
	// `container` package_types currently support `internal` visibility properly. For other ecosystems
	// `internal` is synonymous with `private`. This parameter is optional and only filters an existing
	// result set.
	Visibility OptPackagesListPackagesForUserVisibility
	Username   string
}

type PackagesRestorePackageForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Package token.
	Token OptString
}

type PackagesRestorePackageForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Package token.
	Token OptString
}

type PackagesRestorePackageForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Package token.
	Token OptString
}

type PackagesRestorePackageVersionForAuthenticatedUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForAuthenticatedUserPackageType
	// The name of the package.
	PackageName string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesRestorePackageVersionForOrgParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForOrgPackageType
	// The name of the package.
	PackageName string
	Org         string
	// Unique identifier of the package version.
	PackageVersionID int
}

type PackagesRestorePackageVersionForUserParams struct {
	// The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or
	// `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to
	// GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker`
	// to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if
	// these have now been migrated to the Container registry.
	PackageType PackagesRestorePackageVersionForUserPackageType
	// The name of the package.
	PackageName string
	Username    string
	// Unique identifier of the package version.
	PackageVersionID int
}

type ProjectsAddCollaboratorParams struct {
	ProjectID int
	Username  string
}

type ProjectsCreateColumnParams struct {
	ProjectID int
}

type ProjectsCreateForOrgParams struct {
	Org string
}

type ProjectsCreateForRepoParams struct {
	Owner string
	Repo  string
}

type ProjectsDeleteParams struct {
	ProjectID int
}

type ProjectsDeleteCardParams struct {
	// Card_id parameter.
	CardID int
}

type ProjectsDeleteColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

type ProjectsGetParams struct {
	ProjectID int
}

type ProjectsGetCardParams struct {
	// Card_id parameter.
	CardID int
}

type ProjectsGetColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

type ProjectsGetPermissionForUserParams struct {
	ProjectID int
	Username  string
}

type ProjectsListCardsParams struct {
	// Column_id parameter.
	ColumnID int
	// Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`,
	// or `not_archived`.
	ArchivedState OptProjectsListCardsArchivedState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsListCollaboratorsParams struct {
	ProjectID int
	// Filters the collaborators by their affiliation. Can be one of:
	// \* `outside`: Outside collaborators of a project that are not a member of the project's
	// organization.
	// \* `direct`: Collaborators with permissions to a project, regardless of organization membership
	// status.
	// \* `all`: All collaborators the authenticated user can see.
	Affiliation OptProjectsListCollaboratorsAffiliation
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsListColumnsParams struct {
	ProjectID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsListForOrgParams struct {
	Org string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForOrgState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsListForRepoParams struct {
	Owner string
	Repo  string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForRepoState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsListForUserParams struct {
	Username string
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State OptProjectsListForUserState
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ProjectsMoveCardParams struct {
	// Card_id parameter.
	CardID int
}

type ProjectsMoveColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

type ProjectsRemoveCollaboratorParams struct {
	ProjectID int
	Username  string
}

type ProjectsUpdateParams struct {
	ProjectID int
}

type ProjectsUpdateCardParams struct {
	// Card_id parameter.
	CardID int
}

type ProjectsUpdateColumnParams struct {
	// Column_id parameter.
	ColumnID int
}

type PullsCheckIfMergedParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsCreateParams struct {
	Owner string
	Repo  string
}

type PullsCreateReplyForReviewCommentParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Comment_id parameter.
	CommentID int
}

type PullsCreateReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsCreateReviewCommentParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsDeletePendingReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

type PullsDeleteReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type PullsDismissReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

type PullsGetParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsGetReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

type PullsGetReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type PullsListParams struct {
	Owner string
	Repo  string
	// Either `open`, `closed`, or `all` to filter by state.
	State OptPullsListState
	// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or
	// `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
	Head OptString
	// Filter pulls by base branch name. Example: `gh-pages`.
	Base OptString
	// What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or
	// `long-running` (age, filtering by pulls updated in the last month).
	Sort OptPullsListSort
	// The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created`
	// or sort is not specified, otherwise `asc`.
	Direction OptPullsListDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListCommentsForReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListCommitsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListFilesParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListRequestedReviewersParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListReviewCommentsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort OptPullsListReviewCommentsSort
	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction OptPullsListReviewCommentsDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListReviewCommentsForRepoParams struct {
	Owner string
	Repo  string
	Sort  OptPullsListReviewCommentsForRepoSort
	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction OptPullsListReviewCommentsForRepoDirection
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsListReviewsParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type PullsMergeParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsRemoveRequestedReviewersParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsSubmitReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

type PullsUpdateParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsUpdateBranchParams struct {
	Owner      string
	Repo       string
	PullNumber int
}

type PullsUpdateReviewParams struct {
	Owner      string
	Repo       string
	PullNumber int
	// Review_id parameter.
	ReviewID int
}

type PullsUpdateReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReactionsCreateForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReactionsCreateForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
}

type ReactionsCreateForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReactionsCreateForPullRequestReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReactionsCreateForReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

type ReactionsCreateForTeamDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

type ReactionsCreateForTeamDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

type ReactionsCreateForTeamDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

type ReactionsCreateForTeamDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

type ReactionsDeleteForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

type ReactionsDeleteForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	ReactionID  int
}

type ReactionsDeleteForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

type ReactionsDeleteForPullRequestCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID  int
	ReactionID int
}

type ReactionsDeleteForTeamDiscussionParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	ReactionID       int
}

type ReactionsDeleteForTeamDiscussionCommentParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
	ReactionID       int
}

type ReactionsDeleteLegacyParams struct {
	ReactionID int
}

type ReactionsListForCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a commit comment.
	Content OptReactionsListForCommitCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForIssueParams struct {
	Owner string
	Repo  string
	// Issue_number parameter.
	IssueNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to an issue.
	Content OptReactionsListForIssueContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForIssueCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to an issue comment.
	Content OptReactionsListForIssueCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForPullRequestReviewCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a pull request review comment.
	Content OptReactionsListForPullRequestReviewCommentContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForTeamDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion comment.
	Content OptReactionsListForTeamDiscussionCommentInOrgContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForTeamDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion comment.
	Content OptReactionsListForTeamDiscussionCommentLegacyContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForTeamDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion.
	Content OptReactionsListForTeamDiscussionInOrgContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReactionsListForTeamDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types).
	// Omit this parameter to list all reactions to a team discussion.
	Content OptReactionsListForTeamDiscussionLegacyContent
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposAcceptInvitationParams struct {
	// Invitation_id parameter.
	InvitationID int
}

type ReposAddAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposAddCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

type ReposAddStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposAddTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposAddUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposCheckCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

type ReposCheckVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

type ReposCompareCommitsParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// The base branch and head branch to compare. This parameter expects the format `{base}...{head}`.
	Basehead string
}

type ReposCreateAutolinkParams struct {
	Owner string
	Repo  string
}

type ReposCreateCommitCommentParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

type ReposCreateCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposCreateCommitStatusParams struct {
	Owner string
	Repo  string
	Sha   string
}

type ReposCreateDeployKeyParams struct {
	Owner string
	Repo  string
}

type ReposCreateDeploymentParams struct {
	Owner string
	Repo  string
}

type ReposCreateDeploymentStatusParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

type ReposCreateDispatchEventParams struct {
	Owner string
	Repo  string
}

type ReposCreateForkParams struct {
	Owner string
	Repo  string
}

type ReposCreateInOrgParams struct {
	Org string
}

type ReposCreateOrUpdateFileContentsParams struct {
	Owner string
	Repo  string
	// Path parameter.
	Path string
}

type ReposCreatePagesSiteParams struct {
	Owner string
	Repo  string
}

type ReposCreateReleaseParams struct {
	Owner string
	Repo  string
}

type ReposCreateUsingTemplateParams struct {
	TemplateOwner string
	TemplateRepo  string
}

type ReposCreateWebhookParams struct {
	Owner string
	Repo  string
}

type ReposDeclineInvitationParams struct {
	// Invitation_id parameter.
	InvitationID int
}

type ReposDeleteParams struct {
	Owner string
	Repo  string
}

type ReposDeleteAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposDeleteAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposDeleteAnEnvironmentParams struct {
	Owner string
	Repo  string
	// The name of the environment.
	EnvironmentName string
}

type ReposDeleteAutolinkParams struct {
	Owner string
	Repo  string
	// Autolink_id parameter.
	AutolinkID int
}

type ReposDeleteBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposDeleteCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReposDeleteCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposDeleteDeployKeyParams struct {
	Owner string
	Repo  string
	// Key_id parameter.
	KeyID int
}

type ReposDeleteDeploymentParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

type ReposDeleteFileParams struct {
	Owner string
	Repo  string
	// Path parameter.
	Path string
}

type ReposDeleteInvitationParams struct {
	Owner string
	Repo  string
	// Invitation_id parameter.
	InvitationID int
}

type ReposDeletePagesSiteParams struct {
	Owner string
	Repo  string
}

type ReposDeletePullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposDeleteReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

type ReposDeleteReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

type ReposDeleteWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposDisableAutomatedSecurityFixesParams struct {
	Owner string
	Repo  string
}

type ReposDisableLfsForRepoParams struct {
	Owner string
	Repo  string
}

type ReposDisableVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

type ReposDownloadTarballArchiveParams struct {
	Owner string
	Repo  string
	Ref   string
}

type ReposDownloadZipballArchiveParams struct {
	Owner string
	Repo  string
	Ref   string
}

type ReposEnableAutomatedSecurityFixesParams struct {
	Owner string
	Repo  string
}

type ReposEnableLfsForRepoParams struct {
	Owner string
	Repo  string
}

type ReposEnableVulnerabilityAlertsParams struct {
	Owner string
	Repo  string
}

type ReposGetParams struct {
	Owner string
	Repo  string
}

type ReposGetAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetAllStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetAllTopicsParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type ReposGetAppsWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetAutolinkParams struct {
	Owner string
	Repo  string
	// Autolink_id parameter.
	AutolinkID int
}

type ReposGetBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetClonesParams struct {
	Owner string
	Repo  string
	// Must be one of: `day`, `week`.
	Per OptReposGetClonesPer
}

type ReposGetCodeFrequencyStatsParams struct {
	Owner string
	Repo  string
}

type ReposGetCollaboratorPermissionLevelParams struct {
	Owner    string
	Repo     string
	Username string
}

type ReposGetCombinedStatusForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposGetCommitParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
	// Ref parameter.
	Ref string
}

type ReposGetCommitActivityStatsParams struct {
	Owner string
	Repo  string
}

type ReposGetCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReposGetCommitSignatureProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetCommunityProfileMetricsParams struct {
	Owner string
	Repo  string
}

type ReposGetContributorsStatsParams struct {
	Owner string
	Repo  string
}

type ReposGetDeployKeyParams struct {
	Owner string
	Repo  string
	// Key_id parameter.
	KeyID int
}

type ReposGetDeploymentParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
}

type ReposGetDeploymentStatusParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
	StatusID     int
}

type ReposGetLatestPagesBuildParams struct {
	Owner string
	Repo  string
}

type ReposGetLatestReleaseParams struct {
	Owner string
	Repo  string
}

type ReposGetPagesParams struct {
	Owner string
	Repo  string
}

type ReposGetPagesBuildParams struct {
	Owner   string
	Repo    string
	BuildID int
}

type ReposGetPagesHealthCheckParams struct {
	Owner string
	Repo  string
}

type ReposGetParticipationStatsParams struct {
	Owner string
	Repo  string
}

type ReposGetPullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetPunchCardStatsParams struct {
	Owner string
	Repo  string
}

type ReposGetReadmeParams struct {
	Owner string
	Repo  string
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`).
	Ref OptString
}

type ReposGetReadmeInDirectoryParams struct {
	Owner string
	Repo  string
	// The alternate path to look for a README file.
	Dir string
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`).
	Ref OptString
}

type ReposGetReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

type ReposGetReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

type ReposGetReleaseByTagParams struct {
	Owner string
	Repo  string
	// Tag parameter.
	Tag string
}

type ReposGetStatusChecksProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetTeamsWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetTopPathsParams struct {
	Owner string
	Repo  string
}

type ReposGetTopReferrersParams struct {
	Owner string
	Repo  string
}

type ReposGetUsersWithAccessToProtectedBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposGetViewsParams struct {
	Owner string
	Repo  string
	// Must be one of: `day`, `week`.
	Per OptReposGetViewsPer
}

type ReposGetWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposGetWebhookConfigForRepoParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposGetWebhookDeliveryParams struct {
	Owner      string
	Repo       string
	HookID     int
	DeliveryID int
}

type ReposListAutolinksParams struct {
	Owner string
	Repo  string
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListBranchesParams struct {
	Owner string
	Repo  string
	// Setting to `true` returns only protected branches. When set to `false`, only unprotected branches
	// are returned. Omitting this parameter returns all branches.
	Protected OptBool
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListBranchesForHeadCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
}

type ReposListCollaboratorsParams struct {
	Owner string
	Repo  string
	// Filter collaborators returned by their affiliation. Can be one of:
	// \* `outside`: All outside collaborators of an organization-owned repository.
	// \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of
	// organization membership status.
	// \* `all`: All collaborators the authenticated user can see.
	Affiliation OptReposListCollaboratorsAffiliation
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListCommentsForCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListCommitCommentsForRepoParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListCommitStatusesForRefParams struct {
	Owner string
	Repo  string
	// Ref parameter.
	Ref string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListCommitsParams struct {
	Owner string
	Repo  string
	// SHA or branch to start listing commits from. Default: the repository’s default branch (usually
	// `master`).
	Sha OptString
	// Only commits containing this file path will be returned.
	Path OptString
	// GitHub login or email address by which to filter by commit author.
	Author OptString
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Until OptDateTime
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListContributorsParams struct {
	Owner string
	Repo  string
	// Set to `1` or `true` to include anonymous contributors in results.
	Anon OptString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListDeployKeysParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListDeploymentStatusesParams struct {
	Owner string
	Repo  string
	// Deployment_id parameter.
	DeploymentID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListDeploymentsParams struct {
	Owner string
	Repo  string
	// The SHA recorded at creation time.
	Sha OptString
	// The name of the ref. This can be a branch, tag, or SHA.
	Ref OptString
	// The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
	Task OptString
	// The name of the environment that was deployed to (e.g., `staging` or `production`).
	Environment OptNilString
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListForAuthenticatedUserParams struct {
	// Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`,
	// or `private`.
	Visibility OptReposListForAuthenticatedUserVisibility
	// Comma-separated list of values. Can include:
	// \* `owner`: Repositories that are owned by the authenticated user.
	// \* `collaborator`: Repositories that the user has been added to as a collaborator.
	// \* `organization_member`: Repositories that the user has access to through being a member of an
	// organization. This includes every repository on every team that the user is on.
	Affiliation OptString
	// Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of
	// `all`, `owner`, `internal`, `private`, `member`. Default: `all`
	// Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will
	// cause a `422` error if used in the same request as **visibility** or **affiliation**.
	Type OptReposListForAuthenticatedUserType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForAuthenticatedUserSort
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction OptReposListForAuthenticatedUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.
	// wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since OptDateTime
	// Only show notifications updated before the given time. This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before OptDateTime
}

type ReposListForOrgParams struct {
	Org string
	// Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`,
	// `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`,
	// `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with
	// an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can
	// also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls
	// this API with an installation access token.
	Type OptReposListForOrgType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForOrgSort
	// Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`.
	Direction OptReposListForOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListForUserParams struct {
	Username string
	// Can be one of `all`, `owner`, `member`.
	Type OptReposListForUserType
	// Can be one of `created`, `updated`, `pushed`, `full_name`.
	Sort OptReposListForUserSort
	// Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction OptReposListForUserDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListForksParams struct {
	Owner string
	Repo  string
	// The sort order. Can be either `newest`, `oldest`, or `stargazers`.
	Sort OptReposListForksSort
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListInvitationsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListInvitationsForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListLanguagesParams struct {
	Owner string
	Repo  string
}

type ReposListPagesBuildsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListPublicParams struct {
	// A repository ID. Only return repositories with an ID greater than this ID.
	Since OptInt
}

type ReposListPullRequestsAssociatedWithCommitParams struct {
	Owner string
	Repo  string
	// Commit_sha parameter.
	CommitSha string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListReleaseAssetsParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListReleasesParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListTagsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListTeamsParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposListWebhookDeliveriesParams struct {
	Owner  string
	Repo   string
	HookID int
	// Results per page (max 100).
	PerPage OptInt
	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to
	// the `link` header for the next and previous page cursors.
	Cursor OptString
}

type ReposListWebhooksParams struct {
	Owner string
	Repo  string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type ReposMergeParams struct {
	Owner string
	Repo  string
}

type ReposMergeUpstreamParams struct {
	Owner string
	Repo  string
}

type ReposPingWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposRedeliverWebhookDeliveryParams struct {
	Owner      string
	Repo       string
	HookID     int
	DeliveryID int
}

type ReposRemoveAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposRemoveCollaboratorParams struct {
	Owner    string
	Repo     string
	Username string
}

type ReposRemoveStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposRemoveStatusCheckProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposRemoveTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposRemoveUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposRenameBranchParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposReplaceAllTopicsParams struct {
	Owner string
	Repo  string
}

type ReposRequestPagesBuildParams struct {
	Owner string
	Repo  string
}

type ReposSetAdminBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposSetAppAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposSetStatusCheckContextsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposSetTeamAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposSetUserAccessRestrictionsParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposTestPushWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposTransferParams struct {
	Owner string
	Repo  string
}

type ReposUpdateParams struct {
	Owner string
	Repo  string
}

type ReposUpdateBranchProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposUpdateCommitCommentParams struct {
	Owner string
	Repo  string
	// Comment_id parameter.
	CommentID int
}

type ReposUpdateInvitationParams struct {
	Owner string
	Repo  string
	// Invitation_id parameter.
	InvitationID int
}

type ReposUpdatePullRequestReviewProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposUpdateReleaseParams struct {
	Owner string
	Repo  string
	// Release_id parameter.
	ReleaseID int
}

type ReposUpdateReleaseAssetParams struct {
	Owner string
	Repo  string
	// Asset_id parameter.
	AssetID int
}

type ReposUpdateStatusCheckProtectionParams struct {
	Owner string
	Repo  string
	// The name of the branch.
	Branch string
}

type ReposUpdateWebhookParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ReposUpdateWebhookConfigForRepoParams struct {
	Owner  string
	Repo   string
	HookID int
}

type ScimDeleteUserFromOrgParams struct {
	Org string
	// Scim_user_id parameter.
	ScimUserID string
}

type SearchCodeParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.
	// com/articles/searching-code/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has
	// been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchCodeSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchCodeOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchCommitsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.
	// github.com/articles/searching-commits/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query by `author-date` or `committer-date`. Default: [best
	// match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchCommitsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchCommitsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchIssuesAndPullRequestsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull
	// requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed
	// list of qualifiers.
	Q string
	// Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`,
	// `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`,
	// or `interactions`. You can also sort results by how recently the items were `created` or `updated`,
	//  Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchIssuesAndPullRequestsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchIssuesAndPullRequestsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchLabelsParams struct {
	// The id of the repository.
	RepositoryID int
	// The search keywords. This endpoint does not accept qualifiers in the query. To learn more about
	// the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query).
	Q string
	// Sorts the results of your query by when the label was `created` or `updated`. Default: [best
	// match](https://docs.github.com/rest/reference/search#ranking-search-results).
	Sort OptSearchLabelsSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchLabelsOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchReposParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching for
	// repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list
	// of qualifiers.
	Q string
	// Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how
	// recently the items were `updated`. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchReposSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchReposOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchTopicsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query).
	Q string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SearchUsersParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your
	// search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To
	// learn more about the format of the query, see [Constructing a search query](https://docs.github.
	// com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.
	// com/articles/searching-users/)" for a detailed list of qualifiers.
	Q string
	// Sorts the results of your query by number of `followers` or `repositories`, or when the person
	// `joined` GitHub. Default: [best match](https://docs.github.
	// com/rest/reference/search#ranking-search-results).
	Sort OptSearchUsersSort
	// Determines whether the first search result returned is the highest number of matches (`desc`) or
	// lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order OptSearchUsersOrder
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type SecretScanningGetAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

type SecretScanningListAlertsForOrgParams struct {
	Org string
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State OptSecretScanningListAlertsForOrgState
	// A comma separated list of secret types to return. By default all secret types are returned.
	SecretType OptString
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type SecretScanningListAlertsForRepoParams struct {
	Owner string
	Repo  string
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State OptSecretScanningListAlertsForRepoState
	// A comma separated list of secret types to return. By default all secret types are returned. See
	// "[About secret scanning for private repositories](https://docs.github.
	// com/code-security/secret-security/about-secret-scanning#about-secret-scanning-for-private-repositories)" for a complete list of secret types (API slug).
	SecretType OptString
	// Page number of the results to fetch.
	Page OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type SecretScanningUpdateAlertParams struct {
	Owner string
	Repo  string
	// The number that identifies an alert. You can find this at the end of the URL for a code scanning
	// alert within GitHub, and in the `number` field in the response from the `GET
	// /repos/{owner}/{repo}/code-scanning/alerts` operation.
	AlertNumber AlertNumber
}

type TeamsAddMemberLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsAddOrUpdateMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

type TeamsAddOrUpdateMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsAddOrUpdateProjectPermissionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

type TeamsAddOrUpdateProjectPermissionsLegacyParams struct {
	TeamID    int
	ProjectID int
}

type TeamsAddOrUpdateRepoPermissionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

type TeamsAddOrUpdateRepoPermissionsLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

type TeamsCheckPermissionsForProjectInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

type TeamsCheckPermissionsForProjectLegacyParams struct {
	TeamID    int
	ProjectID int
}

type TeamsCheckPermissionsForRepoInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

type TeamsCheckPermissionsForRepoLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

type TeamsCreateParams struct {
	Org string
}

type TeamsCreateDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

type TeamsCreateDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

type TeamsCreateDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsCreateDiscussionLegacyParams struct {
	TeamID int
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyParams struct {
	TeamID int
}

type TeamsDeleteDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

type TeamsDeleteDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

type TeamsDeleteDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

type TeamsDeleteDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

type TeamsDeleteInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsDeleteLegacyParams struct {
	TeamID int
}

type TeamsGetByNameParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsGetDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

type TeamsGetDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

type TeamsGetDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

type TeamsGetDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

type TeamsGetLegacyParams struct {
	TeamID int
}

type TeamsGetMemberLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsGetMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

type TeamsGetMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsListParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListChildInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListChildLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListDiscussionCommentsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionCommentsInOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListDiscussionCommentsLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionCommentsLegacyDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListDiscussionsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionsInOrgDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
	// Pinned discussions only filter.
	Pinned OptString
}

type TeamsListDiscussionsLegacyParams struct {
	TeamID int
	// One of `asc` (ascending) or `desc` (descending).
	Direction OptTeamsListDiscussionsLegacyDirection
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListIdpGroupsForLegacyParams struct {
	TeamID int
}

type TeamsListIdpGroupsForOrgParams struct {
	Org string
	// Results per page (max 100).
	PerPage OptInt
	// Page token.
	Page OptString
}

type TeamsListIdpGroupsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsListMembersInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Filters members returned by their role in the team. Can be one of:
	// \* `member` - normal members of the team.
	// \* `maintainer` - team maintainers.
	// \* `all` - all members of the team.
	Role OptTeamsListMembersInOrgRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListMembersLegacyParams struct {
	TeamID int
	// Filters members returned by their role in the team. Can be one of:
	// \* `member` - normal members of the team.
	// \* `maintainer` - team maintainers.
	// \* `all` - all members of the team.
	Role OptTeamsListMembersLegacyRole
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListPendingInvitationsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListPendingInvitationsLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListProjectsInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListProjectsLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListReposInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsListReposLegacyParams struct {
	TeamID int
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type TeamsRemoveMemberLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsRemoveMembershipForUserInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Username string
}

type TeamsRemoveMembershipForUserLegacyParams struct {
	TeamID   int
	Username string
}

type TeamsRemoveProjectInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug  string
	ProjectID int
}

type TeamsRemoveProjectLegacyParams struct {
	TeamID    int
	ProjectID int
}

type TeamsRemoveRepoInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
	Owner    string
	Repo     string
}

type TeamsRemoveRepoLegacyParams struct {
	TeamID int
	Owner  string
	Repo   string
}

type TeamsUpdateDiscussionCommentInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
	CommentNumber    int
}

type TeamsUpdateDiscussionCommentLegacyParams struct {
	TeamID           int
	DiscussionNumber int
	CommentNumber    int
}

type TeamsUpdateDiscussionInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug         string
	DiscussionNumber int
}

type TeamsUpdateDiscussionLegacyParams struct {
	TeamID           int
	DiscussionNumber int
}

type TeamsUpdateInOrgParams struct {
	Org string
	// Team_slug parameter.
	TeamSlug string
}

type TeamsUpdateLegacyParams struct {
	TeamID int
}

type UsersBlockParams struct {
	Username string
}

type UsersCheckBlockedParams struct {
	Username string
}

type UsersCheckFollowingForUserParams struct {
	Username   string
	TargetUser string
}

type UsersCheckPersonIsFollowedByAuthenticatedParams struct {
	Username string
}

type UsersDeleteGpgKeyForAuthenticatedParams struct {
	// Gpg_key_id parameter.
	GpgKeyID int
}

type UsersDeletePublicSSHKeyForAuthenticatedParams struct {
	// Key_id parameter.
	KeyID int
}

type UsersFollowParams struct {
	Username string
}

type UsersGetByUsernameParams struct {
	Username string
}

type UsersGetContextForUserParams struct {
	Username string
	// Identifies which additional information you'd like to receive about the person's hovercard. Can be
	// `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
	SubjectType OptUsersGetContextForUserSubjectType
	// Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
	SubjectID OptString
}

type UsersGetGpgKeyForAuthenticatedParams struct {
	// Gpg_key_id parameter.
	GpgKeyID int
}

type UsersGetPublicSSHKeyForAuthenticatedParams struct {
	// Key_id parameter.
	KeyID int
}

type UsersListParams struct {
	// A user ID. Only return users with an ID greater than this ID.
	Since OptInt
	// Results per page (max 100).
	PerPage OptInt
}

type UsersListEmailsForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListFollowedByAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListFollowersForAuthenticatedUserParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListFollowersForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListFollowingForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListGpgKeysForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListGpgKeysForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListPublicEmailsForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListPublicKeysForUserParams struct {
	Username string
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersListPublicSSHKeysForAuthenticatedParams struct {
	// Results per page (max 100).
	PerPage OptInt
	// Page number of the results to fetch.
	Page OptInt
}

type UsersUnblockParams struct {
	Username string
}

type UsersUnfollowParams struct {
	Username string
}
