// Code generated by ogen, DO NOT EDIT.

package api

type ListAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListApiextensionsV1CustomResourceDefinitionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListApiregistrationV1APIServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1ControllerRevisionForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAppsV1DaemonSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAppsV1DeploymentForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAppsV1NamespacedControllerRevisionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1NamespacedDaemonSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1NamespacedDeploymentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1NamespacedReplicaSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1NamespacedStatefulSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAppsV1ReplicaSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAppsV1StatefulSetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListBatchV1CronJobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListBatchV1JobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListBatchV1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListBatchV1NamespacedJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListBatchV1beta1CronJobForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListBatchV1beta1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCertificatesV1CertificateSigningRequestParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoordinationV1LeaseForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoordinationV1NamespacedLeaseParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1ComponentStatusParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1ConfigMapForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1EndpointsForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1LimitRangeForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1NamespaceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedConfigMapParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedEndpointsParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedLimitRangeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedPersistentVolumeClaimParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedPodParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedPodTemplateParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedReplicationControllerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedResourceQuotaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedSecretParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NamespacedServiceAccountParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1NodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1PersistentVolumeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListCoreV1PersistentVolumeClaimForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1PodForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1PodTemplateForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1ReplicationControllerForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1ResourceQuotaForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1SecretForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1ServiceAccountForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListCoreV1ServiceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListDiscoveryV1EndpointSliceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListDiscoveryV1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListEventsV1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListEventsV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListEventsV1beta1EventForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListEventsV1beta1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListInternalApiserverV1alpha1StorageVersionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNetworkingV1IngressClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNetworkingV1IngressForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListNetworkingV1NamespacedIngressParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNetworkingV1NamespacedNetworkPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNetworkingV1NetworkPolicyForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListNodeV1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNodeV1alpha1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListNodeV1beta1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListPolicyV1PodDisruptionBudgetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListPolicyV1beta1PodSecurityPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListRbacAuthorizationV1ClusterRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListRbacAuthorizationV1ClusterRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListRbacAuthorizationV1NamespacedRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListRbacAuthorizationV1RoleBindingForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListRbacAuthorizationV1RoleForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListSchedulingV1PriorityClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1CSIDriverParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1CSINodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1StorageClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1VolumeAttachmentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type ListStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type LogFileHandlerParams struct {
	// Path to the log.
	Logpath string
}

type ReadAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// Name of the MutatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// Name of the ValidatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadApiextensionsV1CustomResourceDefinitionParams struct {
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadApiextensionsV1CustomResourceDefinitionStatusParams struct {
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadApiregistrationV1APIServiceParams struct {
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadApiregistrationV1APIServiceStatusParams struct {
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedControllerRevisionParams struct {
	// Name of the ControllerRevision.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedDaemonSetParams struct {
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedDaemonSetStatusParams struct {
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedDeploymentParams struct {
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedDeploymentScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedDeploymentStatusParams struct {
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedReplicaSetParams struct {
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedReplicaSetScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedReplicaSetStatusParams struct {
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedStatefulSetParams struct {
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedStatefulSetScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAppsV1NamespacedStatefulSetStatusParams struct {
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams struct {
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1NamespacedCronJobParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1NamespacedCronJobStatusParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1NamespacedJobParams struct {
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1NamespacedJobStatusParams struct {
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1beta1NamespacedCronJobParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadBatchV1beta1NamespacedCronJobStatusParams struct {
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCertificatesV1CertificateSigningRequestParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCertificatesV1CertificateSigningRequestApprovalParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCertificatesV1CertificateSigningRequestStatusParams struct {
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoordinationV1NamespacedLeaseParams struct {
	// Name of the Lease.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1ComponentStatusParams struct {
	// Name of the ComponentStatus.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespaceParams struct {
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespaceStatusParams struct {
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedConfigMapParams struct {
	// Name of the ConfigMap.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedEndpointsParams struct {
	// Name of the Endpoints.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedLimitRangeParams struct {
	// Name of the LimitRange.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPersistentVolumeClaimParams struct {
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPersistentVolumeClaimStatusParams struct {
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPodParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPodEphemeralcontainersParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPodLogParams struct {
	// The container for which to stream logs. Defaults to only container if there is one container in
	// the pod.
	Container OptString
	// Follow the log stream of the pod. Defaults to false.
	Follow OptBool
	// InsecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the
	// serving certificate of the backend it is connecting to.  This will make the HTTPS connection
	// between the apiserver and the backend insecure. This means the apiserver cannot verify the log
	// data it is receiving came from the real kubelet.  If the kubelet is configured to verify the
	// apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to
	// a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from
	// the real kubelet).
	InsecureSkipTLSVerifyBackend OptBool
	// If set, the number of bytes to read from the server before terminating the log output. This may
	// not display a complete final line of logging, and may return slightly more or slightly less than
	// the specified limit.
	LimitBytes OptInt
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// Return previous terminated container logs. Defaults to false.
	Previous OptBool
	// A relative time in seconds before the current time from which to show logs. If this value precedes
	// the time a pod was started, only logs since the pod start will be returned. If this value is in
	// the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
	SinceSeconds OptInt
	// If set, the number of lines from the end of the logs to show. If not specified, logs are shown
	// from the creation of the container or sinceSeconds or sinceTime.
	TailLines OptInt
	// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output.
	// Defaults to false.
	Timestamps OptBool
}

type ReadCoreV1NamespacedPodStatusParams struct {
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedPodTemplateParams struct {
	// Name of the PodTemplate.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedReplicationControllerParams struct {
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedReplicationControllerScaleParams struct {
	// Name of the Scale.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedReplicationControllerStatusParams struct {
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedResourceQuotaParams struct {
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedResourceQuotaStatusParams struct {
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedSecretParams struct {
	// Name of the Secret.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedServiceParams struct {
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedServiceAccountParams struct {
	// Name of the ServiceAccount.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NamespacedServiceStatusParams struct {
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NodeParams struct {
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1NodeStatusParams struct {
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1PersistentVolumeParams struct {
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadCoreV1PersistentVolumeStatusParams struct {
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadDiscoveryV1NamespacedEndpointSliceParams struct {
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadEventsV1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadEventsV1beta1NamespacedEventParams struct {
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams struct {
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams struct {
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadInternalApiserverV1alpha1StorageVersionParams struct {
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadInternalApiserverV1alpha1StorageVersionStatusParams struct {
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNetworkingV1IngressClassParams struct {
	// Name of the IngressClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNetworkingV1NamespacedIngressParams struct {
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNetworkingV1NamespacedIngressStatusParams struct {
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNetworkingV1NamespacedNetworkPolicyParams struct {
	// Name of the NetworkPolicy.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNodeV1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNodeV1alpha1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadNodeV1beta1RuntimeClassParams struct {
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams struct {
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadPolicyV1beta1PodSecurityPolicyParams struct {
	// Name of the PodSecurityPolicy.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadRbacAuthorizationV1ClusterRoleParams struct {
	// Name of the ClusterRole.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadRbacAuthorizationV1ClusterRoleBindingParams struct {
	// Name of the ClusterRoleBinding.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadRbacAuthorizationV1NamespacedRoleParams struct {
	// Name of the Role.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// Name of the RoleBinding.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadSchedulingV1PriorityClassParams struct {
	// Name of the PriorityClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1CSIDriverParams struct {
	// Name of the CSIDriver.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1CSINodeParams struct {
	// Name of the CSINode.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1StorageClassParams struct {
	// Name of the StorageClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1VolumeAttachmentParams struct {
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1VolumeAttachmentStatusParams struct {
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type ReadStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
}

type WatchAdmissionregistrationV1MutatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the MutatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ValidatingWebhookConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchApiextensionsV1CustomResourceDefinitionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CustomResourceDefinition.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchApiextensionsV1CustomResourceDefinitionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchApiregistrationV1APIServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the APIService.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchApiregistrationV1APIServiceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1ControllerRevisionListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1DaemonSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1DeploymentListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedControllerRevisionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ControllerRevision.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedControllerRevisionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedDaemonSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the DaemonSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedDaemonSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedDeploymentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Deployment.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedDeploymentListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedReplicaSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ReplicaSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedReplicaSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedStatefulSetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StatefulSet.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1NamespacedStatefulSetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1ReplicaSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAppsV1StatefulSetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the HorizontalPodAutoscaler.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1CronJobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1JobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1NamespacedCronJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1NamespacedJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Job.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1NamespacedJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1beta1CronJobListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1beta1NamespacedCronJobParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CronJob.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchBatchV1beta1NamespacedCronJobListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCertificatesV1CertificateSigningRequestParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CertificateSigningRequest.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCertificatesV1CertificateSigningRequestListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoordinationV1LeaseListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoordinationV1NamespacedLeaseParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Lease.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoordinationV1NamespacedLeaseListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1ConfigMapListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1EndpointsListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1LimitRangeListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespaceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Namespace.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespaceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedConfigMapParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ConfigMap.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedConfigMapListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedEndpointsParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Endpoints.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedEndpointsListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedLimitRangeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the LimitRange.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedLimitRangeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPersistentVolumeClaimParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PersistentVolumeClaim.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPersistentVolumeClaimListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPodParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Pod.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPodListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPodTemplateParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodTemplate.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedPodTemplateListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedReplicationControllerParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ReplicationController.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedReplicationControllerListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedResourceQuotaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ResourceQuota.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedResourceQuotaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedSecretParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Secret.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedSecretListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedServiceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Service.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedServiceAccountParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ServiceAccount.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedServiceAccountListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NamespacedServiceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Node.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1NodeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1PersistentVolumeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PersistentVolume.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1PersistentVolumeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1PodListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1PodTemplateListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1ReplicationControllerListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1ResourceQuotaListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1SecretListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1ServiceAccountListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchCoreV1ServiceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1EndpointSliceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1NamespacedEndpointSliceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1beta1NamespacedEndpointSliceParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the EndpointSlice.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchDiscoveryV1beta1NamespacedEndpointSliceListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1beta1EventListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1beta1NamespacedEventParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Event.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchEventsV1beta1NamespacedEventListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta1FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta1FlowSchemaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta2FlowSchemaParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the FlowSchema.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta2FlowSchemaListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityLevelConfiguration.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchInternalApiserverV1alpha1StorageVersionParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StorageVersion.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchInternalApiserverV1alpha1StorageVersionListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1IngressClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the IngressClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1IngressClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1IngressListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1NamespacedIngressParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Ingress.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1NamespacedIngressListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1NamespacedNetworkPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the NetworkPolicy.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1NamespacedNetworkPolicyListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNetworkingV1NetworkPolicyListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1alpha1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1alpha1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1beta1RuntimeClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RuntimeClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchNodeV1beta1RuntimeClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1NamespacedPodDisruptionBudgetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodDisruptionBudget.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1beta1PodSecurityPolicyParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PodSecurityPolicy.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchPolicyV1beta1PodSecurityPolicyListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1ClusterRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ClusterRole.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1ClusterRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the ClusterRoleBinding.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1ClusterRoleBindingListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1ClusterRoleListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1NamespacedRoleParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the Role.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1NamespacedRoleBindingParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the RoleBinding.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1NamespacedRoleBindingListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1NamespacedRoleListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchRbacAuthorizationV1RoleListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchSchedulingV1PriorityClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the PriorityClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchSchedulingV1PriorityClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1CSIDriverParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIDriver.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1CSIDriverListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1CSINodeParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSINode.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1CSINodeListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1StorageClassParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the StorageClass.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1StorageClassListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1VolumeAttachmentParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the VolumeAttachment.
	Name string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1VolumeAttachmentListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1alpha1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1beta1NamespacedCSIStorageCapacityParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Name of the CSIStorageCapacity.
	Name string
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}

type WatchStorageV1beta1NamespacedCSIStorageCapacityListParams struct {
	// AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement
	// bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should
	// not assume bookmarks are returned at any specific interval, nor may they assume the server will
	// send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
	AllowWatchBookmarks OptBool
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server, the server
	// will respond with a 410 ResourceExpired error together with a continue token. If the client needs
	// a consistent list, it must restart their list without the continue field. Otherwise, the client
	// may send another list request with the token received with the 410 error, the server will respond
	// with a list starting from the next key, but from the latest snapshot, which is inconsistent from
	// the previous list results - objects that are created, modified, or deleted after the first list
	// request will be included in the response, as long as their keys are after the "next key".
	// This field is not supported when watch is true. Clients may start a watch from the last
	// resourceVersion value returned by the server and not miss any modifications.
	Continue OptString
	// A selector to restrict the list of returned objects by their fields. Defaults to everything.
	FieldSelector OptString
	// A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector OptString
	// Limit is a maximum number of responses to return for a list call. If more items exist, the server
	// will set the `continue` field on the list metadata to a value that can be used with the same
	// initial query to retrieve the next set of results. Setting a limit may return fewer than the
	// requested amount of items (up to zero items) in the event all requested objects are filtered out
	// and clients should only use the presence of the continue field to determine whether more results
	// are available. Servers may choose not to support the limit argument and will return all of the
	// available results. If limit is specified and the continue field is empty, clients may assume that
	// no more results are available. This field is not supported if watch is true.
	// The server guarantees that the objects returned when using continue will be identical to issuing a
	// single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first
	// list result was calculated is returned.
	Limit OptInt
	// Object name and auth scope, such as for teams and projects.
	Namespace string
	// If 'true', then the output is pretty printed.
	Pretty OptString
	// ResourceVersion sets a constraint on what resource versions a request may be served from. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersion OptString
	// ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly
	// recommended that resourceVersionMatch be set for list calls where resourceVersion is set See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
	// Defaults to unset.
	ResourceVersionMatch OptString
	// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity
	// or inactivity.
	TimeoutSeconds OptInt
	// Watch for changes to the described resources and return them as a stream of add, update, and
	// remove notifications. Specify resourceVersion.
	Watch OptBool
}
