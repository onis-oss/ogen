// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeGetAPIVersionsResponse(response GetAPIVersionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroupList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAPIVersionsUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAdmissionregistrationAPIGroupResponse(response GetAdmissionregistrationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAdmissionregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAdmissionregistrationV1APIResourcesResponse(response GetAdmissionregistrationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAdmissionregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetApiextensionsAPIGroupResponse(response GetApiextensionsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiextensionsAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetApiextensionsV1APIResourcesResponse(response GetApiextensionsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiextensionsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetApiregistrationAPIGroupResponse(response GetApiregistrationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiregistrationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetApiregistrationV1APIResourcesResponse(response GetApiregistrationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetApiregistrationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAppsAPIGroupResponse(response GetAppsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAppsAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAppsV1APIResourcesResponse(response GetAppsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAppsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAuthenticationAPIGroupResponse(response GetAuthenticationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthenticationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/authentication.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAuthenticationV1APIResourcesResponse(response GetAuthenticationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthenticationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/authentication.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAuthorizationAPIGroupResponse(response GetAuthorizationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/authorization.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAuthorizationV1APIResourcesResponse(response GetAuthorizationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/authorization.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingAPIGroupResponse(response GetAutoscalingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV1APIResourcesResponse(response GetAutoscalingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV2beta1APIResourcesResponse(response GetAutoscalingV2beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV2beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetAutoscalingV2beta2APIResourcesResponse(response GetAutoscalingV2beta2APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetAutoscalingV2beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetBatchAPIGroupResponse(response GetBatchAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetBatchV1APIResourcesResponse(response GetBatchV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetBatchV1beta1APIResourcesResponse(response GetBatchV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetBatchV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCertificatesAPIGroupResponse(response GetCertificatesAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCertificatesAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCertificatesV1APIResourcesResponse(response GetCertificatesV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCertificatesV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCodeVersionResponse(response GetCodeVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgVersionInfo:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCodeVersionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/version/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCoordinationAPIGroupResponse(response GetCoordinationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoordinationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCoordinationV1APIResourcesResponse(response GetCoordinationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoordinationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCoreAPIVersionsResponse(response GetCoreAPIVersionsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIVersions:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoreAPIVersionsUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetCoreV1APIResourcesResponse(response GetCoreV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetCoreV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryAPIGroupResponse(response GetDiscoveryAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryV1APIResourcesResponse(response GetDiscoveryV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetDiscoveryV1beta1APIResourcesResponse(response GetDiscoveryV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetDiscoveryV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetEventsAPIGroupResponse(response GetEventsAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetEventsV1APIResourcesResponse(response GetEventsV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetEventsV1beta1APIResourcesResponse(response GetEventsV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetEventsV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverAPIGroupResponse(response GetFlowcontrolApiserverAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(response GetFlowcontrolApiserverV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(response GetFlowcontrolApiserverV1beta2APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetInternalApiserverAPIGroupResponse(response GetInternalApiserverAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetInternalApiserverAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetInternalApiserverV1alpha1APIResourcesResponse(response GetInternalApiserverV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetInternalApiserverV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNetworkingAPIGroupResponse(response GetNetworkingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNetworkingAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNetworkingV1APIResourcesResponse(response GetNetworkingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNetworkingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNodeAPIGroupResponse(response GetNodeAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1APIResourcesResponse(response GetNodeV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1alpha1APIResourcesResponse(response GetNodeV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1alpha1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetNodeV1beta1APIResourcesResponse(response GetNodeV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetNodeV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyAPIGroupResponse(response GetPolicyAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyV1APIResourcesResponse(response GetPolicyV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetPolicyV1beta1APIResourcesResponse(response GetPolicyV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetPolicyV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetRbacAuthorizationAPIGroupResponse(response GetRbacAuthorizationAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetRbacAuthorizationAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetRbacAuthorizationV1APIResourcesResponse(response GetRbacAuthorizationV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetRbacAuthorizationV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetSchedulingAPIGroupResponse(response GetSchedulingAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetSchedulingAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetSchedulingV1APIResourcesResponse(response GetSchedulingV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetSchedulingV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetServiceAccountIssuerOpenIDConfigurationResponse(response GetServiceAccountIssuerOpenIDConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetServiceAccountIssuerOpenIDConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/.well-known/openid-configuration/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetStorageAPIGroupResponse(response GetStorageAPIGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIGroup:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageAPIGroupUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1APIResourcesResponse(response GetStorageV1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1alpha1APIResourcesResponse(response GetStorageV1alpha1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1alpha1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/"+`: unexpected response type: %T`, response)
	}
}

func encodeGetStorageV1beta1APIResourcesResponse(response GetStorageV1beta1APIResourcesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1APIResourceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *GetStorageV1beta1APIResourcesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/"+`: unexpected response type: %T`, response)
	}
}

func encodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ListAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ListAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeListApiextensionsV1CustomResourceDefinitionResponse(response ListApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions"+`: unexpected response type: %T`, response)
	}
}

func encodeListApiregistrationV1APIServiceResponse(response ListApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/apiservices"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1ControllerRevisionForAllNamespacesResponse(response ListAppsV1ControllerRevisionForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1ControllerRevisionForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/controllerrevisions"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1DaemonSetForAllNamespacesResponse(response ListAppsV1DaemonSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1DaemonSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/daemonsets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1DeploymentForAllNamespacesResponse(response ListAppsV1DeploymentForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1DeploymentForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/deployments"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedControllerRevisionResponse(response ListAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ControllerRevisionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/controllerrevisions"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedDaemonSetResponse(response ListAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DaemonSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/daemonsets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedDeploymentResponse(response ListAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DeploymentList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/deployments"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedReplicaSetResponse(response ListAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/replicasets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1NamespacedStatefulSetResponse(response ListAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/statefulsets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1ReplicaSetForAllNamespacesResponse(response ListAppsV1ReplicaSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ReplicaSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1ReplicaSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/replicasets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAppsV1StatefulSetForAllNamespacesResponse(response ListAppsV1StatefulSetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1StatefulSetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAppsV1StatefulSetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/statefulsets"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(response ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1CronJobForAllNamespacesResponse(response ListBatchV1CronJobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1JobForAllNamespacesResponse(response ListBatchV1JobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1JobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/jobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1NamespacedCronJobResponse(response ListBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1NamespacedJobResponse(response ListBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1JobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/jobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1beta1CronJobForAllNamespacesResponse(response ListBatchV1beta1CronJobForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1beta1CronJobForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListBatchV1beta1NamespacedCronJobResponse(response ListBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1beta1CronJobList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeListCertificatesV1CertificateSigningRequestResponse(response ListCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequestList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoordinationV1LeaseForAllNamespacesResponse(response ListCoordinationV1LeaseForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoordinationV1LeaseForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/leases"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoordinationV1NamespacedLeaseResponse(response ListCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoordinationV1LeaseList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ComponentStatusResponse(response ListCoreV1ComponentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ComponentStatusList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ComponentStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/componentstatuses"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ConfigMapForAllNamespacesResponse(response ListCoreV1ConfigMapForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ConfigMapForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/configmaps"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1EndpointsForAllNamespacesResponse(response ListCoreV1EndpointsForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1EndpointsForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/endpoints"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1EventForAllNamespacesResponse(response ListCoreV1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1LimitRangeForAllNamespacesResponse(response ListCoreV1LimitRangeForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1LimitRangeForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/limitranges"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespaceResponse(response ListCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1NamespaceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedConfigMapResponse(response ListCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ConfigMapList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/configmaps"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedEndpointsResponse(response ListCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EndpointsList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/endpoints"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedEventResponse(response ListCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedLimitRangeResponse(response ListCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1LimitRangeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/limitranges"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPersistentVolumeClaimResponse(response ListCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/persistentvolumeclaims"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPodResponse(response ListCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/pods"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedPodTemplateResponse(response ListCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/podtemplates"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedReplicationControllerResponse(response ListCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/replicationcontrollers"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedResourceQuotaResponse(response ListCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/resourcequotas"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedSecretResponse(response ListCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/secrets"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedServiceResponse(response ListCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/services"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NamespacedServiceAccountResponse(response ListCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/serviceaccounts"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1NodeResponse(response ListCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1NodeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/nodes"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PersistentVolumeResponse(response ListCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/persistentvolumes"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(response ListCoreV1PersistentVolumeClaimForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeClaimList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/persistentvolumeclaims"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PodForAllNamespacesResponse(response ListCoreV1PodForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PodForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/pods"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1PodTemplateForAllNamespacesResponse(response ListCoreV1PodTemplateForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodTemplateList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1PodTemplateForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/podtemplates"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ReplicationControllerForAllNamespacesResponse(response ListCoreV1ReplicationControllerForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ReplicationControllerList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ReplicationControllerForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/replicationcontrollers"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ResourceQuotaForAllNamespacesResponse(response ListCoreV1ResourceQuotaForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ResourceQuotaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ResourceQuotaForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/resourcequotas"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1SecretForAllNamespacesResponse(response ListCoreV1SecretForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1SecretList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1SecretForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/secrets"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ServiceAccountForAllNamespacesResponse(response ListCoreV1ServiceAccountForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceAccountList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ServiceAccountForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/serviceaccounts"+`: unexpected response type: %T`, response)
	}
}

func encodeListCoreV1ServiceForAllNamespacesResponse(response ListCoreV1ServiceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListCoreV1ServiceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/services"+`: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1EndpointSliceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1NamespacedEndpointSliceResponse(response ListDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(response ListDiscoveryV1beta1EndpointSliceForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeListDiscoveryV1beta1NamespacedEndpointSliceResponse(response ListDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1beta1EndpointSliceList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1EventForAllNamespacesResponse(response ListEventsV1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1NamespacedEventResponse(response ListEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1beta1EventForAllNamespacesResponse(response ListEventsV1beta1EventForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1beta1EventForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListEventsV1beta1NamespacedEventResponse(response ListEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1beta1EventList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(response ListFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1FlowSchemaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas"+`: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(response ListFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2FlowSchemaList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas"+`: unexpected response type: %T`, response)
	}
}

func encodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeListInternalApiserverV1alpha1StorageVersionResponse(response ListInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersionList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions"+`: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1IngressClassResponse(response ListNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/ingressclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1IngressForAllNamespacesResponse(response ListNetworkingV1IngressForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1IngressForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/ingresses"+`: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NamespacedIngressResponse(response ListNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses"+`: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NamespacedNetworkPolicyResponse(response ListNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(response ListNetworkingV1NetworkPolicyForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1NetworkPolicyList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/networkpolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1RuntimeClassResponse(response ListNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1alpha1RuntimeClassResponse(response ListNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1alpha1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1alpha1/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListNodeV1beta1RuntimeClassResponse(response ListNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1beta1RuntimeClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1beta1/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1NamespacedPodDisruptionBudgetResponse(response ListPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1PodDisruptionBudgetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response ListPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(response ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeListPolicyV1beta1PodSecurityPolicyResponse(response ListPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicyList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/podsecuritypolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleResponse(response ListRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterroles"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1ClusterRoleBindingResponse(response ListRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleBindingList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1NamespacedRoleResponse(response ListRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1NamespacedRoleBindingResponse(response ListRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(response ListRbacAuthorizationV1RoleBindingForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleBindingList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/rolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeListRbacAuthorizationV1RoleForAllNamespacesResponse(response ListRbacAuthorizationV1RoleForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/roles"+`: unexpected response type: %T`, response)
	}
}

func encodeListSchedulingV1PriorityClassResponse(response ListSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPISchedulingV1PriorityClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/v1/priorityclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1CSIDriverResponse(response ListStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSIDriverList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/csidrivers"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1CSINodeResponse(response ListStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSINodeList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/csinodes"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1StorageClassResponse(response ListStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1StorageClassList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/storageclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1VolumeAttachmentResponse(response ListStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1VolumeAttachmentList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/volumeattachments"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1alpha1CSIStorageCapacityForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1alpha1NamespacedCSIStorageCapacityResponse(response ListStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(response ListStorageV1beta1CSIStorageCapacityForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeListStorageV1beta1NamespacedCSIStorageCapacityResponse(response ListStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1beta1CSIStorageCapacityList:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeLogFileHandlerResponse(response LogFileHandlerUnauthorized, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(401)
	span.SetStatus(codes.Error, http.StatusText(401))
	return nil
}

func encodeLogFileListHandlerResponse(response LogFileListHandlerUnauthorized, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(401)
	span.SetStatus(codes.Error, http.StatusText(401))
	return nil
}

func encodeReadAdmissionregistrationV1MutatingWebhookConfigurationResponse(response ReadAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response ReadAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadApiextensionsV1CustomResourceDefinitionResponse(response ReadApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadApiextensionsV1CustomResourceDefinitionStatusResponse(response ReadApiextensionsV1CustomResourceDefinitionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadApiregistrationV1APIServiceResponse(response ReadApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/apiservices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadApiregistrationV1APIServiceStatusResponse(response ReadApiregistrationV1APIServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadApiregistrationV1APIServiceStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/apiservices/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedControllerRevisionResponse(response ReadAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ControllerRevision:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDaemonSetResponse(response ReadAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DaemonSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDaemonSetStatusResponse(response ReadAppsV1NamespacedDaemonSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1DaemonSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDaemonSetStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentResponse(response ReadAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1Deployment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/deployments/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentScaleResponse(response ReadAppsV1NamespacedDeploymentScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1Scale:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentScaleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedDeploymentStatusResponse(response ReadAppsV1NamespacedDeploymentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1Deployment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedDeploymentStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetResponse(response ReadAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ReplicaSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetScaleResponse(response ReadAppsV1NamespacedReplicaSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1Scale:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetScaleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedReplicaSetStatusResponse(response ReadAppsV1NamespacedReplicaSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1ReplicaSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedReplicaSetStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetResponse(response ReadAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1StatefulSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetScaleResponse(response ReadAppsV1NamespacedStatefulSetScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1Scale:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetScaleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAppsV1NamespacedStatefulSetStatusResponse(response ReadAppsV1NamespacedStatefulSetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAppsV1StatefulSet:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAppsV1NamespacedStatefulSetStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusResponse(response ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedCronJobResponse(response ReadBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1CronJob:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedCronJobStatusResponse(response ReadBatchV1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1CronJob:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedJobResponse(response ReadBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1Job:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/jobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1NamespacedJobStatusResponse(response ReadBatchV1NamespacedJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1Job:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1NamespacedJobStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1beta1NamespacedCronJobResponse(response ReadBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1beta1CronJob:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadBatchV1beta1NamespacedCronJobStatusResponse(response ReadBatchV1beta1NamespacedCronJobStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIBatchV1beta1CronJob:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadBatchV1beta1NamespacedCronJobStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestResponse(response ReadCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestApprovalResponse(response ReadCertificatesV1CertificateSigningRequestApprovalRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCertificatesV1CertificateSigningRequestStatusResponse(response ReadCertificatesV1CertificateSigningRequestStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICertificatesV1CertificateSigningRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCertificatesV1CertificateSigningRequestStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoordinationV1NamespacedLeaseResponse(response ReadCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoordinationV1Lease:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1ComponentStatusResponse(response ReadCoreV1ComponentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ComponentStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1ComponentStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/componentstatuses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespaceResponse(response ReadCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespaceStatusResponse(response ReadCoreV1NamespaceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Namespace:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespaceStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedConfigMapResponse(response ReadCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ConfigMap:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/configmaps/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedEndpointsResponse(response ReadCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Endpoints:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/endpoints/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedEventResponse(response ReadCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Event:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedLimitRangeResponse(response ReadCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1LimitRange:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/limitranges/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPersistentVolumeClaimResponse(response ReadCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeClaim:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPersistentVolumeClaimStatusResponse(response ReadCoreV1NamespacedPersistentVolumeClaimStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolumeClaim:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodResponse(response ReadCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Pod:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/pods/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodEphemeralcontainersResponse(response ReadCoreV1NamespacedPodEphemeralcontainersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Pod:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodLogResponse(response ReadCoreV1NamespacedPodLogRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ReadCoreV1NamespacedPodLogOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodLogUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/pods/{name}/log"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodStatusResponse(response ReadCoreV1NamespacedPodStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Pod:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/pods/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedPodTemplateResponse(response ReadCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PodTemplate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/podtemplates/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerResponse(response ReadCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ReplicationController:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerScaleResponse(response ReadCoreV1NamespacedReplicationControllerScaleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIAutoscalingV1Scale:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerScaleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedReplicationControllerStatusResponse(response ReadCoreV1NamespacedReplicationControllerStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ReplicationController:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedReplicationControllerStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedResourceQuotaResponse(response ReadCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ResourceQuota:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/resourcequotas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedResourceQuotaStatusResponse(response ReadCoreV1NamespacedResourceQuotaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ResourceQuota:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedResourceQuotaStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedSecretResponse(response ReadCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Secret:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/secrets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceResponse(response ReadCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Service:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/services/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceAccountResponse(response ReadCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1ServiceAccount:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/serviceaccounts/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NamespacedServiceStatusResponse(response ReadCoreV1NamespacedServiceStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Service:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NamespacedServiceStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/namespaces/{namespace}/services/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NodeResponse(response ReadCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/nodes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1NodeStatusResponse(response ReadCoreV1NodeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1Node:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1NodeStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/nodes/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1PersistentVolumeResponse(response ReadCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/persistentvolumes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadCoreV1PersistentVolumeStatusResponse(response ReadCoreV1PersistentVolumeStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPICoreV1PersistentVolume:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadCoreV1PersistentVolumeStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/persistentvolumes/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadDiscoveryV1NamespacedEndpointSliceResponse(response ReadDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1EndpointSlice:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadDiscoveryV1beta1NamespacedEndpointSliceResponse(response ReadDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIDiscoveryV1beta1EndpointSlice:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadEventsV1NamespacedEventResponse(response ReadEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1Event:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadEventsV1beta1NamespacedEventResponse(response ReadEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIEventsV1beta1Event:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1FlowSchemaResponse(response ReadFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusResponse(response ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusResponse(response ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2FlowSchemaResponse(response ReadFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusResponse(response ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2FlowSchema:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusResponse(response ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadInternalApiserverV1alpha1StorageVersionResponse(response ReadInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadInternalApiserverV1alpha1StorageVersionStatusResponse(response ReadInternalApiserverV1alpha1StorageVersionStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIApiserverinternalV1alpha1StorageVersion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1IngressClassResponse(response ReadNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1IngressClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/ingressclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedIngressResponse(response ReadNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1Ingress:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedIngressStatusResponse(response ReadNetworkingV1NamespacedIngressStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1Ingress:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedIngressStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNetworkingV1NamespacedNetworkPolicyResponse(response ReadNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINetworkingV1NetworkPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1RuntimeClassResponse(response ReadNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1alpha1RuntimeClassResponse(response ReadNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1alpha1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadNodeV1beta1RuntimeClassResponse(response ReadNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPINodeV1beta1RuntimeClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1NamespacedPodDisruptionBudgetResponse(response ReadPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1PodDisruptionBudget:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1NamespacedPodDisruptionBudgetStatusResponse(response ReadPolicyV1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1PodDisruptionBudget:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response ReadPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudget:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusResponse(response ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodDisruptionBudget:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadPolicyV1beta1PodSecurityPolicyResponse(response ReadPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIPolicyV1beta1PodSecurityPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/podsecuritypolicies/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1ClusterRoleResponse(response ReadRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRole:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1ClusterRoleBindingResponse(response ReadRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1ClusterRoleBinding:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1NamespacedRoleResponse(response ReadRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1Role:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadRbacAuthorizationV1NamespacedRoleBindingResponse(response ReadRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIRbacV1RoleBinding:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadSchedulingV1PriorityClassResponse(response ReadSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPISchedulingV1PriorityClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/v1/priorityclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1CSIDriverResponse(response ReadStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSIDriver:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/csidrivers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1CSINodeResponse(response ReadStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1CSINode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/csinodes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1StorageClassResponse(response ReadStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1StorageClass:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/storageclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1VolumeAttachmentResponse(response ReadStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/volumeattachments/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1VolumeAttachmentStatusResponse(response ReadStorageV1VolumeAttachmentStatusRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1VolumeAttachment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1VolumeAttachmentStatusUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/volumeattachments/{name}/status"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1alpha1NamespacedCSIStorageCapacityResponse(response ReadStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1alpha1CSIStorageCapacity:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadStorageV1beta1NamespacedCSIStorageCapacityResponse(response ReadStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sAPIStorageV1beta1CSIStorageCapacity:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationResponse(response WatchAdmissionregistrationV1MutatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1MutatingWebhookConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationResponse(response WatchAdmissionregistrationV1ValidatingWebhookConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(response WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchApiextensionsV1CustomResourceDefinitionResponse(response WatchApiextensionsV1CustomResourceDefinitionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiextensionsV1CustomResourceDefinitionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchApiextensionsV1CustomResourceDefinitionListResponse(response WatchApiextensionsV1CustomResourceDefinitionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiextensionsV1CustomResourceDefinitionListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchApiregistrationV1APIServiceResponse(response WatchApiregistrationV1APIServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiregistrationV1APIServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchApiregistrationV1APIServiceListResponse(response WatchApiregistrationV1APIServiceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchApiregistrationV1APIServiceListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apiregistration.k8s.io/v1/watch/apiservices"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(response WatchAppsV1ControllerRevisionListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/controllerrevisions"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1DaemonSetListForAllNamespacesResponse(response WatchAppsV1DaemonSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1DaemonSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/daemonsets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1DeploymentListForAllNamespacesResponse(response WatchAppsV1DeploymentListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1DeploymentListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/deployments"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedControllerRevisionResponse(response WatchAppsV1NamespacedControllerRevisionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedControllerRevisionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedControllerRevisionListResponse(response WatchAppsV1NamespacedControllerRevisionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedControllerRevisionListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDaemonSetResponse(response WatchAppsV1NamespacedDaemonSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDaemonSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDaemonSetListResponse(response WatchAppsV1NamespacedDaemonSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDaemonSetListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/daemonsets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDeploymentResponse(response WatchAppsV1NamespacedDeploymentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDeploymentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedDeploymentListResponse(response WatchAppsV1NamespacedDeploymentListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedDeploymentListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/deployments"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedReplicaSetResponse(response WatchAppsV1NamespacedReplicaSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedReplicaSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedReplicaSetListResponse(response WatchAppsV1NamespacedReplicaSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedReplicaSetListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/replicasets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedStatefulSetResponse(response WatchAppsV1NamespacedStatefulSetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedStatefulSetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1NamespacedStatefulSetListResponse(response WatchAppsV1NamespacedStatefulSetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1NamespacedStatefulSetListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/namespaces/{namespace}/statefulsets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(response WatchAppsV1ReplicaSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/replicasets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAppsV1StatefulSetListForAllNamespacesResponse(response WatchAppsV1StatefulSetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAppsV1StatefulSetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/apps/v1/watch/statefulsets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/watch/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(response WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerResponse(response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListResponse(response WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1CronJobListForAllNamespacesResponse(response WatchBatchV1CronJobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1JobListForAllNamespacesResponse(response WatchBatchV1JobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1JobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/jobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedCronJobResponse(response WatchBatchV1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedCronJobListResponse(response WatchBatchV1NamespacedCronJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedCronJobListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/namespaces/{namespace}/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedJobResponse(response WatchBatchV1NamespacedJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1NamespacedJobListResponse(response WatchBatchV1NamespacedJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1NamespacedJobListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1/watch/namespaces/{namespace}/jobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(response WatchBatchV1beta1CronJobListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/watch/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1NamespacedCronJobResponse(response WatchBatchV1beta1NamespacedCronJobRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1NamespacedCronJobUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchBatchV1beta1NamespacedCronJobListResponse(response WatchBatchV1beta1NamespacedCronJobListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchBatchV1beta1NamespacedCronJobListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCertificatesV1CertificateSigningRequestResponse(response WatchCertificatesV1CertificateSigningRequestRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCertificatesV1CertificateSigningRequestUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCertificatesV1CertificateSigningRequestListResponse(response WatchCertificatesV1CertificateSigningRequestListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCertificatesV1CertificateSigningRequestListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/certificates.k8s.io/v1/watch/certificatesigningrequests"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1LeaseListForAllNamespacesResponse(response WatchCoordinationV1LeaseListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1LeaseListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/watch/leases"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1NamespacedLeaseResponse(response WatchCoordinationV1NamespacedLeaseRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1NamespacedLeaseUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoordinationV1NamespacedLeaseListResponse(response WatchCoordinationV1NamespacedLeaseListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoordinationV1NamespacedLeaseListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ConfigMapListForAllNamespacesResponse(response WatchCoreV1ConfigMapListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ConfigMapListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/configmaps"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1EndpointsListForAllNamespacesResponse(response WatchCoreV1EndpointsListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1EndpointsListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/endpoints"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1EventListForAllNamespacesResponse(response WatchCoreV1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1LimitRangeListForAllNamespacesResponse(response WatchCoreV1LimitRangeListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1LimitRangeListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/limitranges"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespaceResponse(response WatchCoreV1NamespaceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespaceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespaceListResponse(response WatchCoreV1NamespaceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespaceListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedConfigMapResponse(response WatchCoreV1NamespacedConfigMapRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedConfigMapUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/configmaps/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedConfigMapListResponse(response WatchCoreV1NamespacedConfigMapListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedConfigMapListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/configmaps"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEndpointsResponse(response WatchCoreV1NamespacedEndpointsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEndpointsUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/endpoints/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEndpointsListResponse(response WatchCoreV1NamespacedEndpointsListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEndpointsListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/endpoints"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEventResponse(response WatchCoreV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedEventListResponse(response WatchCoreV1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedLimitRangeResponse(response WatchCoreV1NamespacedLimitRangeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedLimitRangeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/limitranges/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedLimitRangeListResponse(response WatchCoreV1NamespacedLimitRangeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedLimitRangeListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/limitranges"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPersistentVolumeClaimResponse(response WatchCoreV1NamespacedPersistentVolumeClaimRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPersistentVolumeClaimListResponse(response WatchCoreV1NamespacedPersistentVolumeClaimListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodResponse(response WatchCoreV1NamespacedPodRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/pods/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodListResponse(response WatchCoreV1NamespacedPodListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/pods"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodTemplateResponse(response WatchCoreV1NamespacedPodTemplateRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodTemplateUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/podtemplates/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedPodTemplateListResponse(response WatchCoreV1NamespacedPodTemplateListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedPodTemplateListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/podtemplates"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedReplicationControllerResponse(response WatchCoreV1NamespacedReplicationControllerRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedReplicationControllerUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedReplicationControllerListResponse(response WatchCoreV1NamespacedReplicationControllerListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedReplicationControllerListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/replicationcontrollers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedResourceQuotaResponse(response WatchCoreV1NamespacedResourceQuotaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedResourceQuotaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedResourceQuotaListResponse(response WatchCoreV1NamespacedResourceQuotaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedResourceQuotaListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/resourcequotas"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedSecretResponse(response WatchCoreV1NamespacedSecretRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedSecretUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/secrets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedSecretListResponse(response WatchCoreV1NamespacedSecretListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedSecretListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/secrets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceResponse(response WatchCoreV1NamespacedServiceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/services/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceAccountResponse(response WatchCoreV1NamespacedServiceAccountRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceAccountUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceAccountListResponse(response WatchCoreV1NamespacedServiceAccountListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceAccountListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/serviceaccounts"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NamespacedServiceListResponse(response WatchCoreV1NamespacedServiceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NamespacedServiceListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/namespaces/{namespace}/services"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NodeResponse(response WatchCoreV1NodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/nodes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1NodeListResponse(response WatchCoreV1NodeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1NodeListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/nodes"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeResponse(response WatchCoreV1PersistentVolumeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/persistentvolumes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(response WatchCoreV1PersistentVolumeClaimListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/persistentvolumeclaims"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PersistentVolumeListResponse(response WatchCoreV1PersistentVolumeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PersistentVolumeListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/persistentvolumes"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PodListForAllNamespacesResponse(response WatchCoreV1PodListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PodListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/pods"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1PodTemplateListForAllNamespacesResponse(response WatchCoreV1PodTemplateListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1PodTemplateListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/podtemplates"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(response WatchCoreV1ReplicationControllerListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/replicationcontrollers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(response WatchCoreV1ResourceQuotaListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/resourcequotas"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1SecretListForAllNamespacesResponse(response WatchCoreV1SecretListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1SecretListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/secrets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(response WatchCoreV1ServiceAccountListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/serviceaccounts"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchCoreV1ServiceListForAllNamespacesResponse(response WatchCoreV1ServiceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchCoreV1ServiceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/api/v1/watch/services"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1EndpointSliceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/watch/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1NamespacedEndpointSliceResponse(response WatchDiscoveryV1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1NamespacedEndpointSliceListResponse(response WatchDiscoveryV1NamespacedEndpointSliceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(response WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/watch/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1NamespacedEndpointSliceResponse(response WatchDiscoveryV1beta1NamespacedEndpointSliceRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchDiscoveryV1beta1NamespacedEndpointSliceListResponse(response WatchDiscoveryV1beta1NamespacedEndpointSliceListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1EventListForAllNamespacesResponse(response WatchEventsV1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/watch/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1NamespacedEventResponse(response WatchEventsV1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1NamespacedEventListResponse(response WatchEventsV1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1EventListForAllNamespacesResponse(response WatchEventsV1beta1EventListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1EventListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/watch/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1NamespacedEventResponse(response WatchEventsV1beta1NamespacedEventRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1NamespacedEventUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchEventsV1beta1NamespacedEventListResponse(response WatchEventsV1beta1NamespacedEventListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchEventsV1beta1NamespacedEventListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1FlowSchemaResponse(response WatchFlowcontrolApiserverV1beta1FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta1FlowSchemaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2FlowSchemaResponse(response WatchFlowcontrolApiserverV1beta2FlowSchemaRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(response WatchFlowcontrolApiserverV1beta2FlowSchemaListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(response WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchInternalApiserverV1alpha1StorageVersionResponse(response WatchInternalApiserverV1alpha1StorageVersionRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchInternalApiserverV1alpha1StorageVersionUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchInternalApiserverV1alpha1StorageVersionListResponse(response WatchInternalApiserverV1alpha1StorageVersionListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchInternalApiserverV1alpha1StorageVersionListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressClassResponse(response WatchNetworkingV1IngressClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/ingressclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressClassListResponse(response WatchNetworkingV1IngressClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/ingressclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1IngressListForAllNamespacesResponse(response WatchNetworkingV1IngressListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1IngressListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/ingresses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedIngressResponse(response WatchNetworkingV1NamespacedIngressRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedIngressUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedIngressListResponse(response WatchNetworkingV1NamespacedIngressListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedIngressListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedNetworkPolicyResponse(response WatchNetworkingV1NamespacedNetworkPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedNetworkPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NamespacedNetworkPolicyListResponse(response WatchNetworkingV1NamespacedNetworkPolicyListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(response WatchNetworkingV1NetworkPolicyListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/networking.k8s.io/v1/watch/networkpolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1RuntimeClassResponse(response WatchNodeV1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1/watch/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1RuntimeClassListResponse(response WatchNodeV1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1/watch/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1alpha1RuntimeClassResponse(response WatchNodeV1alpha1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1alpha1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1alpha1RuntimeClassListResponse(response WatchNodeV1alpha1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1alpha1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1alpha1/watch/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1beta1RuntimeClassResponse(response WatchNodeV1beta1RuntimeClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1beta1RuntimeClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchNodeV1beta1RuntimeClassListResponse(response WatchNodeV1beta1RuntimeClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchNodeV1beta1RuntimeClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/node.k8s.io/v1beta1/watch/runtimeclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1NamespacedPodDisruptionBudgetResponse(response WatchPolicyV1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1NamespacedPodDisruptionBudgetListResponse(response WatchPolicyV1NamespacedPodDisruptionBudgetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1/watch/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetResponse(response WatchPolicyV1beta1NamespacedPodDisruptionBudgetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListResponse(response WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(response WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/watch/poddisruptionbudgets"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodSecurityPolicyResponse(response WatchPolicyV1beta1PodSecurityPolicyRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodSecurityPolicyUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/watch/podsecuritypolicies/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchPolicyV1beta1PodSecurityPolicyListResponse(response WatchPolicyV1beta1PodSecurityPolicyListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchPolicyV1beta1PodSecurityPolicyListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/policy/v1beta1/watch/podsecuritypolicies"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleResponse(response WatchRbacAuthorizationV1ClusterRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleBindingResponse(response WatchRbacAuthorizationV1ClusterRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(response WatchRbacAuthorizationV1ClusterRoleBindingListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1ClusterRoleListResponse(response WatchRbacAuthorizationV1ClusterRoleListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1ClusterRoleListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/clusterroles"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleResponse(response WatchRbacAuthorizationV1NamespacedRoleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleBindingResponse(response WatchRbacAuthorizationV1NamespacedRoleBindingRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleBindingListResponse(response WatchRbacAuthorizationV1NamespacedRoleBindingListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1NamespacedRoleListResponse(response WatchRbacAuthorizationV1NamespacedRoleListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1NamespacedRoleListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/rolebindings"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(response WatchRbacAuthorizationV1RoleListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/rbac.authorization.k8s.io/v1/watch/roles"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchSchedulingV1PriorityClassResponse(response WatchSchedulingV1PriorityClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchSchedulingV1PriorityClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchSchedulingV1PriorityClassListResponse(response WatchSchedulingV1PriorityClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchSchedulingV1PriorityClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/scheduling.k8s.io/v1/watch/priorityclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSIDriverResponse(response WatchStorageV1CSIDriverRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSIDriverUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/csidrivers/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSIDriverListResponse(response WatchStorageV1CSIDriverListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSIDriverListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/csidrivers"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSINodeResponse(response WatchStorageV1CSINodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSINodeUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/csinodes/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1CSINodeListResponse(response WatchStorageV1CSINodeListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1CSINodeListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/csinodes"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1StorageClassResponse(response WatchStorageV1StorageClassRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1StorageClassUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/storageclasses/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1StorageClassListResponse(response WatchStorageV1StorageClassListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1StorageClassListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/storageclasses"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1VolumeAttachmentResponse(response WatchStorageV1VolumeAttachmentRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1VolumeAttachmentUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/volumeattachments/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1VolumeAttachmentListResponse(response WatchStorageV1VolumeAttachmentListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1VolumeAttachmentListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1/watch/volumeattachments"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/watch/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1NamespacedCSIStorageCapacityResponse(response WatchStorageV1alpha1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListResponse(response WatchStorageV1alpha1NamespacedCSIStorageCapacityListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(response WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1NamespacedCSIStorageCapacityResponse(response WatchStorageV1beta1NamespacedCSIStorageCapacityRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities/{name}"+`: unexpected response type: %T`, response)
	}
}

func encodeWatchStorageV1beta1NamespacedCSIStorageCapacityListResponse(response WatchStorageV1beta1NamespacedCSIStorageCapacityListRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *IoK8sApimachineryPkgApisMetaV1WatchEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil
	default:
		return errors.Errorf("/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities"+`: unexpected response type: %T`, response)
	}
}
