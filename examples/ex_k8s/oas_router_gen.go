// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleGetCodeVersionRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/openid-configuration/"
				if l := len(".well-known/openid-configuration/"); len(elem) >= l && elem[0:l] == ".well-known/openid-configuration/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetServiceAccountIssuerOpenIDConfiguration
					s.handleGetServiceAccountIssuerOpenIDConfigurationRequest([0]string{}, w, r)

					return
				}
			case 'a': // Prefix: "api"
				if l := len("api"); len(elem) >= l && elem[0:l] == "api" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetCoreAPIVersionsRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleGetCoreAPIVersionsRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case 'v': // Prefix: "v1/"
						if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetCoreV1APIResourcesRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'c': // Prefix: "co"
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ConfigMapForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'm': // Prefix: "mponentstatuses"
								if l := len("mponentstatuses"); len(elem) >= l && elem[0:l] == "mponentstatuses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1ComponentStatusRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf: ReadCoreV1ComponentStatus
										s.handleReadCoreV1ComponentStatusRequest([1]string{
											args[0],
										}, w, r)

										return
									}
								}
							case 'n': // Prefix: "nfigmaps"
								if l := len("nfigmaps"); len(elem) >= l && elem[0:l] == "nfigmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ConfigMapForAllNamespaces
									s.handleListCoreV1ConfigMapForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							}
						case 'e': // Prefix: "e"
							if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1EventForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'n': // Prefix: "ndpoints"
								if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1EndpointsForAllNamespaces
									s.handleListCoreV1EndpointsForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							case 'v': // Prefix: "vents"
								if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1EventForAllNamespaces
									s.handleListCoreV1EventForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							}
						case 'l': // Prefix: "limitranges"
							if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListCoreV1LimitRangeForAllNamespaces
								s.handleListCoreV1LimitRangeForAllNamespacesRequest([0]string{}, w, r)

								return
							}
						case 'n': // Prefix: "n"
							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1NodeRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "amespaces"
								if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1NamespaceRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										s.handleReadCoreV1NamespaceRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListCoreV1NamespacedEndpointsRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "configmaps"
											if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedConfigMapRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespacedConfigMap
													s.handleReadCoreV1NamespacedConfigMapRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										case 'e': // Prefix: "e"
											if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedEventRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'n': // Prefix: "ndpoints"
												if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedEndpointsRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadCoreV1NamespacedEndpoints
														s.handleReadCoreV1NamespacedEndpointsRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											case 'v': // Prefix: "vents"
												if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedEventRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadCoreV1NamespacedEvent
														s.handleReadCoreV1NamespacedEventRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										case 'l': // Prefix: "limitranges"
											if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedLimitRangeRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespacedLimitRange
													s.handleReadCoreV1NamespacedLimitRangeRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										case 'p': // Prefix: "p"
											if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedPodRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'e': // Prefix: "ersistentvolumeclaims"
												if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedPersistentVolumeClaimRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadCoreV1NamespacedPersistentVolumeClaimRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedPersistentVolumeClaimStatus
															s.handleReadCoreV1NamespacedPersistentVolumeClaimStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											case 'o': // Prefix: "od"
												if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedPodTemplateRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case 's': // Prefix: "s"
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedPodRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadCoreV1NamespacedPodRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleReadCoreV1NamespacedPodLogRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
															switch elem[0] {
															case 'e': // Prefix: "ephemeralcontainers"
																if l := len("ephemeralcontainers"); len(elem) >= l && elem[0:l] == "ephemeralcontainers" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodEphemeralcontainers
																	s.handleReadCoreV1NamespacedPodEphemeralcontainersRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															case 'l': // Prefix: "log"
																if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodLog
																	s.handleReadCoreV1NamespacedPodLogRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															case 's': // Prefix: "status"
																if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodStatus
																	s.handleReadCoreV1NamespacedPodStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															}
														}
													}
												case 't': // Prefix: "templates"
													if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedPodTemplateRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedPodTemplate
															s.handleReadCoreV1NamespacedPodTemplateRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										case 'r': // Prefix: "re"
											if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListCoreV1NamespacedResourceQuotaRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'p': // Prefix: "plicationcontrollers"
												if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedReplicationControllerRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadCoreV1NamespacedReplicationControllerRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleReadCoreV1NamespacedReplicationControllerStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedReplicationControllerScale
																s.handleReadCoreV1NamespacedReplicationControllerScaleRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedReplicationControllerStatus
																s.handleReadCoreV1NamespacedReplicationControllerStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											case 's': // Prefix: "sourcequotas"
												if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedResourceQuotaRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadCoreV1NamespacedResourceQuotaRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedResourceQuotaStatus
															s.handleReadCoreV1NamespacedResourceQuotaStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleReadCoreV1NamespaceStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListCoreV1NamespacedServiceRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedSecretRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedSecret
															s.handleReadCoreV1NamespacedSecretRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListCoreV1NamespacedServiceAccountRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedServiceAccountRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedServiceAccount
																s.handleReadCoreV1NamespacedServiceAccountRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleListCoreV1NamespacedServiceRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Match until "/"
															idx := strings.IndexByte(elem, '/')
															if idx < 0 {
																idx = len(elem)
															}
															args[1] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																s.handleReadCoreV1NamespacedServiceRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedServiceStatus
																	s.handleReadCoreV1NamespacedServiceStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															}
														}
													}
												}
											case 't': // Prefix: "tatus"
												if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespaceStatus
													s.handleReadCoreV1NamespaceStatusRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								}
							case 'o': // Prefix: "odes"
								if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1NodeRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										s.handleReadCoreV1NodeRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ReadCoreV1NodeStatus
											s.handleReadCoreV1NodeStatusRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1PodForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'e': // Prefix: "ersistentvolume"
								if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "claims"
									if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PersistentVolumeClaimForAllNamespaces
										s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCoreV1PersistentVolumeRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadCoreV1PersistentVolumeRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadCoreV1PersistentVolumeStatus
												s.handleReadCoreV1PersistentVolumeStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								}
							case 'o': // Prefix: "od"
								if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1PodTemplateForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PodForAllNamespaces
										s.handleListCoreV1PodForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 't': // Prefix: "templates"
									if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PodTemplateForAllNamespaces
										s.handleListCoreV1PodTemplateForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'r': // Prefix: "re"
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ResourceQuotaForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'p': // Prefix: "plicationcontrollers"
								if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ReplicationControllerForAllNamespaces
									s.handleListCoreV1ReplicationControllerForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							case 's': // Prefix: "sourcequotas"
								if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ResourceQuotaForAllNamespaces
									s.handleListCoreV1ResourceQuotaForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							}
						case 's': // Prefix: "se"
							if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListCoreV1ServiceAccountForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'c': // Prefix: "crets"
								if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1SecretForAllNamespaces
									s.handleListCoreV1SecretForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							case 'r': // Prefix: "rvice"
								if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListCoreV1ServiceForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "accounts"
									if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1ServiceAccountForAllNamespaces
										s.handleListCoreV1ServiceAccountForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1ServiceForAllNamespaces
										s.handleListCoreV1ServiceForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'w': // Prefix: "watch/"
							if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleWatchCoreV1EndpointsListForAllNamespacesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'c': // Prefix: "configmaps"
								if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: WatchCoreV1ConfigMapListForAllNamespaces
									s.handleWatchCoreV1ConfigMapListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							case 'e': // Prefix: "e"
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1EventListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'n': // Prefix: "ndpoints"
									if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1EndpointsListForAllNamespaces
										s.handleWatchCoreV1EndpointsListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'v': // Prefix: "vents"
									if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1EventListForAllNamespaces
										s.handleWatchCoreV1EventListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								}
							case 'l': // Prefix: "limitranges"
								if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: WatchCoreV1LimitRangeListForAllNamespaces
									s.handleWatchCoreV1LimitRangeListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
							case 'n': // Prefix: "n"
								if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1NodeRequest([1]string{
										args[0],
									}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "amespaces"
									if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1NamespaceListRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleWatchCoreV1NamespaceRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchCoreV1NamespacedEndpointsRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'c': // Prefix: "configmaps"
												if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedConfigMapListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchCoreV1NamespacedConfigMap
														s.handleWatchCoreV1NamespacedConfigMapRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedEventRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'n': // Prefix: "ndpoints"
													if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedEndpointsListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedEndpoints
															s.handleWatchCoreV1NamespacedEndpointsRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'v': // Prefix: "vents"
													if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedEventListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedEvent
															s.handleWatchCoreV1NamespacedEventRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											case 'l': // Prefix: "limitranges"
												if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedLimitRangeListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchCoreV1NamespacedLimitRange
														s.handleWatchCoreV1NamespacedLimitRangeRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											case 'p': // Prefix: "p"
												if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedPodRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'e': // Prefix: "ersistentvolumeclaims"
													if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedPersistentVolumeClaimListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedPersistentVolumeClaim
															s.handleWatchCoreV1NamespacedPersistentVolumeClaimRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'o': // Prefix: "od"
													if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedPodTemplateRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedPodListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedPod
																s.handleWatchCoreV1NamespacedPodRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													case 't': // Prefix: "templates"
														if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedPodTemplateListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedPodTemplate
																s.handleWatchCoreV1NamespacedPodTemplateRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											case 'r': // Prefix: "re"
												if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedResourceQuotaRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'p': // Prefix: "plicationcontrollers"
													if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedReplicationControllerListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedReplicationController
															s.handleWatchCoreV1NamespacedReplicationControllerRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 's': // Prefix: "sourcequotas"
													if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedResourceQuotaListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedResourceQuota
															s.handleWatchCoreV1NamespacedResourceQuotaRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											case 's': // Prefix: "se"
												if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchCoreV1NamespacedServiceRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedSecretListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedSecret
															s.handleWatchCoreV1NamespacedSecretRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchCoreV1NamespacedServiceAccountRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedServiceAccountListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedServiceAccount
																s.handleWatchCoreV1NamespacedServiceAccountRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchCoreV1NamespacedServiceListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedService
																s.handleWatchCoreV1NamespacedServiceRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											}
										}
									}
								case 'o': // Prefix: "odes"
									if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1NodeListRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchCoreV1Node
											s.handleWatchCoreV1NodeRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							case 'p': // Prefix: "p"
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1PodListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "ersistentvolume"
									if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "claims"
										if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PersistentVolumeClaimListForAllNamespaces
											s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchCoreV1PersistentVolumeListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchCoreV1PersistentVolume
												s.handleWatchCoreV1PersistentVolumeRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'o': // Prefix: "od"
									if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PodListForAllNamespaces
											s.handleWatchCoreV1PodListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 't': // Prefix: "templates"
										if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PodTemplateListForAllNamespaces
											s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								}
							case 'r': // Prefix: "re"
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'p': // Prefix: "plicationcontrollers"
									if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1ReplicationControllerListForAllNamespaces
										s.handleWatchCoreV1ReplicationControllerListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 's': // Prefix: "sourcequotas"
									if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1ResourceQuotaListForAllNamespaces
										s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								}
							case 's': // Prefix: "se"
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "crets"
									if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1SecretListForAllNamespaces
										s.handleWatchCoreV1SecretListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'r': // Prefix: "rvice"
									if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoreV1ServiceListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "accounts"
										if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1ServiceAccountListForAllNamespaces
											s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1ServiceListForAllNamespaces
											s.handleWatchCoreV1ServiceListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleGetAPIVersionsRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetApiextensionsAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'd': // Prefix: "dmissionregistration.k8s.io/"
							if l := len("dmissionregistration.k8s.io/"); len(elem) >= l && elem[0:l] == "dmissionregistration.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAdmissionregistrationAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAdmissionregistrationV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'm': // Prefix: "mutatingwebhookconfigurations"
									if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListAdmissionregistrationV1MutatingWebhookConfigurationRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadAdmissionregistrationV1MutatingWebhookConfiguration
											s.handleReadAdmissionregistrationV1MutatingWebhookConfigurationRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								case 'v': // Prefix: "validatingwebhookconfigurations"
									if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListAdmissionregistrationV1ValidatingWebhookConfigurationRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadAdmissionregistrationV1ValidatingWebhookConfiguration
											s.handleReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'm': // Prefix: "mutatingwebhookconfigurations"
										if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchAdmissionregistrationV1MutatingWebhookConfiguration
												s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'v': // Prefix: "validatingwebhookconfigurations"
										if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchAdmissionregistrationV1ValidatingWebhookConfiguration
												s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAppsAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetApiregistrationAPIGroupRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "extensions.k8s.io/"
									if l := len("extensions.k8s.io/"); len(elem) >= l && elem[0:l] == "extensions.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetApiextensionsAPIGroupRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetApiextensionsV1APIResourcesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "customresourcedefinitions"
											if l := len("customresourcedefinitions"); len(elem) >= l && elem[0:l] == "customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListApiextensionsV1CustomResourceDefinitionRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													s.handleReadApiextensionsV1CustomResourceDefinitionRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadApiextensionsV1CustomResourceDefinitionStatus
														s.handleReadApiextensionsV1CustomResourceDefinitionStatusRequest([1]string{
															args[0],
														}, w, r)

														return
													}
												}
											}
										case 'w': // Prefix: "watch/customresourcedefinitions"
											if l := len("watch/customresourcedefinitions"); len(elem) >= l && elem[0:l] == "watch/customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchApiextensionsV1CustomResourceDefinitionListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchApiextensionsV1CustomResourceDefinition
													s.handleWatchApiextensionsV1CustomResourceDefinitionRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								case 'r': // Prefix: "registration.k8s.io/"
									if l := len("registration.k8s.io/"); len(elem) >= l && elem[0:l] == "registration.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetApiregistrationAPIGroupRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetApiregistrationV1APIResourcesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "apiservices"
											if l := len("apiservices"); len(elem) >= l && elem[0:l] == "apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListApiregistrationV1APIServiceRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													s.handleReadApiregistrationV1APIServiceRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadApiregistrationV1APIServiceStatus
														s.handleReadApiregistrationV1APIServiceStatusRequest([1]string{
															args[0],
														}, w, r)

														return
													}
												}
											}
										case 'w': // Prefix: "watch/apiservices"
											if l := len("watch/apiservices"); len(elem) >= l && elem[0:l] == "watch/apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchApiregistrationV1APIServiceListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchApiregistrationV1APIService
													s.handleWatchApiregistrationV1APIServiceRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								}
							case 'p': // Prefix: "ps/"
								if l := len("ps/"); len(elem) >= l && elem[0:l] == "ps/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAppsAPIGroupRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v1/"
									if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAppsV1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "controllerrevisions"
										if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1ControllerRevisionForAllNamespaces
											s.handleListAppsV1ControllerRevisionForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'd': // Prefix: "d"
										if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListAppsV1DeploymentForAllNamespacesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "aemonsets"
											if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAppsV1DaemonSetForAllNamespaces
												s.handleListAppsV1DaemonSetForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 'e': // Prefix: "eployments"
											if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAppsV1DeploymentForAllNamespaces
												s.handleListAppsV1DeploymentForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListAppsV1NamespacedDaemonSetRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'c': // Prefix: "controllerrevisions"
												if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAppsV1NamespacedControllerRevisionRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadAppsV1NamespacedControllerRevision
														s.handleReadAppsV1NamespacedControllerRevisionRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											case 'd': // Prefix: "d"
												if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAppsV1NamespacedDeploymentRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'a': // Prefix: "aemonsets"
													if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedDaemonSetRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadAppsV1NamespacedDaemonSetRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedDaemonSetStatus
																s.handleReadAppsV1NamespacedDaemonSetStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												case 'e': // Prefix: "eployments"
													if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAppsV1NamespacedDeploymentRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadAppsV1NamespacedDeploymentRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/s"
															if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																s.handleReadAppsV1NamespacedDeploymentStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
															switch elem[0] {
															case 'c': // Prefix: "cale"
																if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadAppsV1NamespacedDeploymentScale
																	s.handleReadAppsV1NamespacedDeploymentScaleRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															case 't': // Prefix: "tatus"
																if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadAppsV1NamespacedDeploymentStatus
																	s.handleReadAppsV1NamespacedDeploymentStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, w, r)

																	return
																}
															}
														}
													}
												}
											case 'r': // Prefix: "replicasets"
												if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAppsV1NamespacedReplicaSetRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadAppsV1NamespacedReplicaSetRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleReadAppsV1NamespacedReplicaSetStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedReplicaSetScale
																s.handleReadAppsV1NamespacedReplicaSetScaleRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedReplicaSetStatus
																s.handleReadAppsV1NamespacedReplicaSetStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											case 's': // Prefix: "statefulsets"
												if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAppsV1NamespacedStatefulSetRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadAppsV1NamespacedStatefulSetRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleReadAppsV1NamespacedStatefulSetStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedStatefulSetScale
																s.handleReadAppsV1NamespacedStatefulSetScaleRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedStatefulSetStatus
																s.handleReadAppsV1NamespacedStatefulSetStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "replicasets"
										if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1ReplicaSetForAllNamespaces
											s.handleListAppsV1ReplicaSetForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 's': // Prefix: "statefulsets"
										if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1StatefulSetForAllNamespaces
											s.handleListAppsV1StatefulSetForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "controllerrevisions"
											if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1ControllerRevisionListForAllNamespaces
												s.handleWatchAppsV1ControllerRevisionListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 'd': // Prefix: "d"
											if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchAppsV1DeploymentListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "aemonsets"
												if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAppsV1DaemonSetListForAllNamespaces
													s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest([0]string{}, w, r)

													return
												}
											case 'e': // Prefix: "eployments"
												if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAppsV1DeploymentListForAllNamespaces
													s.handleWatchAppsV1DeploymentListForAllNamespacesRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAppsV1NamespacedDaemonSetRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'c': // Prefix: "controllerrevisions"
													if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAppsV1NamespacedControllerRevisionListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedControllerRevision
															s.handleWatchAppsV1NamespacedControllerRevisionRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'd': // Prefix: "d"
													if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAppsV1NamespacedDeploymentRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case 'a': // Prefix: "aemonsets"
														if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedDaemonSetListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAppsV1NamespacedDaemonSet
																s.handleWatchAppsV1NamespacedDaemonSetRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													case 'e': // Prefix: "eployments"
														if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAppsV1NamespacedDeploymentListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAppsV1NamespacedDeployment
																s.handleWatchAppsV1NamespacedDeploymentRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												case 'r': // Prefix: "replicasets"
													if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAppsV1NamespacedReplicaSetListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedReplicaSet
															s.handleWatchAppsV1NamespacedReplicaSetRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 's': // Prefix: "statefulsets"
													if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAppsV1NamespacedStatefulSetListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedStatefulSet
															s.handleWatchAppsV1NamespacedStatefulSetRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										case 'r': // Prefix: "replicasets"
											if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1ReplicaSetListForAllNamespaces
												s.handleWatchAppsV1ReplicaSetListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 's': // Prefix: "statefulsets"
											if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1StatefulSetListForAllNamespaces
												s.handleWatchAppsV1StatefulSetListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "ut"
							if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetAutoscalingAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'h': // Prefix: "h"
								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAuthorizationAPIGroupRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "entication.k8s.io/"
									if l := len("entication.k8s.io/"); len(elem) >= l && elem[0:l] == "entication.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAuthenticationAPIGroupRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: GetAuthenticationV1APIResources
											s.handleGetAuthenticationV1APIResourcesRequest([0]string{}, w, r)

											return
										}
									}
								case 'o': // Prefix: "orization.k8s.io/"
									if l := len("orization.k8s.io/"); len(elem) >= l && elem[0:l] == "orization.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAuthorizationAPIGroupRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: GetAuthorizationV1APIResources
											s.handleGetAuthorizationV1APIResourcesRequest([0]string{}, w, r)

											return
										}
									}
								}
							case 'o': // Prefix: "oscaling/"
								if l := len("oscaling/"); len(elem) >= l && elem[0:l] == "oscaling/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetAutoscalingAPIGroupRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetAutoscalingV2beta1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '1': // Prefix: "1/"
										if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetAutoscalingV1APIResourcesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'h': // Prefix: "horizontalpodautoscalers"
											if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces
												s.handleListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/horizontalpodautoscalers"
												if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
															s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										case 'w': // Prefix: "watch/"
											if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces
													s.handleWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, w, r)

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAutoscalingV1NamespacedHorizontalPodAutoscaler
															s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										}
									case '2': // Prefix: "2beta"
										if l := len("2beta"); len(elem) >= l && elem[0:l] == "2beta" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleGetAutoscalingV2beta2APIResourcesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '1': // Prefix: "1/"
											if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleGetAutoscalingV2beta1APIResourcesRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces
													s.handleListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, w, r)

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus
																s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces
														s.handleWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, w, r)

														return
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											}
										case '2': // Prefix: "2/"
											if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleGetAutoscalingV2beta2APIResourcesRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces
													s.handleListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, w, r)

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus
																s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces
														s.handleWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, w, r)

														return
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest([1]string{
																args[0],
															}, w, r)

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler
																s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([2]string{
																	args[0],
																	args[1],
																}, w, r)

																return
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'b': // Prefix: "batch/"
						if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetBatchAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetBatchV1beta1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetBatchV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1CronJobForAllNamespaces
										s.handleListBatchV1CronJobForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'j': // Prefix: "jobs"
									if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1JobForAllNamespaces
										s.handleListBatchV1JobForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListBatchV1NamespacedJobRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "cronjobs"
											if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListBatchV1NamespacedCronJobRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													s.handleReadBatchV1NamespacedCronJobRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadBatchV1NamespacedCronJobStatus
														s.handleReadBatchV1NamespacedCronJobStatusRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										case 'j': // Prefix: "jobs"
											if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListBatchV1NamespacedJobRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													s.handleReadBatchV1NamespacedJobRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadBatchV1NamespacedJobStatus
														s.handleReadBatchV1NamespacedJobStatusRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchBatchV1JobListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1CronJobListForAllNamespaces
											s.handleWatchBatchV1CronJobListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'j': // Prefix: "jobs"
										if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1JobListForAllNamespaces
											s.handleWatchBatchV1JobListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchBatchV1NamespacedJobRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'c': // Prefix: "cronjobs"
												if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchBatchV1NamespacedCronJobListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchBatchV1NamespacedCronJob
														s.handleWatchBatchV1NamespacedCronJobRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											case 'j': // Prefix: "jobs"
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchBatchV1NamespacedJobListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchBatchV1NamespacedJob
														s.handleWatchBatchV1NamespacedJobRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetBatchV1beta1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1beta1CronJobForAllNamespaces
										s.handleListBatchV1beta1CronJobForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/cronjobs"
										if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListBatchV1beta1NamespacedCronJobRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadBatchV1beta1NamespacedCronJobRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadBatchV1beta1NamespacedCronJobStatus
													s.handleReadBatchV1beta1NamespacedCronJobStatusRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchBatchV1beta1NamespacedCronJobRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1beta1CronJobListForAllNamespaces
											s.handleWatchBatchV1beta1CronJobListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/cronjobs"
											if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchBatchV1beta1NamespacedCronJobListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchBatchV1beta1NamespacedCronJob
													s.handleWatchBatchV1beta1NamespacedCronJobRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetCoordinationAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'e': // Prefix: "ertificates.k8s.io/"
							if l := len("ertificates.k8s.io/"); len(elem) >= l && elem[0:l] == "ertificates.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetCertificatesAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetCertificatesV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "certificatesigningrequests"
									if l := len("certificatesigningrequests"); len(elem) >= l && elem[0:l] == "certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListCertificatesV1CertificateSigningRequestRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadCertificatesV1CertificateSigningRequestRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleReadCertificatesV1CertificateSigningRequestStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "approval"
												if l := len("approval"); len(elem) >= l && elem[0:l] == "approval" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCertificatesV1CertificateSigningRequestApproval
													s.handleReadCertificatesV1CertificateSigningRequestApprovalRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											case 's': // Prefix: "status"
												if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCertificatesV1CertificateSigningRequestStatus
													s.handleReadCertificatesV1CertificateSigningRequestStatusRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/certificatesigningrequests"
									if l := len("watch/certificatesigningrequests"); len(elem) >= l && elem[0:l] == "watch/certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCertificatesV1CertificateSigningRequestListRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchCertificatesV1CertificateSigningRequest
											s.handleWatchCertificatesV1CertificateSigningRequestRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							}
						case 'o': // Prefix: "oordination.k8s.io/"
							if l := len("oordination.k8s.io/"); len(elem) >= l && elem[0:l] == "oordination.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetCoordinationAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetCoordinationV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'l': // Prefix: "leases"
									if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoordinationV1LeaseForAllNamespaces
										s.handleListCoordinationV1LeaseForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/leases"
										if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListCoordinationV1NamespacedLeaseRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadCoordinationV1NamespacedLease
												s.handleReadCoordinationV1NamespacedLeaseRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchCoordinationV1NamespacedLeaseRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'l': // Prefix: "leases"
										if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoordinationV1LeaseListForAllNamespaces
											s.handleWatchCoordinationV1LeaseListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/leases"
											if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchCoordinationV1NamespacedLeaseListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchCoordinationV1NamespacedLease
													s.handleWatchCoordinationV1NamespacedLeaseRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					case 'd': // Prefix: "discovery.k8s.io/"
						if l := len("discovery.k8s.io/"); len(elem) >= l && elem[0:l] == "discovery.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetDiscoveryAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetDiscoveryV1beta1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetDiscoveryV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListDiscoveryV1EndpointSliceForAllNamespaces
										s.handleListDiscoveryV1EndpointSliceForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListDiscoveryV1NamespacedEndpointSliceRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadDiscoveryV1NamespacedEndpointSlice
												s.handleReadDiscoveryV1NamespacedEndpointSliceRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchDiscoveryV1EndpointSliceListForAllNamespaces
											s.handleWatchDiscoveryV1EndpointSliceListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchDiscoveryV1NamespacedEndpointSliceListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchDiscoveryV1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetDiscoveryV1beta1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListDiscoveryV1beta1EndpointSliceForAllNamespaces
										s.handleListDiscoveryV1beta1EndpointSliceForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListDiscoveryV1beta1NamespacedEndpointSliceRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadDiscoveryV1beta1NamespacedEndpointSlice
												s.handleReadDiscoveryV1beta1NamespacedEndpointSliceRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces
											s.handleWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchDiscoveryV1beta1NamespacedEndpointSlice
													s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					case 'e': // Prefix: "events.k8s.io/"
						if l := len("events.k8s.io/"); len(elem) >= l && elem[0:l] == "events.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetEventsAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetEventsV1beta1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetEventsV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListEventsV1EventForAllNamespaces
										s.handleListEventsV1EventForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListEventsV1NamespacedEventRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadEventsV1NamespacedEvent
												s.handleReadEventsV1NamespacedEventRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchEventsV1NamespacedEventRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchEventsV1EventListForAllNamespaces
											s.handleWatchEventsV1EventListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchEventsV1NamespacedEventListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchEventsV1NamespacedEvent
													s.handleWatchEventsV1NamespacedEventRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetEventsV1beta1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListEventsV1beta1EventForAllNamespaces
										s.handleListEventsV1beta1EventForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListEventsV1beta1NamespacedEventRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadEventsV1beta1NamespacedEvent
												s.handleReadEventsV1beta1NamespacedEventRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchEventsV1beta1NamespacedEventRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchEventsV1beta1EventListForAllNamespaces
											s.handleWatchEventsV1beta1EventListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchEventsV1beta1NamespacedEventListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchEventsV1beta1NamespacedEvent
													s.handleWatchEventsV1beta1NamespacedEventRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					case 'f': // Prefix: "flowcontrol.apiserver.k8s.io/"
						if l := len("flowcontrol.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "flowcontrol.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetFlowcontrolApiserverAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1beta"
							if l := len("v1beta"); len(elem) >= l && elem[0:l] == "v1beta" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '1': // Prefix: "1/"
								if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetFlowcontrolApiserverV1beta1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta1FlowSchemaRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadFlowcontrolApiserverV1beta1FlowSchemaRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta1FlowSchemaStatus
												s.handleReadFlowcontrolApiserverV1beta1FlowSchemaStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus
												s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta1FlowSchema
												s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration
												s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								}
							case '2': // Prefix: "2/"
								if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta2FlowSchemaRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadFlowcontrolApiserverV1beta2FlowSchemaRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta2FlowSchemaStatus
												s.handleReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
												s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta2FlowSchema
												s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
												s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "internal.apiserver.k8s.io/"
						if l := len("internal.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "internal.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetInternalApiserverAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1alpha1/"
							if l := len("v1alpha1/"); len(elem) >= l && elem[0:l] == "v1alpha1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetInternalApiserverV1alpha1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 's': // Prefix: "storageversions"
								if l := len("storageversions"); len(elem) >= l && elem[0:l] == "storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListInternalApiserverV1alpha1StorageVersionRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										s.handleReadInternalApiserverV1alpha1StorageVersionRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ReadInternalApiserverV1alpha1StorageVersionStatus
											s.handleReadInternalApiserverV1alpha1StorageVersionStatusRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							case 'w': // Prefix: "watch/storageversions"
								if l := len("watch/storageversions"); len(elem) >= l && elem[0:l] == "watch/storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchInternalApiserverV1alpha1StorageVersionListRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf: WatchInternalApiserverV1alpha1StorageVersion
										s.handleWatchInternalApiserverV1alpha1StorageVersionRequest([1]string{
											args[0],
										}, w, r)

										return
									}
								}
							}
						}
					case 'n': // Prefix: "n"
						if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetNodeAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'e': // Prefix: "etworking.k8s.io/"
							if l := len("etworking.k8s.io/"); len(elem) >= l && elem[0:l] == "etworking.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetNetworkingAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetNetworkingV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'i': // Prefix: "ingress"
									if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListNetworkingV1IngressForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "classes"
										if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNetworkingV1IngressClassRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNetworkingV1IngressClass
												s.handleReadNetworkingV1IngressClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'e': // Prefix: "es"
										if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListNetworkingV1IngressForAllNamespaces
											s.handleListNetworkingV1IngressForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "n"
									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "amespaces/"
										if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListNetworkingV1NamespacedNetworkPolicyRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'i': // Prefix: "ingresses"
												if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListNetworkingV1NamespacedIngressRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														s.handleReadNetworkingV1NamespacedIngressRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadNetworkingV1NamespacedIngressStatus
															s.handleReadNetworkingV1NamespacedIngressStatusRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											case 'n': // Prefix: "networkpolicies"
												if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleListNetworkingV1NamespacedNetworkPolicyRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadNetworkingV1NamespacedNetworkPolicy
														s.handleReadNetworkingV1NamespacedNetworkPolicyRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										}
									case 'e': // Prefix: "etworkpolicies"
										if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListNetworkingV1NetworkPolicyForAllNamespaces
											s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchNetworkingV1NamespacedIngressRequest([2]string{
											args[0],
											args[1],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'i': // Prefix: "ingress"
										if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNetworkingV1IngressListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "classes"
											if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchNetworkingV1IngressClassListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchNetworkingV1IngressClass
													s.handleWatchNetworkingV1IngressClassRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										case 'e': // Prefix: "es"
											if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchNetworkingV1IngressListForAllNamespaces
												s.handleWatchNetworkingV1IngressListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "n"
										if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "amespaces/"
											if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
												switch elem[0] {
												case 'i': // Prefix: "ingresses"
													if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchNetworkingV1NamespacedIngressListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchNetworkingV1NamespacedIngress
															s.handleWatchNetworkingV1NamespacedIngressRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												case 'n': // Prefix: "networkpolicies"
													if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleWatchNetworkingV1NamespacedNetworkPolicyListRequest([1]string{
															args[0],
														}, w, r)

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchNetworkingV1NamespacedNetworkPolicy
															s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest([2]string{
																args[0],
																args[1],
															}, w, r)

															return
														}
													}
												}
											}
										case 'e': // Prefix: "etworkpolicies"
											if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchNetworkingV1NetworkPolicyListForAllNamespaces
												s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'o': // Prefix: "ode.k8s.io/"
							if l := len("ode.k8s.io/"); len(elem) >= l && elem[0:l] == "ode.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetNodeAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetNodeV1alpha1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1RuntimeClassRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1RuntimeClass
												s.handleReadNodeV1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1RuntimeClassListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1RuntimeClass
												s.handleWatchNodeV1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1alpha1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1alpha1RuntimeClassRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1alpha1RuntimeClass
												s.handleReadNodeV1alpha1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1alpha1RuntimeClassListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1alpha1RuntimeClass
												s.handleWatchNodeV1alpha1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetNodeV1beta1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListNodeV1beta1RuntimeClassRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1beta1RuntimeClass
												s.handleReadNodeV1beta1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchNodeV1beta1RuntimeClassListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1beta1RuntimeClass
												s.handleWatchNodeV1beta1RuntimeClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								}
							}
						}
					case 'p': // Prefix: "policy/"
						if l := len("policy/"); len(elem) >= l && elem[0:l] == "policy/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetPolicyAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetPolicyV1beta1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetPolicyV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListPolicyV1NamespacedPodDisruptionBudgetRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadPolicyV1NamespacedPodDisruptionBudgetRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadPolicyV1NamespacedPodDisruptionBudgetStatus
													s.handleReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								case 'p': // Prefix: "poddisruptionbudgets"
									if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListPolicyV1PodDisruptionBudgetForAllNamespaces
										s.handleListPolicyV1PodDisruptionBudgetForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchPolicyV1NamespacedPodDisruptionBudgetListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1NamespacedPodDisruptionBudget
													s.handleWatchPolicyV1NamespacedPodDisruptionBudgetRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									case 'p': // Prefix: "poddisruptionbudgets"
										if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchPolicyV1PodDisruptionBudgetListForAllNamespaces
											s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetPolicyV1beta1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListPolicyV1beta1NamespacedPodDisruptionBudgetRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus
													s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								case 'p': // Prefix: "pod"
									if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListPolicyV1beta1PodSecurityPolicyRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'd': // Prefix: "disruptionbudgets"
										if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces
											s.handleListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 's': // Prefix: "securitypolicies"
										if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListPolicyV1beta1PodSecurityPolicyRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadPolicyV1beta1PodSecurityPolicy
												s.handleReadPolicyV1beta1PodSecurityPolicyRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1beta1NamespacedPodDisruptionBudget
													s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									case 'p': // Prefix: "pod"
										if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchPolicyV1beta1PodSecurityPolicyRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'd': // Prefix: "disruptionbudgets"
											if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces
												s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 's': // Prefix: "securitypolicies"
											if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchPolicyV1beta1PodSecurityPolicyListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1beta1PodSecurityPolicy
													s.handleWatchPolicyV1beta1PodSecurityPolicyRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "rbac.authorization.k8s.io/"
						if l := len("rbac.authorization.k8s.io/"); len(elem) >= l && elem[0:l] == "rbac.authorization.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetRbacAuthorizationAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1/"
							if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetRbacAuthorizationV1APIResourcesRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'c': // Prefix: "clusterrole"
								if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListRbacAuthorizationV1ClusterRoleBindingRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1ClusterRoleBindingRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadRbacAuthorizationV1ClusterRoleBinding
											s.handleReadRbacAuthorizationV1ClusterRoleBindingRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1ClusterRoleRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadRbacAuthorizationV1ClusterRole
											s.handleReadRbacAuthorizationV1ClusterRoleRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							case 'n': // Prefix: "namespaces/"
								if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "namespace"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/role"
									if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadRbacAuthorizationV1NamespacedRoleBinding
												s.handleReadRbacAuthorizationV1NamespacedRoleBindingRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListRbacAuthorizationV1NamespacedRoleRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadRbacAuthorizationV1NamespacedRole
												s.handleReadRbacAuthorizationV1NamespacedRoleRequest([2]string{
													args[0],
													args[1],
												}, w, r)

												return
											}
										}
									}
								}
							case 'r': // Prefix: "role"
								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListRbacAuthorizationV1RoleBindingForAllNamespaces
										s.handleListRbacAuthorizationV1RoleBindingForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListRbacAuthorizationV1RoleForAllNamespaces
										s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest([0]string{}, w, r)

										return
									}
								}
							case 'w': // Prefix: "watch/"
								if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleWatchRbacAuthorizationV1NamespacedRoleRequest([2]string{
										args[0],
										args[1],
									}, w, r)

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "clusterrole"
									if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest([1]string{
											args[0],
										}, w, r)

										return
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1ClusterRoleBindingListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchRbacAuthorizationV1ClusterRoleBinding
												s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1ClusterRoleListRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchRbacAuthorizationV1ClusterRole
												s.handleWatchRbacAuthorizationV1ClusterRoleRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/role"
										if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest([2]string{
												args[0],
												args[1],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'b': // Prefix: "bindings"
											if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchRbacAuthorizationV1NamespacedRoleBindingListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchRbacAuthorizationV1NamespacedRoleBinding
													s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchRbacAuthorizationV1NamespacedRoleListRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchRbacAuthorizationV1NamespacedRole
													s.handleWatchRbacAuthorizationV1NamespacedRoleRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									}
								case 'r': // Prefix: "role"
									if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchRbacAuthorizationV1RoleBindingListForAllNamespaces
											s.handleWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchRbacAuthorizationV1RoleListForAllNamespaces
											s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleGetStorageAPIGroupRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'c': // Prefix: "cheduling.k8s.io/"
							if l := len("cheduling.k8s.io/"); len(elem) >= l && elem[0:l] == "cheduling.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetSchedulingAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetSchedulingV1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'p': // Prefix: "priorityclasses"
									if l := len("priorityclasses"); len(elem) >= l && elem[0:l] == "priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleListSchedulingV1PriorityClassRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadSchedulingV1PriorityClass
											s.handleReadSchedulingV1PriorityClassRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								case 'w': // Prefix: "watch/priorityclasses"
									if l := len("watch/priorityclasses"); len(elem) >= l && elem[0:l] == "watch/priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleWatchSchedulingV1PriorityClassListRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchSchedulingV1PriorityClass
											s.handleWatchSchedulingV1PriorityClassRequest([1]string{
												args[0],
											}, w, r)

											return
										}
									}
								}
							}
						case 't': // Prefix: "torage.k8s.io/"
							if l := len("torage.k8s.io/"); len(elem) >= l && elem[0:l] == "torage.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleGetStorageAPIGroupRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleGetStorageV1alpha1APIResourcesRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csi"
										if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1CSINodeRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'd': // Prefix: "drivers"
											if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1CSIDriverRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1CSIDriver
													s.handleReadStorageV1CSIDriverRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nodes"
											if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1CSINodeRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1CSINode
													s.handleReadStorageV1CSINodeRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									case 's': // Prefix: "storageclasses"
										if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1StorageClassRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadStorageV1StorageClass
												s.handleReadStorageV1StorageClassRequest([1]string{
													args[0],
												}, w, r)

												return
											}
										}
									case 'v': // Prefix: "volumeattachments"
										if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleListStorageV1VolumeAttachmentRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												s.handleReadStorageV1VolumeAttachmentRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadStorageV1VolumeAttachmentStatus
													s.handleReadStorageV1VolumeAttachmentStatusRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1StorageClassRequest([1]string{
												args[0],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csi"
											if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1CSINodeRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case 'd': // Prefix: "drivers"
												if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1CSIDriverListRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1CSIDriver
														s.handleWatchStorageV1CSIDriverRequest([1]string{
															args[0],
														}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nodes"
												if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1CSINodeListRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1CSINode
														s.handleWatchStorageV1CSINodeRequest([1]string{
															args[0],
														}, w, r)

														return
													}
												}
											}
										case 's': // Prefix: "storageclasses"
											if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1StorageClassListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchStorageV1StorageClass
													s.handleWatchStorageV1StorageClassRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										case 'v': // Prefix: "volumeattachments"
											if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleWatchStorageV1VolumeAttachmentListRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchStorageV1VolumeAttachment
													s.handleWatchStorageV1VolumeAttachmentRequest([1]string{
														args[0],
													}, w, r)

													return
												}
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1alpha1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListStorageV1alpha1CSIStorageCapacityForAllNamespaces
											s.handleListStorageV1alpha1CSIStorageCapacityForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1alpha1NamespacedCSIStorageCapacityRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1alpha1NamespacedCSIStorageCapacity
													s.handleReadStorageV1alpha1NamespacedCSIStorageCapacityRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest([2]string{
												args[0],
												args[1],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces
												s.handleWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1alpha1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleGetStorageV1beta1APIResourcesRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListStorageV1beta1CSIStorageCapacityForAllNamespaces
											s.handleListStorageV1beta1CSIStorageCapacityForAllNamespacesRequest([0]string{}, w, r)

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleListStorageV1beta1NamespacedCSIStorageCapacityRequest([1]string{
													args[0],
												}, w, r)

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1beta1NamespacedCSIStorageCapacity
													s.handleReadStorageV1beta1NamespacedCSIStorageCapacityRequest([2]string{
														args[0],
														args[1],
													}, w, r)

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest([2]string{
												args[0],
												args[1],
											}, w, r)

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces
												s.handleWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRequest([0]string{}, w, r)

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityListRequest([1]string{
														args[0],
													}, w, r)

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1beta1NamespacedCSIStorageCapacity
														s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest([2]string{
															args[0],
															args[1],
														}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 'l': // Prefix: "logs/"
				if l := len("logs/"); len(elem) >= l && elem[0:l] == "logs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "logpath"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: LogFileHandler
					s.handleLogFileHandlerRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'v': // Prefix: "version/"
				if l := len("version/"); len(elem) >= l && elem[0:l] == "version/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetCodeVersion
					s.handleGetCodeVersionRequest([0]string{}, w, r)

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [2]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [2]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "GetCodeVersion"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/openid-configuration/"
				if l := len(".well-known/openid-configuration/"); len(elem) >= l && elem[0:l] == ".well-known/openid-configuration/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetServiceAccountIssuerOpenIDConfiguration
					r.name = "GetServiceAccountIssuerOpenIDConfiguration"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'a': // Prefix: "api"
				if l := len("api"); len(elem) >= l && elem[0:l] == "api" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetCoreAPIVersions"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "GetCoreAPIVersions"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case 'v': // Prefix: "v1/"
						if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetCoreV1APIResources"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'c': // Prefix: "co"
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1ConfigMapForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'm': // Prefix: "mponentstatuses"
								if l := len("mponentstatuses"); len(elem) >= l && elem[0:l] == "mponentstatuses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1ComponentStatus"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf: ReadCoreV1ComponentStatus
										r.name = "ReadCoreV1ComponentStatus"
										r.args = args
										r.count = 1
										return r, true
									}
								}
							case 'n': // Prefix: "nfigmaps"
								if l := len("nfigmaps"); len(elem) >= l && elem[0:l] == "nfigmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ConfigMapForAllNamespaces
									r.name = "ListCoreV1ConfigMapForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'e': // Prefix: "e"
							if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1EventForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'n': // Prefix: "ndpoints"
								if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1EndpointsForAllNamespaces
									r.name = "ListCoreV1EndpointsForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							case 'v': // Prefix: "vents"
								if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1EventForAllNamespaces
									r.name = "ListCoreV1EventForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'l': // Prefix: "limitranges"
							if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListCoreV1LimitRangeForAllNamespaces
								r.name = "ListCoreV1LimitRangeForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
						case 'n': // Prefix: "n"
							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1Node"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "amespaces"
								if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1Namespace"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										r.name = "ReadCoreV1Namespace"
										r.args = args
										r.count = 1
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListCoreV1NamespacedEndpoints"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "configmaps"
											if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListCoreV1NamespacedConfigMap"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespacedConfigMap
													r.name = "ReadCoreV1NamespacedConfigMap"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										case 'e': // Prefix: "e"
											if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListCoreV1NamespacedEvent"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'n': // Prefix: "ndpoints"
												if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedEndpoints"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadCoreV1NamespacedEndpoints
														r.name = "ReadCoreV1NamespacedEndpoints"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											case 'v': // Prefix: "vents"
												if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedEvent"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadCoreV1NamespacedEvent
														r.name = "ReadCoreV1NamespacedEvent"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										case 'l': // Prefix: "limitranges"
											if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListCoreV1NamespacedLimitRange"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespacedLimitRange
													r.name = "ReadCoreV1NamespacedLimitRange"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										case 'p': // Prefix: "p"
											if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListCoreV1NamespacedPod"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'e': // Prefix: "ersistentvolumeclaims"
												if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedPersistentVolumeClaim"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadCoreV1NamespacedPersistentVolumeClaim"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedPersistentVolumeClaimStatus
															r.name = "ReadCoreV1NamespacedPersistentVolumeClaimStatus"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											case 'o': // Prefix: "od"
												if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedPodTemplate"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 's': // Prefix: "s"
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListCoreV1NamespacedPod"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															r.name = "ReadCoreV1NamespacedPod"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																r.name = "ReadCoreV1NamespacedPodLog"
																r.args = args
																r.count = 2
																return r, true
															}
															switch elem[0] {
															case 'e': // Prefix: "ephemeralcontainers"
																if l := len("ephemeralcontainers"); len(elem) >= l && elem[0:l] == "ephemeralcontainers" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodEphemeralcontainers
																	r.name = "ReadCoreV1NamespacedPodEphemeralcontainers"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															case 'l': // Prefix: "log"
																if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodLog
																	r.name = "ReadCoreV1NamespacedPodLog"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															case 's': // Prefix: "status"
																if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedPodStatus
																	r.name = "ReadCoreV1NamespacedPodStatus"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															}
														}
													}
												case 't': // Prefix: "templates"
													if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListCoreV1NamespacedPodTemplate"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedPodTemplate
															r.name = "ReadCoreV1NamespacedPodTemplate"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										case 'r': // Prefix: "re"
											if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListCoreV1NamespacedResourceQuota"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'p': // Prefix: "plicationcontrollers"
												if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedReplicationController"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadCoreV1NamespacedReplicationController"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "ReadCoreV1NamespacedReplicationControllerStatus"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedReplicationControllerScale
																r.name = "ReadCoreV1NamespacedReplicationControllerScale"
																r.args = args
																r.count = 2
																return r, true
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedReplicationControllerStatus
																r.name = "ReadCoreV1NamespacedReplicationControllerStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											case 's': // Prefix: "sourcequotas"
												if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedResourceQuota"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadCoreV1NamespacedResourceQuota"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedResourceQuotaStatus
															r.name = "ReadCoreV1NamespacedResourceQuotaStatus"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ReadCoreV1NamespaceStatus"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListCoreV1NamespacedService"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListCoreV1NamespacedSecret"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: ReadCoreV1NamespacedSecret
															r.name = "ReadCoreV1NamespacedSecret"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListCoreV1NamespacedServiceAccount"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "ListCoreV1NamespacedServiceAccount"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: ReadCoreV1NamespacedServiceAccount
																r.name = "ReadCoreV1NamespacedServiceAccount"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "ListCoreV1NamespacedService"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Match until "/"
															idx := strings.IndexByte(elem, '/')
															if idx < 0 {
																idx = len(elem)
															}
															args[1] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																r.name = "ReadCoreV1NamespacedService"
																r.args = args
																r.count = 2
																return r, true
															}
															switch elem[0] {
															case '/': // Prefix: "/status"
																if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadCoreV1NamespacedServiceStatus
																	r.name = "ReadCoreV1NamespacedServiceStatus"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															}
														}
													}
												}
											case 't': // Prefix: "tatus"
												if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCoreV1NamespaceStatus
													r.name = "ReadCoreV1NamespaceStatus"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								}
							case 'o': // Prefix: "odes"
								if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1Node"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										r.name = "ReadCoreV1Node"
										r.args = args
										r.count = 1
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ReadCoreV1NodeStatus
											r.name = "ReadCoreV1NodeStatus"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1PodForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'e': // Prefix: "ersistentvolume"
								if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1PersistentVolumeClaimForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "claims"
									if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PersistentVolumeClaimForAllNamespaces
										r.name = "ListCoreV1PersistentVolumeClaimForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListCoreV1PersistentVolume"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadCoreV1PersistentVolume"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadCoreV1PersistentVolumeStatus
												r.name = "ReadCoreV1PersistentVolumeStatus"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								}
							case 'o': // Prefix: "od"
								if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1PodTemplateForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PodForAllNamespaces
										r.name = "ListCoreV1PodForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 't': // Prefix: "templates"
									if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1PodTemplateForAllNamespaces
										r.name = "ListCoreV1PodTemplateForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'r': // Prefix: "re"
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1ResourceQuotaForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'p': // Prefix: "plicationcontrollers"
								if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ReplicationControllerForAllNamespaces
									r.name = "ListCoreV1ReplicationControllerForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							case 's': // Prefix: "sourcequotas"
								if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1ResourceQuotaForAllNamespaces
									r.name = "ListCoreV1ResourceQuotaForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 's': // Prefix: "se"
							if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListCoreV1ServiceAccountForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'c': // Prefix: "crets"
								if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListCoreV1SecretForAllNamespaces
									r.name = "ListCoreV1SecretForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							case 'r': // Prefix: "rvice"
								if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListCoreV1ServiceForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "accounts"
									if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1ServiceAccountForAllNamespaces
										r.name = "ListCoreV1ServiceAccountForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoreV1ServiceForAllNamespaces
										r.name = "ListCoreV1ServiceForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'w': // Prefix: "watch/"
							if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "WatchCoreV1EndpointsListForAllNamespaces"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'c': // Prefix: "configmaps"
								if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: WatchCoreV1ConfigMapListForAllNamespaces
									r.name = "WatchCoreV1ConfigMapListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							case 'e': // Prefix: "e"
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchCoreV1EventListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'n': // Prefix: "ndpoints"
									if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1EndpointsListForAllNamespaces
										r.name = "WatchCoreV1EndpointsListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'v': // Prefix: "vents"
									if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1EventListForAllNamespaces
										r.name = "WatchCoreV1EventListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'l': // Prefix: "limitranges"
								if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: WatchCoreV1LimitRangeListForAllNamespaces
									r.name = "WatchCoreV1LimitRangeListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
							case 'n': // Prefix: "n"
								if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchCoreV1Node"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "amespaces"
									if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoreV1NamespaceList"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "WatchCoreV1Namespace"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchCoreV1NamespacedEndpoints"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'c': // Prefix: "configmaps"
												if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedConfigMapList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchCoreV1NamespacedConfigMap
														r.name = "WatchCoreV1NamespacedConfigMap"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedEvent"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'n': // Prefix: "ndpoints"
													if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedEndpointsList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedEndpoints
															r.name = "WatchCoreV1NamespacedEndpoints"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'v': // Prefix: "vents"
													if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedEventList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedEvent
															r.name = "WatchCoreV1NamespacedEvent"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											case 'l': // Prefix: "limitranges"
												if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedLimitRangeList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchCoreV1NamespacedLimitRange
														r.name = "WatchCoreV1NamespacedLimitRange"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											case 'p': // Prefix: "p"
												if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedPod"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'e': // Prefix: "ersistentvolumeclaims"
													if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedPersistentVolumeClaimList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedPersistentVolumeClaim
															r.name = "WatchCoreV1NamespacedPersistentVolumeClaim"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'o': // Prefix: "od"
													if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedPodTemplate"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchCoreV1NamespacedPodList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedPod
																r.name = "WatchCoreV1NamespacedPod"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													case 't': // Prefix: "templates"
														if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchCoreV1NamespacedPodTemplateList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedPodTemplate
																r.name = "WatchCoreV1NamespacedPodTemplate"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											case 'r': // Prefix: "re"
												if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedResourceQuota"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'p': // Prefix: "plicationcontrollers"
													if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedReplicationControllerList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedReplicationController
															r.name = "WatchCoreV1NamespacedReplicationController"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 's': // Prefix: "sourcequotas"
													if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedResourceQuotaList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedResourceQuota
															r.name = "WatchCoreV1NamespacedResourceQuota"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											case 's': // Prefix: "se"
												if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchCoreV1NamespacedService"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedSecretList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchCoreV1NamespacedSecret
															r.name = "WatchCoreV1NamespacedSecret"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchCoreV1NamespacedServiceAccount"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchCoreV1NamespacedServiceAccountList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedServiceAccount
																r.name = "WatchCoreV1NamespacedServiceAccount"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchCoreV1NamespacedServiceList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchCoreV1NamespacedService
																r.name = "WatchCoreV1NamespacedService"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											}
										}
									}
								case 'o': // Prefix: "odes"
									if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoreV1NodeList"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchCoreV1Node
											r.name = "WatchCoreV1Node"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							case 'p': // Prefix: "p"
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchCoreV1PodListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "ersistentvolume"
									if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoreV1PersistentVolumeClaimListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "claims"
										if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PersistentVolumeClaimListForAllNamespaces
											r.name = "WatchCoreV1PersistentVolumeClaimListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchCoreV1PersistentVolumeList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchCoreV1PersistentVolume
												r.name = "WatchCoreV1PersistentVolume"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'o': // Prefix: "od"
									if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoreV1PodTemplateListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PodListForAllNamespaces
											r.name = "WatchCoreV1PodListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 't': // Prefix: "templates"
										if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1PodTemplateListForAllNamespaces
											r.name = "WatchCoreV1PodTemplateListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							case 'r': // Prefix: "re"
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchCoreV1ResourceQuotaListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'p': // Prefix: "plicationcontrollers"
									if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1ReplicationControllerListForAllNamespaces
										r.name = "WatchCoreV1ReplicationControllerListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 's': // Prefix: "sourcequotas"
									if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1ResourceQuotaListForAllNamespaces
										r.name = "WatchCoreV1ResourceQuotaListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 's': // Prefix: "se"
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchCoreV1ServiceAccountListForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "crets"
									if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: WatchCoreV1SecretListForAllNamespaces
										r.name = "WatchCoreV1SecretListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'r': // Prefix: "rvice"
									if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoreV1ServiceListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "accounts"
										if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1ServiceAccountListForAllNamespaces
											r.name = "WatchCoreV1ServiceAccountListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoreV1ServiceListForAllNamespaces
											r.name = "WatchCoreV1ServiceListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "GetAPIVersions"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetApiextensionsAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'd': // Prefix: "dmissionregistration.k8s.io/"
							if l := len("dmissionregistration.k8s.io/"); len(elem) >= l && elem[0:l] == "dmissionregistration.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetAdmissionregistrationAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetAdmissionregistrationV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'm': // Prefix: "mutatingwebhookconfigurations"
									if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListAdmissionregistrationV1MutatingWebhookConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadAdmissionregistrationV1MutatingWebhookConfiguration
											r.name = "ReadAdmissionregistrationV1MutatingWebhookConfiguration"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								case 'v': // Prefix: "validatingwebhookconfigurations"
									if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListAdmissionregistrationV1ValidatingWebhookConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadAdmissionregistrationV1ValidatingWebhookConfiguration
											r.name = "ReadAdmissionregistrationV1ValidatingWebhookConfiguration"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchAdmissionregistrationV1ValidatingWebhookConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'm': // Prefix: "mutatingwebhookconfigurations"
										if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchAdmissionregistrationV1MutatingWebhookConfigurationList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchAdmissionregistrationV1MutatingWebhookConfiguration
												r.name = "WatchAdmissionregistrationV1MutatingWebhookConfiguration"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'v': // Prefix: "validatingwebhookconfigurations"
										if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchAdmissionregistrationV1ValidatingWebhookConfigurationList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchAdmissionregistrationV1ValidatingWebhookConfiguration
												r.name = "WatchAdmissionregistrationV1ValidatingWebhookConfiguration"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetAppsAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetApiregistrationAPIGroup"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "extensions.k8s.io/"
									if l := len("extensions.k8s.io/"); len(elem) >= l && elem[0:l] == "extensions.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetApiextensionsAPIGroup"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "GetApiextensionsV1APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "customresourcedefinitions"
											if l := len("customresourcedefinitions"); len(elem) >= l && elem[0:l] == "customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListApiextensionsV1CustomResourceDefinition"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													r.name = "ReadApiextensionsV1CustomResourceDefinition"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadApiextensionsV1CustomResourceDefinitionStatus
														r.name = "ReadApiextensionsV1CustomResourceDefinitionStatus"
														r.args = args
														r.count = 1
														return r, true
													}
												}
											}
										case 'w': // Prefix: "watch/customresourcedefinitions"
											if l := len("watch/customresourcedefinitions"); len(elem) >= l && elem[0:l] == "watch/customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchApiextensionsV1CustomResourceDefinitionList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchApiextensionsV1CustomResourceDefinition
													r.name = "WatchApiextensionsV1CustomResourceDefinition"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								case 'r': // Prefix: "registration.k8s.io/"
									if l := len("registration.k8s.io/"); len(elem) >= l && elem[0:l] == "registration.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetApiregistrationAPIGroup"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "GetApiregistrationV1APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "apiservices"
											if l := len("apiservices"); len(elem) >= l && elem[0:l] == "apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListApiregistrationV1APIService"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													r.name = "ReadApiregistrationV1APIService"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadApiregistrationV1APIServiceStatus
														r.name = "ReadApiregistrationV1APIServiceStatus"
														r.args = args
														r.count = 1
														return r, true
													}
												}
											}
										case 'w': // Prefix: "watch/apiservices"
											if l := len("watch/apiservices"); len(elem) >= l && elem[0:l] == "watch/apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchApiregistrationV1APIServiceList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchApiregistrationV1APIService
													r.name = "WatchApiregistrationV1APIService"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								}
							case 'p': // Prefix: "ps/"
								if l := len("ps/"); len(elem) >= l && elem[0:l] == "ps/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetAppsAPIGroup"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'v': // Prefix: "v1/"
									if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetAppsV1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "controllerrevisions"
										if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1ControllerRevisionForAllNamespaces
											r.name = "ListAppsV1ControllerRevisionForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'd': // Prefix: "d"
										if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListAppsV1DeploymentForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "aemonsets"
											if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAppsV1DaemonSetForAllNamespaces
												r.name = "ListAppsV1DaemonSetForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 'e': // Prefix: "eployments"
											if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAppsV1DeploymentForAllNamespaces
												r.name = "ListAppsV1DeploymentForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListAppsV1NamespacedDaemonSet"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'c': // Prefix: "controllerrevisions"
												if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListAppsV1NamespacedControllerRevision"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadAppsV1NamespacedControllerRevision
														r.name = "ReadAppsV1NamespacedControllerRevision"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											case 'd': // Prefix: "d"
												if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListAppsV1NamespacedDeployment"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'a': // Prefix: "aemonsets"
													if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListAppsV1NamespacedDaemonSet"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															r.name = "ReadAppsV1NamespacedDaemonSet"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedDaemonSetStatus
																r.name = "ReadAppsV1NamespacedDaemonSetStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												case 'e': // Prefix: "eployments"
													if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListAppsV1NamespacedDeployment"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															r.name = "ReadAppsV1NamespacedDeployment"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/s"
															if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																r.name = "ReadAppsV1NamespacedDeploymentStatus"
																r.args = args
																r.count = 2
																return r, true
															}
															switch elem[0] {
															case 'c': // Prefix: "cale"
																if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadAppsV1NamespacedDeploymentScale
																	r.name = "ReadAppsV1NamespacedDeploymentScale"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															case 't': // Prefix: "tatus"
																if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf: ReadAppsV1NamespacedDeploymentStatus
																	r.name = "ReadAppsV1NamespacedDeploymentStatus"
																	r.args = args
																	r.count = 2
																	return r, true
																}
															}
														}
													}
												}
											case 'r': // Prefix: "replicasets"
												if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListAppsV1NamespacedReplicaSet"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadAppsV1NamespacedReplicaSet"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "ReadAppsV1NamespacedReplicaSetStatus"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedReplicaSetScale
																r.name = "ReadAppsV1NamespacedReplicaSetScale"
																r.args = args
																r.count = 2
																return r, true
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedReplicaSetStatus
																r.name = "ReadAppsV1NamespacedReplicaSetStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											case 's': // Prefix: "statefulsets"
												if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListAppsV1NamespacedStatefulSet"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadAppsV1NamespacedStatefulSet"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "ReadAppsV1NamespacedStatefulSetStatus"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedStatefulSetScale
																r.name = "ReadAppsV1NamespacedStatefulSetScale"
																r.args = args
																r.count = 2
																return r, true
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAppsV1NamespacedStatefulSetStatus
																r.name = "ReadAppsV1NamespacedStatefulSetStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "replicasets"
										if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1ReplicaSetForAllNamespaces
											r.name = "ListAppsV1ReplicaSetForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 's': // Prefix: "statefulsets"
										if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListAppsV1StatefulSetForAllNamespaces
											r.name = "ListAppsV1StatefulSetForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchAppsV1DaemonSetListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "controllerrevisions"
											if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1ControllerRevisionListForAllNamespaces
												r.name = "WatchAppsV1ControllerRevisionListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 'd': // Prefix: "d"
											if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchAppsV1DeploymentListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "aemonsets"
												if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAppsV1DaemonSetListForAllNamespaces
													r.name = "WatchAppsV1DaemonSetListForAllNamespaces"
													r.args = args
													r.count = 0
													return r, true
												}
											case 'e': // Prefix: "eployments"
												if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAppsV1DeploymentListForAllNamespaces
													r.name = "WatchAppsV1DeploymentListForAllNamespaces"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchAppsV1NamespacedDaemonSet"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'c': // Prefix: "controllerrevisions"
													if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchAppsV1NamespacedControllerRevisionList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedControllerRevision
															r.name = "WatchAppsV1NamespacedControllerRevision"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'd': // Prefix: "d"
													if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchAppsV1NamespacedDeployment"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case 'a': // Prefix: "aemonsets"
														if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchAppsV1NamespacedDaemonSetList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAppsV1NamespacedDaemonSet
																r.name = "WatchAppsV1NamespacedDaemonSet"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													case 'e': // Prefix: "eployments"
														if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchAppsV1NamespacedDeploymentList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAppsV1NamespacedDeployment
																r.name = "WatchAppsV1NamespacedDeployment"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												case 'r': // Prefix: "replicasets"
													if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchAppsV1NamespacedReplicaSetList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedReplicaSet
															r.name = "WatchAppsV1NamespacedReplicaSet"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 's': // Prefix: "statefulsets"
													if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchAppsV1NamespacedStatefulSetList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAppsV1NamespacedStatefulSet
															r.name = "WatchAppsV1NamespacedStatefulSet"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										case 'r': // Prefix: "replicasets"
											if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1ReplicaSetListForAllNamespaces
												r.name = "WatchAppsV1ReplicaSetListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 's': // Prefix: "statefulsets"
											if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchAppsV1StatefulSetListForAllNamespaces
												r.name = "WatchAppsV1StatefulSetListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'u': // Prefix: "ut"
							if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetAutoscalingAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'h': // Prefix: "h"
								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetAuthorizationAPIGroup"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "entication.k8s.io/"
									if l := len("entication.k8s.io/"); len(elem) >= l && elem[0:l] == "entication.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetAuthenticationAPIGroup"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: GetAuthenticationV1APIResources
											r.name = "GetAuthenticationV1APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'o': // Prefix: "orization.k8s.io/"
									if l := len("orization.k8s.io/"); len(elem) >= l && elem[0:l] == "orization.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetAuthorizationAPIGroup"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: GetAuthorizationV1APIResources
											r.name = "GetAuthorizationV1APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							case 'o': // Prefix: "oscaling/"
								if l := len("oscaling/"); len(elem) >= l && elem[0:l] == "oscaling/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetAutoscalingAPIGroup"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetAutoscalingV2beta1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '1': // Prefix: "1/"
										if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "GetAutoscalingV1APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'h': // Prefix: "horizontalpodautoscalers"
											if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces
												r.name = "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/horizontalpodautoscalers"
												if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListAutoscalingV1NamespacedHorizontalPodAutoscaler"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadAutoscalingV1NamespacedHorizontalPodAutoscaler"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
															r.name = "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										case 'w': // Prefix: "watch/"
											if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchAutoscalingV1NamespacedHorizontalPodAutoscaler"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces
													r.name = "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces"
													r.args = args
													r.count = 0
													return r, true
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchAutoscalingV1NamespacedHorizontalPodAutoscaler
															r.name = "WatchAutoscalingV1NamespacedHorizontalPodAutoscaler"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										}
									case '2': // Prefix: "2beta"
										if l := len("2beta"); len(elem) >= l && elem[0:l] == "2beta" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "GetAutoscalingV2beta2APIResources"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '1': // Prefix: "1/"
											if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "GetAutoscalingV2beta1APIResources"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces
													r.name = "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces"
													r.args = args
													r.count = 0
													return r, true
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															r.name = "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus
																r.name = "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces
														r.name = "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces"
														r.args = args
														r.count = 0
														return r, true
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler
																r.name = "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											}
										case '2': // Prefix: "2/"
											if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "GetAutoscalingV2beta2APIResources"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces
													r.name = "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces"
													r.args = args
													r.count = 0
													return r, true
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															r.name = "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
															r.args = args
															r.count = 2
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus
																r.name = "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces
														r.name = "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces"
														r.args = args
														r.count = 0
														return r, true
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															r.name = "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList"
															r.args = args
															r.count = 1
															return r, true
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler
																r.name = "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
																r.args = args
																r.count = 2
																return r, true
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'b': // Prefix: "batch/"
						if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetBatchAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetBatchV1beta1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetBatchV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1CronJobForAllNamespaces
										r.name = "ListBatchV1CronJobForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'j': // Prefix: "jobs"
									if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1JobForAllNamespaces
										r.name = "ListBatchV1JobForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListBatchV1NamespacedJob"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "cronjobs"
											if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListBatchV1NamespacedCronJob"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													r.name = "ReadBatchV1NamespacedCronJob"
													r.args = args
													r.count = 2
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadBatchV1NamespacedCronJobStatus
														r.name = "ReadBatchV1NamespacedCronJobStatus"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										case 'j': // Prefix: "jobs"
											if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListBatchV1NamespacedJob"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													r.name = "ReadBatchV1NamespacedJob"
													r.args = args
													r.count = 2
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: ReadBatchV1NamespacedJobStatus
														r.name = "ReadBatchV1NamespacedJobStatus"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchBatchV1JobListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1CronJobListForAllNamespaces
											r.name = "WatchBatchV1CronJobListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'j': // Prefix: "jobs"
										if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1JobListForAllNamespaces
											r.name = "WatchBatchV1JobListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchBatchV1NamespacedJob"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'c': // Prefix: "cronjobs"
												if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchBatchV1NamespacedCronJobList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchBatchV1NamespacedCronJob
														r.name = "WatchBatchV1NamespacedCronJob"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											case 'j': // Prefix: "jobs"
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchBatchV1NamespacedJobList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchBatchV1NamespacedJob
														r.name = "WatchBatchV1NamespacedJob"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetBatchV1beta1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListBatchV1beta1CronJobForAllNamespaces
										r.name = "ListBatchV1beta1CronJobForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/cronjobs"
										if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListBatchV1beta1NamespacedCronJob"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												r.name = "ReadBatchV1beta1NamespacedCronJob"
												r.args = args
												r.count = 2
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadBatchV1beta1NamespacedCronJobStatus
													r.name = "ReadBatchV1beta1NamespacedCronJobStatus"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchBatchV1beta1NamespacedCronJob"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchBatchV1beta1CronJobListForAllNamespaces
											r.name = "WatchBatchV1beta1CronJobListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/cronjobs"
											if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchBatchV1beta1NamespacedCronJobList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchBatchV1beta1NamespacedCronJob
													r.name = "WatchBatchV1beta1NamespacedCronJob"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetCoordinationAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'e': // Prefix: "ertificates.k8s.io/"
							if l := len("ertificates.k8s.io/"); len(elem) >= l && elem[0:l] == "ertificates.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetCertificatesAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetCertificatesV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "certificatesigningrequests"
									if l := len("certificatesigningrequests"); len(elem) >= l && elem[0:l] == "certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListCertificatesV1CertificateSigningRequest"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadCertificatesV1CertificateSigningRequest"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ReadCertificatesV1CertificateSigningRequestStatus"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "approval"
												if l := len("approval"); len(elem) >= l && elem[0:l] == "approval" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCertificatesV1CertificateSigningRequestApproval
													r.name = "ReadCertificatesV1CertificateSigningRequestApproval"
													r.args = args
													r.count = 1
													return r, true
												}
											case 's': // Prefix: "status"
												if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadCertificatesV1CertificateSigningRequestStatus
													r.name = "ReadCertificatesV1CertificateSigningRequestStatus"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								case 'w': // Prefix: "watch/certificatesigningrequests"
									if l := len("watch/certificatesigningrequests"); len(elem) >= l && elem[0:l] == "watch/certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCertificatesV1CertificateSigningRequestList"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchCertificatesV1CertificateSigningRequest
											r.name = "WatchCertificatesV1CertificateSigningRequest"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							}
						case 'o': // Prefix: "oordination.k8s.io/"
							if l := len("oordination.k8s.io/"); len(elem) >= l && elem[0:l] == "oordination.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetCoordinationAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetCoordinationV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'l': // Prefix: "leases"
									if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListCoordinationV1LeaseForAllNamespaces
										r.name = "ListCoordinationV1LeaseForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/leases"
										if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListCoordinationV1NamespacedLease"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadCoordinationV1NamespacedLease
												r.name = "ReadCoordinationV1NamespacedLease"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchCoordinationV1NamespacedLease"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'l': // Prefix: "leases"
										if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchCoordinationV1LeaseListForAllNamespaces
											r.name = "WatchCoordinationV1LeaseListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/leases"
											if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchCoordinationV1NamespacedLeaseList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchCoordinationV1NamespacedLease
													r.name = "WatchCoordinationV1NamespacedLease"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							}
						}
					case 'd': // Prefix: "discovery.k8s.io/"
						if l := len("discovery.k8s.io/"); len(elem) >= l && elem[0:l] == "discovery.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetDiscoveryAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetDiscoveryV1beta1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetDiscoveryV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListDiscoveryV1EndpointSliceForAllNamespaces
										r.name = "ListDiscoveryV1EndpointSliceForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListDiscoveryV1NamespacedEndpointSlice"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadDiscoveryV1NamespacedEndpointSlice
												r.name = "ReadDiscoveryV1NamespacedEndpointSlice"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchDiscoveryV1NamespacedEndpointSlice"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchDiscoveryV1EndpointSliceListForAllNamespaces
											r.name = "WatchDiscoveryV1EndpointSliceListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchDiscoveryV1NamespacedEndpointSliceList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchDiscoveryV1NamespacedEndpointSlice
													r.name = "WatchDiscoveryV1NamespacedEndpointSlice"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetDiscoveryV1beta1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListDiscoveryV1beta1EndpointSliceForAllNamespaces
										r.name = "ListDiscoveryV1beta1EndpointSliceForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListDiscoveryV1beta1NamespacedEndpointSlice"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadDiscoveryV1beta1NamespacedEndpointSlice
												r.name = "ReadDiscoveryV1beta1NamespacedEndpointSlice"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchDiscoveryV1beta1NamespacedEndpointSlice"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces
											r.name = "WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchDiscoveryV1beta1NamespacedEndpointSliceList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchDiscoveryV1beta1NamespacedEndpointSlice
													r.name = "WatchDiscoveryV1beta1NamespacedEndpointSlice"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							}
						}
					case 'e': // Prefix: "events.k8s.io/"
						if l := len("events.k8s.io/"); len(elem) >= l && elem[0:l] == "events.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetEventsAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetEventsV1beta1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetEventsV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListEventsV1EventForAllNamespaces
										r.name = "ListEventsV1EventForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListEventsV1NamespacedEvent"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadEventsV1NamespacedEvent
												r.name = "ReadEventsV1NamespacedEvent"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchEventsV1NamespacedEvent"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchEventsV1EventListForAllNamespaces
											r.name = "WatchEventsV1EventListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchEventsV1NamespacedEventList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchEventsV1NamespacedEvent
													r.name = "WatchEventsV1NamespacedEvent"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetEventsV1beta1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListEventsV1beta1EventForAllNamespaces
										r.name = "ListEventsV1beta1EventForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListEventsV1beta1NamespacedEvent"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadEventsV1beta1NamespacedEvent
												r.name = "ReadEventsV1beta1NamespacedEvent"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchEventsV1beta1NamespacedEvent"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchEventsV1beta1EventListForAllNamespaces
											r.name = "WatchEventsV1beta1EventListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchEventsV1beta1NamespacedEventList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchEventsV1beta1NamespacedEvent
													r.name = "WatchEventsV1beta1NamespacedEvent"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								}
							}
						}
					case 'f': // Prefix: "flowcontrol.apiserver.k8s.io/"
						if l := len("flowcontrol.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "flowcontrol.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetFlowcontrolApiserverAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1beta"
							if l := len("v1beta"); len(elem) >= l && elem[0:l] == "v1beta" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetFlowcontrolApiserverV1beta2APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '1': // Prefix: "1/"
								if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetFlowcontrolApiserverV1beta1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListFlowcontrolApiserverV1beta1FlowSchema"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadFlowcontrolApiserverV1beta1FlowSchema"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta1FlowSchemaStatus
												r.name = "ReadFlowcontrolApiserverV1beta1FlowSchemaStatus"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus
												r.name = "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchFlowcontrolApiserverV1beta1FlowSchemaList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta1FlowSchema
												r.name = "WatchFlowcontrolApiserverV1beta1FlowSchema"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration
												r.name = "WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								}
							case '2': // Prefix: "2/"
								if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetFlowcontrolApiserverV1beta2APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListFlowcontrolApiserverV1beta2FlowSchema"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadFlowcontrolApiserverV1beta2FlowSchema"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta2FlowSchemaStatus
												r.name = "ReadFlowcontrolApiserverV1beta2FlowSchemaStatus"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											r.name = "ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
												r.name = "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchFlowcontrolApiserverV1beta2FlowSchemaList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta2FlowSchema
												r.name = "WatchFlowcontrolApiserverV1beta2FlowSchema"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
												r.name = "WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "internal.apiserver.k8s.io/"
						if l := len("internal.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "internal.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetInternalApiserverAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1alpha1/"
							if l := len("v1alpha1/"); len(elem) >= l && elem[0:l] == "v1alpha1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetInternalApiserverV1alpha1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 's': // Prefix: "storageversions"
								if l := len("storageversions"); len(elem) >= l && elem[0:l] == "storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListInternalApiserverV1alpha1StorageVersion"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										r.name = "ReadInternalApiserverV1alpha1StorageVersion"
										r.args = args
										r.count = 1
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ReadInternalApiserverV1alpha1StorageVersionStatus
											r.name = "ReadInternalApiserverV1alpha1StorageVersionStatus"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							case 'w': // Prefix: "watch/storageversions"
								if l := len("watch/storageversions"); len(elem) >= l && elem[0:l] == "watch/storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchInternalApiserverV1alpha1StorageVersionList"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf: WatchInternalApiserverV1alpha1StorageVersion
										r.name = "WatchInternalApiserverV1alpha1StorageVersion"
										r.args = args
										r.count = 1
										return r, true
									}
								}
							}
						}
					case 'n': // Prefix: "n"
						if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetNodeAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'e': // Prefix: "etworking.k8s.io/"
							if l := len("etworking.k8s.io/"); len(elem) >= l && elem[0:l] == "etworking.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetNetworkingAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetNetworkingV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'i': // Prefix: "ingress"
									if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListNetworkingV1IngressForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "classes"
										if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListNetworkingV1IngressClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNetworkingV1IngressClass
												r.name = "ReadNetworkingV1IngressClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'e': // Prefix: "es"
										if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListNetworkingV1IngressForAllNamespaces
											r.name = "ListNetworkingV1IngressForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "n"
									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListNetworkingV1NetworkPolicyForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "amespaces/"
										if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListNetworkingV1NamespacedNetworkPolicy"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case 'i': // Prefix: "ingresses"
												if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListNetworkingV1NamespacedIngress"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														r.name = "ReadNetworkingV1NamespacedIngress"
														r.args = args
														r.count = 2
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: ReadNetworkingV1NamespacedIngressStatus
															r.name = "ReadNetworkingV1NamespacedIngressStatus"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											case 'n': // Prefix: "networkpolicies"
												if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "ListNetworkingV1NamespacedNetworkPolicy"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: ReadNetworkingV1NamespacedNetworkPolicy
														r.name = "ReadNetworkingV1NamespacedNetworkPolicy"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										}
									case 'e': // Prefix: "etworkpolicies"
										if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListNetworkingV1NetworkPolicyForAllNamespaces
											r.name = "ListNetworkingV1NetworkPolicyForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchNetworkingV1NamespacedIngress"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'i': // Prefix: "ingress"
										if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchNetworkingV1IngressListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "classes"
											if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchNetworkingV1IngressClassList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchNetworkingV1IngressClass
													r.name = "WatchNetworkingV1IngressClass"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										case 'e': // Prefix: "es"
											if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchNetworkingV1IngressListForAllNamespaces
												r.name = "WatchNetworkingV1IngressListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "n"
										if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchNetworkingV1NetworkPolicyListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "amespaces/"
											if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchNetworkingV1NamespacedNetworkPolicy"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case 'i': // Prefix: "ingresses"
													if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchNetworkingV1NamespacedIngressList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchNetworkingV1NamespacedIngress
															r.name = "WatchNetworkingV1NamespacedIngress"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												case 'n': // Prefix: "networkpolicies"
													if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "WatchNetworkingV1NamespacedNetworkPolicyList"
														r.args = args
														r.count = 1
														return r, true
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf: WatchNetworkingV1NamespacedNetworkPolicy
															r.name = "WatchNetworkingV1NamespacedNetworkPolicy"
															r.args = args
															r.count = 2
															return r, true
														}
													}
												}
											}
										case 'e': // Prefix: "etworkpolicies"
											if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchNetworkingV1NetworkPolicyListForAllNamespaces
												r.name = "WatchNetworkingV1NetworkPolicyListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'o': // Prefix: "ode.k8s.io/"
							if l := len("ode.k8s.io/"); len(elem) >= l && elem[0:l] == "ode.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetNodeAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetNodeV1alpha1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetNodeV1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListNodeV1RuntimeClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1RuntimeClass
												r.name = "ReadNodeV1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchNodeV1RuntimeClassList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1RuntimeClass
												r.name = "WatchNodeV1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetNodeV1alpha1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListNodeV1alpha1RuntimeClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1alpha1RuntimeClass
												r.name = "ReadNodeV1alpha1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchNodeV1alpha1RuntimeClassList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1alpha1RuntimeClass
												r.name = "WatchNodeV1alpha1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetNodeV1beta1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListNodeV1beta1RuntimeClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadNodeV1beta1RuntimeClass
												r.name = "ReadNodeV1beta1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchNodeV1beta1RuntimeClassList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchNodeV1beta1RuntimeClass
												r.name = "WatchNodeV1beta1RuntimeClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								}
							}
						}
					case 'p': // Prefix: "policy/"
						if l := len("policy/"); len(elem) >= l && elem[0:l] == "policy/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetPolicyAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetPolicyV1beta1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetPolicyV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListPolicyV1NamespacedPodDisruptionBudget"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												r.name = "ReadPolicyV1NamespacedPodDisruptionBudget"
												r.args = args
												r.count = 2
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadPolicyV1NamespacedPodDisruptionBudgetStatus
													r.name = "ReadPolicyV1NamespacedPodDisruptionBudgetStatus"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								case 'p': // Prefix: "poddisruptionbudgets"
									if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListPolicyV1PodDisruptionBudgetForAllNamespaces
										r.name = "ListPolicyV1PodDisruptionBudgetForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchPolicyV1PodDisruptionBudgetListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchPolicyV1NamespacedPodDisruptionBudgetList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1NamespacedPodDisruptionBudget
													r.name = "WatchPolicyV1NamespacedPodDisruptionBudget"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									case 'p': // Prefix: "poddisruptionbudgets"
										if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchPolicyV1PodDisruptionBudgetListForAllNamespaces
											r.name = "WatchPolicyV1PodDisruptionBudgetListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetPolicyV1beta1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListPolicyV1beta1NamespacedPodDisruptionBudget"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												r.name = "ReadPolicyV1beta1NamespacedPodDisruptionBudget"
												r.args = args
												r.count = 2
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus
													r.name = "ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								case 'p': // Prefix: "pod"
									if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListPolicyV1beta1PodSecurityPolicy"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'd': // Prefix: "disruptionbudgets"
										if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces
											r.name = "ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 's': // Prefix: "securitypolicies"
										if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListPolicyV1beta1PodSecurityPolicy"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadPolicyV1beta1PodSecurityPolicy
												r.name = "ReadPolicyV1beta1PodSecurityPolicy"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchPolicyV1beta1NamespacedPodDisruptionBudgetList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1beta1NamespacedPodDisruptionBudget
													r.name = "WatchPolicyV1beta1NamespacedPodDisruptionBudget"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									case 'p': // Prefix: "pod"
										if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchPolicyV1beta1PodSecurityPolicy"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'd': // Prefix: "disruptionbudgets"
											if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces
												r.name = "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 's': // Prefix: "securitypolicies"
											if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchPolicyV1beta1PodSecurityPolicyList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchPolicyV1beta1PodSecurityPolicy
													r.name = "WatchPolicyV1beta1PodSecurityPolicy"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "rbac.authorization.k8s.io/"
						if l := len("rbac.authorization.k8s.io/"); len(elem) >= l && elem[0:l] == "rbac.authorization.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetRbacAuthorizationAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'v': // Prefix: "v1/"
							if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetRbacAuthorizationV1APIResources"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'c': // Prefix: "clusterrole"
								if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListRbacAuthorizationV1ClusterRoleBinding"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListRbacAuthorizationV1ClusterRoleBinding"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadRbacAuthorizationV1ClusterRoleBinding
											r.name = "ReadRbacAuthorizationV1ClusterRoleBinding"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListRbacAuthorizationV1ClusterRole"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadRbacAuthorizationV1ClusterRole
											r.name = "ReadRbacAuthorizationV1ClusterRole"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							case 'n': // Prefix: "namespaces/"
								if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "namespace"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/role"
									if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListRbacAuthorizationV1NamespacedRoleBinding"
										r.args = args
										r.count = 1
										return r, true
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListRbacAuthorizationV1NamespacedRoleBinding"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadRbacAuthorizationV1NamespacedRoleBinding
												r.name = "ReadRbacAuthorizationV1NamespacedRoleBinding"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListRbacAuthorizationV1NamespacedRole"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadRbacAuthorizationV1NamespacedRole
												r.name = "ReadRbacAuthorizationV1NamespacedRole"
												r.args = args
												r.count = 2
												return r, true
											}
										}
									}
								}
							case 'r': // Prefix: "role"
								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "ListRbacAuthorizationV1RoleForAllNamespaces"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListRbacAuthorizationV1RoleBindingForAllNamespaces
										r.name = "ListRbacAuthorizationV1RoleBindingForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: ListRbacAuthorizationV1RoleForAllNamespaces
										r.name = "ListRbacAuthorizationV1RoleForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'w': // Prefix: "watch/"
								if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "WatchRbacAuthorizationV1NamespacedRole"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'c': // Prefix: "clusterrole"
									if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchRbacAuthorizationV1ClusterRoleBinding"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchRbacAuthorizationV1ClusterRoleBindingList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchRbacAuthorizationV1ClusterRoleBinding
												r.name = "WatchRbacAuthorizationV1ClusterRoleBinding"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchRbacAuthorizationV1ClusterRoleList"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: WatchRbacAuthorizationV1ClusterRole
												r.name = "WatchRbacAuthorizationV1ClusterRole"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/role"
										if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchRbacAuthorizationV1NamespacedRoleBinding"
											r.args = args
											r.count = 1
											return r, true
										}
										switch elem[0] {
										case 'b': // Prefix: "bindings"
											if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchRbacAuthorizationV1NamespacedRoleBindingList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchRbacAuthorizationV1NamespacedRoleBinding
													r.name = "WatchRbacAuthorizationV1NamespacedRoleBinding"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchRbacAuthorizationV1NamespacedRoleList"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchRbacAuthorizationV1NamespacedRole
													r.name = "WatchRbacAuthorizationV1NamespacedRole"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									}
								case 'r': // Prefix: "role"
									if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchRbacAuthorizationV1RoleListForAllNamespaces"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchRbacAuthorizationV1RoleBindingListForAllNamespaces
											r.name = "WatchRbacAuthorizationV1RoleBindingListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: WatchRbacAuthorizationV1RoleListForAllNamespaces
											r.name = "WatchRbacAuthorizationV1RoleListForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "GetStorageAPIGroup"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'c': // Prefix: "cheduling.k8s.io/"
							if l := len("cheduling.k8s.io/"); len(elem) >= l && elem[0:l] == "cheduling.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetSchedulingAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetSchedulingV1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'p': // Prefix: "priorityclasses"
									if l := len("priorityclasses"); len(elem) >= l && elem[0:l] == "priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "ListSchedulingV1PriorityClass"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: ReadSchedulingV1PriorityClass
											r.name = "ReadSchedulingV1PriorityClass"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								case 'w': // Prefix: "watch/priorityclasses"
									if l := len("watch/priorityclasses"); len(elem) >= l && elem[0:l] == "watch/priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "WatchSchedulingV1PriorityClassList"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf: WatchSchedulingV1PriorityClass
											r.name = "WatchSchedulingV1PriorityClass"
											r.args = args
											r.count = 1
											return r, true
										}
									}
								}
							}
						case 't': // Prefix: "torage.k8s.io/"
							if l := len("torage.k8s.io/"); len(elem) >= l && elem[0:l] == "torage.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "GetStorageAPIGroup"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "GetStorageV1alpha1APIResources"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetStorageV1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "csi"
										if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListStorageV1CSINode"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'd': // Prefix: "drivers"
											if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListStorageV1CSIDriver"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1CSIDriver
													r.name = "ReadStorageV1CSIDriver"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										case 'n': // Prefix: "nodes"
											if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListStorageV1CSINode"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1CSINode
													r.name = "ReadStorageV1CSINode"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									case 's': // Prefix: "storageclasses"
										if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListStorageV1StorageClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf: ReadStorageV1StorageClass
												r.name = "ReadStorageV1StorageClass"
												r.args = args
												r.count = 1
												return r, true
											}
										}
									case 'v': // Prefix: "volumeattachments"
										if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "ListStorageV1VolumeAttachment"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												r.name = "ReadStorageV1VolumeAttachment"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: ReadStorageV1VolumeAttachmentStatus
													r.name = "ReadStorageV1VolumeAttachmentStatus"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchStorageV1StorageClass"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "csi"
											if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchStorageV1CSINode"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'd': // Prefix: "drivers"
												if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchStorageV1CSIDriverList"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1CSIDriver
														r.name = "WatchStorageV1CSIDriver"
														r.args = args
														r.count = 1
														return r, true
													}
												}
											case 'n': // Prefix: "nodes"
												if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchStorageV1CSINodeList"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1CSINode
														r.name = "WatchStorageV1CSINode"
														r.args = args
														r.count = 1
														return r, true
													}
												}
											}
										case 's': // Prefix: "storageclasses"
											if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchStorageV1StorageClassList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchStorageV1StorageClass
													r.name = "WatchStorageV1StorageClass"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										case 'v': // Prefix: "volumeattachments"
											if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "WatchStorageV1VolumeAttachmentList"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: WatchStorageV1VolumeAttachment
													r.name = "WatchStorageV1VolumeAttachment"
													r.args = args
													r.count = 1
													return r, true
												}
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetStorageV1alpha1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListStorageV1alpha1CSIStorageCapacityForAllNamespaces
											r.name = "ListStorageV1alpha1CSIStorageCapacityForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListStorageV1alpha1NamespacedCSIStorageCapacity"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1alpha1NamespacedCSIStorageCapacity
													r.name = "ReadStorageV1alpha1NamespacedCSIStorageCapacity"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchStorageV1alpha1NamespacedCSIStorageCapacity"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces
												r.name = "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchStorageV1alpha1NamespacedCSIStorageCapacityList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1alpha1NamespacedCSIStorageCapacity
														r.name = "WatchStorageV1alpha1NamespacedCSIStorageCapacity"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "GetStorageV1beta1APIResources"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: ListStorageV1beta1CSIStorageCapacityForAllNamespaces
											r.name = "ListStorageV1beta1CSIStorageCapacityForAllNamespaces"
											r.args = args
											r.count = 0
											return r, true
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "ListStorageV1beta1NamespacedCSIStorageCapacity"
												r.args = args
												r.count = 1
												return r, true
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf: ReadStorageV1beta1NamespacedCSIStorageCapacity
													r.name = "ReadStorageV1beta1NamespacedCSIStorageCapacity"
													r.args = args
													r.count = 2
													return r, true
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "WatchStorageV1beta1NamespacedCSIStorageCapacity"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces
												r.name = "WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces"
												r.args = args
												r.count = 0
												return r, true
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "WatchStorageV1beta1NamespacedCSIStorageCapacityList"
													r.args = args
													r.count = 1
													return r, true
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf: WatchStorageV1beta1NamespacedCSIStorageCapacity
														r.name = "WatchStorageV1beta1NamespacedCSIStorageCapacity"
														r.args = args
														r.count = 2
														return r, true
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 'l': // Prefix: "logs/"
				if l := len("logs/"); len(elem) >= l && elem[0:l] == "logs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "logpath"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: LogFileHandler
					r.name = "LogFileHandler"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'v': // Prefix: "version/"
				if l := len("version/"); len(elem) >= l && elem[0:l] == "version/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetCodeVersion
					r.name = "GetCodeVersion"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	}
	return r, false
}
