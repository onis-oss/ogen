// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationParams(args [0]string, r *http.Request) (ListAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var (
		params    ListAdmissionregistrationV1MutatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [0]string, r *http.Request) (ListAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var (
		params    ListAdmissionregistrationV1ValidatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListApiextensionsV1CustomResourceDefinitionParams(args [0]string, r *http.Request) (ListApiextensionsV1CustomResourceDefinitionParams, error) {
	var (
		params    ListApiextensionsV1CustomResourceDefinitionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListApiregistrationV1APIServiceParams(args [0]string, r *http.Request) (ListApiregistrationV1APIServiceParams, error) {
	var (
		params    ListApiregistrationV1APIServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1ControllerRevisionForAllNamespacesParams(args [0]string, r *http.Request) (ListAppsV1ControllerRevisionForAllNamespacesParams, error) {
	var (
		params    ListAppsV1ControllerRevisionForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1DaemonSetForAllNamespacesParams(args [0]string, r *http.Request) (ListAppsV1DaemonSetForAllNamespacesParams, error) {
	var (
		params    ListAppsV1DaemonSetForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1DeploymentForAllNamespacesParams(args [0]string, r *http.Request) (ListAppsV1DeploymentForAllNamespacesParams, error) {
	var (
		params    ListAppsV1DeploymentForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedControllerRevisionParams(args [1]string, r *http.Request) (ListAppsV1NamespacedControllerRevisionParams, error) {
	var (
		params    ListAppsV1NamespacedControllerRevisionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedDaemonSetParams(args [1]string, r *http.Request) (ListAppsV1NamespacedDaemonSetParams, error) {
	var (
		params    ListAppsV1NamespacedDaemonSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedDeploymentParams(args [1]string, r *http.Request) (ListAppsV1NamespacedDeploymentParams, error) {
	var (
		params    ListAppsV1NamespacedDeploymentParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedReplicaSetParams(args [1]string, r *http.Request) (ListAppsV1NamespacedReplicaSetParams, error) {
	var (
		params    ListAppsV1NamespacedReplicaSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1NamespacedStatefulSetParams(args [1]string, r *http.Request) (ListAppsV1NamespacedStatefulSetParams, error) {
	var (
		params    ListAppsV1NamespacedStatefulSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1ReplicaSetForAllNamespacesParams(args [0]string, r *http.Request) (ListAppsV1ReplicaSetForAllNamespacesParams, error) {
	var (
		params    ListAppsV1ReplicaSetForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAppsV1StatefulSetForAllNamespacesParams(args [0]string, r *http.Request) (ListAppsV1StatefulSetForAllNamespacesParams, error) {
	var (
		params    ListAppsV1StatefulSetForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var (
		params    ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var (
		params    ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams(args [0]string, r *http.Request) (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams, error) {
	var (
		params    ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [1]string, r *http.Request) (ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1CronJobForAllNamespacesParams(args [0]string, r *http.Request) (ListBatchV1CronJobForAllNamespacesParams, error) {
	var (
		params    ListBatchV1CronJobForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1JobForAllNamespacesParams(args [0]string, r *http.Request) (ListBatchV1JobForAllNamespacesParams, error) {
	var (
		params    ListBatchV1JobForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1NamespacedCronJobParams(args [1]string, r *http.Request) (ListBatchV1NamespacedCronJobParams, error) {
	var (
		params    ListBatchV1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1NamespacedJobParams(args [1]string, r *http.Request) (ListBatchV1NamespacedJobParams, error) {
	var (
		params    ListBatchV1NamespacedJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1beta1CronJobForAllNamespacesParams(args [0]string, r *http.Request) (ListBatchV1beta1CronJobForAllNamespacesParams, error) {
	var (
		params    ListBatchV1beta1CronJobForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListBatchV1beta1NamespacedCronJobParams(args [1]string, r *http.Request) (ListBatchV1beta1NamespacedCronJobParams, error) {
	var (
		params    ListBatchV1beta1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCertificatesV1CertificateSigningRequestParams(args [0]string, r *http.Request) (ListCertificatesV1CertificateSigningRequestParams, error) {
	var (
		params    ListCertificatesV1CertificateSigningRequestParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoordinationV1LeaseForAllNamespacesParams(args [0]string, r *http.Request) (ListCoordinationV1LeaseForAllNamespacesParams, error) {
	var (
		params    ListCoordinationV1LeaseForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoordinationV1NamespacedLeaseParams(args [1]string, r *http.Request) (ListCoordinationV1NamespacedLeaseParams, error) {
	var (
		params    ListCoordinationV1NamespacedLeaseParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ComponentStatusParams(args [0]string, r *http.Request) (ListCoreV1ComponentStatusParams, error) {
	var (
		params    ListCoreV1ComponentStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ConfigMapForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1ConfigMapForAllNamespacesParams, error) {
	var (
		params    ListCoreV1ConfigMapForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1EndpointsForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1EndpointsForAllNamespacesParams, error) {
	var (
		params    ListCoreV1EndpointsForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1EventForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1EventForAllNamespacesParams, error) {
	var (
		params    ListCoreV1EventForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1LimitRangeForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1LimitRangeForAllNamespacesParams, error) {
	var (
		params    ListCoreV1LimitRangeForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespaceParams(args [0]string, r *http.Request) (ListCoreV1NamespaceParams, error) {
	var (
		params    ListCoreV1NamespaceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedConfigMapParams(args [1]string, r *http.Request) (ListCoreV1NamespacedConfigMapParams, error) {
	var (
		params    ListCoreV1NamespacedConfigMapParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedEndpointsParams(args [1]string, r *http.Request) (ListCoreV1NamespacedEndpointsParams, error) {
	var (
		params    ListCoreV1NamespacedEndpointsParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedEventParams(args [1]string, r *http.Request) (ListCoreV1NamespacedEventParams, error) {
	var (
		params    ListCoreV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedLimitRangeParams(args [1]string, r *http.Request) (ListCoreV1NamespacedLimitRangeParams, error) {
	var (
		params    ListCoreV1NamespacedLimitRangeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPersistentVolumeClaimParams(args [1]string, r *http.Request) (ListCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var (
		params    ListCoreV1NamespacedPersistentVolumeClaimParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPodParams(args [1]string, r *http.Request) (ListCoreV1NamespacedPodParams, error) {
	var (
		params    ListCoreV1NamespacedPodParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedPodTemplateParams(args [1]string, r *http.Request) (ListCoreV1NamespacedPodTemplateParams, error) {
	var (
		params    ListCoreV1NamespacedPodTemplateParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedReplicationControllerParams(args [1]string, r *http.Request) (ListCoreV1NamespacedReplicationControllerParams, error) {
	var (
		params    ListCoreV1NamespacedReplicationControllerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedResourceQuotaParams(args [1]string, r *http.Request) (ListCoreV1NamespacedResourceQuotaParams, error) {
	var (
		params    ListCoreV1NamespacedResourceQuotaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedSecretParams(args [1]string, r *http.Request) (ListCoreV1NamespacedSecretParams, error) {
	var (
		params    ListCoreV1NamespacedSecretParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedServiceParams(args [1]string, r *http.Request) (ListCoreV1NamespacedServiceParams, error) {
	var (
		params    ListCoreV1NamespacedServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NamespacedServiceAccountParams(args [1]string, r *http.Request) (ListCoreV1NamespacedServiceAccountParams, error) {
	var (
		params    ListCoreV1NamespacedServiceAccountParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1NodeParams(args [0]string, r *http.Request) (ListCoreV1NodeParams, error) {
	var (
		params    ListCoreV1NodeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PersistentVolumeParams(args [0]string, r *http.Request) (ListCoreV1PersistentVolumeParams, error) {
	var (
		params    ListCoreV1PersistentVolumeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1PersistentVolumeClaimForAllNamespacesParams, error) {
	var (
		params    ListCoreV1PersistentVolumeClaimForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PodForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1PodForAllNamespacesParams, error) {
	var (
		params    ListCoreV1PodForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1PodTemplateForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1PodTemplateForAllNamespacesParams, error) {
	var (
		params    ListCoreV1PodTemplateForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ReplicationControllerForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1ReplicationControllerForAllNamespacesParams, error) {
	var (
		params    ListCoreV1ReplicationControllerForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ResourceQuotaForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1ResourceQuotaForAllNamespacesParams, error) {
	var (
		params    ListCoreV1ResourceQuotaForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1SecretForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1SecretForAllNamespacesParams, error) {
	var (
		params    ListCoreV1SecretForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ServiceAccountForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1ServiceAccountForAllNamespacesParams, error) {
	var (
		params    ListCoreV1ServiceAccountForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListCoreV1ServiceForAllNamespacesParams(args [0]string, r *http.Request) (ListCoreV1ServiceForAllNamespacesParams, error) {
	var (
		params    ListCoreV1ServiceForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesParams(args [0]string, r *http.Request) (ListDiscoveryV1EndpointSliceForAllNamespacesParams, error) {
	var (
		params    ListDiscoveryV1EndpointSliceForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1NamespacedEndpointSliceParams(args [1]string, r *http.Request) (ListDiscoveryV1NamespacedEndpointSliceParams, error) {
	var (
		params    ListDiscoveryV1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesParams(args [0]string, r *http.Request) (ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams, error) {
	var (
		params    ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListDiscoveryV1beta1NamespacedEndpointSliceParams(args [1]string, r *http.Request) (ListDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var (
		params    ListDiscoveryV1beta1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListEventsV1EventForAllNamespacesParams(args [0]string, r *http.Request) (ListEventsV1EventForAllNamespacesParams, error) {
	var (
		params    ListEventsV1EventForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListEventsV1NamespacedEventParams(args [1]string, r *http.Request) (ListEventsV1NamespacedEventParams, error) {
	var (
		params    ListEventsV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListEventsV1beta1EventForAllNamespacesParams(args [0]string, r *http.Request) (ListEventsV1beta1EventForAllNamespacesParams, error) {
	var (
		params    ListEventsV1beta1EventForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListEventsV1beta1NamespacedEventParams(args [1]string, r *http.Request) (ListEventsV1beta1NamespacedEventParams, error) {
	var (
		params    ListEventsV1beta1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaParams(args [0]string, r *http.Request) (ListFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var (
		params    ListFlowcontrolApiserverV1beta1FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [0]string, r *http.Request) (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var (
		params    ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaParams(args [0]string, r *http.Request) (ListFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var (
		params    ListFlowcontrolApiserverV1beta2FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [0]string, r *http.Request) (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var (
		params    ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListInternalApiserverV1alpha1StorageVersionParams(args [0]string, r *http.Request) (ListInternalApiserverV1alpha1StorageVersionParams, error) {
	var (
		params    ListInternalApiserverV1alpha1StorageVersionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1IngressClassParams(args [0]string, r *http.Request) (ListNetworkingV1IngressClassParams, error) {
	var (
		params    ListNetworkingV1IngressClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1IngressForAllNamespacesParams(args [0]string, r *http.Request) (ListNetworkingV1IngressForAllNamespacesParams, error) {
	var (
		params    ListNetworkingV1IngressForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NamespacedIngressParams(args [1]string, r *http.Request) (ListNetworkingV1NamespacedIngressParams, error) {
	var (
		params    ListNetworkingV1NamespacedIngressParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NamespacedNetworkPolicyParams(args [1]string, r *http.Request) (ListNetworkingV1NamespacedNetworkPolicyParams, error) {
	var (
		params    ListNetworkingV1NamespacedNetworkPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesParams(args [0]string, r *http.Request) (ListNetworkingV1NetworkPolicyForAllNamespacesParams, error) {
	var (
		params    ListNetworkingV1NetworkPolicyForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListNodeV1RuntimeClassParams(args [0]string, r *http.Request) (ListNodeV1RuntimeClassParams, error) {
	var (
		params    ListNodeV1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNodeV1alpha1RuntimeClassParams(args [0]string, r *http.Request) (ListNodeV1alpha1RuntimeClassParams, error) {
	var (
		params    ListNodeV1alpha1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListNodeV1beta1RuntimeClassParams(args [0]string, r *http.Request) (ListNodeV1beta1RuntimeClassParams, error) {
	var (
		params    ListNodeV1beta1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1NamespacedPodDisruptionBudgetParams(args [1]string, r *http.Request) (ListPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    ListPolicyV1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesParams(args [0]string, r *http.Request) (ListPolicyV1PodDisruptionBudgetForAllNamespacesParams, error) {
	var (
		params    ListPolicyV1PodDisruptionBudgetForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [1]string, r *http.Request) (ListPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    ListPolicyV1beta1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams(args [0]string, r *http.Request) (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams, error) {
	var (
		params    ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListPolicyV1beta1PodSecurityPolicyParams(args [0]string, r *http.Request) (ListPolicyV1beta1PodSecurityPolicyParams, error) {
	var (
		params    ListPolicyV1beta1PodSecurityPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleParams(args [0]string, r *http.Request) (ListRbacAuthorizationV1ClusterRoleParams, error) {
	var (
		params    ListRbacAuthorizationV1ClusterRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1ClusterRoleBindingParams(args [0]string, r *http.Request) (ListRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var (
		params    ListRbacAuthorizationV1ClusterRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1NamespacedRoleParams(args [1]string, r *http.Request) (ListRbacAuthorizationV1NamespacedRoleParams, error) {
	var (
		params    ListRbacAuthorizationV1NamespacedRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1NamespacedRoleBindingParams(args [1]string, r *http.Request) (ListRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var (
		params    ListRbacAuthorizationV1NamespacedRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesParams(args [0]string, r *http.Request) (ListRbacAuthorizationV1RoleBindingForAllNamespacesParams, error) {
	var (
		params    ListRbacAuthorizationV1RoleBindingForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesParams(args [0]string, r *http.Request) (ListRbacAuthorizationV1RoleForAllNamespacesParams, error) {
	var (
		params    ListRbacAuthorizationV1RoleForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListSchedulingV1PriorityClassParams(args [0]string, r *http.Request) (ListSchedulingV1PriorityClassParams, error) {
	var (
		params    ListSchedulingV1PriorityClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1CSIDriverParams(args [0]string, r *http.Request) (ListStorageV1CSIDriverParams, error) {
	var (
		params    ListStorageV1CSIDriverParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1CSINodeParams(args [0]string, r *http.Request) (ListStorageV1CSINodeParams, error) {
	var (
		params    ListStorageV1CSINodeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1StorageClassParams(args [0]string, r *http.Request) (ListStorageV1StorageClassParams, error) {
	var (
		params    ListStorageV1StorageClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1VolumeAttachmentParams(args [0]string, r *http.Request) (ListStorageV1VolumeAttachmentParams, error) {
	var (
		params    ListStorageV1VolumeAttachmentParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams(args [0]string, r *http.Request) (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams, error) {
	var (
		params    ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1alpha1NamespacedCSIStorageCapacityParams(args [1]string, r *http.Request) (ListStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    ListStorageV1alpha1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesParams(args [0]string, r *http.Request) (ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams, error) {
	var (
		params    ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeListStorageV1beta1NamespacedCSIStorageCapacityParams(args [1]string, r *http.Request) (ListStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    ListStorageV1beta1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeLogFileHandlerParams(args [1]string, r *http.Request) (LogFileHandlerParams, error) {
	var (
		params LogFileHandlerParams
	)
	// Decode path: logpath.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "logpath",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Logpath = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: logpath: not specified")
		}
	}
	return params, nil
}

func decodeReadAdmissionregistrationV1MutatingWebhookConfigurationParams(args [1]string, r *http.Request) (ReadAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var (
		params    ReadAdmissionregistrationV1MutatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [1]string, r *http.Request) (ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var (
		params    ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadApiextensionsV1CustomResourceDefinitionParams(args [1]string, r *http.Request) (ReadApiextensionsV1CustomResourceDefinitionParams, error) {
	var (
		params    ReadApiextensionsV1CustomResourceDefinitionParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadApiextensionsV1CustomResourceDefinitionStatusParams(args [1]string, r *http.Request) (ReadApiextensionsV1CustomResourceDefinitionStatusParams, error) {
	var (
		params    ReadApiextensionsV1CustomResourceDefinitionStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadApiregistrationV1APIServiceParams(args [1]string, r *http.Request) (ReadApiregistrationV1APIServiceParams, error) {
	var (
		params    ReadApiregistrationV1APIServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadApiregistrationV1APIServiceStatusParams(args [1]string, r *http.Request) (ReadApiregistrationV1APIServiceStatusParams, error) {
	var (
		params    ReadApiregistrationV1APIServiceStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedControllerRevisionParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedControllerRevisionParams, error) {
	var (
		params    ReadAppsV1NamespacedControllerRevisionParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDaemonSetParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedDaemonSetParams, error) {
	var (
		params    ReadAppsV1NamespacedDaemonSetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDaemonSetStatusParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedDaemonSetStatusParams, error) {
	var (
		params    ReadAppsV1NamespacedDaemonSetStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedDeploymentParams, error) {
	var (
		params    ReadAppsV1NamespacedDeploymentParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentScaleParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedDeploymentScaleParams, error) {
	var (
		params    ReadAppsV1NamespacedDeploymentScaleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedDeploymentStatusParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedDeploymentStatusParams, error) {
	var (
		params    ReadAppsV1NamespacedDeploymentStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetParams, error) {
	var (
		params    ReadAppsV1NamespacedReplicaSetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetScaleParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetScaleParams, error) {
	var (
		params    ReadAppsV1NamespacedReplicaSetScaleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedReplicaSetStatusParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedReplicaSetStatusParams, error) {
	var (
		params    ReadAppsV1NamespacedReplicaSetStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetParams, error) {
	var (
		params    ReadAppsV1NamespacedStatefulSetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetScaleParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetScaleParams, error) {
	var (
		params    ReadAppsV1NamespacedStatefulSetScaleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAppsV1NamespacedStatefulSetStatusParams(args [2]string, r *http.Request) (ReadAppsV1NamespacedStatefulSetStatusParams, error) {
	var (
		params    ReadAppsV1NamespacedStatefulSetStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var (
		params    ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var (
		params    ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams(args [2]string, r *http.Request) (ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams, error) {
	var (
		params    ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedCronJobParams(args [2]string, r *http.Request) (ReadBatchV1NamespacedCronJobParams, error) {
	var (
		params    ReadBatchV1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedCronJobStatusParams(args [2]string, r *http.Request) (ReadBatchV1NamespacedCronJobStatusParams, error) {
	var (
		params    ReadBatchV1NamespacedCronJobStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedJobParams(args [2]string, r *http.Request) (ReadBatchV1NamespacedJobParams, error) {
	var (
		params    ReadBatchV1NamespacedJobParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1NamespacedJobStatusParams(args [2]string, r *http.Request) (ReadBatchV1NamespacedJobStatusParams, error) {
	var (
		params    ReadBatchV1NamespacedJobStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1beta1NamespacedCronJobParams(args [2]string, r *http.Request) (ReadBatchV1beta1NamespacedCronJobParams, error) {
	var (
		params    ReadBatchV1beta1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadBatchV1beta1NamespacedCronJobStatusParams(args [2]string, r *http.Request) (ReadBatchV1beta1NamespacedCronJobStatusParams, error) {
	var (
		params    ReadBatchV1beta1NamespacedCronJobStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestParams(args [1]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestParams, error) {
	var (
		params    ReadCertificatesV1CertificateSigningRequestParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestApprovalParams(args [1]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestApprovalParams, error) {
	var (
		params    ReadCertificatesV1CertificateSigningRequestApprovalParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCertificatesV1CertificateSigningRequestStatusParams(args [1]string, r *http.Request) (ReadCertificatesV1CertificateSigningRequestStatusParams, error) {
	var (
		params    ReadCertificatesV1CertificateSigningRequestStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoordinationV1NamespacedLeaseParams(args [2]string, r *http.Request) (ReadCoordinationV1NamespacedLeaseParams, error) {
	var (
		params    ReadCoordinationV1NamespacedLeaseParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1ComponentStatusParams(args [1]string, r *http.Request) (ReadCoreV1ComponentStatusParams, error) {
	var (
		params    ReadCoreV1ComponentStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespaceParams(args [1]string, r *http.Request) (ReadCoreV1NamespaceParams, error) {
	var (
		params    ReadCoreV1NamespaceParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespaceStatusParams(args [1]string, r *http.Request) (ReadCoreV1NamespaceStatusParams, error) {
	var (
		params    ReadCoreV1NamespaceStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedConfigMapParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedConfigMapParams, error) {
	var (
		params    ReadCoreV1NamespacedConfigMapParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedEndpointsParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedEndpointsParams, error) {
	var (
		params    ReadCoreV1NamespacedEndpointsParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedEventParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedEventParams, error) {
	var (
		params    ReadCoreV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedLimitRangeParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedLimitRangeParams, error) {
	var (
		params    ReadCoreV1NamespacedLimitRangeParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var (
		params    ReadCoreV1NamespacedPersistentVolumeClaimParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPersistentVolumeClaimStatusParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPersistentVolumeClaimStatusParams, error) {
	var (
		params    ReadCoreV1NamespacedPersistentVolumeClaimStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPodParams, error) {
	var (
		params    ReadCoreV1NamespacedPodParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodEphemeralcontainersParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPodEphemeralcontainersParams, error) {
	var (
		params    ReadCoreV1NamespacedPodEphemeralcontainersParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodLogParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPodLogParams, error) {
	var (
		params    ReadCoreV1NamespacedPodLogParams
		queryArgs = r.URL.Query()
	)
	// Decode query: container.
	{
		values, ok := queryArgs["container"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContainerVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContainerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Container.SetTo(paramsDotContainerVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: container: parse")
			}
		}
	}
	// Decode query: follow.
	{
		values, ok := queryArgs["follow"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFollowVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotFollowVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Follow.SetTo(paramsDotFollowVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: follow: parse")
			}
		}
	}
	// Decode query: insecureSkipTLSVerifyBackend.
	{
		values, ok := queryArgs["insecureSkipTLSVerifyBackend"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotInsecureSkipTLSVerifyBackendVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotInsecureSkipTLSVerifyBackendVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.InsecureSkipTLSVerifyBackend.SetTo(paramsDotInsecureSkipTLSVerifyBackendVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: insecureSkipTLSVerifyBackend: parse")
			}
		}
	}
	// Decode query: limitBytes.
	{
		values, ok := queryArgs["limitBytes"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitBytesVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitBytesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LimitBytes.SetTo(paramsDotLimitBytesVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limitBytes: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: previous.
	{
		values, ok := queryArgs["previous"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPreviousVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotPreviousVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Previous.SetTo(paramsDotPreviousVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: previous: parse")
			}
		}
	}
	// Decode query: sinceSeconds.
	{
		values, ok := queryArgs["sinceSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotSinceSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotSinceSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SinceSeconds.SetTo(paramsDotSinceSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: sinceSeconds: parse")
			}
		}
	}
	// Decode query: tailLines.
	{
		values, ok := queryArgs["tailLines"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTailLinesVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTailLinesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TailLines.SetTo(paramsDotTailLinesVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: tailLines: parse")
			}
		}
	}
	// Decode query: timestamps.
	{
		values, ok := queryArgs["timestamps"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimestampsVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotTimestampsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Timestamps.SetTo(paramsDotTimestampsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timestamps: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodStatusParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPodStatusParams, error) {
	var (
		params    ReadCoreV1NamespacedPodStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedPodTemplateParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedPodTemplateParams, error) {
	var (
		params    ReadCoreV1NamespacedPodTemplateParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerParams, error) {
	var (
		params    ReadCoreV1NamespacedReplicationControllerParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerScaleParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerScaleParams, error) {
	var (
		params    ReadCoreV1NamespacedReplicationControllerScaleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedReplicationControllerStatusParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedReplicationControllerStatusParams, error) {
	var (
		params    ReadCoreV1NamespacedReplicationControllerStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedResourceQuotaParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedResourceQuotaParams, error) {
	var (
		params    ReadCoreV1NamespacedResourceQuotaParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedResourceQuotaStatusParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedResourceQuotaStatusParams, error) {
	var (
		params    ReadCoreV1NamespacedResourceQuotaStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedSecretParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedSecretParams, error) {
	var (
		params    ReadCoreV1NamespacedSecretParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedServiceParams, error) {
	var (
		params    ReadCoreV1NamespacedServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceAccountParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedServiceAccountParams, error) {
	var (
		params    ReadCoreV1NamespacedServiceAccountParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NamespacedServiceStatusParams(args [2]string, r *http.Request) (ReadCoreV1NamespacedServiceStatusParams, error) {
	var (
		params    ReadCoreV1NamespacedServiceStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NodeParams(args [1]string, r *http.Request) (ReadCoreV1NodeParams, error) {
	var (
		params    ReadCoreV1NodeParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1NodeStatusParams(args [1]string, r *http.Request) (ReadCoreV1NodeStatusParams, error) {
	var (
		params    ReadCoreV1NodeStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1PersistentVolumeParams(args [1]string, r *http.Request) (ReadCoreV1PersistentVolumeParams, error) {
	var (
		params    ReadCoreV1PersistentVolumeParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadCoreV1PersistentVolumeStatusParams(args [1]string, r *http.Request) (ReadCoreV1PersistentVolumeStatusParams, error) {
	var (
		params    ReadCoreV1PersistentVolumeStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadDiscoveryV1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (ReadDiscoveryV1NamespacedEndpointSliceParams, error) {
	var (
		params    ReadDiscoveryV1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadDiscoveryV1beta1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (ReadDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var (
		params    ReadDiscoveryV1beta1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadEventsV1NamespacedEventParams(args [2]string, r *http.Request) (ReadEventsV1NamespacedEventParams, error) {
	var (
		params    ReadEventsV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadEventsV1beta1NamespacedEventParams(args [2]string, r *http.Request) (ReadEventsV1beta1NamespacedEventParams, error) {
	var (
		params    ReadEventsV1beta1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta1FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta2FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams(args [1]string, r *http.Request) (ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams, error) {
	var (
		params    ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadInternalApiserverV1alpha1StorageVersionParams(args [1]string, r *http.Request) (ReadInternalApiserverV1alpha1StorageVersionParams, error) {
	var (
		params    ReadInternalApiserverV1alpha1StorageVersionParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadInternalApiserverV1alpha1StorageVersionStatusParams(args [1]string, r *http.Request) (ReadInternalApiserverV1alpha1StorageVersionStatusParams, error) {
	var (
		params    ReadInternalApiserverV1alpha1StorageVersionStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1IngressClassParams(args [1]string, r *http.Request) (ReadNetworkingV1IngressClassParams, error) {
	var (
		params    ReadNetworkingV1IngressClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedIngressParams(args [2]string, r *http.Request) (ReadNetworkingV1NamespacedIngressParams, error) {
	var (
		params    ReadNetworkingV1NamespacedIngressParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedIngressStatusParams(args [2]string, r *http.Request) (ReadNetworkingV1NamespacedIngressStatusParams, error) {
	var (
		params    ReadNetworkingV1NamespacedIngressStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNetworkingV1NamespacedNetworkPolicyParams(args [2]string, r *http.Request) (ReadNetworkingV1NamespacedNetworkPolicyParams, error) {
	var (
		params    ReadNetworkingV1NamespacedNetworkPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1RuntimeClassParams(args [1]string, r *http.Request) (ReadNodeV1RuntimeClassParams, error) {
	var (
		params    ReadNodeV1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1alpha1RuntimeClassParams(args [1]string, r *http.Request) (ReadNodeV1alpha1RuntimeClassParams, error) {
	var (
		params    ReadNodeV1alpha1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadNodeV1beta1RuntimeClassParams(args [1]string, r *http.Request) (ReadNodeV1beta1RuntimeClassParams, error) {
	var (
		params    ReadNodeV1beta1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (ReadPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    ReadPolicyV1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1NamespacedPodDisruptionBudgetStatusParams(args [2]string, r *http.Request) (ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams, error) {
	var (
		params    ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams(args [2]string, r *http.Request) (ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams, error) {
	var (
		params    ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadPolicyV1beta1PodSecurityPolicyParams(args [1]string, r *http.Request) (ReadPolicyV1beta1PodSecurityPolicyParams, error) {
	var (
		params    ReadPolicyV1beta1PodSecurityPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1ClusterRoleParams(args [1]string, r *http.Request) (ReadRbacAuthorizationV1ClusterRoleParams, error) {
	var (
		params    ReadRbacAuthorizationV1ClusterRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1ClusterRoleBindingParams(args [1]string, r *http.Request) (ReadRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var (
		params    ReadRbacAuthorizationV1ClusterRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1NamespacedRoleParams(args [2]string, r *http.Request) (ReadRbacAuthorizationV1NamespacedRoleParams, error) {
	var (
		params    ReadRbacAuthorizationV1NamespacedRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadRbacAuthorizationV1NamespacedRoleBindingParams(args [2]string, r *http.Request) (ReadRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var (
		params    ReadRbacAuthorizationV1NamespacedRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadSchedulingV1PriorityClassParams(args [1]string, r *http.Request) (ReadSchedulingV1PriorityClassParams, error) {
	var (
		params    ReadSchedulingV1PriorityClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1CSIDriverParams(args [1]string, r *http.Request) (ReadStorageV1CSIDriverParams, error) {
	var (
		params    ReadStorageV1CSIDriverParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1CSINodeParams(args [1]string, r *http.Request) (ReadStorageV1CSINodeParams, error) {
	var (
		params    ReadStorageV1CSINodeParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1StorageClassParams(args [1]string, r *http.Request) (ReadStorageV1StorageClassParams, error) {
	var (
		params    ReadStorageV1StorageClassParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1VolumeAttachmentParams(args [1]string, r *http.Request) (ReadStorageV1VolumeAttachmentParams, error) {
	var (
		params    ReadStorageV1VolumeAttachmentParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1VolumeAttachmentStatusParams(args [1]string, r *http.Request) (ReadStorageV1VolumeAttachmentStatusParams, error) {
	var (
		params    ReadStorageV1VolumeAttachmentStatusParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1alpha1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (ReadStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    ReadStorageV1alpha1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeReadStorageV1beta1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (ReadStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    ReadStorageV1beta1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationParams(args [1]string, r *http.Request) (WatchAdmissionregistrationV1MutatingWebhookConfigurationParams, error) {
	var (
		params    WatchAdmissionregistrationV1MutatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListParams(args [0]string, r *http.Request) (WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams, error) {
	var (
		params    WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationParams(args [1]string, r *http.Request) (WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams, error) {
	var (
		params    WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams(args [0]string, r *http.Request) (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams, error) {
	var (
		params    WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchApiextensionsV1CustomResourceDefinitionParams(args [1]string, r *http.Request) (WatchApiextensionsV1CustomResourceDefinitionParams, error) {
	var (
		params    WatchApiextensionsV1CustomResourceDefinitionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListParams(args [0]string, r *http.Request) (WatchApiextensionsV1CustomResourceDefinitionListParams, error) {
	var (
		params    WatchApiextensionsV1CustomResourceDefinitionListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchApiregistrationV1APIServiceParams(args [1]string, r *http.Request) (WatchApiregistrationV1APIServiceParams, error) {
	var (
		params    WatchApiregistrationV1APIServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchApiregistrationV1APIServiceListParams(args [0]string, r *http.Request) (WatchApiregistrationV1APIServiceListParams, error) {
	var (
		params    WatchApiregistrationV1APIServiceListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAppsV1ControllerRevisionListForAllNamespacesParams, error) {
	var (
		params    WatchAppsV1ControllerRevisionListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAppsV1DaemonSetListForAllNamespacesParams, error) {
	var (
		params    WatchAppsV1DaemonSetListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1DeploymentListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAppsV1DeploymentListForAllNamespacesParams, error) {
	var (
		params    WatchAppsV1DeploymentListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedControllerRevisionParams(args [2]string, r *http.Request) (WatchAppsV1NamespacedControllerRevisionParams, error) {
	var (
		params    WatchAppsV1NamespacedControllerRevisionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedControllerRevisionListParams(args [1]string, r *http.Request) (WatchAppsV1NamespacedControllerRevisionListParams, error) {
	var (
		params    WatchAppsV1NamespacedControllerRevisionListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDaemonSetParams(args [2]string, r *http.Request) (WatchAppsV1NamespacedDaemonSetParams, error) {
	var (
		params    WatchAppsV1NamespacedDaemonSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDaemonSetListParams(args [1]string, r *http.Request) (WatchAppsV1NamespacedDaemonSetListParams, error) {
	var (
		params    WatchAppsV1NamespacedDaemonSetListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDeploymentParams(args [2]string, r *http.Request) (WatchAppsV1NamespacedDeploymentParams, error) {
	var (
		params    WatchAppsV1NamespacedDeploymentParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedDeploymentListParams(args [1]string, r *http.Request) (WatchAppsV1NamespacedDeploymentListParams, error) {
	var (
		params    WatchAppsV1NamespacedDeploymentListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedReplicaSetParams(args [2]string, r *http.Request) (WatchAppsV1NamespacedReplicaSetParams, error) {
	var (
		params    WatchAppsV1NamespacedReplicaSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedReplicaSetListParams(args [1]string, r *http.Request) (WatchAppsV1NamespacedReplicaSetListParams, error) {
	var (
		params    WatchAppsV1NamespacedReplicaSetListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedStatefulSetParams(args [2]string, r *http.Request) (WatchAppsV1NamespacedStatefulSetParams, error) {
	var (
		params    WatchAppsV1NamespacedStatefulSetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1NamespacedStatefulSetListParams(args [1]string, r *http.Request) (WatchAppsV1NamespacedStatefulSetListParams, error) {
	var (
		params    WatchAppsV1NamespacedStatefulSetListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAppsV1ReplicaSetListForAllNamespacesParams, error) {
	var (
		params    WatchAppsV1ReplicaSetListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAppsV1StatefulSetListForAllNamespacesParams, error) {
	var (
		params    WatchAppsV1StatefulSetListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var (
		params    WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams, error) {
	var (
		params    WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var (
		params    WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams, error) {
	var (
		params    WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams(args [0]string, r *http.Request) (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams, error) {
	var (
		params    WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams(args [2]string, r *http.Request) (WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams, error) {
	var (
		params    WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams(args [1]string, r *http.Request) (WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams, error) {
	var (
		params    WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1CronJobListForAllNamespacesParams(args [0]string, r *http.Request) (WatchBatchV1CronJobListForAllNamespacesParams, error) {
	var (
		params    WatchBatchV1CronJobListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1JobListForAllNamespacesParams(args [0]string, r *http.Request) (WatchBatchV1JobListForAllNamespacesParams, error) {
	var (
		params    WatchBatchV1JobListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedCronJobParams(args [2]string, r *http.Request) (WatchBatchV1NamespacedCronJobParams, error) {
	var (
		params    WatchBatchV1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedCronJobListParams(args [1]string, r *http.Request) (WatchBatchV1NamespacedCronJobListParams, error) {
	var (
		params    WatchBatchV1NamespacedCronJobListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedJobParams(args [2]string, r *http.Request) (WatchBatchV1NamespacedJobParams, error) {
	var (
		params    WatchBatchV1NamespacedJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1NamespacedJobListParams(args [1]string, r *http.Request) (WatchBatchV1NamespacedJobListParams, error) {
	var (
		params    WatchBatchV1NamespacedJobListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesParams(args [0]string, r *http.Request) (WatchBatchV1beta1CronJobListForAllNamespacesParams, error) {
	var (
		params    WatchBatchV1beta1CronJobListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1NamespacedCronJobParams(args [2]string, r *http.Request) (WatchBatchV1beta1NamespacedCronJobParams, error) {
	var (
		params    WatchBatchV1beta1NamespacedCronJobParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchBatchV1beta1NamespacedCronJobListParams(args [1]string, r *http.Request) (WatchBatchV1beta1NamespacedCronJobListParams, error) {
	var (
		params    WatchBatchV1beta1NamespacedCronJobListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCertificatesV1CertificateSigningRequestParams(args [1]string, r *http.Request) (WatchCertificatesV1CertificateSigningRequestParams, error) {
	var (
		params    WatchCertificatesV1CertificateSigningRequestParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCertificatesV1CertificateSigningRequestListParams(args [0]string, r *http.Request) (WatchCertificatesV1CertificateSigningRequestListParams, error) {
	var (
		params    WatchCertificatesV1CertificateSigningRequestListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoordinationV1LeaseListForAllNamespacesParams, error) {
	var (
		params    WatchCoordinationV1LeaseListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1NamespacedLeaseParams(args [2]string, r *http.Request) (WatchCoordinationV1NamespacedLeaseParams, error) {
	var (
		params    WatchCoordinationV1NamespacedLeaseParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoordinationV1NamespacedLeaseListParams(args [1]string, r *http.Request) (WatchCoordinationV1NamespacedLeaseListParams, error) {
	var (
		params    WatchCoordinationV1NamespacedLeaseListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1ConfigMapListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1ConfigMapListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1EndpointsListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1EndpointsListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1EndpointsListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1EventListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1EventListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1EventListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1LimitRangeListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1LimitRangeListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespaceParams(args [1]string, r *http.Request) (WatchCoreV1NamespaceParams, error) {
	var (
		params    WatchCoreV1NamespaceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespaceListParams(args [0]string, r *http.Request) (WatchCoreV1NamespaceListParams, error) {
	var (
		params    WatchCoreV1NamespaceListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedConfigMapParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedConfigMapParams, error) {
	var (
		params    WatchCoreV1NamespacedConfigMapParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedConfigMapListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedConfigMapListParams, error) {
	var (
		params    WatchCoreV1NamespacedConfigMapListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEndpointsParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedEndpointsParams, error) {
	var (
		params    WatchCoreV1NamespacedEndpointsParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEndpointsListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedEndpointsListParams, error) {
	var (
		params    WatchCoreV1NamespacedEndpointsListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEventParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedEventParams, error) {
	var (
		params    WatchCoreV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedEventListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedEventListParams, error) {
	var (
		params    WatchCoreV1NamespacedEventListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedLimitRangeParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedLimitRangeParams, error) {
	var (
		params    WatchCoreV1NamespacedLimitRangeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedLimitRangeListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedLimitRangeListParams, error) {
	var (
		params    WatchCoreV1NamespacedLimitRangeListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedPersistentVolumeClaimParams, error) {
	var (
		params    WatchCoreV1NamespacedPersistentVolumeClaimParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPersistentVolumeClaimListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedPersistentVolumeClaimListParams, error) {
	var (
		params    WatchCoreV1NamespacedPersistentVolumeClaimListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedPodParams, error) {
	var (
		params    WatchCoreV1NamespacedPodParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedPodListParams, error) {
	var (
		params    WatchCoreV1NamespacedPodListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodTemplateParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedPodTemplateParams, error) {
	var (
		params    WatchCoreV1NamespacedPodTemplateParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedPodTemplateListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedPodTemplateListParams, error) {
	var (
		params    WatchCoreV1NamespacedPodTemplateListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedReplicationControllerParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedReplicationControllerParams, error) {
	var (
		params    WatchCoreV1NamespacedReplicationControllerParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedReplicationControllerListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedReplicationControllerListParams, error) {
	var (
		params    WatchCoreV1NamespacedReplicationControllerListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedResourceQuotaParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedResourceQuotaParams, error) {
	var (
		params    WatchCoreV1NamespacedResourceQuotaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedResourceQuotaListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedResourceQuotaListParams, error) {
	var (
		params    WatchCoreV1NamespacedResourceQuotaListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedSecretParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedSecretParams, error) {
	var (
		params    WatchCoreV1NamespacedSecretParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedSecretListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedSecretListParams, error) {
	var (
		params    WatchCoreV1NamespacedSecretListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedServiceParams, error) {
	var (
		params    WatchCoreV1NamespacedServiceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceAccountParams(args [2]string, r *http.Request) (WatchCoreV1NamespacedServiceAccountParams, error) {
	var (
		params    WatchCoreV1NamespacedServiceAccountParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceAccountListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedServiceAccountListParams, error) {
	var (
		params    WatchCoreV1NamespacedServiceAccountListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NamespacedServiceListParams(args [1]string, r *http.Request) (WatchCoreV1NamespacedServiceListParams, error) {
	var (
		params    WatchCoreV1NamespacedServiceListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NodeParams(args [1]string, r *http.Request) (WatchCoreV1NodeParams, error) {
	var (
		params    WatchCoreV1NodeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1NodeListParams(args [0]string, r *http.Request) (WatchCoreV1NodeListParams, error) {
	var (
		params    WatchCoreV1NodeListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeParams(args [1]string, r *http.Request) (WatchCoreV1PersistentVolumeParams, error) {
	var (
		params    WatchCoreV1PersistentVolumeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PersistentVolumeListParams(args [0]string, r *http.Request) (WatchCoreV1PersistentVolumeListParams, error) {
	var (
		params    WatchCoreV1PersistentVolumeListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PodListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1PodListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1PodListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1PodTemplateListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1PodTemplateListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1ReplicationControllerListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1ReplicationControllerListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1ResourceQuotaListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1ResourceQuotaListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1SecretListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1SecretListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1SecretListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1ServiceAccountListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1ServiceAccountListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchCoreV1ServiceListForAllNamespacesParams(args [0]string, r *http.Request) (WatchCoreV1ServiceListForAllNamespacesParams, error) {
	var (
		params    WatchCoreV1ServiceListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesParams(args [0]string, r *http.Request) (WatchDiscoveryV1EndpointSliceListForAllNamespacesParams, error) {
	var (
		params    WatchDiscoveryV1EndpointSliceListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (WatchDiscoveryV1NamespacedEndpointSliceParams, error) {
	var (
		params    WatchDiscoveryV1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1NamespacedEndpointSliceListParams(args [1]string, r *http.Request) (WatchDiscoveryV1NamespacedEndpointSliceListParams, error) {
	var (
		params    WatchDiscoveryV1NamespacedEndpointSliceListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams(args [0]string, r *http.Request) (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams, error) {
	var (
		params    WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceParams(args [2]string, r *http.Request) (WatchDiscoveryV1beta1NamespacedEndpointSliceParams, error) {
	var (
		params    WatchDiscoveryV1beta1NamespacedEndpointSliceParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchDiscoveryV1beta1NamespacedEndpointSliceListParams(args [1]string, r *http.Request) (WatchDiscoveryV1beta1NamespacedEndpointSliceListParams, error) {
	var (
		params    WatchDiscoveryV1beta1NamespacedEndpointSliceListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1EventListForAllNamespacesParams(args [0]string, r *http.Request) (WatchEventsV1EventListForAllNamespacesParams, error) {
	var (
		params    WatchEventsV1EventListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1NamespacedEventParams(args [2]string, r *http.Request) (WatchEventsV1NamespacedEventParams, error) {
	var (
		params    WatchEventsV1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1NamespacedEventListParams(args [1]string, r *http.Request) (WatchEventsV1NamespacedEventListParams, error) {
	var (
		params    WatchEventsV1NamespacedEventListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1EventListForAllNamespacesParams(args [0]string, r *http.Request) (WatchEventsV1beta1EventListForAllNamespacesParams, error) {
	var (
		params    WatchEventsV1beta1EventListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1NamespacedEventParams(args [2]string, r *http.Request) (WatchEventsV1beta1NamespacedEventParams, error) {
	var (
		params    WatchEventsV1beta1NamespacedEventParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchEventsV1beta1NamespacedEventListParams(args [1]string, r *http.Request) (WatchEventsV1beta1NamespacedEventListParams, error) {
	var (
		params    WatchEventsV1beta1NamespacedEventListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaParams(args [1]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1FlowSchemaParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta1FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListParams(args [0]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1FlowSchemaListParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta1FlowSchemaListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams(args [1]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams(args [0]string, r *http.Request) (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaParams(args [1]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2FlowSchemaParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta2FlowSchemaParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListParams(args [0]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2FlowSchemaListParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta2FlowSchemaListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams(args [1]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams(args [0]string, r *http.Request) (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams, error) {
	var (
		params    WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchInternalApiserverV1alpha1StorageVersionParams(args [1]string, r *http.Request) (WatchInternalApiserverV1alpha1StorageVersionParams, error) {
	var (
		params    WatchInternalApiserverV1alpha1StorageVersionParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListParams(args [0]string, r *http.Request) (WatchInternalApiserverV1alpha1StorageVersionListParams, error) {
	var (
		params    WatchInternalApiserverV1alpha1StorageVersionListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressClassParams(args [1]string, r *http.Request) (WatchNetworkingV1IngressClassParams, error) {
	var (
		params    WatchNetworkingV1IngressClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressClassListParams(args [0]string, r *http.Request) (WatchNetworkingV1IngressClassListParams, error) {
	var (
		params    WatchNetworkingV1IngressClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1IngressListForAllNamespacesParams(args [0]string, r *http.Request) (WatchNetworkingV1IngressListForAllNamespacesParams, error) {
	var (
		params    WatchNetworkingV1IngressListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedIngressParams(args [2]string, r *http.Request) (WatchNetworkingV1NamespacedIngressParams, error) {
	var (
		params    WatchNetworkingV1NamespacedIngressParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedIngressListParams(args [1]string, r *http.Request) (WatchNetworkingV1NamespacedIngressListParams, error) {
	var (
		params    WatchNetworkingV1NamespacedIngressListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyParams(args [2]string, r *http.Request) (WatchNetworkingV1NamespacedNetworkPolicyParams, error) {
	var (
		params    WatchNetworkingV1NamespacedNetworkPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NamespacedNetworkPolicyListParams(args [1]string, r *http.Request) (WatchNetworkingV1NamespacedNetworkPolicyListParams, error) {
	var (
		params    WatchNetworkingV1NamespacedNetworkPolicyListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesParams(args [0]string, r *http.Request) (WatchNetworkingV1NetworkPolicyListForAllNamespacesParams, error) {
	var (
		params    WatchNetworkingV1NetworkPolicyListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1RuntimeClassParams(args [1]string, r *http.Request) (WatchNodeV1RuntimeClassParams, error) {
	var (
		params    WatchNodeV1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1RuntimeClassListParams(args [0]string, r *http.Request) (WatchNodeV1RuntimeClassListParams, error) {
	var (
		params    WatchNodeV1RuntimeClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1alpha1RuntimeClassParams(args [1]string, r *http.Request) (WatchNodeV1alpha1RuntimeClassParams, error) {
	var (
		params    WatchNodeV1alpha1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1alpha1RuntimeClassListParams(args [0]string, r *http.Request) (WatchNodeV1alpha1RuntimeClassListParams, error) {
	var (
		params    WatchNodeV1alpha1RuntimeClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1beta1RuntimeClassParams(args [1]string, r *http.Request) (WatchNodeV1beta1RuntimeClassParams, error) {
	var (
		params    WatchNodeV1beta1RuntimeClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchNodeV1beta1RuntimeClassListParams(args [0]string, r *http.Request) (WatchNodeV1beta1RuntimeClassListParams, error) {
	var (
		params    WatchNodeV1beta1RuntimeClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (WatchPolicyV1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    WatchPolicyV1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1NamespacedPodDisruptionBudgetListParams(args [1]string, r *http.Request) (WatchPolicyV1NamespacedPodDisruptionBudgetListParams, error) {
	var (
		params    WatchPolicyV1NamespacedPodDisruptionBudgetListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams(args [0]string, r *http.Request) (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams, error) {
	var (
		params    WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetParams(args [2]string, r *http.Request) (WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams, error) {
	var (
		params    WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams(args [1]string, r *http.Request) (WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams, error) {
	var (
		params    WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams(args [0]string, r *http.Request) (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams, error) {
	var (
		params    WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodSecurityPolicyParams(args [1]string, r *http.Request) (WatchPolicyV1beta1PodSecurityPolicyParams, error) {
	var (
		params    WatchPolicyV1beta1PodSecurityPolicyParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListParams(args [0]string, r *http.Request) (WatchPolicyV1beta1PodSecurityPolicyListParams, error) {
	var (
		params    WatchPolicyV1beta1PodSecurityPolicyListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleParams(args [1]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleParams, error) {
	var (
		params    WatchRbacAuthorizationV1ClusterRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingParams(args [1]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleBindingParams, error) {
	var (
		params    WatchRbacAuthorizationV1ClusterRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListParams(args [0]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleBindingListParams, error) {
	var (
		params    WatchRbacAuthorizationV1ClusterRoleBindingListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1ClusterRoleListParams(args [0]string, r *http.Request) (WatchRbacAuthorizationV1ClusterRoleListParams, error) {
	var (
		params    WatchRbacAuthorizationV1ClusterRoleListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleParams(args [2]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleParams, error) {
	var (
		params    WatchRbacAuthorizationV1NamespacedRoleParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingParams(args [2]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleBindingParams, error) {
	var (
		params    WatchRbacAuthorizationV1NamespacedRoleBindingParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleBindingListParams(args [1]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleBindingListParams, error) {
	var (
		params    WatchRbacAuthorizationV1NamespacedRoleBindingListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1NamespacedRoleListParams(args [1]string, r *http.Request) (WatchRbacAuthorizationV1NamespacedRoleListParams, error) {
	var (
		params    WatchRbacAuthorizationV1NamespacedRoleListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams(args [0]string, r *http.Request) (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams, error) {
	var (
		params    WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesParams(args [0]string, r *http.Request) (WatchRbacAuthorizationV1RoleListForAllNamespacesParams, error) {
	var (
		params    WatchRbacAuthorizationV1RoleListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchSchedulingV1PriorityClassParams(args [1]string, r *http.Request) (WatchSchedulingV1PriorityClassParams, error) {
	var (
		params    WatchSchedulingV1PriorityClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchSchedulingV1PriorityClassListParams(args [0]string, r *http.Request) (WatchSchedulingV1PriorityClassListParams, error) {
	var (
		params    WatchSchedulingV1PriorityClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSIDriverParams(args [1]string, r *http.Request) (WatchStorageV1CSIDriverParams, error) {
	var (
		params    WatchStorageV1CSIDriverParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSIDriverListParams(args [0]string, r *http.Request) (WatchStorageV1CSIDriverListParams, error) {
	var (
		params    WatchStorageV1CSIDriverListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSINodeParams(args [1]string, r *http.Request) (WatchStorageV1CSINodeParams, error) {
	var (
		params    WatchStorageV1CSINodeParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1CSINodeListParams(args [0]string, r *http.Request) (WatchStorageV1CSINodeListParams, error) {
	var (
		params    WatchStorageV1CSINodeListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1StorageClassParams(args [1]string, r *http.Request) (WatchStorageV1StorageClassParams, error) {
	var (
		params    WatchStorageV1StorageClassParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1StorageClassListParams(args [0]string, r *http.Request) (WatchStorageV1StorageClassListParams, error) {
	var (
		params    WatchStorageV1StorageClassListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1VolumeAttachmentParams(args [1]string, r *http.Request) (WatchStorageV1VolumeAttachmentParams, error) {
	var (
		params    WatchStorageV1VolumeAttachmentParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1VolumeAttachmentListParams(args [0]string, r *http.Request) (WatchStorageV1VolumeAttachmentListParams, error) {
	var (
		params    WatchStorageV1VolumeAttachmentListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams(args [0]string, r *http.Request) (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams, error) {
	var (
		params    WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (WatchStorageV1alpha1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    WatchStorageV1alpha1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1alpha1NamespacedCSIStorageCapacityListParams(args [1]string, r *http.Request) (WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams, error) {
	var (
		params    WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams(args [0]string, r *http.Request) (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams, error) {
	var (
		params    WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityParams(args [2]string, r *http.Request) (WatchStorageV1beta1NamespacedCSIStorageCapacityParams, error) {
	var (
		params    WatchStorageV1beta1NamespacedCSIStorageCapacityParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: name.
	{
		param := args[1]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: name: not specified")
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}

func decodeWatchStorageV1beta1NamespacedCSIStorageCapacityListParams(args [1]string, r *http.Request) (WatchStorageV1beta1NamespacedCSIStorageCapacityListParams, error) {
	var (
		params    WatchStorageV1beta1NamespacedCSIStorageCapacityListParams
		queryArgs = r.URL.Query()
	)
	// Decode query: allowWatchBookmarks.
	{
		values, ok := queryArgs["allowWatchBookmarks"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotAllowWatchBookmarksVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotAllowWatchBookmarksVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AllowWatchBookmarks.SetTo(paramsDotAllowWatchBookmarksVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: allowWatchBookmarks: parse")
			}
		}
	}
	// Decode query: continue.
	{
		values, ok := queryArgs["continue"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotContinueVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotContinueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Continue.SetTo(paramsDotContinueVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: continue: parse")
			}
		}
	}
	// Decode query: fieldSelector.
	{
		values, ok := queryArgs["fieldSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotFieldSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotFieldSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FieldSelector.SetTo(paramsDotFieldSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: fieldSelector: parse")
			}
		}
	}
	// Decode query: labelSelector.
	{
		values, ok := queryArgs["labelSelector"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLabelSelectorVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotLabelSelectorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LabelSelector.SetTo(paramsDotLabelSelectorVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: labelSelector: parse")
			}
		}
	}
	// Decode query: limit.
	{
		values, ok := queryArgs["limit"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotLimitVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	// Decode path: namespace.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "namespace",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				s, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(s)
				if err != nil {
					return err
				}

				params.Namespace = c
				return nil
			}(); err != nil {
				return params, err
			}
		} else {
			return params, errors.New("path: namespace: not specified")
		}
	}
	// Decode query: pretty.
	{
		values, ok := queryArgs["pretty"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotPrettyVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotPrettyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Pretty.SetTo(paramsDotPrettyVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: pretty: parse")
			}
		}
	}
	// Decode query: resourceVersion.
	{
		values, ok := queryArgs["resourceVersion"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersion.SetTo(paramsDotResourceVersionVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersion: parse")
			}
		}
	}
	// Decode query: resourceVersionMatch.
	{
		values, ok := queryArgs["resourceVersionMatch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotResourceVersionMatchVal string
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(s)
					if err != nil {
						return err
					}

					paramsDotResourceVersionMatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ResourceVersionMatch.SetTo(paramsDotResourceVersionMatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: resourceVersionMatch: parse")
			}
		}
	}
	// Decode query: timeoutSeconds.
	{
		values, ok := queryArgs["timeoutSeconds"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotTimeoutSecondsVal int
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(s)
					if err != nil {
						return err
					}

					paramsDotTimeoutSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeoutSeconds.SetTo(paramsDotTimeoutSecondsVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: timeoutSeconds: parse")
			}
		}
	}
	// Decode query: watch.
	{
		values, ok := queryArgs["watch"]
		if ok {
			d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
				Values:  values,
				Style:   uri.QueryStyleForm,
				Explode: true,
			})

			if err := func() error {
				var paramsDotWatchVal bool
				if err := func() error {
					s, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(s)
					if err != nil {
						return err
					}

					paramsDotWatchVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Watch.SetTo(paramsDotWatchVal)
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "query: watch: parse")
			}
		}
	}
	return params, nil
}
