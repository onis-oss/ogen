// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_re"
			if l := len("/test_re"); len(elem) >= l && elem[0:l] == "/test_re" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleTestResponseAnyRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'q': // Prefix: "quest_"
				if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleTestRequestBooleanRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestAny
						s.handleTestRequestAnyRequest([0]string{}, w, r)

						return
					}
				case 'E': // Prefix: "EmptyStruct"
					if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestEmptyStruct
						s.handleTestRequestEmptyStructRequest([0]string{}, w, r)

						return
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestFormatTest
						s.handleTestRequestFormatTestRequest([0]string{}, w, r)

						return
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestBooleanRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestBooleanNullableRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestBooleanArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestBooleanArrayArray
									s.handleTestRequestBooleanArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestBooleanNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestBooleanNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestBooleanNullableArrayArray
										s.handleTestRequestBooleanNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestIntegerRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestIntegerInt32Request([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestIntegerArrayArray
									s.handleTestRequestIntegerArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestIntegerInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt32ArrayArray
												s.handleTestRequestIntegerInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestIntegerInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt32NullableArrayArray
													s.handleTestRequestIntegerInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestIntegerInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt64ArrayArray
												s.handleTestRequestIntegerInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestIntegerInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestIntegerInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt64NullableArrayArray
													s.handleTestRequestIntegerInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestIntegerNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestIntegerNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestIntegerNullableArrayArray
										s.handleTestRequestIntegerNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'n': // Prefix: "nu"
					if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestNumberRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case 'l': // Prefix: "ll"
						if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestNullRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNullNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNullArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNullArrayArray
										s.handleTestRequestNullArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNullNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNullNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNullNullableArrayArray
											s.handleTestRequestNullNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					case 'm': // Prefix: "mber"
						if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestNumberRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestNumberDoubleRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNumberArrayArray
										s.handleTestRequestNumberArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'd': // Prefix: "double"
								if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberDoubleRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberDoubleNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberDoubleArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberDoubleArrayArray
												s.handleTestRequestNumberDoubleArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberDoubleNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberDoubleNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberDoubleNullableArrayArray
													s.handleTestRequestNumberDoubleNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberFloatRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberFloatNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberFloatArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberFloatArrayArray
												s.handleTestRequestNumberFloatArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberFloatNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberFloatNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberFloatNullableArrayArray
													s.handleTestRequestNumberFloatNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberInt32Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt32ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt32ArrayArray
													s.handleTestRequestNumberInt32ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt32NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestNumberInt32NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestNumberInt32NullableArrayArray
														s.handleTestRequestNumberInt32NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberInt64Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestNumberInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt64ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt64ArrayArray
													s.handleTestRequestNumberInt64ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestNumberInt64NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestNumberInt64NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestNumberInt64NullableArrayArray
														s.handleTestRequestNumberInt64NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestNumberNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestNumberNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberNullableArrayArray
											s.handleTestRequestNumberNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					}
				case 'r': // Prefix: "required_"
					if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestRequiredBooleanRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredAny
							s.handleTestRequestRequiredAnyRequest([0]string{}, w, r)

							return
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredEmptyStruct
							s.handleTestRequestRequiredEmptyStructRequest([0]string{}, w, r)

							return
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredFormatTest
							s.handleTestRequestRequiredFormatTestRequest([0]string{}, w, r)

							return
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestRequiredBooleanRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestRequiredBooleanNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredBooleanArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredBooleanArrayArray
										s.handleTestRequestRequiredBooleanArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredBooleanNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredBooleanNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredBooleanNullableArrayArray
											s.handleTestRequestRequiredBooleanNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestRequiredIntegerRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestRequiredIntegerInt32Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredIntegerArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredIntegerArrayArray
										s.handleTestRequestRequiredIntegerArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredIntegerInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredIntegerInt32Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredIntegerInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredIntegerInt32ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredIntegerInt32ArrayArray
													s.handleTestRequestRequiredIntegerInt32ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredIntegerInt32NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredIntegerInt32NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredIntegerInt32NullableArrayArray
														s.handleTestRequestRequiredIntegerInt32NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredIntegerInt64Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredIntegerInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredIntegerInt64ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredIntegerInt64ArrayArray
													s.handleTestRequestRequiredIntegerInt64ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredIntegerInt64NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredIntegerInt64NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredIntegerInt64NullableArrayArray
														s.handleTestRequestRequiredIntegerInt64NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredIntegerNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredIntegerNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredIntegerNullableArrayArray
											s.handleTestRequestRequiredIntegerNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestRequiredNumberRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestRequiredNullRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredNullNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNullArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredNullArrayArray
											s.handleTestRequestRequiredNullArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNullNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNullNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredNullNullableArrayArray
												s.handleTestRequestRequiredNullNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestRequiredNumberRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredNumberDoubleRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNumberArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredNumberArrayArray
											s.handleTestRequestRequiredNumberArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNumberDoubleRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNumberDoubleNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberDoubleArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredNumberDoubleArrayArray
													s.handleTestRequestRequiredNumberDoubleArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberDoubleNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberDoubleNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberDoubleNullableArrayArray
														s.handleTestRequestRequiredNumberDoubleNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNumberFloatRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNumberFloatNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberFloatArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredNumberFloatArrayArray
													s.handleTestRequestRequiredNumberFloatArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberFloatNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberFloatNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberFloatNullableArrayArray
														s.handleTestRequestRequiredNumberFloatNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNumberInt64Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNumberInt32Request([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberInt32NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberInt32ArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberInt32ArrayArray
														s.handleTestRequestRequiredNumberInt32ArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberInt32NullableRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleTestRequestRequiredNumberInt32NullableArrayRequest([0]string{}, w, r)

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredNumberInt32NullableArrayArray
															s.handleTestRequestRequiredNumberInt32NullableArrayArrayRequest([0]string{}, w, r)

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNumberInt64Request([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredNumberInt64NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberInt64ArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberInt64ArrayArray
														s.handleTestRequestRequiredNumberInt64ArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredNumberInt64NullableRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleTestRequestRequiredNumberInt64NullableArrayRequest([0]string{}, w, r)

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredNumberInt64NullableArrayArray
															s.handleTestRequestRequiredNumberInt64NullableArrayArrayRequest([0]string{}, w, r)

															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredNumberNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredNumberNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredNumberNullableArrayArray
												s.handleTestRequestRequiredNumberNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestRequiredStringRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestRequiredStringBinaryRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredStringArrayArray
										s.handleTestRequestRequiredStringArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringByteRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringBinaryRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringBinaryNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringBinaryArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringBinaryArrayArray
													s.handleTestRequestRequiredStringBinaryArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringBinaryNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringBinaryNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringBinaryNullableArrayArray
														s.handleTestRequestRequiredStringBinaryNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringByteRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringByteNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringByteArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringByteArrayArray
													s.handleTestRequestRequiredStringByteArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringByteNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringByteNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringByteNullableArrayArray
														s.handleTestRequestRequiredStringByteNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringDurationRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringDateRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringDateTimeRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringDateTimeNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringDateTimeArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDateTimeArrayArray
														s.handleTestRequestRequiredStringDateTimeArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringDateTimeNullableRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleTestRequestRequiredStringDateTimeNullableArrayRequest([0]string{}, w, r)

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringDateTimeNullableArrayArray
															s.handleTestRequestRequiredStringDateTimeNullableArrayArrayRequest([0]string{}, w, r)

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringDateNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringDateArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringDateArrayArray
													s.handleTestRequestRequiredStringDateArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringDateNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringDateNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDateNullableArrayArray
														s.handleTestRequestRequiredStringDateNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringDurationRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringDurationNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringDurationArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringDurationArrayArray
													s.handleTestRequestRequiredStringDurationArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringDurationNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringDurationNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDurationNullableArrayArray
														s.handleTestRequestRequiredStringDurationNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringEmailRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringEmailNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringEmailArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringEmailArrayArray
												s.handleTestRequestRequiredStringEmailArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringEmailNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringEmailNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringEmailNullableArrayArray
													s.handleTestRequestRequiredStringEmailNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringHostnameRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringHostnameNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringHostnameArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringHostnameArrayArray
												s.handleTestRequestRequiredStringHostnameArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringHostnameNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringHostnameNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringHostnameNullableArrayArray
													s.handleTestRequestRequiredStringHostnameNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'i': // Prefix: "ip"
								if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringIPRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringIPNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringIPArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringIPArrayArray
												s.handleTestRequestRequiredStringIPArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringIPNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringIPNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringIPNullableArrayArray
													s.handleTestRequestRequiredStringIPNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringIpv6Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '4': // Prefix: "4"
										if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringIpv4Request([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringIpv4NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringIpv4ArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringIpv4ArrayArray
														s.handleTestRequestRequiredStringIpv4ArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringIpv4NullableRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleTestRequestRequiredStringIpv4NullableArrayRequest([0]string{}, w, r)

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringIpv4NullableArrayArray
															s.handleTestRequestRequiredStringIpv4NullableArrayArrayRequest([0]string{}, w, r)

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "6"
										if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringIpv6Request([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringIpv6NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringIpv6ArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringIpv6ArrayArray
														s.handleTestRequestRequiredStringIpv6ArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringIpv6NullableRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														s.handleTestRequestRequiredStringIpv6NullableArrayRequest([0]string{}, w, r)

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringIpv6NullableArrayArray
															s.handleTestRequestRequiredStringIpv6NullableArrayArrayRequest([0]string{}, w, r)

															return
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredStringNullableArrayArray
											s.handleTestRequestRequiredStringNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringPasswordRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringPasswordNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringPasswordArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringPasswordArrayArray
												s.handleTestRequestRequiredStringPasswordArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringPasswordNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringPasswordNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringPasswordNullableArrayArray
													s.handleTestRequestRequiredStringPasswordNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringTimeRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringTimeNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringTimeArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringTimeArrayArray
												s.handleTestRequestRequiredStringTimeArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringTimeNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringTimeNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringTimeNullableArrayArray
													s.handleTestRequestRequiredStringTimeNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestRequiredStringUUIDRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringURIRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringURINullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringURIArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringURIArrayArray
													s.handleTestRequestRequiredStringURIArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringURINullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringURINullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringURINullableArrayArray
														s.handleTestRequestRequiredStringURINullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestRequiredStringUUIDRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestRequiredStringUUIDNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringUUIDArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringUUIDArrayArray
													s.handleTestRequestRequiredStringUUIDArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestRequiredStringUUIDNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestRequiredStringUUIDNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringUUIDNullableArrayArray
														s.handleTestRequestRequiredStringUUIDNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestRequestStringRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestRequestStringBinaryRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestStringArrayArray
									s.handleTestRequestStringArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'b': // Prefix: "b"
							if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringByteRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'i': // Prefix: "inary"
								if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringBinaryRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringBinaryNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringBinaryArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringBinaryArrayArray
												s.handleTestRequestStringBinaryArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringBinaryNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringBinaryNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringBinaryNullableArrayArray
													s.handleTestRequestStringBinaryNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'y': // Prefix: "yte"
								if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringByteRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringByteNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringByteArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringByteArrayArray
												s.handleTestRequestStringByteArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringByteNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringByteNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringByteNullableArrayArray
													s.handleTestRequestStringByteNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringDurationRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringDateRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDateTimeRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateTimeNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateTimeArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateTimeArrayArray
													s.handleTestRequestStringDateTimeArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateTimeNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringDateTimeNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringDateTimeNullableArrayArray
														s.handleTestRequestStringDateTimeNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDateNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDateArrayArray
												s.handleTestRequestStringDateArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDateNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDateNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateNullableArrayArray
													s.handleTestRequestStringDateNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringDurationRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringDurationNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDurationArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDurationArrayArray
												s.handleTestRequestStringDurationArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringDurationNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringDurationNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDurationNullableArrayArray
													s.handleTestRequestStringDurationNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'e': // Prefix: "email"
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringEmailRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringEmailNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringEmailArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringEmailArrayArray
											s.handleTestRequestStringEmailArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringEmailNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringEmailNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringEmailNullableArrayArray
												s.handleTestRequestStringEmailNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'h': // Prefix: "hostname"
							if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringHostnameRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringHostnameNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringHostnameArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringHostnameArrayArray
											s.handleTestRequestStringHostnameArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringHostnameNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringHostnameNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringHostnameNullableArrayArray
												s.handleTestRequestStringHostnameNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringIPRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringIPNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIPArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringIPArrayArray
											s.handleTestRequestStringIPArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIPNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIPNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringIPNullableArrayArray
												s.handleTestRequestStringIPNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringIpv6Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIpv4Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIpv4NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv4ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv4ArrayArray
													s.handleTestRequestStringIpv4ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv4NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringIpv4NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv4NullableArrayArray
														s.handleTestRequestStringIpv4NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringIpv6Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringIpv6NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv6ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv6ArrayArray
													s.handleTestRequestStringIpv6ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringIpv6NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestRequestStringIpv6NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv6NullableArrayArray
														s.handleTestRequestStringIpv6NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestStringNullableArrayArray
										s.handleTestRequestStringNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringPasswordRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringPasswordNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringPasswordArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringPasswordArrayArray
											s.handleTestRequestStringPasswordArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringPasswordNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringPasswordNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringPasswordNullableArrayArray
												s.handleTestRequestStringPasswordNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringTimeRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringTimeNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringTimeArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringTimeArrayArray
											s.handleTestRequestStringTimeArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringTimeNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringTimeNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringTimeNullableArrayArray
												s.handleTestRequestStringTimeNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestRequestStringUUIDRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringURIRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringURINullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringURIArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringURIArrayArray
												s.handleTestRequestStringURIArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringURINullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringURINullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringURINullableArrayArray
													s.handleTestRequestStringURINullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestRequestStringUUIDRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestRequestStringUUIDNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringUUIDArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringUUIDArrayArray
												s.handleTestRequestStringUUIDArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestRequestStringUUIDNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestRequestStringUUIDNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringUUIDNullableArrayArray
													s.handleTestRequestStringUUIDNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 's': // Prefix: "sponse_"
				if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleTestResponseBooleanRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseAny
						s.handleTestResponseAnyRequest([0]string{}, w, r)

						return
					}
				case 'E': // Prefix: "EmptyStruct"
					if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseEmptyStruct
						s.handleTestResponseEmptyStructRequest([0]string{}, w, r)

						return
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseFormatTest
						s.handleTestResponseFormatTestRequest([0]string{}, w, r)

						return
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseBooleanRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseBooleanNullableRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseBooleanArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseBooleanArrayArray
									s.handleTestResponseBooleanArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseBooleanNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseBooleanNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseBooleanNullableArrayArray
										s.handleTestResponseBooleanNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseIntegerRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseIntegerInt32Request([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseIntegerArrayArray
									s.handleTestResponseIntegerArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerInt64Request([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerInt32Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseIntegerInt32NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt32ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt32ArrayArray
												s.handleTestResponseIntegerInt32ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseIntegerInt32NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt32NullableArrayArray
													s.handleTestResponseIntegerInt32NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseIntegerInt64NullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt64ArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt64ArrayArray
												s.handleTestResponseIntegerInt64ArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseIntegerInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseIntegerInt64NullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt64NullableArrayArray
													s.handleTestResponseIntegerInt64NullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseIntegerNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseIntegerNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseIntegerNullableArrayArray
										s.handleTestResponseIntegerNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						}
					}
				case 'n': // Prefix: "nu"
					if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseNumberRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case 'l': // Prefix: "ll"
						if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseNullRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNullNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNullArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNullArrayArray
										s.handleTestResponseNullArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNullNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNullNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNullNullableArrayArray
											s.handleTestResponseNullNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					case 'm': // Prefix: "mber"
						if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseNumberRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseNumberDoubleRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNumberArrayArray
										s.handleTestResponseNumberArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							case 'd': // Prefix: "double"
								if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberDoubleRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberDoubleNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberDoubleArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberDoubleArrayArray
												s.handleTestResponseNumberDoubleArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberDoubleNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberDoubleNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberDoubleNullableArrayArray
													s.handleTestResponseNumberDoubleNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberFloatRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberFloatNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberFloatArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberFloatArrayArray
												s.handleTestResponseNumberFloatArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberFloatNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberFloatNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberFloatNullableArrayArray
													s.handleTestResponseNumberFloatNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberInt64Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberInt32Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt32NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt32ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt32ArrayArray
													s.handleTestResponseNumberInt32ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt32NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseNumberInt32NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseNumberInt32NullableArrayArray
														s.handleTestResponseNumberInt32NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberInt64Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseNumberInt64NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt64ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt64ArrayArray
													s.handleTestResponseNumberInt64ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseNumberInt64NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseNumberInt64NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseNumberInt64NullableArrayArray
														s.handleTestResponseNumberInt64NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseNumberNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseNumberNullableArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberNullableArrayArray
											s.handleTestResponseNumberNullableArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						s.handleTestResponseStringRequest([0]string{}, w, r)

						return
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleTestResponseStringBinaryRequest([0]string{}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringArrayRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseStringArrayArray
									s.handleTestResponseStringArrayArrayRequest([0]string{}, w, r)

									return
								}
							}
						case 'b': // Prefix: "b"
							if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringByteRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'i': // Prefix: "inary"
								if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringBinaryRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringBinaryNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringBinaryArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringBinaryArrayArray
												s.handleTestResponseStringBinaryArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringBinaryNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringBinaryNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringBinaryNullableArrayArray
													s.handleTestResponseStringBinaryNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'y': // Prefix: "yte"
								if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringByteRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringByteNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringByteArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringByteArrayArray
												s.handleTestResponseStringByteArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringByteNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringByteNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringByteNullableArrayArray
													s.handleTestResponseStringByteNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringDurationRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringDateRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDateTimeRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateTimeNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateTimeArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateTimeArrayArray
													s.handleTestResponseStringDateTimeArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateTimeNullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringDateTimeNullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringDateTimeNullableArrayArray
														s.handleTestResponseStringDateTimeNullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDateNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDateArrayArray
												s.handleTestResponseStringDateArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDateNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDateNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateNullableArrayArray
													s.handleTestResponseStringDateNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringDurationRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringDurationNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDurationArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDurationArrayArray
												s.handleTestResponseStringDurationArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringDurationNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringDurationNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDurationNullableArrayArray
													s.handleTestResponseStringDurationNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						case 'e': // Prefix: "email"
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringEmailRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringEmailNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringEmailArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringEmailArrayArray
											s.handleTestResponseStringEmailArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringEmailNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringEmailNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringEmailNullableArrayArray
												s.handleTestResponseStringEmailNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'h': // Prefix: "hostname"
							if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringHostnameRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringHostnameNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringHostnameArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringHostnameArrayArray
											s.handleTestResponseStringHostnameArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringHostnameNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringHostnameNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringHostnameNullableArrayArray
												s.handleTestResponseStringHostnameNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringIPRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringIPNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIPArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringIPArrayArray
											s.handleTestResponseStringIPArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIPNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIPNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringIPNullableArrayArray
												s.handleTestResponseStringIPNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringIpv6Request([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIpv4Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIpv4NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv4ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv4ArrayArray
													s.handleTestResponseStringIpv4ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv4NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringIpv4NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv4NullableArrayArray
														s.handleTestResponseStringIpv4NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringIpv6Request([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringIpv6NullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv6ArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv6ArrayArray
													s.handleTestResponseStringIpv6ArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringIpv6NullableRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													s.handleTestResponseStringIpv6NullableArrayRequest([0]string{}, w, r)

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv6NullableArrayArray
														s.handleTestResponseStringIpv6NullableArrayArrayRequest([0]string{}, w, r)

														return
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringNullableRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringNullableArrayRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseStringNullableArrayArray
										s.handleTestResponseStringNullableArrayArrayRequest([0]string{}, w, r)

										return
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringPasswordRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringPasswordNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringPasswordArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringPasswordArrayArray
											s.handleTestResponseStringPasswordArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringPasswordNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringPasswordNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringPasswordNullableArrayArray
												s.handleTestResponseStringPasswordNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringTimeRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringTimeNullableRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringTimeArrayRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringTimeArrayArray
											s.handleTestResponseStringTimeArrayArrayRequest([0]string{}, w, r)

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringTimeNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringTimeNullableArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringTimeNullableArrayArray
												s.handleTestResponseStringTimeNullableArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleTestResponseStringUUIDRequest([0]string{}, w, r)

								return
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringURIRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringURINullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringURIArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringURIArrayArray
												s.handleTestResponseStringURIArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringURINullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringURINullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringURINullableArrayArray
													s.handleTestResponseStringURINullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									s.handleTestResponseStringUUIDRequest([0]string{}, w, r)

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										s.handleTestResponseStringUUIDNullableRequest([0]string{}, w, r)

										return
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringUUIDArrayRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringUUIDArrayArray
												s.handleTestResponseStringUUIDArrayArrayRequest([0]string{}, w, r)

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											s.handleTestResponseStringUUIDNullableRequest([0]string{}, w, r)

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												s.handleTestResponseStringUUIDNullableArrayRequest([0]string{}, w, r)

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringUUIDNullableArrayArray
													s.handleTestResponseStringUUIDNullableArrayArrayRequest([0]string{}, w, r)

													return
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [0]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [0]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_re"
			if l := len("/test_re"); len(elem) >= l && elem[0:l] == "/test_re" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "TestResponseAny"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'q': // Prefix: "quest_"
				if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "TestRequestBoolean"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestAny
						r.name = "TestRequestAny"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'E': // Prefix: "EmptyStruct"
					if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestEmptyStruct
						r.name = "TestRequestEmptyStruct"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestRequestFormatTest
						r.name = "TestRequestFormatTest"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestBoolean"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestBooleanNullable"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestBooleanArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestBooleanArrayArray
									r.name = "TestRequestBooleanArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestBooleanNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestBooleanNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestBooleanNullableArrayArray
										r.name = "TestRequestBooleanNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestInteger"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestIntegerInt32"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestIntegerArrayArray
									r.name = "TestRequestIntegerArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestIntegerInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt32ArrayArray
												r.name = "TestRequestIntegerInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestIntegerInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt32NullableArrayArray
													r.name = "TestRequestIntegerInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestIntegerInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestIntegerInt64ArrayArray
												r.name = "TestRequestIntegerInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestIntegerInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestIntegerInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestIntegerInt64NullableArrayArray
													r.name = "TestRequestIntegerInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestIntegerNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestIntegerNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestIntegerNullableArrayArray
										r.name = "TestRequestIntegerNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'n': // Prefix: "nu"
					if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestNumber"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case 'l': // Prefix: "ll"
						if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestNull"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNullNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNullArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNullArrayArray
										r.name = "TestRequestNullArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNullNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNullNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNullNullableArrayArray
											r.name = "TestRequestNullNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					case 'm': // Prefix: "mber"
						if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestNumber"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestNumberDouble"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestNumberArrayArray
										r.name = "TestRequestNumberArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'd': // Prefix: "double"
								if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberDouble"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberDoubleNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberDoubleArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberDoubleArrayArray
												r.name = "TestRequestNumberDoubleArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberDoubleNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberDoubleNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberDoubleNullableArrayArray
													r.name = "TestRequestNumberDoubleNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberFloat"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberFloatNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberFloatArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestNumberFloatArrayArray
												r.name = "TestRequestNumberFloatArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberFloatNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberFloatNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberFloatNullableArrayArray
													r.name = "TestRequestNumberFloatNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberInt32"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt32Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt32ArrayArray
													r.name = "TestRequestNumberInt32ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt32Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestNumberInt32NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestNumberInt32NullableArrayArray
														r.name = "TestRequestNumberInt32NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberInt64"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestNumberInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt64Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestNumberInt64ArrayArray
													r.name = "TestRequestNumberInt64ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestNumberInt64Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestNumberInt64NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestNumberInt64NullableArrayArray
														r.name = "TestRequestNumberInt64NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestNumberNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestNumberNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestNumberNullableArrayArray
											r.name = "TestRequestNumberNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					}
				case 'r': // Prefix: "required_"
					if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestRequiredBoolean"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredAny
							r.name = "TestRequestRequiredAny"
							r.args = args
							r.count = 0
							return r, true
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredEmptyStruct
							r.name = "TestRequestRequiredEmptyStruct"
							r.args = args
							r.count = 0
							return r, true
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: TestRequestRequiredFormatTest
							r.name = "TestRequestRequiredFormatTest"
							r.args = args
							r.count = 0
							return r, true
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestRequiredBoolean"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestRequiredBooleanNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredBooleanArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredBooleanArrayArray
										r.name = "TestRequestRequiredBooleanArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredBooleanNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredBooleanNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredBooleanNullableArrayArray
											r.name = "TestRequestRequiredBooleanNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestRequiredInteger"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestRequiredIntegerInt32"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredIntegerArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredIntegerArrayArray
										r.name = "TestRequestRequiredIntegerArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredIntegerInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredIntegerInt32"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredIntegerInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredIntegerInt32Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredIntegerInt32ArrayArray
													r.name = "TestRequestRequiredIntegerInt32ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredIntegerInt32Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredIntegerInt32NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredIntegerInt32NullableArrayArray
														r.name = "TestRequestRequiredIntegerInt32NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredIntegerInt64"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredIntegerInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredIntegerInt64Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredIntegerInt64ArrayArray
													r.name = "TestRequestRequiredIntegerInt64ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredIntegerInt64Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredIntegerInt64NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredIntegerInt64NullableArrayArray
														r.name = "TestRequestRequiredIntegerInt64NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredIntegerNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredIntegerNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredIntegerNullableArrayArray
											r.name = "TestRequestRequiredIntegerNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestRequiredNumber"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestRequiredNull"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredNullNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNullArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredNullArrayArray
											r.name = "TestRequestRequiredNullArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNullNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNullNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredNullNullableArrayArray
												r.name = "TestRequestRequiredNullNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestRequiredNumber"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredNumberDouble"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNumberArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredNumberArrayArray
											r.name = "TestRequestRequiredNumberArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNumberDouble"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNumberDoubleNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberDoubleArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredNumberDoubleArrayArray
													r.name = "TestRequestRequiredNumberDoubleArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberDoubleNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberDoubleNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberDoubleNullableArrayArray
														r.name = "TestRequestRequiredNumberDoubleNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNumberFloat"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNumberFloatNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberFloatArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredNumberFloatArrayArray
													r.name = "TestRequestRequiredNumberFloatArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberFloatNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberFloatNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberFloatNullableArrayArray
														r.name = "TestRequestRequiredNumberFloatNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNumberInt64"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNumberInt32"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberInt32Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberInt32Array"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberInt32ArrayArray
														r.name = "TestRequestRequiredNumberInt32ArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberInt32Nullable"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "TestRequestRequiredNumberInt32NullableArray"
														r.args = args
														r.count = 0
														return r, true
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredNumberInt32NullableArrayArray
															r.name = "TestRequestRequiredNumberInt32NullableArrayArray"
															r.args = args
															r.count = 0
															return r, true
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNumberInt64"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredNumberInt64Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberInt64Array"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredNumberInt64ArrayArray
														r.name = "TestRequestRequiredNumberInt64ArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredNumberInt64Nullable"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "TestRequestRequiredNumberInt64NullableArray"
														r.args = args
														r.count = 0
														return r, true
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredNumberInt64NullableArrayArray
															r.name = "TestRequestRequiredNumberInt64NullableArrayArray"
															r.args = args
															r.count = 0
															return r, true
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredNumberNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredNumberNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredNumberNullableArrayArray
												r.name = "TestRequestRequiredNumberNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestRequiredString"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestRequiredStringBinary"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestRequiredStringArrayArray
										r.name = "TestRequestRequiredStringArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringByte"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringBinary"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringBinaryNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringBinaryArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringBinaryArrayArray
													r.name = "TestRequestRequiredStringBinaryArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringBinaryNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringBinaryNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringBinaryNullableArrayArray
														r.name = "TestRequestRequiredStringBinaryNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringByte"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringByteNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringByteArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringByteArrayArray
													r.name = "TestRequestRequiredStringByteArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringByteNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringByteNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringByteNullableArrayArray
														r.name = "TestRequestRequiredStringByteNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringDuration"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringDate"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringDateTime"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringDateTimeNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringDateTimeArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDateTimeArrayArray
														r.name = "TestRequestRequiredStringDateTimeArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringDateTimeNullable"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "TestRequestRequiredStringDateTimeNullableArray"
														r.args = args
														r.count = 0
														return r, true
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringDateTimeNullableArrayArray
															r.name = "TestRequestRequiredStringDateTimeNullableArrayArray"
															r.args = args
															r.count = 0
															return r, true
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringDateNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringDateArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringDateArrayArray
													r.name = "TestRequestRequiredStringDateArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringDateNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringDateNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDateNullableArrayArray
														r.name = "TestRequestRequiredStringDateNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringDuration"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringDurationNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringDurationArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringDurationArrayArray
													r.name = "TestRequestRequiredStringDurationArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringDurationNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringDurationNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringDurationNullableArrayArray
														r.name = "TestRequestRequiredStringDurationNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringEmail"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringEmailNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringEmailArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringEmailArrayArray
												r.name = "TestRequestRequiredStringEmailArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringEmailNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringEmailNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringEmailNullableArrayArray
													r.name = "TestRequestRequiredStringEmailNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringHostname"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringHostnameNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringHostnameArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringHostnameArrayArray
												r.name = "TestRequestRequiredStringHostnameArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringHostnameNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringHostnameNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringHostnameNullableArrayArray
													r.name = "TestRequestRequiredStringHostnameNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'i': // Prefix: "ip"
								if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringIP"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringIPNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringIPArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringIPArrayArray
												r.name = "TestRequestRequiredStringIPArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringIPNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringIPNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringIPNullableArrayArray
													r.name = "TestRequestRequiredStringIPNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringIpv6"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '4': // Prefix: "4"
										if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringIpv4"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringIpv4Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringIpv4Array"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringIpv4ArrayArray
														r.name = "TestRequestRequiredStringIpv4ArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringIpv4Nullable"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "TestRequestRequiredStringIpv4NullableArray"
														r.args = args
														r.count = 0
														return r, true
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringIpv4NullableArrayArray
															r.name = "TestRequestRequiredStringIpv4NullableArrayArray"
															r.args = args
															r.count = 0
															return r, true
														}
													}
												}
											}
										}
									case '6': // Prefix: "6"
										if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringIpv6"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringIpv6Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringIpv6Array"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringIpv6ArrayArray
														r.name = "TestRequestRequiredStringIpv6ArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringIpv6Nullable"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														r.name = "TestRequestRequiredStringIpv6NullableArray"
														r.args = args
														r.count = 0
														return r, true
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf: TestRequestRequiredStringIpv6NullableArrayArray
															r.name = "TestRequestRequiredStringIpv6NullableArrayArray"
															r.args = args
															r.count = 0
															return r, true
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestRequiredStringNullableArrayArray
											r.name = "TestRequestRequiredStringNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringPassword"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringPasswordNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringPasswordArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringPasswordArrayArray
												r.name = "TestRequestRequiredStringPasswordArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringPasswordNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringPasswordNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringPasswordNullableArrayArray
													r.name = "TestRequestRequiredStringPasswordNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringTime"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringTimeNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringTimeArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestRequiredStringTimeArrayArray
												r.name = "TestRequestRequiredStringTimeArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringTimeNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringTimeNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringTimeNullableArrayArray
													r.name = "TestRequestRequiredStringTimeNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestRequiredStringUUID"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringURI"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringURINullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringURIArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringURIArrayArray
													r.name = "TestRequestRequiredStringURIArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringURINullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringURINullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringURINullableArrayArray
														r.name = "TestRequestRequiredStringURINullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestRequiredStringUUID"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestRequiredStringUUIDNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringUUIDArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestRequiredStringUUIDArrayArray
													r.name = "TestRequestRequiredStringUUIDArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestRequiredStringUUIDNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestRequiredStringUUIDNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestRequiredStringUUIDNullableArrayArray
														r.name = "TestRequestRequiredStringUUIDNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestRequestString"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestRequestStringBinary"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestRequestStringArrayArray
									r.name = "TestRequestStringArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'b': // Prefix: "b"
							if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringByte"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'i': // Prefix: "inary"
								if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringBinary"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringBinaryNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringBinaryArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringBinaryArrayArray
												r.name = "TestRequestStringBinaryArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringBinaryNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringBinaryNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringBinaryNullableArrayArray
													r.name = "TestRequestStringBinaryNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'y': // Prefix: "yte"
								if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringByte"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringByteNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringByteArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringByteArrayArray
												r.name = "TestRequestStringByteArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringByteNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringByteNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringByteNullableArrayArray
													r.name = "TestRequestStringByteNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringDuration"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringDate"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDateTime"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateTimeNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateTimeArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateTimeArrayArray
													r.name = "TestRequestStringDateTimeArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateTimeNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringDateTimeNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringDateTimeNullableArrayArray
														r.name = "TestRequestStringDateTimeNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDateNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDateArrayArray
												r.name = "TestRequestStringDateArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDateNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDateNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDateNullableArrayArray
													r.name = "TestRequestStringDateNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringDuration"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringDurationNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDurationArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringDurationArrayArray
												r.name = "TestRequestStringDurationArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringDurationNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringDurationNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringDurationNullableArrayArray
													r.name = "TestRequestStringDurationNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'e': // Prefix: "email"
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringEmail"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringEmailNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringEmailArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringEmailArrayArray
											r.name = "TestRequestStringEmailArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringEmailNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringEmailNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringEmailNullableArrayArray
												r.name = "TestRequestStringEmailNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'h': // Prefix: "hostname"
							if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringHostname"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringHostnameNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringHostnameArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringHostnameArrayArray
											r.name = "TestRequestStringHostnameArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringHostnameNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringHostnameNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringHostnameNullableArrayArray
												r.name = "TestRequestStringHostnameNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringIP"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringIPNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIPArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringIPArrayArray
											r.name = "TestRequestStringIPArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIPNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIPNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringIPNullableArrayArray
												r.name = "TestRequestStringIPNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringIpv6"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIpv4"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIpv4Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv4Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv4ArrayArray
													r.name = "TestRequestStringIpv4ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv4Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringIpv4NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv4NullableArrayArray
														r.name = "TestRequestStringIpv4NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringIpv6"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringIpv6Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv6Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringIpv6ArrayArray
													r.name = "TestRequestStringIpv6ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringIpv6Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestRequestStringIpv6NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestRequestStringIpv6NullableArrayArray
														r.name = "TestRequestStringIpv6NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestRequestStringNullableArrayArray
										r.name = "TestRequestStringNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringPassword"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringPasswordNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringPasswordArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringPasswordArrayArray
											r.name = "TestRequestStringPasswordArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringPasswordNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringPasswordNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringPasswordNullableArrayArray
												r.name = "TestRequestStringPasswordNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringTime"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringTimeNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringTimeArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestRequestStringTimeArrayArray
											r.name = "TestRequestStringTimeArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringTimeNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringTimeNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringTimeNullableArrayArray
												r.name = "TestRequestStringTimeNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestRequestStringUUID"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringURI"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringURINullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringURIArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringURIArrayArray
												r.name = "TestRequestStringURIArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringURINullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringURINullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringURINullableArrayArray
													r.name = "TestRequestStringURINullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestRequestStringUUID"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestRequestStringUUIDNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringUUIDArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestRequestStringUUIDArrayArray
												r.name = "TestRequestStringUUIDArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestRequestStringUUIDNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestRequestStringUUIDNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestRequestStringUUIDNullableArrayArray
													r.name = "TestRequestStringUUIDNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 's': // Prefix: "sponse_"
				if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "TestResponseBoolean"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case 'A': // Prefix: "Any"
					if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseAny
						r.name = "TestResponseAny"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'E': // Prefix: "EmptyStruct"
					if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseEmptyStruct
						r.name = "TestResponseEmptyStruct"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'F': // Prefix: "FormatTest"
					if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: TestResponseFormatTest
						r.name = "TestResponseFormatTest"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'b': // Prefix: "boolean"
					if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseBoolean"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseBooleanNullable"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseBooleanArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseBooleanArrayArray
									r.name = "TestResponseBooleanArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseBooleanNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseBooleanNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseBooleanNullableArrayArray
										r.name = "TestResponseBooleanNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'i': // Prefix: "integer"
					if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseInteger"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseIntegerInt32"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseIntegerArrayArray
									r.name = "TestResponseIntegerArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'i': // Prefix: "int"
							if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerInt64"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '3': // Prefix: "32"
								if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerInt32"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseIntegerInt32Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt32Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt32ArrayArray
												r.name = "TestResponseIntegerInt32ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseIntegerInt32NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt32NullableArrayArray
													r.name = "TestResponseIntegerInt32NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case '6': // Prefix: "64"
								if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseIntegerInt64Nullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt64Array"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseIntegerInt64ArrayArray
												r.name = "TestResponseIntegerInt64ArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseIntegerInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseIntegerInt64NullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseIntegerInt64NullableArrayArray
													r.name = "TestResponseIntegerInt64NullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseIntegerNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseIntegerNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseIntegerNullableArrayArray
										r.name = "TestResponseIntegerNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						}
					}
				case 'n': // Prefix: "nu"
					if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseNumber"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case 'l': // Prefix: "ll"
						if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseNull"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNullNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNullArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNullArrayArray
										r.name = "TestResponseNullArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNullNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNullNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNullNullableArrayArray
											r.name = "TestResponseNullNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					case 'm': // Prefix: "mber"
						if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseNumber"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseNumberDouble"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseNumberArrayArray
										r.name = "TestResponseNumberArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							case 'd': // Prefix: "double"
								if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberDouble"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberDoubleNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberDoubleArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberDoubleArrayArray
												r.name = "TestResponseNumberDoubleArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberDoubleNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberDoubleNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberDoubleNullableArrayArray
													r.name = "TestResponseNumberDoubleNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberFloat"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberFloatNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberFloatArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseNumberFloatArrayArray
												r.name = "TestResponseNumberFloatArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberFloatNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberFloatNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberFloatNullableArrayArray
													r.name = "TestResponseNumberFloatNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberInt64"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberInt32"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt32Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt32Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt32ArrayArray
													r.name = "TestResponseNumberInt32ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt32Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseNumberInt32NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseNumberInt32NullableArrayArray
														r.name = "TestResponseNumberInt32NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberInt64"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseNumberInt64Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt64Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseNumberInt64ArrayArray
													r.name = "TestResponseNumberInt64ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseNumberInt64Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseNumberInt64NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseNumberInt64NullableArrayArray
														r.name = "TestResponseNumberInt64NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseNumberNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseNumberNullableArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseNumberNullableArrayArray
											r.name = "TestResponseNumberNullableArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "string"
					if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						r.name = "TestResponseString"
						r.args = args
						r.count = 0
						return r, true
					}
					switch elem[0] {
					case '_': // Prefix: "_"
						if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "TestResponseStringBinary"
							r.args = args
							r.count = 0
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "array"
							if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringArray"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: TestResponseStringArrayArray
									r.name = "TestResponseStringArrayArray"
									r.args = args
									r.count = 0
									return r, true
								}
							}
						case 'b': // Prefix: "b"
							if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringByte"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'i': // Prefix: "inary"
								if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringBinary"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringBinaryNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringBinaryArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringBinaryArrayArray
												r.name = "TestResponseStringBinaryArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringBinaryNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringBinaryNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringBinaryNullableArrayArray
													r.name = "TestResponseStringBinaryNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'y': // Prefix: "yte"
								if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringByte"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringByteNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringByteArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringByteArrayArray
												r.name = "TestResponseStringByteArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringByteNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringByteNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringByteNullableArrayArray
													r.name = "TestResponseStringByteNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'd': // Prefix: "d"
							if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringDuration"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'a': // Prefix: "ate"
								if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringDate"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '-': // Prefix: "-time"
									if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDateTime"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateTimeNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateTimeArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateTimeArrayArray
													r.name = "TestResponseStringDateTimeArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateTimeNullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringDateTimeNullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringDateTimeNullableArrayArray
														r.name = "TestResponseStringDateTimeNullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDateNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDateArrayArray
												r.name = "TestResponseStringDateArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDateNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDateNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDateNullableArrayArray
													r.name = "TestResponseStringDateNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uration"
								if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringDuration"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringDurationNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDurationArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringDurationArrayArray
												r.name = "TestResponseStringDurationArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringDurationNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringDurationNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringDurationNullableArrayArray
													r.name = "TestResponseStringDurationNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						case 'e': // Prefix: "email"
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringEmail"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringEmailNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringEmailArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringEmailArrayArray
											r.name = "TestResponseStringEmailArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringEmailNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringEmailNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringEmailNullableArrayArray
												r.name = "TestResponseStringEmailNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'h': // Prefix: "hostname"
							if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringHostname"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringHostnameNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringHostnameArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringHostnameArrayArray
											r.name = "TestResponseStringHostnameArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringHostnameNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringHostnameNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringHostnameNullableArrayArray
												r.name = "TestResponseStringHostnameNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'i': // Prefix: "ip"
							if l := len("ip"); len(elem) >= l && elem[0:l] == "ip" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringIP"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringIPNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIPArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringIPArrayArray
											r.name = "TestResponseStringIPArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIPNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIPNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringIPNullableArrayArray
												r.name = "TestResponseStringIPNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							case 'v': // Prefix: "v"
								if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringIpv6"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '4': // Prefix: "4"
									if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIpv4"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIpv4Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv4Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv4ArrayArray
													r.name = "TestResponseStringIpv4ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv4Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringIpv4NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv4NullableArrayArray
														r.name = "TestResponseStringIpv4NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								case '6': // Prefix: "6"
									if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringIpv6"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringIpv6Nullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv6Array"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringIpv6ArrayArray
													r.name = "TestResponseStringIpv6ArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringIpv6Nullable"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													r.name = "TestResponseStringIpv6NullableArray"
													r.args = args
													r.count = 0
													return r, true
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf: TestResponseStringIpv6NullableArrayArray
														r.name = "TestResponseStringIpv6NullableArrayArray"
														r.args = args
														r.count = 0
														return r, true
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nullable"
							if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringNullable"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_array"
								if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringNullableArray"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf: TestResponseStringNullableArrayArray
										r.name = "TestResponseStringNullableArrayArray"
										r.args = args
										r.count = 0
										return r, true
									}
								}
							}
						case 'p': // Prefix: "password"
							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringPassword"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringPasswordNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringPasswordArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringPasswordArrayArray
											r.name = "TestResponseStringPasswordArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringPasswordNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringPasswordNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringPasswordNullableArrayArray
												r.name = "TestResponseStringPasswordNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 't': // Prefix: "time"
							if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringTime"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringTimeNullable"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringTimeArray"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf: TestResponseStringTimeArrayArray
											r.name = "TestResponseStringTimeArrayArray"
											r.args = args
											r.count = 0
											return r, true
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringTimeNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringTimeNullableArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringTimeNullableArrayArray
												r.name = "TestResponseStringTimeNullableArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									}
								}
							}
						case 'u': // Prefix: "u"
							if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "TestResponseStringUUID"
								r.args = args
								r.count = 0
								return r, true
							}
							switch elem[0] {
							case 'r': // Prefix: "ri"
								if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringURI"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringURINullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringURIArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringURIArrayArray
												r.name = "TestResponseStringURIArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringURINullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringURINullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringURINullableArrayArray
													r.name = "TestResponseStringURINullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							case 'u': // Prefix: "uid"
								if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									r.name = "TestResponseStringUUID"
									r.args = args
									r.count = 0
									return r, true
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										r.name = "TestResponseStringUUIDNullable"
										r.args = args
										r.count = 0
										return r, true
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringUUIDArray"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf: TestResponseStringUUIDArrayArray
												r.name = "TestResponseStringUUIDArrayArray"
												r.args = args
												r.count = 0
												return r, true
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											r.name = "TestResponseStringUUIDNullable"
											r.args = args
											r.count = 0
											return r, true
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												r.name = "TestResponseStringUUIDNullableArray"
												r.args = args
												r.count = 0
												return r, true
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf: TestResponseStringUUIDNullableArrayArray
													r.name = "TestResponseStringUUIDNullableArrayArray"
													r.args = args
													r.count = 0
													return r, true
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
