// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/json"
)

func encodeTestRequestAnyRequestJSON(req jx.Raw, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	if len(req) != 0 {
		e.Raw(req)
	}

	return e, nil
}

func encodeTestRequestBooleanRequestJSON(req OptBool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestBooleanArrayRequestJSON(req []bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Bool(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestBooleanArrayArrayRequestJSON(req [][]bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestBooleanNullableRequestJSON(req OptNilBool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestBooleanNullableArrayRequestJSON(req []bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Bool(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestBooleanNullableArrayArrayRequestJSON(req [][]bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestEmptyStructRequestJSON(req *TestRequestEmptyStructReq, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestFormatTestRequestJSON(req OptTestRequestFormatTestReq, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerRequestJSON(req OptInt, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerArrayRequestJSON(req []int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerArrayArrayRequestJSON(req [][]int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt32RequestJSON(req OptInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerInt32ArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt32ArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt32NullableRequestJSON(req OptNilInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerInt32NullableArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt32NullableArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt64RequestJSON(req OptInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerInt64ArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt64ArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt64NullableRequestJSON(req OptNilInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerInt64NullableArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerInt64NullableArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerNullableRequestJSON(req OptNilInt, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestIntegerNullableArrayRequestJSON(req []int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestIntegerNullableArrayArrayRequestJSON(req [][]int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNullRequestJSON(req OptStruct, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNullArrayRequestJSON(req []struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNullArrayArrayRequestJSON(req [][]struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNullNullableRequestJSON(req OptStruct, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNullNullableArrayRequestJSON(req []struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNullNullableArrayArrayRequestJSON(req [][]struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberRequestJSON(req OptFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberDoubleRequestJSON(req OptFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberDoubleArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberDoubleArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberDoubleNullableRequestJSON(req OptNilFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberDoubleNullableArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberDoubleNullableArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberFloatRequestJSON(req OptFloat32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberFloatArrayRequestJSON(req []float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberFloatArrayArrayRequestJSON(req [][]float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberFloatNullableRequestJSON(req OptNilFloat32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberFloatNullableArrayRequestJSON(req []float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberFloatNullableArrayArrayRequestJSON(req [][]float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt32RequestJSON(req OptInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberInt32ArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt32ArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt32NullableRequestJSON(req OptNilInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberInt32NullableArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt32NullableArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt64RequestJSON(req OptInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberInt64ArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt64ArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt64NullableRequestJSON(req OptNilInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberInt64NullableArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberInt64NullableArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberNullableRequestJSON(req OptNilFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestNumberNullableArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestNumberNullableArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestRequiredAnyRequestJSON(req jx.Raw, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	if len(req) != 0 {
		e.Raw(req)
	}

	return e, nil
}

func encodeTestRequestRequiredBooleanRequestJSON(req bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Bool(req)

	return e, nil
}

func encodeTestRequestRequiredBooleanArrayRequestJSON(req []bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Bool(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredBooleanArrayArrayRequestJSON(req [][]bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredBooleanNullableRequestJSON(req NilBool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredBooleanNullableArrayRequestJSON(req []bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Bool(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredBooleanNullableArrayArrayRequestJSON(req [][]bool, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredEmptyStructRequestJSON(req TestRequestRequiredEmptyStructReq, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredFormatTestRequestJSON(req TestRequestRequiredFormatTestReq, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredIntegerRequestJSON(req int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Int(req)

	return e, nil
}

func encodeTestRequestRequiredIntegerArrayRequestJSON(req []int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerArrayArrayRequestJSON(req [][]int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32RequestJSON(req int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Int32(req)

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32ArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32ArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32NullableRequestJSON(req NilInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32NullableArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt32NullableArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64RequestJSON(req int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Int64(req)

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64ArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64ArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64NullableRequestJSON(req NilInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64NullableArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerInt64NullableArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerNullableRequestJSON(req NilInt, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredIntegerNullableArrayRequestJSON(req []int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredIntegerNullableArrayArrayRequestJSON(req [][]int, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNullRequestJSON(req struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	_ = req
	e.Null()

	return e, nil
}

func encodeTestRequestRequiredNullArrayRequestJSON(req []struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		_ = elem
		e.Null()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNullArrayArrayRequestJSON(req [][]struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNullNullableRequestJSON(req struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	_ = req
	e.Null()

	return e, nil
}

func encodeTestRequestRequiredNullNullableArrayRequestJSON(req []struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		_ = elem
		e.Null()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNullNullableArrayArrayRequestJSON(req [][]struct{}, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberRequestJSON(req float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Float64(req)

	return e, nil
}

func encodeTestRequestRequiredNumberArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleRequestJSON(req float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Float64(req)

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleNullableRequestJSON(req NilFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleNullableArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberDoubleNullableArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberFloatRequestJSON(req float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Float32(req)

	return e, nil
}

func encodeTestRequestRequiredNumberFloatArrayRequestJSON(req []float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberFloatArrayArrayRequestJSON(req [][]float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberFloatNullableRequestJSON(req NilFloat32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredNumberFloatNullableArrayRequestJSON(req []float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberFloatNullableArrayArrayRequestJSON(req [][]float32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt32RequestJSON(req int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Int32(req)

	return e, nil
}

func encodeTestRequestRequiredNumberInt32ArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt32ArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt32NullableRequestJSON(req NilInt32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredNumberInt32NullableArrayRequestJSON(req []int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int32(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt32NullableArrayArrayRequestJSON(req [][]int32, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt64RequestJSON(req int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Int64(req)

	return e, nil
}

func encodeTestRequestRequiredNumberInt64ArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt64ArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt64NullableRequestJSON(req NilInt64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredNumberInt64NullableArrayRequestJSON(req []int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Int64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberInt64NullableArrayArrayRequestJSON(req [][]int64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberNullableRequestJSON(req NilFloat64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredNumberNullableArrayRequestJSON(req []float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Float64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredNumberNullableArrayArrayRequestJSON(req [][]float64, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestRequestRequiredStringArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringBinaryRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestRequestRequiredStringBinaryArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringBinaryArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringBinaryNullableRequestJSON(req NilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringBinaryNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringBinaryNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringByteRequestJSON(req []byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Base64(req)

	return e, nil
}

func encodeTestRequestRequiredStringByteArrayRequestJSON(req [][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Base64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringByteArrayArrayRequestJSON(req [][][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringByteNullableRequestJSON(req []byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Base64(req)

	return e, nil
}

func encodeTestRequestRequiredStringByteNullableArrayRequestJSON(req [][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Base64(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringByteNullableArrayArrayRequestJSON(req [][][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateRequestJSON(req time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeDate(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringDateArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDate(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateNullableRequestJSON(req NilDate, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e, json.EncodeDate)

	return e, nil
}

func encodeTestRequestRequiredStringDateNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDate(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeRequestJSON(req time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeDateTime(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDateTime(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeNullableRequestJSON(req NilDateTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e, json.EncodeDateTime)

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDateTime(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDateTimeNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDurationRequestJSON(req time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeDuration(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringDurationArrayRequestJSON(req []time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDuration(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDurationArrayArrayRequestJSON(req [][]time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDurationNullableRequestJSON(req NilDuration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringDurationNullableArrayRequestJSON(req []time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeDuration(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringDurationNullableArrayArrayRequestJSON(req [][]time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringEmailRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestRequestRequiredStringEmailArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringEmailArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringEmailNullableRequestJSON(req NilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringEmailNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringEmailNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringHostnameRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestRequestRequiredStringHostnameArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringHostnameArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringHostnameNullableRequestJSON(req NilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringHostnameNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringHostnameNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIPRequestJSON(req netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeIP(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringIPArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIPArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIPNullableRequestJSON(req NilIP, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringIPNullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIPNullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv4RequestJSON(req netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeIP(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringIpv4ArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv4ArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv4NullableRequestJSON(req NilIPv4, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringIpv4NullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv4NullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv6RequestJSON(req netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeIP(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringIpv6ArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv6ArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv6NullableRequestJSON(req NilIPv6, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringIpv6NullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeIP(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringIpv6NullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringNullableRequestJSON(req NilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringPasswordRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestRequestRequiredStringPasswordArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringPasswordArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringPasswordNullableRequestJSON(req NilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringPasswordNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.Str(elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringPasswordNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringTimeRequestJSON(req time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeTime(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringTimeArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeTime(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringTimeArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringTimeNullableRequestJSON(req NilTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e, json.EncodeTime)

	return e, nil
}

func encodeTestRequestRequiredStringTimeNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeTime(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringTimeNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringURIRequestJSON(req url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeURI(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringURIArrayRequestJSON(req []url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeURI(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringURIArrayArrayRequestJSON(req [][]url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringURINullableRequestJSON(req NilURI, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringURINullableArrayRequestJSON(req []url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeURI(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringURINullableArrayArrayRequestJSON(req [][]url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringUUIDRequestJSON(req uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	json.EncodeUUID(e, req)

	return e, nil
}

func encodeTestRequestRequiredStringUUIDArrayRequestJSON(req []uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeUUID(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringUUIDArrayArrayRequestJSON(req [][]uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringUUIDNullableRequestJSON(req NilUUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	req.Encode(e)

	return e, nil
}

func encodeTestRequestRequiredStringUUIDNullableArrayRequestJSON(req []uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		json.EncodeUUID(e, elem)
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestRequiredStringUUIDNullableArrayArrayRequestJSON(req [][]uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.ArrStart()
	for _, elem := range req {
		e.ArrStart()
		for _, elem := range elem {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()

	return e, nil
}

func encodeTestRequestStringRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringBinaryRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringBinaryArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringBinaryArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringBinaryNullableRequestJSON(req OptNilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringBinaryNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringBinaryNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringByteRequestJSON(req []byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Base64(req)

	return e, nil
}

func encodeTestRequestStringByteArrayRequestJSON(req [][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Base64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringByteArrayArrayRequestJSON(req [][][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringByteNullableRequestJSON(req OptNilByte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringByteNullableArrayRequestJSON(req [][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Base64(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringByteNullableArrayArrayRequestJSON(req [][][]byte, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateRequestJSON(req OptDate, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeDate)
	}

	return e, nil
}

func encodeTestRequestStringDateArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateNullableRequestJSON(req OptNilDate, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeDate)
	}

	return e, nil
}

func encodeTestRequestStringDateNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateTimeRequestJSON(req OptDateTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeDateTime)
	}

	return e, nil
}

func encodeTestRequestStringDateTimeArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateTimeArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateTimeNullableRequestJSON(req OptNilDateTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeDateTime)
	}

	return e, nil
}

func encodeTestRequestStringDateTimeNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDateTimeNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDurationRequestJSON(req OptDuration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringDurationArrayRequestJSON(req []time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDurationArrayArrayRequestJSON(req [][]time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDurationNullableRequestJSON(req OptNilDuration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringDurationNullableArrayRequestJSON(req []time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringDurationNullableArrayArrayRequestJSON(req [][]time.Duration, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringEmailRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringEmailArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringEmailArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringEmailNullableRequestJSON(req OptNilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringEmailNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringEmailNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringHostnameRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringHostnameArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringHostnameArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringHostnameNullableRequestJSON(req OptNilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringHostnameNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringHostnameNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIPRequestJSON(req OptIP, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIPArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIPArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIPNullableRequestJSON(req OptNilIP, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIPNullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIPNullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv4RequestJSON(req OptIPv4, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIpv4ArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv4ArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv4NullableRequestJSON(req OptNilIPv4, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIpv4NullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv4NullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv6RequestJSON(req OptIPv6, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIpv6ArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv6ArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv6NullableRequestJSON(req OptNilIPv6, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringIpv6NullableArrayRequestJSON(req []netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringIpv6NullableArrayArrayRequestJSON(req [][]netip.Addr, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringNullableRequestJSON(req OptNilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringPasswordRequestJSON(req OptString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringPasswordArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringPasswordArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringPasswordNullableRequestJSON(req OptNilString, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringPasswordNullableArrayRequestJSON(req []string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringPasswordNullableArrayArrayRequestJSON(req [][]string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringTimeRequestJSON(req OptTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeTime)
	}

	return e, nil
}

func encodeTestRequestStringTimeArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringTimeArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringTimeNullableRequestJSON(req OptNilTime, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e, json.EncodeTime)
	}

	return e, nil
}

func encodeTestRequestStringTimeNullableArrayRequestJSON(req []time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringTimeNullableArrayArrayRequestJSON(req [][]time.Time, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringURIRequestJSON(req OptURI, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringURIArrayRequestJSON(req []url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringURIArrayArrayRequestJSON(req [][]url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringURINullableRequestJSON(req OptNilURI, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringURINullableArrayRequestJSON(req []url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringURINullableArrayArrayRequestJSON(req [][]url.URL, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringUUIDRequestJSON(req OptUUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringUUIDArrayRequestJSON(req []uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringUUIDArrayArrayRequestJSON(req [][]uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringUUIDNullableRequestJSON(req OptNilUUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req.Set {
		req.Encode(e)
	}

	return e, nil
}

func encodeTestRequestStringUUIDNullableArrayRequestJSON(req []uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestRequestStringUUIDNullableArrayArrayRequestJSON(req [][]uuid.UUID, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()
	if req != nil {
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}

	return e, nil
}

func encodeTestResponseAnyRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseBooleanNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseEmptyStructRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseFormatTestRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt32NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerInt64NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseIntegerNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNullNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberDoubleNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberFloatNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt32NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberInt64NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseNumberNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringBinaryNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringByteNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDateTimeNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringDurationNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringEmailNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringHostnameNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIPNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv4NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6RequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6ArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6ArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6NullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6NullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringIpv6NullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringPasswordNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringTimeNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURIRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURIArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURIArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURINullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURINullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringURINullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDNullableRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDNullableArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}

func encodeTestResponseStringUUIDNullableArrayArrayRequestJSON(req string, span trace.Span) (data *jx.Encoder, err error) {
	e := jx.GetEncoder()

	e.Str(req)

	return e, nil
}
