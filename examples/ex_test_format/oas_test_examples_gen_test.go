// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestRequestEmptyStructReq_EncodeDecode(t *testing.T) {
	var typ TestRequestEmptyStructReq
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestRequestEmptyStructReq
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestRequestFormatTestReq_EncodeDecode(t *testing.T) {
	var typ TestRequestFormatTestReq
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestRequestFormatTestReq
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestRequestRequiredEmptyStructReq_EncodeDecode(t *testing.T) {
	var typ TestRequestRequiredEmptyStructReq
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestRequestRequiredEmptyStructReq
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestRequestRequiredFormatTestReq_EncodeDecode(t *testing.T) {
	var typ TestRequestRequiredFormatTestReq
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestRequestRequiredFormatTestReq
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestResponseEmptyStructOK_EncodeDecode(t *testing.T) {
	var typ TestResponseEmptyStructOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestResponseEmptyStructOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTestResponseFormatTestOK_EncodeDecode(t *testing.T) {
	var typ TestResponseFormatTestOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TestResponseFormatTestOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
