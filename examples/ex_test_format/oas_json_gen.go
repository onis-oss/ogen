// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"net/netip"
	"net/url"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s Error) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Error) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfError = [2]string{
	0: "code",
	1: "status",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Error to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Error")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Error) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Error) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o NilBool) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *NilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o NilDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o NilDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDateTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o NilDuration) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *NilDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDuration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Duration
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o NilFloat32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *NilFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o NilFloat64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *NilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIP) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIP to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIPv4) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIPv4 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIPv6) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIPv6 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *NilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o NilInt32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *NilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o NilInt64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *NilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o NilTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o NilURI) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *NilURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilURI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v url.URL
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o NilUUID) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *NilUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUUID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uuid.UUID
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuration to nil")
	}
	o.Set = true
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat32 to nil")
	}
	o.Set = true
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIP to nil")
	}
	o.Set = true
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv4) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv4 to nil")
	}
	o.Set = true
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv6) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv6 to nil")
	}
	o.Set = true
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []byte as json.
func (o OptNilByte) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Base64([]byte(o.Value))
}

// Decode decodes []byte from json.
func (o *OptNilByte) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilByte to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []byte
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Base64()
	if err != nil {
		return err
	}
	o.Value = []byte(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilByte) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilByte) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptNilDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDateTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o OptNilDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptNilDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDuration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Duration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptNilFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptNilFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptNilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIP to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIPv4) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIPv4 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIPv6) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIPv6 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptNilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptNilInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptNilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o OptNilURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptNilURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilURI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v url.URL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptNilUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptNilUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUUID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uuid.UUID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes struct{} as json.
func (o OptStruct) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Null()
}

// Decode decodes struct{} from json.
func (o *OptStruct) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStruct to nil")
	}
	o.Set = true
	if err := d.Null(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStruct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStruct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TestRequestFormatTestReq as json.
func (o OptTestRequestFormatTestReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TestRequestFormatTestReq from json.
func (o *OptTestRequestFormatTestReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTestRequestFormatTestReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTestRequestFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTestRequestFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	o.Set = true
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestRequestEmptyStructReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestRequestEmptyStructReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestRequestEmptyStructReq = [0]string{}

// Decode decodes TestRequestEmptyStructReq from json.
func (s *TestRequestEmptyStructReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestEmptyStructReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestEmptyStructReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestRequestEmptyStructReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestEmptyStructReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestRequestFormatTestReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestRequestFormatTestReq) encodeFields(e *jx.Encoder) {
	{

		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{

		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{

		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{

		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{

		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{

		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{

		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{

		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{

		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{

		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{

		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{

		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{

		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{

		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{

		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{

		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{

		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{

		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{

		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{

		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{

		e.FieldStart("required_string_ipv4")
		json.EncodeIP(e, s.RequiredStringIpv4)
	}
	{

		e.FieldStart("required_string_ipv6")
		json.EncodeIP(e, s.RequiredStringIpv6)
	}
	{

		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{

		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{

		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{

		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{

		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{

		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestRequestFormatTestReq = [156]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int32",
	5:   "required_array_integer_int64",
	6:   "required_array_null",
	7:   "required_array_number",
	8:   "required_array_number_double",
	9:   "required_array_number_float",
	10:  "required_array_number_int32",
	11:  "required_array_number_int64",
	12:  "required_array_string",
	13:  "required_array_string_binary",
	14:  "required_array_string_byte",
	15:  "required_array_string_date",
	16:  "required_array_string_date-time",
	17:  "required_array_string_duration",
	18:  "required_array_string_email",
	19:  "required_array_string_hostname",
	20:  "required_array_string_ip",
	21:  "required_array_string_ipv4",
	22:  "required_array_string_ipv6",
	23:  "required_array_string_password",
	24:  "required_array_string_time",
	25:  "required_array_string_uri",
	26:  "required_array_string_uuid",
	27:  "required_boolean",
	28:  "required_double_array_any",
	29:  "required_double_array_boolean",
	30:  "required_double_array_integer",
	31:  "required_double_array_integer_int32",
	32:  "required_double_array_integer_int64",
	33:  "required_double_array_null",
	34:  "required_double_array_number",
	35:  "required_double_array_number_double",
	36:  "required_double_array_number_float",
	37:  "required_double_array_number_int32",
	38:  "required_double_array_number_int64",
	39:  "required_double_array_string",
	40:  "required_double_array_string_binary",
	41:  "required_double_array_string_byte",
	42:  "required_double_array_string_date",
	43:  "required_double_array_string_date-time",
	44:  "required_double_array_string_duration",
	45:  "required_double_array_string_email",
	46:  "required_double_array_string_hostname",
	47:  "required_double_array_string_ip",
	48:  "required_double_array_string_ipv4",
	49:  "required_double_array_string_ipv6",
	50:  "required_double_array_string_password",
	51:  "required_double_array_string_time",
	52:  "required_double_array_string_uri",
	53:  "required_double_array_string_uuid",
	54:  "required_integer",
	55:  "required_integer_int32",
	56:  "required_integer_int64",
	57:  "required_null",
	58:  "required_number",
	59:  "required_number_double",
	60:  "required_number_float",
	61:  "required_number_int32",
	62:  "required_number_int64",
	63:  "required_string",
	64:  "required_string_binary",
	65:  "required_string_byte",
	66:  "required_string_date",
	67:  "required_string_date-time",
	68:  "required_string_duration",
	69:  "required_string_email",
	70:  "required_string_hostname",
	71:  "required_string_ip",
	72:  "required_string_ipv4",
	73:  "required_string_ipv6",
	74:  "required_string_password",
	75:  "required_string_time",
	76:  "required_string_uri",
	77:  "required_string_uuid",
	78:  "optional_any",
	79:  "optional_array_any",
	80:  "optional_array_boolean",
	81:  "optional_array_integer",
	82:  "optional_array_integer_int32",
	83:  "optional_array_integer_int64",
	84:  "optional_array_null",
	85:  "optional_array_number",
	86:  "optional_array_number_double",
	87:  "optional_array_number_float",
	88:  "optional_array_number_int32",
	89:  "optional_array_number_int64",
	90:  "optional_array_string",
	91:  "optional_array_string_binary",
	92:  "optional_array_string_byte",
	93:  "optional_array_string_date",
	94:  "optional_array_string_date-time",
	95:  "optional_array_string_duration",
	96:  "optional_array_string_email",
	97:  "optional_array_string_hostname",
	98:  "optional_array_string_ip",
	99:  "optional_array_string_ipv4",
	100: "optional_array_string_ipv6",
	101: "optional_array_string_password",
	102: "optional_array_string_time",
	103: "optional_array_string_uri",
	104: "optional_array_string_uuid",
	105: "optional_boolean",
	106: "optional_double_array_any",
	107: "optional_double_array_boolean",
	108: "optional_double_array_integer",
	109: "optional_double_array_integer_int32",
	110: "optional_double_array_integer_int64",
	111: "optional_double_array_null",
	112: "optional_double_array_number",
	113: "optional_double_array_number_double",
	114: "optional_double_array_number_float",
	115: "optional_double_array_number_int32",
	116: "optional_double_array_number_int64",
	117: "optional_double_array_string",
	118: "optional_double_array_string_binary",
	119: "optional_double_array_string_byte",
	120: "optional_double_array_string_date",
	121: "optional_double_array_string_date-time",
	122: "optional_double_array_string_duration",
	123: "optional_double_array_string_email",
	124: "optional_double_array_string_hostname",
	125: "optional_double_array_string_ip",
	126: "optional_double_array_string_ipv4",
	127: "optional_double_array_string_ipv6",
	128: "optional_double_array_string_password",
	129: "optional_double_array_string_time",
	130: "optional_double_array_string_uri",
	131: "optional_double_array_string_uuid",
	132: "optional_integer",
	133: "optional_integer_int32",
	134: "optional_integer_int64",
	135: "optional_null",
	136: "optional_number",
	137: "optional_number_double",
	138: "optional_number_float",
	139: "optional_number_int32",
	140: "optional_number_int64",
	141: "optional_string",
	142: "optional_string_binary",
	143: "optional_string_byte",
	144: "optional_string_date",
	145: "optional_string_date-time",
	146: "optional_string_duration",
	147: "optional_string_email",
	148: "optional_string_hostname",
	149: "optional_string_ip",
	150: "optional_string_ipv4",
	151: "optional_string_ipv6",
	152: "optional_string_password",
	153: "optional_string_time",
	154: "optional_string_uri",
	155: "optional_string_uuid",
}

// Decode decodes TestRequestFormatTestReq from json.
func (s *TestRequestFormatTestReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestFormatTestReq to nil")
	}
	var requiredBitSet [20]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_null":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_binary":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_ip":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uri":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_null":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int32":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_null":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_binary":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_hostname":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_ip":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uri":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestFormatTestReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [20]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestRequestFormatTestReq) {
					name = jsonFieldsNameOfTestRequestFormatTestReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestRequestFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestRequestRequiredEmptyStructReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestRequestRequiredEmptyStructReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestRequestRequiredEmptyStructReq = [0]string{}

// Decode decodes TestRequestRequiredEmptyStructReq from json.
func (s *TestRequestRequiredEmptyStructReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestRequiredEmptyStructReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestRequiredEmptyStructReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestRequestRequiredEmptyStructReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestRequiredEmptyStructReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestRequestRequiredFormatTestReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestRequestRequiredFormatTestReq) encodeFields(e *jx.Encoder) {
	{

		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{

		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{

		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{

		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{

		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{

		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{

		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{

		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{

		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{

		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{

		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{

		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{

		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{

		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{

		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{

		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{

		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{

		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{

		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{

		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{

		e.FieldStart("required_string_ipv4")
		json.EncodeIP(e, s.RequiredStringIpv4)
	}
	{

		e.FieldStart("required_string_ipv6")
		json.EncodeIP(e, s.RequiredStringIpv6)
	}
	{

		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{

		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{

		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{

		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{

		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{

		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestRequestRequiredFormatTestReq = [156]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int32",
	5:   "required_array_integer_int64",
	6:   "required_array_null",
	7:   "required_array_number",
	8:   "required_array_number_double",
	9:   "required_array_number_float",
	10:  "required_array_number_int32",
	11:  "required_array_number_int64",
	12:  "required_array_string",
	13:  "required_array_string_binary",
	14:  "required_array_string_byte",
	15:  "required_array_string_date",
	16:  "required_array_string_date-time",
	17:  "required_array_string_duration",
	18:  "required_array_string_email",
	19:  "required_array_string_hostname",
	20:  "required_array_string_ip",
	21:  "required_array_string_ipv4",
	22:  "required_array_string_ipv6",
	23:  "required_array_string_password",
	24:  "required_array_string_time",
	25:  "required_array_string_uri",
	26:  "required_array_string_uuid",
	27:  "required_boolean",
	28:  "required_double_array_any",
	29:  "required_double_array_boolean",
	30:  "required_double_array_integer",
	31:  "required_double_array_integer_int32",
	32:  "required_double_array_integer_int64",
	33:  "required_double_array_null",
	34:  "required_double_array_number",
	35:  "required_double_array_number_double",
	36:  "required_double_array_number_float",
	37:  "required_double_array_number_int32",
	38:  "required_double_array_number_int64",
	39:  "required_double_array_string",
	40:  "required_double_array_string_binary",
	41:  "required_double_array_string_byte",
	42:  "required_double_array_string_date",
	43:  "required_double_array_string_date-time",
	44:  "required_double_array_string_duration",
	45:  "required_double_array_string_email",
	46:  "required_double_array_string_hostname",
	47:  "required_double_array_string_ip",
	48:  "required_double_array_string_ipv4",
	49:  "required_double_array_string_ipv6",
	50:  "required_double_array_string_password",
	51:  "required_double_array_string_time",
	52:  "required_double_array_string_uri",
	53:  "required_double_array_string_uuid",
	54:  "required_integer",
	55:  "required_integer_int32",
	56:  "required_integer_int64",
	57:  "required_null",
	58:  "required_number",
	59:  "required_number_double",
	60:  "required_number_float",
	61:  "required_number_int32",
	62:  "required_number_int64",
	63:  "required_string",
	64:  "required_string_binary",
	65:  "required_string_byte",
	66:  "required_string_date",
	67:  "required_string_date-time",
	68:  "required_string_duration",
	69:  "required_string_email",
	70:  "required_string_hostname",
	71:  "required_string_ip",
	72:  "required_string_ipv4",
	73:  "required_string_ipv6",
	74:  "required_string_password",
	75:  "required_string_time",
	76:  "required_string_uri",
	77:  "required_string_uuid",
	78:  "optional_any",
	79:  "optional_array_any",
	80:  "optional_array_boolean",
	81:  "optional_array_integer",
	82:  "optional_array_integer_int32",
	83:  "optional_array_integer_int64",
	84:  "optional_array_null",
	85:  "optional_array_number",
	86:  "optional_array_number_double",
	87:  "optional_array_number_float",
	88:  "optional_array_number_int32",
	89:  "optional_array_number_int64",
	90:  "optional_array_string",
	91:  "optional_array_string_binary",
	92:  "optional_array_string_byte",
	93:  "optional_array_string_date",
	94:  "optional_array_string_date-time",
	95:  "optional_array_string_duration",
	96:  "optional_array_string_email",
	97:  "optional_array_string_hostname",
	98:  "optional_array_string_ip",
	99:  "optional_array_string_ipv4",
	100: "optional_array_string_ipv6",
	101: "optional_array_string_password",
	102: "optional_array_string_time",
	103: "optional_array_string_uri",
	104: "optional_array_string_uuid",
	105: "optional_boolean",
	106: "optional_double_array_any",
	107: "optional_double_array_boolean",
	108: "optional_double_array_integer",
	109: "optional_double_array_integer_int32",
	110: "optional_double_array_integer_int64",
	111: "optional_double_array_null",
	112: "optional_double_array_number",
	113: "optional_double_array_number_double",
	114: "optional_double_array_number_float",
	115: "optional_double_array_number_int32",
	116: "optional_double_array_number_int64",
	117: "optional_double_array_string",
	118: "optional_double_array_string_binary",
	119: "optional_double_array_string_byte",
	120: "optional_double_array_string_date",
	121: "optional_double_array_string_date-time",
	122: "optional_double_array_string_duration",
	123: "optional_double_array_string_email",
	124: "optional_double_array_string_hostname",
	125: "optional_double_array_string_ip",
	126: "optional_double_array_string_ipv4",
	127: "optional_double_array_string_ipv6",
	128: "optional_double_array_string_password",
	129: "optional_double_array_string_time",
	130: "optional_double_array_string_uri",
	131: "optional_double_array_string_uuid",
	132: "optional_integer",
	133: "optional_integer_int32",
	134: "optional_integer_int64",
	135: "optional_null",
	136: "optional_number",
	137: "optional_number_double",
	138: "optional_number_float",
	139: "optional_number_int32",
	140: "optional_number_int64",
	141: "optional_string",
	142: "optional_string_binary",
	143: "optional_string_byte",
	144: "optional_string_date",
	145: "optional_string_date-time",
	146: "optional_string_duration",
	147: "optional_string_email",
	148: "optional_string_hostname",
	149: "optional_string_ip",
	150: "optional_string_ipv4",
	151: "optional_string_ipv6",
	152: "optional_string_password",
	153: "optional_string_time",
	154: "optional_string_uri",
	155: "optional_string_uuid",
}

// Decode decodes TestRequestRequiredFormatTestReq from json.
func (s *TestRequestRequiredFormatTestReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestRequiredFormatTestReq to nil")
	}
	var requiredBitSet [20]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_null":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_binary":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_ip":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uri":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_null":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int32":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_null":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_binary":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_hostname":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_ip":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uri":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestRequiredFormatTestReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [20]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestRequestRequiredFormatTestReq) {
					name = jsonFieldsNameOfTestRequestRequiredFormatTestReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestRequestRequiredFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestRequiredFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestResponseEmptyStructOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestResponseEmptyStructOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestResponseEmptyStructOK = [0]string{}

// Decode decodes TestResponseEmptyStructOK from json.
func (s *TestResponseEmptyStructOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestResponseEmptyStructOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestResponseEmptyStructOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestResponseEmptyStructOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestResponseEmptyStructOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TestResponseFormatTestOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s TestResponseFormatTestOK) encodeFields(e *jx.Encoder) {
	{

		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{

		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{

		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{

		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{

		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{

		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{

		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{

		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{

		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{

		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{

		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{

		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{

		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{

		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{

		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{

		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{

		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{

		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{

		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{

		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{

		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{

		e.FieldStart("required_string_ipv4")
		json.EncodeIP(e, s.RequiredStringIpv4)
	}
	{

		e.FieldStart("required_string_ipv6")
		json.EncodeIP(e, s.RequiredStringIpv6)
	}
	{

		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{

		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{

		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{

		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{

		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{

		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestResponseFormatTestOK = [156]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int32",
	5:   "required_array_integer_int64",
	6:   "required_array_null",
	7:   "required_array_number",
	8:   "required_array_number_double",
	9:   "required_array_number_float",
	10:  "required_array_number_int32",
	11:  "required_array_number_int64",
	12:  "required_array_string",
	13:  "required_array_string_binary",
	14:  "required_array_string_byte",
	15:  "required_array_string_date",
	16:  "required_array_string_date-time",
	17:  "required_array_string_duration",
	18:  "required_array_string_email",
	19:  "required_array_string_hostname",
	20:  "required_array_string_ip",
	21:  "required_array_string_ipv4",
	22:  "required_array_string_ipv6",
	23:  "required_array_string_password",
	24:  "required_array_string_time",
	25:  "required_array_string_uri",
	26:  "required_array_string_uuid",
	27:  "required_boolean",
	28:  "required_double_array_any",
	29:  "required_double_array_boolean",
	30:  "required_double_array_integer",
	31:  "required_double_array_integer_int32",
	32:  "required_double_array_integer_int64",
	33:  "required_double_array_null",
	34:  "required_double_array_number",
	35:  "required_double_array_number_double",
	36:  "required_double_array_number_float",
	37:  "required_double_array_number_int32",
	38:  "required_double_array_number_int64",
	39:  "required_double_array_string",
	40:  "required_double_array_string_binary",
	41:  "required_double_array_string_byte",
	42:  "required_double_array_string_date",
	43:  "required_double_array_string_date-time",
	44:  "required_double_array_string_duration",
	45:  "required_double_array_string_email",
	46:  "required_double_array_string_hostname",
	47:  "required_double_array_string_ip",
	48:  "required_double_array_string_ipv4",
	49:  "required_double_array_string_ipv6",
	50:  "required_double_array_string_password",
	51:  "required_double_array_string_time",
	52:  "required_double_array_string_uri",
	53:  "required_double_array_string_uuid",
	54:  "required_integer",
	55:  "required_integer_int32",
	56:  "required_integer_int64",
	57:  "required_null",
	58:  "required_number",
	59:  "required_number_double",
	60:  "required_number_float",
	61:  "required_number_int32",
	62:  "required_number_int64",
	63:  "required_string",
	64:  "required_string_binary",
	65:  "required_string_byte",
	66:  "required_string_date",
	67:  "required_string_date-time",
	68:  "required_string_duration",
	69:  "required_string_email",
	70:  "required_string_hostname",
	71:  "required_string_ip",
	72:  "required_string_ipv4",
	73:  "required_string_ipv6",
	74:  "required_string_password",
	75:  "required_string_time",
	76:  "required_string_uri",
	77:  "required_string_uuid",
	78:  "optional_any",
	79:  "optional_array_any",
	80:  "optional_array_boolean",
	81:  "optional_array_integer",
	82:  "optional_array_integer_int32",
	83:  "optional_array_integer_int64",
	84:  "optional_array_null",
	85:  "optional_array_number",
	86:  "optional_array_number_double",
	87:  "optional_array_number_float",
	88:  "optional_array_number_int32",
	89:  "optional_array_number_int64",
	90:  "optional_array_string",
	91:  "optional_array_string_binary",
	92:  "optional_array_string_byte",
	93:  "optional_array_string_date",
	94:  "optional_array_string_date-time",
	95:  "optional_array_string_duration",
	96:  "optional_array_string_email",
	97:  "optional_array_string_hostname",
	98:  "optional_array_string_ip",
	99:  "optional_array_string_ipv4",
	100: "optional_array_string_ipv6",
	101: "optional_array_string_password",
	102: "optional_array_string_time",
	103: "optional_array_string_uri",
	104: "optional_array_string_uuid",
	105: "optional_boolean",
	106: "optional_double_array_any",
	107: "optional_double_array_boolean",
	108: "optional_double_array_integer",
	109: "optional_double_array_integer_int32",
	110: "optional_double_array_integer_int64",
	111: "optional_double_array_null",
	112: "optional_double_array_number",
	113: "optional_double_array_number_double",
	114: "optional_double_array_number_float",
	115: "optional_double_array_number_int32",
	116: "optional_double_array_number_int64",
	117: "optional_double_array_string",
	118: "optional_double_array_string_binary",
	119: "optional_double_array_string_byte",
	120: "optional_double_array_string_date",
	121: "optional_double_array_string_date-time",
	122: "optional_double_array_string_duration",
	123: "optional_double_array_string_email",
	124: "optional_double_array_string_hostname",
	125: "optional_double_array_string_ip",
	126: "optional_double_array_string_ipv4",
	127: "optional_double_array_string_ipv6",
	128: "optional_double_array_string_password",
	129: "optional_double_array_string_time",
	130: "optional_double_array_string_uri",
	131: "optional_double_array_string_uuid",
	132: "optional_integer",
	133: "optional_integer_int32",
	134: "optional_integer_int64",
	135: "optional_null",
	136: "optional_number",
	137: "optional_number_double",
	138: "optional_number_float",
	139: "optional_number_int32",
	140: "optional_number_int64",
	141: "optional_string",
	142: "optional_string_binary",
	143: "optional_string_byte",
	144: "optional_string_date",
	145: "optional_string_date-time",
	146: "optional_string_duration",
	147: "optional_string_email",
	148: "optional_string_hostname",
	149: "optional_string_ip",
	150: "optional_string_ipv4",
	151: "optional_string_ipv6",
	152: "optional_string_password",
	153: "optional_string_time",
	154: "optional_string_uri",
	155: "optional_string_uuid",
}

// Decode decodes TestResponseFormatTestOK from json.
func (s *TestResponseFormatTestOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestResponseFormatTestOK to nil")
	}
	var requiredBitSet [20]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_null":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_binary":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_ip":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uri":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_null":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int32":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_null":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_binary":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_hostname":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_ip":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uri":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestResponseFormatTestOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [20]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestResponseFormatTestOK) {
					name = jsonFieldsNameOfTestResponseFormatTestOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TestResponseFormatTestOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestResponseFormatTestOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
